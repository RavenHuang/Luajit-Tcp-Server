static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 7;
static const int __GNUC_PATCHLEVEL__ = 2;
static const char __VERSION__ = "4.7.2";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 12;
static const int __SIZEOF_SIZE_T__ = 4;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 4;
static const int __SIZE_TYPE__ = unsigned int;
static const int __PTRDIFF_TYPE__ = int;
static const int __WCHAR_TYPE__ = int;
static const int __WINT_TYPE__ = unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = int;
static const int __UINTPTR_TYPE__ = unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 2147483647;
static const int __WCHAR_MIN__ = (-__WCHAR_MAX__ - 1);
static const int __WINT_MAX__ = 4294967295U;
static const int __WINT_MIN__ = 0U;
static const int __PTRDIFF_MAX__ = 2147483647;
static const int __SIZE_MAX__ = 4294967295U;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 2147483647;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 4294967295U;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const int __INTPTR_MAX__ = 2147483647;
static const int __UINTPTR_MAX__ = 4294967295U;
static const int __FLT_EVAL_METHOD__ = 2;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int _FORTIFY_SOURCE = 2;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __GCC_HAVE_DWARF2_CFI_ASM = 1;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SSP__ = 1;
static const int __SIZEOF_WCHAR_T__ = 4;
static const int __SIZEOF_WINT_T__ = 4;
static const int __SIZEOF_PTRDIFF_T__ = 4;
static const int __i386 = 1;
static const int __i386__ = 1;
static const int i386 = 1;
static const int __i686 = 1;
static const int __i686__ = 1;
static const int __pentiumpro = 1;
static const int __pentiumpro__ = 1;
static const int __gnu_linux__ = 1;
static const int __linux = 1;
static const int __linux__ = 1;
static const int linux = 1;
static const int __unix = 1;
static const int __unix__ = 1;
static const int unix = 1;
static const int __ELF__ = 1;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _SYS_TYPES_H = 1;
static const int _FEATURES_H = 1;
static const int __USE_ANSI = 1;
static const int __GNUC_PREREQ(maj,min) = ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min));
static const int _BSD_SOURCE = 1;
static const int _SVID_SOURCE = 1;
static const int _POSIX_SOURCE = 1;
static const long _POSIX_C_SOURCE = 200809L;
static const int __USE_POSIX_IMPLICITLY = 1;
static const int __USE_POSIX = 1;
static const int __USE_POSIX2 = 1;
static const int __USE_POSIX199309 = 1;
static const int __USE_POSIX199506 = 1;
static const int __USE_XOPEN2K = 1;
static const int __USE_ISOC95 = 1;
static const int __USE_ISOC99 = 1;
static const int __USE_XOPEN2K8 = 1;
static const int _ATFILE_SOURCE = 1;
static const int __USE_MISC = 1;
static const int __USE_BSD = 1;
static const int __USE_SVID = 1;
static const int __USE_ATFILE = 1;
static const int __USE_FORTIFY_LEVEL = 0;
static const int __STDC_IEC_559__ = 1;
static const int __STDC_IEC_559_COMPLEX__ = 1;
static const long __STDC_ISO_10646__ = 200009L;
static const int __GNU_LIBRARY__ = 6;
static const int __GLIBC__ = 2;
static const int __GLIBC_MINOR__ = 15;
static const int __GLIBC_PREREQ(maj,min) = ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min));
static const int __GLIBC_HAVE_LONG_LONG = 1;
static const int _SYS_CDEFS_H = 1;
static const int __LEAF = , __leaf__;
static const int __LEAF_ATTR = __attribute__ ((__leaf__));
static const int __THROW = __attribute__ ((__nothrow__ __LEAF));
static const int __THROWNL = __attribute__ ((__nothrow__));
static const int __NTH(fct) = __attribute__ ((__nothrow__ __LEAF)) fct;
static const int __P(args) = args;
static const int __PMT(args) = args;
static const int __CONCAT(x,y) = x ## y;
static const int __STRING(x) = #x;
static const int __ptr_t = void *;
static const int __long_double_t = long double;
static const int __bos(ptr) = __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1);
static const int __bos0(ptr) = __builtin_object_size (ptr, 0);
static const int __warndecl(name,msg) = extern void name (void) __attribute__((__warning__ (msg)));
static const int __warnattr(msg) = __attribute__((__warning__ (msg)));
static const int __errordecl(name,msg) = extern void name (void) __attribute__((__error__ (msg)));
static const int __flexarr = [];
static const int __REDIRECT(name,proto,alias) = name proto __asm__ (__ASMNAME (#alias));
static const int __REDIRECT_NTH(name,proto,alias) = name proto __asm__ (__ASMNAME (#alias)) __THROW;
static const int __REDIRECT_NTHNL(name,proto,alias) = name proto __asm__ (__ASMNAME (#alias)) __THROWNL;
static const int __ASMNAME(cname) = __ASMNAME2 (__USER_LABEL_PREFIX__, cname);
static const int __ASMNAME2(prefix,cname) = __STRING (prefix) cname;
static const int __attribute_malloc__ = __attribute__ ((__malloc__));
static const int __attribute_pure__ = __attribute__ ((__pure__));
static const int __attribute_const__ = __attribute__ ((__const__));
static const int __attribute_used__ = __attribute__ ((__used__));
static const int __attribute_noinline__ = __attribute__ ((__noinline__));
static const int __attribute_deprecated__ = __attribute__ ((__deprecated__));
static const int __attribute_format_arg__(x) = __attribute__ ((__format_arg__ (x)));
static const int __attribute_format_strfmon__(a,b) = __attribute__ ((__format__ (__strfmon__, a, b)));
static const int __nonnull(params) = __attribute__ ((__nonnull__ params));
static const int __attribute_warn_unused_result__ = __attribute__ ((__warn_unused_result__));
static const int __always_inline = __inline __attribute__ ((__always_inline__));
static const int __extern_inline = extern __inline;
static const int __extern_always_inline = extern __always_inline __attribute__ ((__artificial__));
static const int __va_arg_pack() = __builtin_va_arg_pack ();
static const int __va_arg_pack_len() = __builtin_va_arg_pack_len ();
static const int __restrict_arr = __restrict;
static const int __WORDSIZE = 32;
static const int __LDBL_REDIR1(name,proto,alias) = name proto;
static const int __LDBL_REDIR(name,proto) = name proto;
static const int __LDBL_REDIR1_NTH(name,proto,alias) = name proto __THROW;
static const int __LDBL_REDIR_NTH(name,proto) = name proto __THROW;
static const int __REDIRECT_LDBL(name,proto,alias) = __REDIRECT (name, proto, alias);
static const int __REDIRECT_NTH_LDBL(name,proto,alias) = __REDIRECT_NTH (name, proto, alias);
static const int __WORDSIZE = 32;
static const int _BITS_TYPES_H = 1;
static const int __WORDSIZE = 32;
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;
__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
static const int __S16_TYPE = short int;
static const int __U16_TYPE = unsigned short int;
static const int __S32_TYPE = int;
static const int __U32_TYPE = unsigned int;
static const int __SLONGWORD_TYPE = long int;
static const int __ULONGWORD_TYPE = unsigned long int;
static const int __SQUAD_TYPE = __quad_t;
static const int __UQUAD_TYPE = __u_quad_t;
static const int __SWORD_TYPE = int;
static const int __UWORD_TYPE = unsigned int;
static const int __SLONG32_TYPE = long int;
static const int __ULONG32_TYPE = unsigned long int;
static const int __S64_TYPE = __quad_t;
static const int __U64_TYPE = __u_quad_t;
static const int __STD_TYPE = __extension__ typedef;
static const int _BITS_TYPESIZES_H = 1;
static const int __DEV_T_TYPE = __UQUAD_TYPE;
static const int __UID_T_TYPE = __U32_TYPE;
static const int __GID_T_TYPE = __U32_TYPE;
static const int __INO_T_TYPE = __ULONGWORD_TYPE;
static const int __INO64_T_TYPE = __UQUAD_TYPE;
static const int __MODE_T_TYPE = __U32_TYPE;
static const int __NLINK_T_TYPE = __UWORD_TYPE;
static const int __OFF_T_TYPE = __SLONGWORD_TYPE;
static const int __OFF64_T_TYPE = __SQUAD_TYPE;
static const int __PID_T_TYPE = __S32_TYPE;
static const int __RLIM_T_TYPE = __ULONGWORD_TYPE;
static const int __RLIM64_T_TYPE = __UQUAD_TYPE;
static const int __BLKCNT_T_TYPE = __SLONGWORD_TYPE;
static const int __BLKCNT64_T_TYPE = __SQUAD_TYPE;
static const int __FSBLKCNT_T_TYPE = __ULONGWORD_TYPE;
static const int __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
static const int __FSFILCNT_T_TYPE = __ULONGWORD_TYPE;
static const int __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
static const int __ID_T_TYPE = __U32_TYPE;
static const int __CLOCK_T_TYPE = __SLONGWORD_TYPE;
static const int __TIME_T_TYPE = __SLONGWORD_TYPE;
static const int __USECONDS_T_TYPE = __U32_TYPE;
static const int __SUSECONDS_T_TYPE = __SLONGWORD_TYPE;
static const int __DADDR_T_TYPE = __S32_TYPE;
static const int __SWBLK_T_TYPE = __SLONGWORD_TYPE;
static const int __KEY_T_TYPE = __S32_TYPE;
static const int __CLOCKID_T_TYPE = __S32_TYPE;
static const int __TIMER_T_TYPE = void *;
static const int __BLKSIZE_T_TYPE = __SLONGWORD_TYPE;
static const int __FSID_T_TYPE = struct { int __val[2]; };
static const int __SSIZE_T_TYPE = __SWORD_TYPE;
static const int __FD_SETSIZE = 1024;
__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;
__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;
__extension__ typedef int __clockid_t;
__extension__ typedef void * __timer_t;
__extension__ typedef long int __blksize_t;
__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;
__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;
__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;
__extension__ typedef int __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
__extension__ typedef int __intptr_t;
__extension__ typedef unsigned int __socklen_t;
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off_t off_t;
typedef __pid_t pid_t;
typedef __id_t id_t;
typedef __ssize_t ssize_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
static const int __clock_t_defined = 1;
typedef __clock_t clock_t;
static const int __time_t_defined = 1;
typedef __time_t time_t;
static const int __clockid_t_defined = 1;
typedef __clockid_t clockid_t;
static const int __timer_t_defined = 1;
typedef __timer_t timer_t;
typedef unsigned int size_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
static const int __intN_t(N,MODE) = typedef int int ##N ##_t __attribute__ ((__mode__ (MODE)));
static const int __u_intN_t(N,MODE) = typedef unsigned int u_int ##N ##_t __attribute__ ((__mode__ (MODE)));
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));
typedef int register_t __attribute__ ((__mode__ (__word__)));
static const int __BIT_TYPES_DEFINED__ = 1;
static const int _ENDIAN_H = 1;
static const int __LITTLE_ENDIAN = 1234;
static const int __BIG_ENDIAN = 4321;
static const int __PDP_ENDIAN = 3412;
static const int __BYTE_ORDER = __LITTLE_ENDIAN;
static const int __FLOAT_WORD_ORDER = __BYTE_ORDER;
static const int LITTLE_ENDIAN = __LITTLE_ENDIAN;
static const int BIG_ENDIAN = __BIG_ENDIAN;
static const int PDP_ENDIAN = __PDP_ENDIAN;
static const int BYTE_ORDER = __BYTE_ORDER;
static const int __LONG_LONG_PAIR(HI,LO) = LO, HI;
static const int _BITS_BYTESWAP_H = 1;
static const int __bswap_constant_16(x) = ((unsigned short int) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)));
static const int __bswap_16(x) = (__extension__ ({ register unsigned short int __v, __x = (unsigned short int) (x); if (__builtin_constant_p (__x)) __v = __bswap_constant_16 (__x); else __asm__ ("rorw $8, %w0" : "=r" (__v) : "0" (__x) : "cc"); __v; }));
static const int __bswap_constant_32(x) = ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | (((x) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24));
static const int __bswap_32(x) = (__extension__ ({ register unsigned int __v, __x = (x); if (__builtin_constant_p (__x)) __v = __bswap_constant_32 (__x); else __asm__ ("bswap %0" : "=r" (__v) : "0" (__x)); __v; }));
static const int __bswap_constant_64(x) = (__extension__ ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56)));
static const int __bswap_64(x) = (__extension__ ({ union { __extension__ unsigned long long int __ll; unsigned long int __l[2]; } __w, __r; if (__builtin_constant_p (x)) __r.__ll = __bswap_constant_64 (x); else { __w.__ll = (x); __r.__l[0] = __bswap_32 (__w.__l[1]); __r.__l[1] = __bswap_32 (__w.__l[0]); } __r.__ll; }));
static const int htobe16(x) = __bswap_16 (x);
static const int htole16(x) = (x);
static const int be16toh(x) = __bswap_16 (x);
static const int le16toh(x) = (x);
static const int htobe32(x) = __bswap_32 (x);
static const int htole32(x) = (x);
static const int be32toh(x) = __bswap_32 (x);
static const int le32toh(x) = (x);
static const int htobe64(x) = __bswap_64 (x);
static const int htole64(x) = (x);
static const int be64toh(x) = __bswap_64 (x);
static const int le64toh(x) = (x);
static const int _SYS_SELECT_H = 1;
static const int __FD_ZERO(fdsp) = do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; stosl" : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&__FDS_BITS (fdsp)[0]) : "memory"); } while (0);
static const int __FD_SET(d,set) = ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)));
static const int __FD_CLR(d,set) = ((void) (__FDS_BITS (set)[__FD_ELT (d)] &= ~__FD_MASK (d)));
static const int __FD_ISSET(d,set) = ((__FDS_BITS (set)[__FD_ELT (d)] & __FD_MASK (d)) != 0);
static const int _SIGSET_H_types = 1;
typedef int __sig_atomic_t;
static const int _SIGSET_NWORDS = (1024 / (8 * sizeof (unsigned long int)));
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
typedef __sigset_t sigset_t;
static const int __timespec_defined = 1;
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
static const int _STRUCT_TIMEVAL = 1;
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
typedef __suseconds_t suseconds_t;
typedef long int __fd_mask;
static const int __NFDBITS = (8 * (int) sizeof (__fd_mask));
static const int __FD_ELT(d) = ((d) / __NFDBITS);
static const int __FD_MASK(d) = ((__fd_mask) 1 << ((d) % __NFDBITS));
typedef struct
  {
    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
static const int __FDS_BITS(set) = ((set)->__fds_bits);
  } fd_set;
static const int FD_SETSIZE = __FD_SETSIZE;
typedef __fd_mask fd_mask;
static const int NFDBITS = __NFDBITS;
static const int FD_SET(fd,fdsetp) = __FD_SET (fd, fdsetp);
static const int FD_CLR(fd,fdsetp) = __FD_CLR (fd, fdsetp);
static const int FD_ISSET(fd,fdsetp) = __FD_ISSET (fd, fdsetp);
static const int FD_ZERO(fdsetp) = __FD_ZERO (fdsetp);
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
static const int _SYS_SYSMACROS_H = 1;
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
static const int major(dev) = gnu_dev_major (dev);
static const int minor(dev) = gnu_dev_minor (dev);
static const int makedev(maj,min) = gnu_dev_makedev (maj, min);
typedef __blksize_t blksize_t;
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
static const int _BITS_PTHREADTYPES_H = 1;
static const int __SIZEOF_PTHREAD_ATTR_T = 36;
static const int __SIZEOF_PTHREAD_MUTEX_T = 24;
static const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;
static const int __SIZEOF_PTHREAD_COND_T = 48;
static const int __SIZEOF_PTHREAD_COND_COMPAT_T = 12;
static const int __SIZEOF_PTHREAD_CONDATTR_T = 4;
static const int __SIZEOF_PTHREAD_RWLOCK_T = 32;
static const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;
static const int __SIZEOF_PTHREAD_BARRIER_T = 20;
static const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;
typedef unsigned long int pthread_t;
typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;
typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;
typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
static const int __cleanup_fct_attribute = __attribute__ ((__regparm__ (1)));
