
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int WINADVAPI = ;
static const int WINBASEAPI = ;
static const int ZAWPROXYAPI = ;
static const int DefineHandleTable(w) = ((w),TRUE);
static const int SetSwapAreaSize(w) = (w);
static const int LockSegment(w) = GlobalFix((HANDLE)(w));
static const int UnlockSegment(w) = GlobalUnfix((HANDLE)(w));
static const int GetCurrentTime() = GetTickCount();
static const int INVALID_HANDLE_VALUE = ((HANDLE)(LONG_PTR)-1);
static const int INVALID_FILE_SIZE = ((DWORD)0xFFFFFFFF);
static const int INVALID_SET_FILE_POINTER = ((DWORD)-1);
static const int INVALID_FILE_ATTRIBUTES = ((DWORD)-1);
static const int FILE_BEGIN = 0;
static const int FILE_CURRENT = 1;
static const int FILE_END = 2;
static const int TIME_ZONE_ID_INVALID = ((DWORD)0xFFFFFFFF);
static const int WAIT_FAILED = ((DWORD)0xFFFFFFFF);
static const int WAIT_OBJECT_0 = ((STATUS_WAIT_0 ) + 0 );
static const int WAIT_ABANDONED = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
static const int WAIT_ABANDONED_0 = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
static const int WAIT_IO_COMPLETION = STATUS_USER_APC;
static const int STILL_ACTIVE = STATUS_PENDING;
static const int EXCEPTION_ACCESS_VIOLATION = STATUS_ACCESS_VIOLATION;
static const int EXCEPTION_DATATYPE_MISALIGNMENT = STATUS_DATATYPE_MISALIGNMENT;
static const int EXCEPTION_BREAKPOINT = STATUS_BREAKPOINT;
static const int EXCEPTION_SINGLE_STEP = STATUS_SINGLE_STEP;
static const int EXCEPTION_ARRAY_BOUNDS_EXCEEDED = STATUS_ARRAY_BOUNDS_EXCEEDED;
static const int EXCEPTION_FLT_DENORMAL_OPERAND = STATUS_FLOAT_DENORMAL_OPERAND;
static const int EXCEPTION_FLT_DIVIDE_BY_ZERO = STATUS_FLOAT_DIVIDE_BY_ZERO;
static const int EXCEPTION_FLT_INEXACT_RESULT = STATUS_FLOAT_INEXACT_RESULT;
static const int EXCEPTION_FLT_INVALID_OPERATION = STATUS_FLOAT_INVALID_OPERATION;
static const int EXCEPTION_FLT_OVERFLOW = STATUS_FLOAT_OVERFLOW;
static const int EXCEPTION_FLT_STACK_CHECK = STATUS_FLOAT_STACK_CHECK;
static const int EXCEPTION_FLT_UNDERFLOW = STATUS_FLOAT_UNDERFLOW;
static const int EXCEPTION_INT_DIVIDE_BY_ZERO = STATUS_INTEGER_DIVIDE_BY_ZERO;
static const int EXCEPTION_INT_OVERFLOW = STATUS_INTEGER_OVERFLOW;
static const int EXCEPTION_PRIV_INSTRUCTION = STATUS_PRIVILEGED_INSTRUCTION;
static const int EXCEPTION_IN_PAGE_ERROR = STATUS_IN_PAGE_ERROR;
static const int EXCEPTION_ILLEGAL_INSTRUCTION = STATUS_ILLEGAL_INSTRUCTION;
static const int EXCEPTION_NONCONTINUABLE_EXCEPTION = STATUS_NONCONTINUABLE_EXCEPTION;
static const int EXCEPTION_STACK_OVERFLOW = STATUS_STACK_OVERFLOW;
static const int EXCEPTION_INVALID_DISPOSITION = STATUS_INVALID_DISPOSITION;
static const int EXCEPTION_GUARD_PAGE = STATUS_GUARD_PAGE_VIOLATION;
static const int EXCEPTION_INVALID_HANDLE = STATUS_INVALID_HANDLE;
static const int EXCEPTION_POSSIBLE_DEADLOCK = STATUS_POSSIBLE_DEADLOCK;
static const int CONTROL_C_EXIT = STATUS_CONTROL_C_EXIT;
static const int MoveMemory = RtlMoveMemory;
static const int CopyMemory = RtlCopyMemory;
static const int FillMemory = RtlFillMemory;
static const int ZeroMemory = RtlZeroMemory;
static const int SecureZeroMemory = RtlSecureZeroMemory;
static const int CaptureStackBackTrace = RtlCaptureStackBackTrace;
static const int FILE_FLAG_WRITE_THROUGH = 0x80000000;
static const int FILE_FLAG_OVERLAPPED = 0x40000000;
static const int FILE_FLAG_NO_BUFFERING = 0x20000000;
static const int FILE_FLAG_RANDOM_ACCESS = 0x10000000;
static const int FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;
static const int FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;
static const int FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
static const int FILE_FLAG_POSIX_SEMANTICS = 0x01000000;
static const int FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
static const int FILE_FLAG_OPEN_NO_RECALL = 0x00100000;
static const int FILE_FLAG_FIRST_PIPE_INSTANCE = 0x00080000;
static const int CREATE_NEW = 1;
static const int CREATE_ALWAYS = 2;
static const int OPEN_EXISTING = 3;
static const int OPEN_ALWAYS = 4;
static const int TRUNCATE_EXISTING = 5;
static const int PROGRESS_CONTINUE = 0;
static const int PROGRESS_CANCEL = 1;
static const int PROGRESS_STOP = 2;
static const int PROGRESS_QUIET = 3;
static const int CALLBACK_CHUNK_FINISHED = 0x00000000;
static const int CALLBACK_STREAM_SWITCH = 0x00000001;
static const int COPY_FILE_FAIL_IF_EXISTS = 0x00000001;
static const int COPY_FILE_RESTARTABLE = 0x00000002;
static const int COPY_FILE_OPEN_SOURCE_FOR_WRITE = 0x00000004;
static const int COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 0x00000008;
static const int COPY_FILE_COPY_SYMLINK = 0x00000800;
static const int COPY_FILE_NO_BUFFERING = 0x00001000;
static const int REPLACEFILE_WRITE_THROUGH = 0x00000001;
static const int REPLACEFILE_IGNORE_MERGE_ERRORS = 0x00000002;
static const int REPLACEFILE_IGNORE_ACL_ERRORS = 0x00000004;
static const int PIPE_ACCESS_INBOUND = 0x00000001;
static const int PIPE_ACCESS_OUTBOUND = 0x00000002;
static const int PIPE_ACCESS_DUPLEX = 0x00000003;
static const int PIPE_CLIENT_END = 0x00000000;
static const int PIPE_SERVER_END = 0x00000001;
static const int PIPE_WAIT = 0x00000000;
static const int PIPE_NOWAIT = 0x00000001;
static const int PIPE_READMODE_BYTE = 0x00000000;
static const int PIPE_READMODE_MESSAGE = 0x00000002;
static const int PIPE_TYPE_BYTE = 0x00000000;
static const int PIPE_TYPE_MESSAGE = 0x00000004;
static const int PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000;
static const int PIPE_REJECT_REMOTE_CLIENTS = 0x00000008;
static const int PIPE_UNLIMITED_INSTANCES = 255;
static const int SECURITY_ANONYMOUS = ( SecurityAnonymous << 16 );
static const int SECURITY_IDENTIFICATION = ( SecurityIdentification << 16 );
static const int SECURITY_IMPERSONATION = ( SecurityImpersonation << 16 );
static const int SECURITY_DELEGATION = ( SecurityDelegation << 16 );
static const int SECURITY_CONTEXT_TRACKING = 0x00040000;
static const int SECURITY_EFFECTIVE_ONLY = 0x00080000;
static const int SECURITY_SQOS_PRESENT = 0x00100000;
static const int SECURITY_VALID_SQOS_FLAGS = 0x001F0000;
typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } DUMMYSTRUCTNAME;
        PVOID Pointer;
    } DUMMYUNIONNAME;
    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;
typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;
typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
typedef DWORD (*PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef VOID (*PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
static const int INIT_ONCE_STATIC_INIT = RTL_RUN_ONCE_INIT;
static const int INIT_ONCE_CHECK_ONLY = RTL_RUN_ONCE_CHECK_ONLY;
static const int INIT_ONCE_ASYNC = RTL_RUN_ONCE_ASYNC;
static const int INIT_ONCE_INIT_FAILED = RTL_RUN_ONCE_INIT_FAILED;
static const int INIT_ONCE_CTX_RESERVED_BITS = RTL_RUN_ONCE_CTX_RESERVED_BITS;
static const int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 0x1;
static const int FAIL_FAST_NO_HARD_ERROR_DLG = 0x2;
typedef
BOOL
(*PINIT_ONCE_FN) (
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context
    );
VOID
InitOnceInitialize (
    PINIT_ONCE InitOnce
    );
BOOL
InitOnceExecuteOnce (
    PINIT_ONCE InitOnce,
    PINIT_ONCE_FN InitFn,
    PVOID Parameter,
    LPVOID *Context
    );
BOOL
InitOnceBeginInitialize (
    LPINIT_ONCE lpInitOnce,
    DWORD dwFlags,
    PBOOL fPending,
    LPVOID *lpContext
    );
BOOL
InitOnceComplete (
    LPINIT_ONCE lpInitOnce,
    DWORD dwFlags,
    LPVOID lpContext
    );
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
static const int SRWLOCK_INIT = RTL_SRWLOCK_INIT;
VOID
InitializeSRWLock (
     PSRWLOCK SRWLock
     );
VOID
ReleaseSRWLockExclusive (
     PSRWLOCK SRWLock
     );
VOID
ReleaseSRWLockShared (
     PSRWLOCK SRWLock
     );
VOID
AcquireSRWLockExclusive (
     PSRWLOCK SRWLock
     );
VOID
AcquireSRWLockShared (
     PSRWLOCK SRWLock
     );
BOOLEAN
TryAcquireSRWLockExclusive (
    PSRWLOCK SRWLock
    );
BOOLEAN
TryAcquireSRWLockShared (
    PSRWLOCK SRWLock
    );
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
VOID
InitializeConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
VOID
WakeConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
VOID
WakeAllConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
BOOL
SleepConditionVariableCS (
    PCONDITION_VARIABLE ConditionVariable,
    PCRITICAL_SECTION CriticalSection,
    DWORD dwMilliseconds
    );
BOOL
SleepConditionVariableSRW (
    PCONDITION_VARIABLE ConditionVariable,
    PSRWLOCK SRWLock,
    DWORD dwMilliseconds,
    ULONG Flags
    );
static const int CONDITION_VARIABLE_INIT = RTL_CONDITION_VARIABLE_INIT;
static const int CONDITION_VARIABLE_LOCKMODE_SHARED = RTL_CONDITION_VARIABLE_LOCKMODE_SHARED;
PVOID
EncodePointer (
    PVOID Ptr
    );
PVOID
DecodePointer (
    PVOID Ptr
    );
PVOID
EncodeSystemPointer (
    PVOID Ptr
    );
PVOID
DecodeSystemPointer (
    PVOID Ptr
    );
typedef LPVOID LPLDT_ENTRY;
static const int MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE;
static const int MUTEX_ALL_ACCESS = MUTANT_ALL_ACCESS;
static const int SP_SERIALCOMM = ((DWORD)0x00000001);
static const int PST_UNSPECIFIED = ((DWORD)0x00000000);
static const int PST_RS232 = ((DWORD)0x00000001);
static const int PST_PARALLELPORT = ((DWORD)0x00000002);
static const int PST_RS422 = ((DWORD)0x00000003);
static const int PST_RS423 = ((DWORD)0x00000004);
static const int PST_RS449 = ((DWORD)0x00000005);
static const int PST_MODEM = ((DWORD)0x00000006);
static const int PST_FAX = ((DWORD)0x00000021);
static const int PST_SCANNER = ((DWORD)0x00000022);
static const int PST_NETWORK_BRIDGE = ((DWORD)0x00000100);
static const int PST_LAT = ((DWORD)0x00000101);
static const int PST_TCPIP_TELNET = ((DWORD)0x00000102);
static const int PST_X25 = ((DWORD)0x00000103);
static const int PCF_DTRDSR = ((DWORD)0x0001);
static const int PCF_RTSCTS = ((DWORD)0x0002);
static const int PCF_RLSD = ((DWORD)0x0004);
static const int PCF_PARITY_CHECK = ((DWORD)0x0008);
static const int PCF_XONXOFF = ((DWORD)0x0010);
static const int PCF_SETXCHAR = ((DWORD)0x0020);
static const int PCF_TOTALTIMEOUTS = ((DWORD)0x0040);
static const int PCF_INTTIMEOUTS = ((DWORD)0x0080);
static const int PCF_SPECIALCHARS = ((DWORD)0x0100);
static const int PCF_16BITMODE = ((DWORD)0x0200);
static const int SP_PARITY = ((DWORD)0x0001);
static const int SP_BAUD = ((DWORD)0x0002);
static const int SP_DATABITS = ((DWORD)0x0004);
static const int SP_STOPBITS = ((DWORD)0x0008);
static const int SP_HANDSHAKING = ((DWORD)0x0010);
static const int SP_PARITY_CHECK = ((DWORD)0x0020);
static const int SP_RLSD = ((DWORD)0x0040);
static const int BAUD_075 = ((DWORD)0x00000001);
static const int BAUD_110 = ((DWORD)0x00000002);
static const int BAUD_134_5 = ((DWORD)0x00000004);
static const int BAUD_150 = ((DWORD)0x00000008);
static const int BAUD_300 = ((DWORD)0x00000010);
static const int BAUD_600 = ((DWORD)0x00000020);
static const int BAUD_1200 = ((DWORD)0x00000040);
static const int BAUD_1800 = ((DWORD)0x00000080);
static const int BAUD_2400 = ((DWORD)0x00000100);
static const int BAUD_4800 = ((DWORD)0x00000200);
static const int BAUD_7200 = ((DWORD)0x00000400);
static const int BAUD_9600 = ((DWORD)0x00000800);
static const int BAUD_14400 = ((DWORD)0x00001000);
static const int BAUD_19200 = ((DWORD)0x00002000);
static const int BAUD_38400 = ((DWORD)0x00004000);
static const int BAUD_56K = ((DWORD)0x00008000);
static const int BAUD_128K = ((DWORD)0x00010000);
static const int BAUD_115200 = ((DWORD)0x00020000);
static const int BAUD_57600 = ((DWORD)0x00040000);
static const int BAUD_USER = ((DWORD)0x10000000);
static const int DATABITS_5 = ((WORD)0x0001);
static const int DATABITS_6 = ((WORD)0x0002);
static const int DATABITS_7 = ((WORD)0x0004);
static const int DATABITS_8 = ((WORD)0x0008);
static const int DATABITS_16 = ((WORD)0x0010);
static const int DATABITS_16X = ((WORD)0x0020);
static const int STOPBITS_10 = ((WORD)0x0001);
static const int STOPBITS_15 = ((WORD)0x0002);
static const int STOPBITS_20 = ((WORD)0x0004);
static const int PARITY_NONE = ((WORD)0x0100);
static const int PARITY_ODD = ((WORD)0x0200);
static const int PARITY_EVEN = ((WORD)0x0400);
static const int PARITY_MARK = ((WORD)0x0800);
static const int PARITY_SPACE = ((WORD)0x1000);
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;
static const int COMMPROP_INITIALIZED = ((DWORD)0xE73CF52E);
typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
static const int DTR_CONTROL_DISABLE = 0x00;
static const int DTR_CONTROL_ENABLE = 0x01;
static const int DTR_CONTROL_HANDSHAKE = 0x02;
static const int RTS_CONTROL_DISABLE = 0x00;
static const int RTS_CONTROL_ENABLE = 0x01;
static const int RTS_CONTROL_HANDSHAKE = 0x02;
static const int RTS_CONTROL_TOGGLE = 0x03;
typedef struct _DCB {
    DWORD DCBlength; /* sizeof(DCB)                     */
    DWORD BaudRate; /* Baudrate at which running       */
    DWORD fBinary: 1; /* Binary Mode (skip EOF check)    */
    DWORD fParity: 1; /* Enable parity checking          */
    DWORD fOutxCtsFlow:1; /* CTS handshaking on output       */
    DWORD fOutxDsrFlow:1; /* DSR handshaking on output       */
    DWORD fDtrControl:2; /* DTR Flow control                */
    DWORD fDsrSensitivity:1; /* DSR Sensitivity              */
    DWORD fTXContinueOnXoff: 1; /* Continue TX when Xoff sent */
    DWORD fOutX: 1; /* Enable output X-ON/X-OFF        */
    DWORD fInX: 1; /* Enable input X-ON/X-OFF         */
    DWORD fErrorChar: 1; /* Enable Err Replacement          */
    DWORD fNull: 1; /* Enable Null stripping           */
    DWORD fRtsControl:2; /* Rts Flow control                */
    DWORD fAbortOnError:1; /* Abort all reads and writes on Error */
    DWORD fDummy2:17; /* Reserved                        */
    WORD wReserved; /* Not currently used              */
    WORD XonLim; /* Transmit X-ON threshold         */
    WORD XoffLim; /* Transmit X-OFF threshold        */
    BYTE ByteSize; /* Number of bits/byte, 4-8        */
    BYTE Parity; /* 0-4=None,Odd,Even,Mark,Space    */
    BYTE StopBits; /* 0,1,2 = 1, 1.5, 2               */
    char XonChar; /* Tx and Rx X-ON character        */
    char XoffChar; /* Tx and Rx X-OFF character       */
    char ErrorChar; /* Error replacement char          */
    char EofChar; /* End of Input character          */
    char EvtChar; /* Received Event character        */
    WORD wReserved1; /* Fill for now.                   */
} DCB, *LPDCB;
typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout; /* Maximum time between read chars. */
    DWORD ReadTotalTimeoutMultiplier; /* Multiplier of characters.        */
    DWORD ReadTotalTimeoutConstant; /* Constant in milliseconds.        */
    DWORD WriteTotalTimeoutMultiplier; /* Multiplier of characters.        */
    DWORD WriteTotalTimeoutConstant; /* Constant in milliseconds.        */
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
typedef struct _COMMCONFIG {
    DWORD dwSize; /* Size of the entire struct */
    WORD wVersion; /* version of the structure */
    WORD wReserved; /* alignment */
    DCB dcb; /* device control block */
    DWORD dwProviderSubType; /* ordinal value for identifying
                                   provider-defined data structure format*/
    DWORD dwProviderOffset; /* Specifies the offset of provider specific
                                   data field in bytes from the start */
    DWORD dwProviderSize; /* size of the provider-specific data field */
    WCHAR wcProviderData[1]; /* provider-specific data */
} COMMCONFIG,*LPCOMMCONFIG;
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId; // Obsolete field...do not use
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
static const int FreeModule(hLibModule) = FreeLibrary((hLibModule));
static const int MakeProcInstance(lpProc,hInstance) = (lpProc);
static const int FreeProcInstance(lpProc) = (lpProc);
static const int GMEM_FIXED = 0x0000;
static const int GMEM_MOVEABLE = 0x0002;
static const int GMEM_NOCOMPACT = 0x0010;
static const int GMEM_NODISCARD = 0x0020;
static const int GMEM_ZEROINIT = 0x0040;
static const int GMEM_MODIFY = 0x0080;
static const int GMEM_DISCARDABLE = 0x0100;
static const int GMEM_NOT_BANKED = 0x1000;
static const int GMEM_SHARE = 0x2000;
static const int GMEM_DDESHARE = 0x2000;
static const int GMEM_NOTIFY = 0x4000;
static const int GMEM_LOWER = GMEM_NOT_BANKED;
static const int GMEM_VALID_FLAGS = 0x7F72;
static const int GMEM_INVALID_HANDLE = 0x8000;
static const int GHND = (GMEM_MOVEABLE | GMEM_ZEROINIT);
static const int GPTR = (GMEM_FIXED | GMEM_ZEROINIT);
static const int GlobalLRUNewest(h) = ((HANDLE)(h));
static const int GlobalLRUOldest(h) = ((HANDLE)(h));
static const int GlobalDiscard(h) = GlobalReAlloc( (h), 0, GMEM_MOVEABLE );
static const int GMEM_DISCARDED = 0x4000;
static const int GMEM_LOCKCOUNT = 0x00FF;
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
static const int LMEM_FIXED = 0x0000;
static const int LMEM_MOVEABLE = 0x0002;
static const int LMEM_NOCOMPACT = 0x0010;
static const int LMEM_NODISCARD = 0x0020;
static const int LMEM_ZEROINIT = 0x0040;
static const int LMEM_MODIFY = 0x0080;
static const int LMEM_DISCARDABLE = 0x0F00;
static const int LMEM_VALID_FLAGS = 0x0F72;
static const int LMEM_INVALID_HANDLE = 0x8000;
static const int LHND = (LMEM_MOVEABLE | LMEM_ZEROINIT);
static const int LPTR = (LMEM_FIXED | LMEM_ZEROINIT);
static const int NONZEROLHND = (LMEM_MOVEABLE);
static const int NONZEROLPTR = (LMEM_FIXED);
static const int LocalDiscard(h) = LocalReAlloc( (h), 0, LMEM_MOVEABLE );
static const int LMEM_DISCARDED = 0x4000;
static const int LMEM_LOCKCOUNT = 0x00FF;
static const int NUMA_NO_PREFERRED_NODE = ((DWORD) -1);
static const int DEBUG_PROCESS = 0x00000001;
static const int DEBUG_ONLY_THIS_PROCESS = 0x00000002;
static const int CREATE_SUSPENDED = 0x00000004;
static const int DETACHED_PROCESS = 0x00000008;
static const int CREATE_NEW_CONSOLE = 0x00000010;
static const int NORMAL_PRIORITY_CLASS = 0x00000020;
static const int IDLE_PRIORITY_CLASS = 0x00000040;
static const int HIGH_PRIORITY_CLASS = 0x00000080;
static const int REALTIME_PRIORITY_CLASS = 0x00000100;
static const int CREATE_NEW_PROCESS_GROUP = 0x00000200;
static const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;
static const int CREATE_SEPARATE_WOW_VDM = 0x00000800;
static const int CREATE_SHARED_WOW_VDM = 0x00001000;
static const int CREATE_FORCEDOS = 0x00002000;
static const int BELOW_NORMAL_PRIORITY_CLASS = 0x00004000;
static const int ABOVE_NORMAL_PRIORITY_CLASS = 0x00008000;
static const int INHERIT_PARENT_AFFINITY = 0x00010000;
static const int INHERIT_CALLER_PRIORITY = 0x00020000;
static const int CREATE_PROTECTED_PROCESS = 0x00040000;
static const int EXTENDED_STARTUPINFO_PRESENT = 0x00080000;
static const int PROCESS_MODE_BACKGROUND_BEGIN = 0x00100000;
static const int PROCESS_MODE_BACKGROUND_END = 0x00200000;
static const int CREATE_BREAKAWAY_FROM_JOB = 0x01000000;
static const int CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000;
static const int CREATE_DEFAULT_ERROR_MODE = 0x04000000;
static const int CREATE_NO_WINDOW = 0x08000000;
static const int PROFILE_USER = 0x10000000;
static const int PROFILE_KERNEL = 0x20000000;
static const int PROFILE_SERVER = 0x40000000;
static const int CREATE_IGNORE_SYSTEM_DEFAULT = 0x80000000;
static const int STACK_SIZE_PARAM_IS_A_RESERVATION = 0x00010000;
static const int THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN;
static const int THREAD_PRIORITY_BELOW_NORMAL = (THREAD_PRIORITY_LOWEST+1);
static const int THREAD_PRIORITY_NORMAL = 0;
static const int THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX;
static const int THREAD_PRIORITY_ABOVE_NORMAL = (THREAD_PRIORITY_HIGHEST-1);
static const int THREAD_PRIORITY_ERROR_RETURN = (MAXLONG);
static const int THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT;
static const int THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE;
static const int THREAD_MODE_BACKGROUND_BEGIN = 0x00010000;
static const int THREAD_MODE_BACKGROUND_END = 0x00020000;
static const int VOLUME_NAME_DOS = 0x0;
static const int VOLUME_NAME_GUID = 0x1;
static const int VOLUME_NAME_NT = 0x2;
static const int VOLUME_NAME_NONE = 0x4;
static const int FILE_NAME_NORMALIZED = 0x0;
static const int FILE_NAME_OPENED = 0x8;
static const int EXCEPTION_DEBUG_EVENT = 1;
static const int CREATE_THREAD_DEBUG_EVENT = 2;
static const int CREATE_PROCESS_DEBUG_EVENT = 3;
static const int EXIT_THREAD_DEBUG_EVENT = 4;
static const int EXIT_PROCESS_DEBUG_EVENT = 5;
static const int LOAD_DLL_DEBUG_EVENT = 6;
static const int UNLOAD_DLL_DEBUG_EVENT = 7;
static const int OUTPUT_DEBUG_STRING_EVENT = 8;
static const int RIP_EVENT = 9;
typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;
typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;
typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
static const int DRIVE_UNKNOWN = 0;
static const int DRIVE_NO_ROOT_DIR = 1;
static const int DRIVE_REMOVABLE = 2;
static const int DRIVE_FIXED = 3;
static const int DRIVE_REMOTE = 4;
static const int DRIVE_CDROM = 5;
static const int DRIVE_RAMDISK = 6;
static const int GetFreeSpace(w) = (0x100000L);
static const int FILE_TYPE_UNKNOWN = 0x0000;
static const int FILE_TYPE_DISK = 0x0001;
static const int FILE_TYPE_CHAR = 0x0002;
static const int FILE_TYPE_PIPE = 0x0003;
static const int FILE_TYPE_REMOTE = 0x8000;
static const int STD_INPUT_HANDLE = ((DWORD)-10);
static const int STD_OUTPUT_HANDLE = ((DWORD)-11);
static const int STD_ERROR_HANDLE = ((DWORD)-12);
static const int NOPARITY = 0;
static const int ODDPARITY = 1;
static const int EVENPARITY = 2;
static const int MARKPARITY = 3;
static const int SPACEPARITY = 4;
static const int ONESTOPBIT = 0;
static const int ONE5STOPBITS = 1;
static const int TWOSTOPBITS = 2;
static const int IGNORE = 0;
static const int INFINITE = 0xFFFFFFFF;
static const int CBR_110 = 110;
static const int CBR_300 = 300;
static const int CBR_600 = 600;
static const int CBR_1200 = 1200;
static const int CBR_2400 = 2400;
static const int CBR_4800 = 4800;
static const int CBR_9600 = 9600;
static const int CBR_14400 = 14400;
static const int CBR_19200 = 19200;
static const int CBR_38400 = 38400;
static const int CBR_56000 = 56000;
static const int CBR_57600 = 57600;
static const int CBR_115200 = 115200;
static const int CBR_128000 = 128000;
static const int CBR_256000 = 256000;
static const int CE_RXOVER = 0x0001;
static const int CE_OVERRUN = 0x0002;
static const int CE_RXPARITY = 0x0004;
static const int CE_FRAME = 0x0008;
static const int CE_BREAK = 0x0010;
static const int CE_TXFULL = 0x0100;
static const int CE_PTO = 0x0200;
static const int CE_IOE = 0x0400;
static const int CE_DNS = 0x0800;
static const int CE_OOP = 0x1000;
static const int CE_MODE = 0x8000;
static const int IE_BADID = (-1);
static const int IE_OPEN = (-2);
static const int IE_NOPEN = (-3);
static const int IE_MEMORY = (-4);
static const int IE_DEFAULT = (-5);
static const int IE_HARDWARE = (-10);
static const int IE_BYTESIZE = (-11);
static const int IE_BAUDRATE = (-12);
static const int EV_RXCHAR = 0x0001;
static const int EV_RXFLAG = 0x0002;
static const int EV_TXEMPTY = 0x0004;
static const int EV_CTS = 0x0008;
static const int EV_DSR = 0x0010;
static const int EV_RLSD = 0x0020;
static const int EV_BREAK = 0x0040;
static const int EV_ERR = 0x0080;
static const int EV_RING = 0x0100;
static const int EV_PERR = 0x0200;
static const int EV_RX80FULL = 0x0400;
static const int EV_EVENT1 = 0x0800;
static const int EV_EVENT2 = 0x1000;
static const int SETXOFF = 1;
static const int SETXON = 2;
static const int SETRTS = 3;
static const int CLRRTS = 4;
static const int SETDTR = 5;
static const int CLRDTR = 6;
static const int RESETDEV = 7;
static const int SETBREAK = 8;
static const int CLRBREAK = 9;
static const int PURGE_TXABORT = 0x0001;
static const int PURGE_RXABORT = 0x0002;
static const int PURGE_TXCLEAR = 0x0004;
static const int PURGE_RXCLEAR = 0x0008;
static const int LPTx = 0x80;
static const int MS_CTS_ON = ((DWORD)0x0010);
static const int MS_DSR_ON = ((DWORD)0x0020);
static const int MS_RING_ON = ((DWORD)0x0040);
static const int MS_RLSD_ON = ((DWORD)0x0080);
static const int S_QUEUEEMPTY = 0;
static const int S_THRESHOLD = 1;
static const int S_ALLTHRESHOLD = 2;
static const int S_NORMAL = 0;
static const int S_LEGATO = 1;
static const int S_STACCATO = 2;
static const int S_PERIOD512 = 0;
static const int S_PERIOD1024 = 1;
static const int S_PERIOD2048 = 2;
static const int S_PERIODVOICE = 3;
static const int S_WHITE512 = 4;
static const int S_WHITE1024 = 5;
static const int S_WHITE2048 = 6;
static const int S_WHITEVOICE = 7;
static const int S_SERDVNA = (-1);
static const int S_SEROFM = (-2);
static const int S_SERMACT = (-3);
static const int S_SERQFUL = (-4);
static const int S_SERBDNT = (-5);
static const int S_SERDLN = (-6);
static const int S_SERDCC = (-7);
static const int S_SERDTP = (-8);
static const int S_SERDVL = (-9);
static const int S_SERDMD = (-10);
static const int S_SERDSH = (-11);
static const int S_SERDPT = (-12);
static const int S_SERDFQ = (-13);
static const int S_SERDDR = (-14);
static const int S_SERDSR = (-15);
static const int S_SERDST = (-16);
static const int NMPWAIT_WAIT_FOREVER = 0xffffffff;
static const int NMPWAIT_NOWAIT = 0x00000001;
static const int NMPWAIT_USE_DEFAULT_WAIT = 0x00000000;
static const int FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES;
static const int FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH;
static const int FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK;
static const int FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS;
static const int FS_VOL_IS_COMPRESSED = FILE_VOLUME_IS_COMPRESSED;
static const int FS_FILE_COMPRESSION = FILE_FILE_COMPRESSION;
static const int FS_FILE_ENCRYPTION = FILE_SUPPORTS_ENCRYPTION;
static const int FILE_MAP_COPY = SECTION_QUERY;
static const int FILE_MAP_WRITE = SECTION_MAP_WRITE;
static const int FILE_MAP_READ = SECTION_MAP_READ;
static const int FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS;
static const int FILE_MAP_EXECUTE = SECTION_MAP_EXECUTE_EXPLICIT;
static const int OF_READ = 0x00000000;
static const int OF_WRITE = 0x00000001;
static const int OF_READWRITE = 0x00000002;
static const int OF_SHARE_COMPAT = 0x00000000;
static const int OF_SHARE_EXCLUSIVE = 0x00000010;
static const int OF_SHARE_DENY_WRITE = 0x00000020;
static const int OF_SHARE_DENY_READ = 0x00000030;
static const int OF_SHARE_DENY_NONE = 0x00000040;
static const int OF_PARSE = 0x00000100;
static const int OF_DELETE = 0x00000200;
static const int OF_VERIFY = 0x00000400;
static const int OF_CANCEL = 0x00000800;
static const int OF_CREATE = 0x00001000;
static const int OF_PROMPT = 0x00002000;
static const int OF_EXIST = 0x00004000;
static const int OF_REOPEN = 0x00008000;
static const int OFS_MAXPATHNAME = 128;
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
LONG
InterlockedIncrement (
    LONG volatile *lpAddend
    );
LONG
InterlockedDecrement (
    LONG volatile *lpAddend
    );
LONG
InterlockedExchange (
    LONG volatile *Target,
    LONG Value
    );
static const int InterlockedExchangePointer(Target,Value) = (PVOID)InterlockedExchange((PLONG)(Target), (LONG)(Value));
LONG
InterlockedExchangeAdd (
    LONG volatile *Addend,
    LONG Value
    );
LONG
InterlockedCompareExchange (
    LONG volatile *Destination,
    LONG Exchange,
    LONG Comperand
    );
LONGLONG
InterlockedCompareExchange64 (
    LONGLONG volatile *Destination,
    LONGLONG Exchange,
    LONGLONG Comperand
    );
FORCEINLINE
LONGLONG
InterlockedAnd64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);
    return Old;
}
FORCEINLINE
LONGLONG
InterlockedOr64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);
    return Old;
}
FORCEINLINE
LONGLONG
InterlockedXor64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);
    return Old;
}
FORCEINLINE
LONGLONG
InterlockedIncrement64 (
    LONGLONG volatile *Addend
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);
    return Old + 1;
}
FORCEINLINE
LONGLONG
InterlockedDecrement64 (
    LONGLONG volatile *Addend
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);
    return Old - 1;
}
FORCEINLINE
LONGLONG
InterlockedExchange64 (
    LONGLONG volatile *Target,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);
    return Old;
}
FORCEINLINE
LONGLONG
InterlockedExchangeAdd64(
    LONGLONG volatile *Addend,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);
    return Old;
}
static const int InterlockedCompareExchangePointer(Destination,ExChange,Comperand) = (PVOID)(LONG_PTR)InterlockedCompareExchange((LONG volatile *)(Destination), (LONG)(LONG_PTR)(ExChange), (LONG)(LONG_PTR)(Comperand));
static const int InterlockedIncrementAcquire = InterlockedIncrement;
static const int InterlockedIncrementRelease = InterlockedIncrement;
static const int InterlockedDecrementAcquire = InterlockedDecrement;
static const int InterlockedDecrementRelease = InterlockedDecrement;
static const int InterlockedIncrementAcquire = InterlockedIncrement;
static const int InterlockedIncrementRelease = InterlockedIncrement;
static const int InterlockedCompareExchangeAcquire = InterlockedCompareExchange;
static const int InterlockedCompareExchangeRelease = InterlockedCompareExchange;
static const int InterlockedCompareExchangeAcquire64 = InterlockedCompareExchange64;
static const int InterlockedCompareExchangeRelease64 = InterlockedCompareExchange64;
static const int InterlockedCompareExchangePointerAcquire = InterlockedCompareExchangePointer;
static const int InterlockedCompareExchangePointerRelease = InterlockedCompareExchangePointer;
BOOL
FreeResource(
    HGLOBAL hResData
    );
LPVOID
LockResource(
    HGLOBAL hResData
    );
static const int UnlockResource(hResData) = ((hResData), 0);
static const int MAXINTATOM = 0xC000;
static const int MAKEINTATOM(i) = (LPTSTR)((ULONG_PTR)((WORD)(i)));
static const int INVALID_ATOM = ((ATOM)0);
int
WinMain (
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd
    );
int
wWinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPWSTR lpCmdLine,
    int nShowCmd
    );
BOOL
FreeLibrary (
    HMODULE hLibModule
    );
VOID
FreeLibraryAndExitThread (
    HMODULE hLibModule,
    DWORD dwExitCode
    );
BOOL
DisableThreadLibraryCalls (
    HMODULE hLibModule
    );
GetProcAddress (
    HMODULE hModule,
    LPCSTR lpProcName
    );
DWORD
GetVersion (
    VOID
    );
HGLOBAL
GlobalAlloc (
    UINT uFlags,
    SIZE_T dwBytes
    );
HGLOBAL
GlobalReAlloc (
    HGLOBAL hMem,
    SIZE_T dwBytes,
    UINT uFlags
    );
SIZE_T
GlobalSize (
    HGLOBAL hMem
    );
UINT
GlobalFlags (
    HGLOBAL hMem
    );
LPVOID
GlobalLock (
    HGLOBAL hMem
    );
HGLOBAL
GlobalHandle (
    LPCVOID pMem
    );
BOOL
GlobalUnlock(
    HGLOBAL hMem
    );
HGLOBAL
GlobalFree(
    HGLOBAL hMem
    );
SIZE_T
GlobalCompact(
    DWORD dwMinFree
    );
VOID
GlobalFix(
    HGLOBAL hMem
    );
VOID
GlobalUnfix(
    HGLOBAL hMem
    );
LPVOID
GlobalWire(
    HGLOBAL hMem
    );
BOOL
GlobalUnWire(
    HGLOBAL hMem
    );
VOID
GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );
typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;
BOOL
GlobalMemoryStatusEx(
    LPMEMORYSTATUSEX lpBuffer
    );
? uBytes : 0 )
HLOCAL
LocalAlloc(
    UINT uFlags,
    SIZE_T uBytes
    );
HLOCAL
LocalReAlloc(
    HLOCAL hMem,
    SIZE_T uBytes,
    UINT uFlags
    );
LPVOID
LocalLock(
    HLOCAL hMem
    );
HLOCAL
LocalHandle(
    LPCVOID pMem
    );
BOOL
LocalUnlock(
    HLOCAL hMem
    );
SIZE_T
LocalSize(
    HLOCAL hMem
    );
UINT
LocalFlags(
    HLOCAL hMem
    );
HLOCAL
LocalFree(
    HLOCAL hMem
    );
SIZE_T
LocalShrink(
    HLOCAL hMem,
    UINT cbNewSize
    );
SIZE_T
LocalCompact(
    UINT uMinFree
    );
BOOL
FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    SIZE_T dwSize
    );
VOID
FlushProcessWriteBuffers(
    VOID
    );
BOOL
QueryThreadCycleTime (
    HANDLE ThreadHandle,
    PULONG64 CycleTime
    );
BOOL
QueryProcessCycleTime (
    HANDLE ProcessHandle,
    PULONG64 CycleTime
    );
BOOL
QueryIdleProcessorCycleTime (
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime
    );
BOOL
QueryIdleProcessorCycleTimeEx (
    USHORT Group,
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime
    );
BOOL
QueryUnbiasedInterruptTime (
    PULONGLONG UnbiasedTime
    );
BOOL
GetProcessorSystemCycleTime (
    USHORT Group,
    PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
    PDWORD ReturnedLength
    );
LPVOID
VirtualAlloc(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );
            
BOOL
VirtualFree(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD dwFreeType
    );
BOOL
VirtualProtect(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );
SIZE_T
VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    SIZE_T dwLength
    );
LPVOID
VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );
_
LPVOID
VirtualAllocExNuma(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect,
    DWORD nndPreferred
    );
UINT
GetWriteWatch(
    DWORD dwFlags,
    PVOID lpBaseAddress,
    SIZE_T dwRegionSize,
    PVOID *lpAddresses,
    ULONG_PTR *lpdwCount,
    PULONG lpdwGranularity
    );
UINT
ResetWriteWatch(
    LPVOID lpBaseAddress,
    SIZE_T dwRegionSize
    );
SIZE_T
GetLargePageMinimum(
    VOID
    );
UINT
EnumSystemFirmwareTables(
    DWORD FirmwareTableProviderSignature,
    PVOID pFirmwareTableEnumBuffer,
    DWORD BufferSize
    );
UINT
GetSystemFirmwareTable(
    DWORD FirmwareTableProviderSignature,
    DWORD FirmwareTableID,
    PVOID pFirmwareTableBuffer,
    DWORD BufferSize
    );
BOOL
GetPhysicallyInstalledSystemMemory(
    PULONGLONG TotalMemoryInKilobytes
    );
                
BOOL
VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD dwFreeType
    );
BOOL
VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );
SIZE_T
VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    SIZE_T dwLength
    );
HANDLE
HeapCreate(
    DWORD flOptions,
    SIZE_T dwInitialSize,
    SIZE_T dwMaximumSize
    );
BOOL
HeapDestroy(
    HANDLE hHeap
    );
_
LPVOID
HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    SIZE_T dwBytes
    );
_
LPVOID
HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    SIZE_T dwBytes
    );
BOOL
HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );
SIZE_T
HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );
BOOL
HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );
SIZE_T
HeapCompact(
    HANDLE hHeap,
    DWORD dwFlags
    );
HANDLE
GetProcessHeap( VOID );
DWORD
GetProcessHeaps(
    DWORD NumberOfHeaps,
    PHANDLE ProcessHeaps
    );
typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } DUMMYUNIONNAME;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
static const int PROCESS_HEAP_REGION = 0x0001;
static const int PROCESS_HEAP_UNCOMMITTED_RANGE = 0x0002;
static const int PROCESS_HEAP_ENTRY_BUSY = 0x0004;
static const int PROCESS_HEAP_ENTRY_MOVEABLE = 0x0010;
static const int PROCESS_HEAP_ENTRY_DDESHARE = 0x0020;
BOOL
HeapLock(
    HANDLE hHeap
    );
BOOL
HeapUnlock(
    HANDLE hHeap
    );
BOOL
HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry
    );
BOOL
HeapSetInformation (
    HANDLE HeapHandle,
    HEAP_INFORMATION_CLASS HeapInformationClass,
    PVOID HeapInformation,
    SIZE_T HeapInformationLength
    );
BOOL
HeapQueryInformation (
    HANDLE HeapHandle,
    HEAP_INFORMATION_CLASS HeapInformationClass,
    PVOID HeapInformation,
    SIZE_T HeapInformationLength,
    PSIZE_T ReturnLength
    );
static const int SCS_32BIT_BINARY = 0;
static const int SCS_DOS_BINARY = 1;
static const int SCS_WOW_BINARY = 2;
static const int SCS_PIF_BINARY = 3;
static const int SCS_POSIX_BINARY = 4;
static const int SCS_OS216_BINARY = 5;
static const int SCS_64BIT_BINARY = 6;
static const int SCS_THIS_PLATFORM_BINARY = SCS_64BIT_BINARY;
BOOL
GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
BOOL
GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
static const int GetBinaryType = GetBinaryTypeA;
DWORD
GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR lpszShortPath,
    DWORD cchBuffer
    );
DWORD
GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR lpszShortPath,
    DWORD cchBuffer
    );
static const int GetShortPathName = GetShortPathNameA;
DWORD
GetLongPathNameA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    DWORD cchBuffer
    );
DWORD
GetLongPathNameW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    DWORD cchBuffer
    );
static const int GetLongPathName = GetLongPathNameA;
DWORD
GetLongPathNameTransactedA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    DWORD cchBuffer,
    HANDLE hTransaction
    );
DWORD
GetLongPathNameTransactedW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    DWORD cchBuffer,
    HANDLE hTransaction
    );
static const int GetLongPathNameTransacted = GetLongPathNameTransactedA;
BOOL
GetProcessAffinityMask(
    HANDLE hProcess,
    PDWORD_PTR lpProcessAffinityMask,
    PDWORD_PTR lpSystemAffinityMask
    );
BOOL
SetProcessAffinityMask(
    HANDLE hProcess,
    DWORD_PTR dwProcessAffinityMask
    );
BOOL
GetProcessGroupAffinity(
    HANDLE hProcess,
    PUSHORT GroupCount,
    PUSHORT GroupArray
    );
BOOL
GetProcessHandleCount(
    HANDLE hProcess,
    PDWORD pdwHandleCount
    );
BOOL
GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
BOOL
GetProcessIoCounters(
    HANDLE hProcess,
    PIO_COUNTERS lpIoCounters
    );
BOOL
GetProcessWorkingSetSize(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize
    );
BOOL
GetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize,
    PDWORD Flags
    );
BOOL
SetProcessWorkingSetSize(
    HANDLE hProcess,
    SIZE_T dwMinimumWorkingSetSize,
    SIZE_T dwMaximumWorkingSetSize
    );
BOOL
SetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    SIZE_T dwMinimumWorkingSetSize,
    SIZE_T dwMaximumWorkingSetSize,
    DWORD Flags
    );
static const int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 0x00000001UL;
BOOL
SetProcessAffinityUpdateMode(
    HANDLE hProcess,
    DWORD dwFlags
    );
BOOL
QueryProcessAffinityUpdateMode(
    HANDLE hProcess,
    LPDWORD lpdwFlags
    );
HANDLE
OpenProcess(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
    );
HANDLE
GetCurrentProcess(
    VOID
    );
DWORD
GetCurrentProcessId(
    VOID
    );
VOID
ExitProcess(
    UINT uExitCode
    );
BOOL
TerminateProcess(
    HANDLE hProcess,
    UINT uExitCode
    );
BOOL
GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );
VOID
FatalExit(
    int ExitCode
    );
LPCH
GetEnvironmentStrings(
    VOID
    );
LPWCH
GetEnvironmentStringsW(
    VOID
    );
static const int GetEnvironmentStringsA = GetEnvironmentStrings;
BOOL
SetEnvironmentStringsA(
    LPCH NewEnvironment
    );
BOOL
SetEnvironmentStringsW(
    LPWCH NewEnvironment
    );
static const int SetEnvironmentStrings = SetEnvironmentStringsA;
BOOL
FreeEnvironmentStringsA(
    LPCH
    );
BOOL
FreeEnvironmentStringsW(
    LPWCH
    );
static const int FreeEnvironmentStrings = FreeEnvironmentStringsA;
VOID
RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    ULONG_PTR *lpArguments
    );
VOID
RaiseFailFastException(
    PEXCEPTION_RECORD pExceptionRecord,
    PCONTEXT pContextRecord,
    DWORD dwFlags
    );
LONG
UnhandledExceptionFilter(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef LONG (*PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
LPTOP_LEVEL_EXCEPTION_FILTER
SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );
static const int FIBER_FLAG_FLOAT_SWITCH = 0x1;
LPVOID
CreateFiber(
    SIZE_T dwStackSize,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );
LPVOID
CreateFiberEx(
    SIZE_T dwStackCommitSize,
    SIZE_T dwStackReserveSize,
    DWORD dwFlags,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );
VOID
DeleteFiber(
    LPVOID lpFiber
    );
LPVOID
ConvertThreadToFiber(
    LPVOID lpParameter
    );
LPVOID
ConvertThreadToFiberEx(
    LPVOID lpParameter,
    DWORD dwFlags
    );
BOOL
ConvertFiberToThread(
    VOID
    );
BOOL
IsThreadAFiber(
    VOID
    );
VOID
SwitchToFiber(
    LPVOID lpFiber
    );
BOOL
SwitchToThread(
    VOID
    );
static const int UMS_VERSION = RTL_UMS_VERSION;
typedef void *PUMS_CONTEXT;
typedef void *PUMS_COMPLETION_LIST;
typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;
typedef struct _UMS_SCHEDULER_STARTUP_INFO {
    ULONG UmsVersion;
    PUMS_COMPLETION_LIST CompletionList;
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
    PVOID SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;
BOOL
CreateUmsCompletionList(
    PUMS_COMPLETION_LIST* UmsCompletionList
    );
BOOL
DequeueUmsCompletionListItems(
    PUMS_COMPLETION_LIST UmsCompletionList,
    DWORD WaitTimeOut,
    PUMS_CONTEXT* UmsThreadList
    );
BOOL
GetUmsCompletionListEvent(
    PUMS_COMPLETION_LIST UmsCompletionList,
    PHANDLE UmsCompletionEvent
    );
BOOL
ExecuteUmsThread(
    PUMS_CONTEXT UmsThread
    );
BOOL
UmsThreadYield(
    PVOID SchedulerParam
    );
BOOL
DeleteUmsCompletionList(
    PUMS_COMPLETION_LIST UmsCompletionList
    );
PUMS_CONTEXT
GetCurrentUmsThread(
    VOID
    );
PUMS_CONTEXT
GetNextUmsListItem(
    PUMS_CONTEXT UmsContext
    );
BOOL
QueryUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    ULONG UmsThreadInformationLength,
    PULONG ReturnLength
    );
BOOL
SetUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    ULONG UmsThreadInformationLength
    );
BOOL
DeleteUmsThreadContext(
    PUMS_CONTEXT UmsThread
    );
BOOL
CreateUmsThreadContext(
    PUMS_CONTEXT *lpUmsThread
    );
BOOL
EnterUmsSchedulingMode(
    PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;
HANDLE
CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );
HANDLE
CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );
HANDLE
CreateRemoteThreadEx(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    LPDWORD lpThreadId
    );
HANDLE
GetCurrentThread(
    VOID
    );
DWORD
GetCurrentThreadId(
    VOID
    );
BOOL
SetThreadStackGuarantee (
    PULONG StackSizeInBytes
    );
DWORD
GetProcessIdOfThread(
    HANDLE Thread
    );
DWORD
GetThreadId(
    HANDLE Thread
    );
DWORD
GetProcessId(
    HANDLE Process
    );
DWORD
GetCurrentProcessorNumber(
    VOID
    );
VOID
GetCurrentProcessorNumberEx(
    PPROCESSOR_NUMBER ProcNumber
    );
BOOL
GetThreadGroupAffinity(
    HANDLE hThread,
    PGROUP_AFFINITY GroupAffinity
    );
DWORD_PTR
SetThreadAffinityMask(
    HANDLE hThread,
    DWORD_PTR dwThreadAffinityMask
    );
BOOL
SetThreadGroupAffinity(
    HANDLE hThread,
    GROUP_AFFINITY *GroupAffinity,
    PGROUP_AFFINITY PreviousGroupAffinity
    );
BOOL
SetThreadIdealProcessorEx (
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor,
    PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );
BOOL
GetThreadIdealProcessorEx (
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor
    );
DWORD
SetThreadIdealProcessor(
    HANDLE hThread,
    DWORD dwIdealProcessor
    );
static const int PROCESS_DEP_ENABLE = 0x00000001;
static const int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 0x00000002;
BOOL
SetProcessDEPPolicy(
    DWORD dwFlags
    );
BOOL
GetProcessDEPPolicy(
    HANDLE hProcess,
    LPDWORD lpFlags,
    PBOOL lpPermanent
    );
BOOL
SetProcessPriorityBoost(
    HANDLE hProcess,
    BOOL bDisablePriorityBoost
    );
BOOL
GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost
    );
BOOL
RequestWakeupLatency(
    LATENCY_TIME latency
    );
BOOL
IsSystemResumeAutomatic(
    VOID
    );
HANDLE
OpenThread(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwThreadId
    );
BOOL
SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );
BOOL
SetThreadPriorityBoost(
    HANDLE hThread,
    BOOL bDisablePriorityBoost
    );
BOOL
GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost
    );
int
GetThreadPriority(
    HANDLE hThread
    );
BOOL
GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
BOOL
GetThreadIOPendingFlag(
    HANDLE hThread,
    PBOOL lpIOIsPending
    );
VOID
ExitThread(
    DWORD dwExitCode
    );
BOOL
TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );
BOOL
GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );
BOOL
GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    LPLDT_ENTRY lpSelectorEntry
    );
EXECUTION_STATE
SetThreadExecutionState(
    EXECUTION_STATE esFlags
    );
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;
        } Detailed;
        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;
HANDLE
PowerCreateRequest (
    PREASON_CONTEXT Context
    );
BOOL
PowerSetRequest (
    HANDLE PowerRequest,
    POWER_REQUEST_TYPE RequestType
    );
BOOL
PowerClearRequest (
    HANDLE PowerRequest,
    POWER_REQUEST_TYPE RequestType
    );
DWORD
GetLastError(
    VOID
    );
VOID
SetLastError(
    DWORD dwErrCode
    );
static const int HasOverlappedIoCompleted(lpOverlapped) = (((DWORD)(lpOverlapped)->Internal) != STATUS_PENDING);
BOOL
GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    BOOL bWait
    );
HANDLE
CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    ULONG_PTR CompletionKey,
    DWORD NumberOfConcurrentThreads
    );
BOOL
GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    PULONG_PTR lpCompletionKey,
    LPOVERLAPPED *lpOverlapped,
    DWORD dwMilliseconds
    );
BOOL
GetQueuedCompletionStatusEx(
    HANDLE CompletionPort,
    LPOVERLAPPED_ENTRY lpCompletionPortEntries,
    ULONG ulCount,
    PULONG ulNumEntriesRemoved,
    DWORD dwMilliseconds,
    BOOL fAlertable
    );
BOOL
PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    DWORD dwNumberOfBytesTransferred,
    ULONG_PTR dwCompletionKey,
    LPOVERLAPPED lpOverlapped
    );
static const int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 0x1;
static const int FILE_SKIP_SET_EVENT_ON_HANDLE = 0x2;
BOOL
SetFileCompletionNotificationModes(
    HANDLE FileHandle,
    UCHAR Flags
    );
BOOL
SetFileIoOverlappedRange(
    HANDLE FileHandle,
    PUCHAR OverlappedRangeStart,
    ULONG Length
    );
static const int SEM_FAILCRITICALERRORS = 0x0001;
static const int SEM_NOGPFAULTERRORBOX = 0x0002;
static const int SEM_NOALIGNMENTFAULTEXCEPT = 0x0004;
static const int SEM_NOOPENFILEERRORBOX = 0x8000;
UINT
GetErrorMode(
    VOID
    );
UINT
SetErrorMode(
    UINT uMode
    );
DWORD
GetThreadErrorMode(
    VOID
    );
BOOL
SetThreadErrorMode(
    DWORD dwNewMode,
    LPDWORD lpOldMode
    );
BOOL
ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T * lpNumberOfBytesRead
    );
BOOL
WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPCVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T * lpNumberOfBytesWritten
    );
BOOL
GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );
BOOL
SetThreadContext(
    HANDLE hThread,
    CONTEXT *lpContext
    );
BOOL
Wow64GetThreadContext(
    HANDLE hThread,
    PWOW64_CONTEXT lpContext
    );
BOOL
Wow64GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    PWOW64_LDT_ENTRY lpSelectorEntry
    );
BOOL
Wow64SetThreadContext(
    HANDLE hThread,
    WOW64_CONTEXT *lpContext
    );
DWORD
SuspendThread(
    HANDLE hThread
    );
DWORD
Wow64SuspendThread(
    HANDLE hThread
    );
DWORD
ResumeThread(
    HANDLE hThread
    );
DWORD
QueueUserAPC(
    PAPCFUNC pfnAPC,
    HANDLE hThread,
    ULONG_PTR dwData
    );
BOOL
IsDebuggerPresent(
    VOID
    );
BOOL
CheckRemoteDebuggerPresent(
    HANDLE hProcess,
    PBOOL pbDebuggerPresent
    );
VOID
DebugBreak(
    VOID
    );
BOOL
WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );
BOOL
ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );
BOOL
DebugActiveProcess(
    DWORD dwProcessId
    );
BOOL
DebugActiveProcessStop(
    DWORD dwProcessId
    );
BOOL
DebugSetProcessKillOnExit(
    BOOL KillOnExit
    );
BOOL
DebugBreakProcess (
    HANDLE Process
    );
VOID
InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
VOID
EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
VOID
LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
static const int CRITICAL_SECTION_NO_DEBUG_INFO = RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO;
BOOL
InitializeCriticalSectionAndSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount
    );
BOOL
InitializeCriticalSectionEx(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount,
    DWORD Flags
    );
DWORD
SetCriticalSectionSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount
    );
BOOL
TryEnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
VOID
DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
BOOL
SetEvent(
    HANDLE hEvent
    );
BOOL
ResetEvent(
    HANDLE hEvent
    );
BOOL
PulseEvent(
    HANDLE hEvent
    );
BOOL
ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );
BOOL
ReleaseMutex(
    HANDLE hMutex
    );
DWORD
WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );
DWORD
WaitForMultipleObjects(
    DWORD nCount,
    HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds
    );
VOID
Sleep(
    DWORD dwMilliseconds
    );
HGLOBAL
LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );
DWORD
SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );
ATOM
GlobalDeleteAtom(
    ATOM nAtom
    );
BOOL
InitAtomTable(
    DWORD nSize
    );
ATOM
DeleteAtom(
    ATOM nAtom
    );
UINT
SetHandleCount(
    UINT uNumber
    );
DWORD
GetLogicalDrives(
    VOID
    );
BOOL
LockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh
    );
BOOL
UnlockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh
    );
BOOL
LockFileEx(
    HANDLE hFile,
    DWORD dwFlags,
    DWORD dwReserved,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped
    );
static const int LOCKFILE_FAIL_IMMEDIATELY = 0x00000001;
static const int LOCKFILE_EXCLUSIVE_LOCK = 0x00000002;
BOOL
UnlockFileEx(
    HANDLE hFile,
    DWORD dwReserved,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped
    );
typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;
BOOL
GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );
DWORD
GetFileType(
    HANDLE hFile
    );
DWORD
GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );
BOOL
GetFileSizeEx(
    HANDLE hFile,
    PLARGE_INTEGER lpFileSize
    );
HANDLE
GetStdHandle(
    DWORD nStdHandle
    );
BOOL
SetStdHandle(
    DWORD nStdHandle,
    HANDLE hHandle
    );
BOOL
SetStdHandleEx(
    DWORD nStdHandle,
    HANDLE hHandle,
    PHANDLE phPrevValue
    );
BOOL
WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );
BOOL
ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );
BOOL
FlushFileBuffers(
    HANDLE hFile
    );
BOOL
DeviceIoControl(
    HANDLE hDevice,
    DWORD dwIoControlCode,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped
    );
BOOL
RequestDeviceWakeup(
    HANDLE hDevice
    );
BOOL
CancelDeviceWakeupRequest(
    HANDLE hDevice
    );
BOOL
GetDevicePowerState(
    HANDLE hDevice,
    BOOL *pfOn
    );
BOOL
SetMessageWaitingIndicator(
    HANDLE hMsgIndicator,
    ULONG ulMsgCount
    );
BOOL
SetEndOfFile(
    HANDLE hFile
    );
DWORD
SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );
BOOL
SetFilePointerEx(
    HANDLE hFile,
    LARGE_INTEGER liDistanceToMove,
    PLARGE_INTEGER lpNewFilePointer,
    DWORD dwMoveMethod
    );
BOOL
FindClose(
    HANDLE hFindFile
    );
BOOL
GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime
    );
BOOL
SetFileTime(
    HANDLE hFile,
    FILETIME *lpCreationTime,
    FILETIME *lpLastAccessTime,
    FILETIME *lpLastWriteTime
    );
BOOL
SetFileValidData(
    HANDLE hFile,
    LONGLONG ValidDataLength
    );
BOOL
SetFileShortNameA(
    HANDLE hFile,
    LPCSTR lpShortName
    );
BOOL
SetFileShortNameW(
    HANDLE hFile,
    LPCWSTR lpShortName
    );
static const int SetFileShortName = SetFileShortNameA;
BOOL
CloseHandle(
    HANDLE hObject
    );
BOOL
DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwOptions
    );
BOOL
GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags
    );
BOOL
SetHandleInformation(
    HANDLE hObject,
    DWORD dwMask,
    DWORD dwFlags
    );
static const int HANDLE_FLAG_INHERIT = 0x00000001;
static const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x00000002;
static const int HINSTANCE_ERROR = 32;
DWORD
LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock
    );
UINT
WinExec(
    LPCSTR lpCmdLine,
    UINT uCmdShow
    );
BOOL
ClearCommBreak(
    HANDLE hFile
    );
BOOL
ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );
BOOL
SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );
BOOL
EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );
BOOL
GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
BOOL
GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );
BOOL
GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );
BOOL
GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );
BOOL
GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );
BOOL
GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );
BOOL
SetCommBreak(
    HANDLE hFile
    );
BOOL
SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
BOOL
SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );
BOOL
SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );
BOOL
SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
TransmitCommChar(
    HANDLE hFile,
    char cChar
    );
BOOL
WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );
DWORD
SetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionMethod,
    DWORD dwPartition,
    DWORD dwOffsetLow,
    DWORD dwOffsetHigh,
    BOOL bImmediate
    );
DWORD
GetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh
    );
DWORD
PrepareTape(
    HANDLE hDevice,
    DWORD dwOperation,
    BOOL bImmediate
    );
DWORD
EraseTape(
    HANDLE hDevice,
    DWORD dwEraseType,
    BOOL bImmediate
    );
DWORD
CreateTapePartition(
    HANDLE hDevice,
    DWORD dwPartitionMethod,
    DWORD dwCount,
    DWORD dwSize
    );
DWORD
WriteTapemark(
    HANDLE hDevice,
    DWORD dwTapemarkType,
    DWORD dwTapemarkCount,
    BOOL bImmediate
    );
DWORD
GetTapeStatus(
    HANDLE hDevice
    );
DWORD
GetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation
    );
static const int GET_TAPE_MEDIA_INFORMATION = 0;
static const int GET_TAPE_DRIVE_INFORMATION = 1;
DWORD
SetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPVOID lpTapeInformation
    );
static const int SET_TAPE_MEDIA_INFORMATION = 0;
static const int SET_TAPE_DRIVE_INFORMATION = 1;
BOOL
Beep(
    DWORD dwFreq,
    DWORD dwDuration
    );
int
MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator
    );
VOID
GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    );
VOID
GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    );
BOOL
SetSystemTime(
    SYSTEMTIME *lpSystemTime
    );
VOID
GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    );
BOOL
SetLocalTime(
    SYSTEMTIME *lpSystemTime
    );
VOID
GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );
typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;
DEP_SYSTEM_POLICY_TYPE
GetSystemDEPPolicy(
    VOID
    );
static const int FILE_CACHE_MAX_HARD_ENABLE = 0x00000001;
static const int FILE_CACHE_MAX_HARD_DISABLE = 0x00000002;
static const int FILE_CACHE_MIN_HARD_ENABLE = 0x00000004;
static const int FILE_CACHE_MIN_HARD_DISABLE = 0x00000008;
BOOL
SetSystemFileCacheSize (
    SIZE_T MinimumFileCacheSize,
    SIZE_T MaximumFileCacheSize,
    DWORD Flags
    );
BOOL
GetSystemFileCacheSize (
    PSIZE_T lpMinimumFileCacheSize,
    PSIZE_T lpMaximumFileCacheSize,
    PDWORD lpFlags
    );
BOOL
GetSystemRegistryQuota(
    PDWORD pdwQuotaAllowed,
    PDWORD pdwQuotaUsed
    );
BOOL
GetSystemTimes(
    LPFILETIME lpIdleTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
VOID
GetNativeSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );
BOOL
IsProcessorFeaturePresent(
    DWORD ProcessorFeature
    );
typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;
typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;
BOOL
SystemTimeToTzSpecificLocalTime(
    TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    SYSTEMTIME *lpUniversalTime,
    LPSYSTEMTIME lpLocalTime
    );
BOOL
TzSpecificLocalTimeToSystemTime(
    TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    SYSTEMTIME *lpLocalTime,
    LPSYSTEMTIME lpUniversalTime
    );
BOOL
GetTimeZoneInformationForYear(
    USHORT wYear,
    PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
    LPTIME_ZONE_INFORMATION ptzi
    );
DWORD
GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );
BOOL
SetTimeZoneInformation(
    TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );
DWORD
GetDynamicTimeZoneInformation(
    PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );
BOOL
SetDynamicTimeZoneInformation(
    DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );
BOOL
SystemTimeToFileTime(
    SYSTEMTIME *lpSystemTime,
    LPFILETIME lpFileTime
    );
BOOL
FileTimeToLocalFileTime(
    FILETIME *lpFileTime,
    LPFILETIME lpLocalFileTime
    );
BOOL
LocalFileTimeToFileTime(
    FILETIME *lpLocalFileTime,
    LPFILETIME lpFileTime
    );
BOOL
FileTimeToSystemTime(
    FILETIME *lpFileTime,
    LPSYSTEMTIME lpSystemTime
    );
LONG
CompareFileTime(
    FILETIME *lpFileTime1,
    FILETIME *lpFileTime2
    );
BOOL
FileTimeToDosDateTime(
    FILETIME *lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime
    );
BOOL
DosDateTimeToFileTime(
    WORD wFatDate,
    WORD wFatTime,
    LPFILETIME lpFileTime
    );
DWORD
GetTickCount(
    VOID
    );
ULONGLONG
GetTickCount64(
    VOID
    );
BOOL
SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    BOOL bTimeAdjustmentDisabled
    );
BOOL
GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL lpTimeAdjustmentDisabled
    );
DWORD
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
DWORD
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
static const int FormatMessage = FormatMessageA;
static const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100;
static const int FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200;
static const int FORMAT_MESSAGE_FROM_STRING = 0x00000400;
static const int FORMAT_MESSAGE_FROM_HMODULE = 0x00000800;
static const int FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000;
static const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000;
static const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 0x000000FF;
BOOL
CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    DWORD nSize
    );
BOOL
ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped
    );
BOOL
DisconnectNamedPipe(
    HANDLE hNamedPipe
    );
BOOL
SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout
    );
BOOL
GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances
    );
BOOL
PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    DWORD nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage
    );
BOOL
TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped
    );
HANDLE
CreateMailslotA(
    LPCSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
HANDLE
CreateMailslotW(
    LPCWSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateMailslot = CreateMailslotA;
BOOL
GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout
    );
BOOL
SetMailslotInfo(
    HANDLE hMailslot,
    DWORD lReadTimeout
    );
LPVOID
MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap
    );
BOOL
FlushViewOfFile(
    LPCVOID lpBaseAddress,
    SIZE_T dwNumberOfBytesToFlush
    );
BOOL
UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );
BOOL
EncryptFileA(
    LPCSTR lpFileName
    );
BOOL
EncryptFileW(
    LPCWSTR lpFileName
    );
static const int EncryptFile = EncryptFileA;
BOOL
DecryptFileA(
    LPCSTR lpFileName,
    DWORD dwReserved
    );
BOOL
DecryptFileW(
    LPCWSTR lpFileName,
    DWORD dwReserved
    );
static const int DecryptFile = DecryptFileA;
static const int FILE_ENCRYPTABLE = 0;
static const int FILE_IS_ENCRYPTED = 1;
static const int FILE_SYSTEM_ATTR = 2;
static const int FILE_ROOT_DIR = 3;
static const int FILE_SYSTEM_DIR = 4;
static const int FILE_UNKNOWN = 5;
static const int FILE_SYSTEM_NOT_SUPPORT = 6;
static const int FILE_USER_DISALLOWED = 7;
static const int FILE_READ_ONLY = 8;
static const int FILE_DIR_DISALLOWED = 9;
BOOL
FileEncryptionStatusA(
    LPCSTR lpFileName,
    LPDWORD lpStatus
    );
BOOL
FileEncryptionStatusW(
    LPCWSTR lpFileName,
    LPDWORD lpStatus
    );
static const int FileEncryptionStatus = FileEncryptionStatusA;
static const int EFS_USE_RECOVERY_KEYS = (0x1);
typedef
DWORD
(*PFE_EXPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    ULONG ulLength
    );
typedef
DWORD
(*PFE_IMPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    PULONG ulLength
    );
static const int CREATE_FOR_IMPORT = (1);
static const int CREATE_FOR_DIR = (2);
static const int OVERWRITE_HIDDEN = (4);
static const int EFSRPC_SECURE_ONLY = (8);
DWORD
OpenEncryptedFileRawA(
    LPCSTR lpFileName,
    ULONG ulFlags,
    PVOID *pvContext
    );
DWORD
OpenEncryptedFileRawW(
    LPCWSTR lpFileName,
    ULONG ulFlags,
    PVOID *pvContext
    );
static const int OpenEncryptedFileRaw = OpenEncryptedFileRawA;
DWORD
ReadEncryptedFileRaw(
    PFE_EXPORT_FUNC pfExportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext
    );
DWORD
WriteEncryptedFileRaw(
    PFE_IMPORT_FUNC pfImportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext
    );
VOID
CloseEncryptedFileRaw(
    PVOID pvContext
    );
int
lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
int
lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcmp = lstrcmpA;
int
lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
int
lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcmpi = lstrcmpiA;
LPSTR
lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength
    );
LPWSTR
lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength
    );
static const int lstrcpyn = lstrcpynA;
LPSTR
lstrcpyA(
    __out_z LPSTR lpString1, // deprecated: annotation is as good as it gets
    LPCSTR lpString2
    );
LPWSTR
lstrcpyW(
    __out_z LPWSTR lpString1, // deprecated: annotation is as good as it gets
    LPCWSTR lpString2
    );
static const int lstrcpy = lstrcpyA;
LPSTR
lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
LPWSTR
lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcat = lstrcatA;
int
lstrlenA(
    LPCSTR lpString
    );
int
lstrlenW(
    LPCWSTR lpString
    );
static const int lstrlen = lstrlenA;
HFILE
OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    UINT uStyle
    );
HFILE
_lopen(
    LPCSTR lpPathName,
    int iReadWrite
    );
HFILE
_lcreat(
    LPCSTR lpPathName,
    int iAttribute
    );
UINT
_lread(
    HFILE hFile,
    LPVOID lpBuffer,
    UINT uBytes
    );
UINT
_lwrite(
    HFILE hFile,
    LPCCH lpBuffer,
    UINT uBytes
    );
long
_hread(
    HFILE hFile,
    LPVOID lpBuffer,
    long lBytes
    );
long
_hwrite(
    HFILE hFile,
    LPCCH lpBuffer,
    long lBytes
    );
HFILE
_lclose(
    HFILE hFile
    );
LONG
_llseek(
    HFILE hFile,
    LONG lOffset,
    int iOrigin
    );
BOOL
IsTextUnicode(
    VOID* lpv,
    int iSize,
    LPINT lpiResult
    );
static const int FLS_OUT_OF_INDEXES = ((DWORD)0xFFFFFFFF);
DWORD
FlsAlloc(
    PFLS_CALLBACK_FUNCTION lpCallback
    );
PVOID
FlsGetValue(
    DWORD dwFlsIndex
    );
BOOL
FlsSetValue(
    DWORD dwFlsIndex,
    PVOID lpFlsData
    );
BOOL
FlsFree(
    DWORD dwFlsIndex
    );
static const int TLS_OUT_OF_INDEXES = ((DWORD)0xFFFFFFFF);
DWORD
TlsAlloc(
    VOID
    );
LPVOID
TlsGetValue(
    DWORD dwTlsIndex
    );
BOOL
TlsSetValue(
    DWORD dwTlsIndex,
    LPVOID lpTlsValue
    );
BOOL
TlsFree(
    DWORD dwTlsIndex
    );
typedef
VOID
(*LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );
DWORD
SleepEx(
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
WaitForSingleObjectEx(
    HANDLE hHandle,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
WaitForMultipleObjectsEx(
    DWORD nCount,
    HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
SignalObjectAndWait(
    HANDLE hObjectToSignal,
    HANDLE hObjectToWaitOn,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
BOOL
ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );
BOOL
BackupSeek(
    HANDLE hFile,
    DWORD dwLowBytesToSeek,
    DWORD dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    LPVOID *lpContext
    );
BOOL
BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );
typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ ANYSIZE_ARRAY ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
static const int BACKUP_INVALID = 0x00000000;
static const int BACKUP_DATA = 0x00000001;
static const int BACKUP_EA_DATA = 0x00000002;
static const int BACKUP_SECURITY_DATA = 0x00000003;
static const int BACKUP_ALTERNATE_DATA = 0x00000004;
static const int BACKUP_LINK = 0x00000005;
static const int BACKUP_PROPERTY_DATA = 0x00000006;
static const int BACKUP_OBJECT_ID = 0x00000007;
static const int BACKUP_REPARSE_DATA = 0x00000008;
static const int BACKUP_SPARSE_BLOCK = 0x00000009;
static const int BACKUP_TXFS_DATA = 0x0000000a;
static const int STREAM_NORMAL_ATTRIBUTE = 0x00000000;
static const int STREAM_MODIFIED_WHEN_READ = 0x00000001;
static const int STREAM_CONTAINS_SECURITY = 0x00000002;
static const int STREAM_CONTAINS_PROPERTIES = 0x00000004;
static const int STREAM_SPARSE_ATTRIBUTE = 0x00000008;
BOOL
ReadFileScatter(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToRead,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );
BOOL
WriteFileGather(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );
static const int STARTF_USESHOWWINDOW = 0x00000001;
static const int STARTF_USESIZE = 0x00000002;
static const int STARTF_USEPOSITION = 0x00000004;
static const int STARTF_USECOUNTCHARS = 0x00000008;
static const int STARTF_USEFILLATTRIBUTE = 0x00000010;
static const int STARTF_RUNFULLSCREEN = 0x00000020;
static const int STARTF_FORCEONFEEDBACK = 0x00000040;
static const int STARTF_FORCEOFFFEEDBACK = 0x00000080;
static const int STARTF_USESTDHANDLES = 0x00000100;
static const int STARTF_USEHOTKEY = 0x00000200;
static const int STARTF_TITLEISLINKNAME = 0x00000800;
static const int STARTF_TITLEISAPPID = 0x00001000;
static const int STARTF_PREVENTPINNING = 0x00002000;
typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;
typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;
typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
static const int SHUTDOWN_NORETRY = 0x00000001;
typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[ MAX_PATH ];
    CHAR cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[ MAX_PATH ];
    WCHAR cAlternateFileName[ 14 ];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
HANDLE
CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCSTR lpName
    );
HANDLE
CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCWSTR lpName
    );
static const int CreateMutex = CreateMutexA;
HANDLE
OpenMutexA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenMutexW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenMutex = OpenMutexA;
HANDLE
CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );
HANDLE
CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );
static const int CreateEvent = CreateEventA;
HANDLE
OpenEventA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenEventW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenEvent = OpenEventA;
HANDLE
CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );
HANDLE
CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );
static const int CreateSemaphore = CreateSemaphoreA;
HANDLE
OpenSemaphoreA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenSemaphoreW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenSemaphore = OpenSemaphoreA;
typedef
VOID
(APIENTRY *PTIMERAPCROUTINE)(
    LPVOID lpArgToCompletionRoutine,
    DWORD dwTimerLowValue,
    DWORD dwTimerHighValue
    );
HANDLE
CreateWaitableTimerA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCSTR lpTimerName
    );
HANDLE
CreateWaitableTimerW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCWSTR lpTimerName
    );
static const int CreateWaitableTimer = CreateWaitableTimerA;
HANDLE
OpenWaitableTimerA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpTimerName
    );
HANDLE
OpenWaitableTimerW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpTimerName
    );
static const int OpenWaitableTimer = OpenWaitableTimerA;
BOOL
SetWaitableTimerEx(
    HANDLE hTimer,
    const LARGE_INTEGER *lpDueTime,
    LONG lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    PREASON_CONTEXT WakeContext,
    ULONG TolerableDelay
    );
BOOL
SetWaitableTimer(
    HANDLE hTimer,
    const LARGE_INTEGER *lpDueTime,
    LONG lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    BOOL fResume
    );
BOOL
CancelWaitableTimer(
    HANDLE hTimer
    );
static const int CREATE_MUTEX_INITIAL_OWNER = 0x00000001;
HANDLE
CreateMutexExA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateMutexExW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateMutexEx = CreateMutexExA;
static const int CREATE_EVENT_MANUAL_RESET = 0x00000001;
static const int CREATE_EVENT_INITIAL_SET = 0x00000002;
HANDLE
CreateEventExA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateEventExW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateEventEx = CreateEventExA;
HANDLE
CreateSemaphoreExA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateSemaphoreExW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateSemaphoreEx = CreateSemaphoreExA;
static const int CREATE_WAITABLE_TIMER_MANUAL_RESET = 0x00000001;
HANDLE
CreateWaitableTimerExA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCSTR lpTimerName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateWaitableTimerExW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCWSTR lpTimerName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateWaitableTimerEx = CreateWaitableTimerExA;
HANDLE
CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );
HANDLE
CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );
static const int CreateFileMapping = CreateFileMappingA;
HANDLE
CreateFileMappingNumaA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName,
    DWORD nndPreferred
    );
HANDLE
CreateFileMappingNumaW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName,
    DWORD nndPreferred
    );
static const int CreateFileMappingNuma = CreateFileMappingNumaA;
HANDLE
OpenFileMappingA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenFileMappingW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenFileMapping = OpenFileMappingA;
DWORD
GetLogicalDriveStringsA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetLogicalDriveStringsW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetLogicalDriveStrings = GetLogicalDriveStringsA;
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;
HANDLE
CreateMemoryResourceNotification(
    MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );
BOOL
QueryMemoryResourceNotification(
    HANDLE ResourceNotificationHandle,
    PBOOL ResourceState
    );
HMODULE
LoadLibraryA(
    LPCSTR lpLibFileName
    );
HMODULE
LoadLibraryW(
    LPCWSTR lpLibFileName
    );
static const int LoadLibrary = LoadLibraryA;
HMODULE
LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
HMODULE
LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
static const int LoadLibraryEx = LoadLibraryExA;
static const int DONT_RESOLVE_DLL_REFERENCES = 0x00000001;
static const int LOAD_LIBRARY_AS_DATAFILE = 0x00000002;
static const int LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008;
static const int LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x00000010;
static const int LOAD_LIBRARY_AS_IMAGE_RESOURCE = 0x00000020;
static const int LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 0x00000040;
static const int LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 0x00000080;
DWORD
GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );
DWORD
GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );
static const int GetModuleFileName = GetModuleFileNameA;
HMODULE
GetModuleHandleA(
    LPCSTR lpModuleName
    );
HMODULE
GetModuleHandleW(
    LPCWSTR lpModuleName
    );
static const int GetModuleHandle = GetModuleHandleA;
static const int GET_MODULE_HANDLE_EX_FLAG_PIN = (0x00000001);
static const int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = (0x00000002);
static const int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = (0x00000004);
typedef
BOOL
(*
PGET_MODULE_HANDLE_EXA)(
    DWORD dwFlags,
    LPCSTR lpModuleName,
    HMODULE* phModule
    );
typedef
BOOL
(*
PGET_MODULE_HANDLE_EXW)(
    DWORD dwFlags,
    LPCWSTR lpModuleName,
    HMODULE* phModule
    );
static const int PGET_MODULE_HANDLE_EX = PGET_MODULE_HANDLE_EXA;
BOOL
GetModuleHandleExA(
    DWORD dwFlags,
    LPCSTR lpModuleName,
    HMODULE* phModule
    );
BOOL
GetModuleHandleExW(
    DWORD dwFlags,
    LPCWSTR lpModuleName,
    HMODULE* phModule
    );
static const int GetModuleHandleEx = GetModuleHandleExA;
BOOL
NeedCurrentDirectoryForExePathA(
    LPCSTR ExeName
    );
BOOL
NeedCurrentDirectoryForExePathW(
    LPCWSTR ExeName
    );
static const int NeedCurrentDirectoryForExePath = NeedCurrentDirectoryForExePathA;
static const int PROCESS_NAME_NATIVE = 0x00000001;
BOOL
QueryFullProcessImageNameA(
    HANDLE hProcess,
    DWORD dwFlags,
    LPSTR lpExeName,
    PDWORD lpdwSize
    );
BOOL
QueryFullProcessImageNameW(
    HANDLE hProcess,
    DWORD dwFlags,
    LPWSTR lpExeName,
    PDWORD lpdwSize
    );
static const int QueryFullProcessImageName = QueryFullProcessImageNameA;
static const int PROC_THREAD_ATTRIBUTE_NUMBER = 0x0000FFFF;
static const int PROC_THREAD_ATTRIBUTE_THREAD = 0x00010000;
static const int PROC_THREAD_ATTRIBUTE_INPUT = 0x00020000;
static const int PROC_THREAD_ATTRIBUTE_ADDITIVE = 0x00040000;
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeExtendedFlags,
    ProcThreadAttributeHandleList,
    ProcThreadAttributeGroupAffinity,
    ProcThreadAttributePreferredNode,
    ProcThreadAttributeIdealProcessor,
    ProcThreadAttributeUmsThread,
    ProcThreadAttributeMitigationPolicy,
    ProcThreadAttributeMax
} PROC_THREAD_ATTRIBUTE_NUM;
static const int ProcThreadAttributeValue(Number,Thread,Input,Additive) = (((Number) & PROC_THREAD_ATTRIBUTE_NUMBER) | ((Thread != FALSE) ? PROC_THREAD_ATTRIBUTE_THREAD : 0) | ((Input != FALSE) ? PROC_THREAD_ATTRIBUTE_INPUT : 0) | ((Additive != FALSE) ? PROC_THREAD_ATTRIBUTE_ADDITIVE : 0));
static const int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = ProcThreadAttributeValue (ProcThreadAttributeParentProcess, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_EXTENDED_FLAGS = ProcThreadAttributeValue (ProcThreadAttributeExtendedFlags, FALSE, TRUE, TRUE);
static const int PROC_THREAD_ATTRIBUTE_HANDLE_LIST = ProcThreadAttributeValue (ProcThreadAttributeHandleList, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY = ProcThreadAttributeValue (ProcThreadAttributeGroupAffinity, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE = ProcThreadAttributeValue (ProcThreadAttributePreferredNode, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR = ProcThreadAttributeValue (ProcThreadAttributeIdealProcessor, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_UMS_THREAD = ProcThreadAttributeValue (ProcThreadAttributeUmsThread, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = ProcThreadAttributeValue (ProcThreadAttributeMitigationPolicy, FALSE, TRUE, FALSE);
static const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 0x01;
static const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 0x02;
static const int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 0x04;
BOOL
InitializeProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    DWORD dwAttributeCount,
    DWORD dwFlags,
    PSIZE_T lpSize
    );
VOID
DeleteProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );
static const int PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 0x00000001;
BOOL
UpdateProcThreadAttribute(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    DWORD dwFlags,
    DWORD_PTR Attribute,
    PVOID lpValue,
    SIZE_T cbSize,
    PVOID lpPreviousValue,
    PSIZE_T lpReturnSize
    );
BOOL
CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
BOOL
CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
static const int CreateProcess = CreateProcessA;
BOOL
SetProcessShutdownParameters(
    DWORD dwLevel,
    DWORD dwFlags
    );
BOOL
GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags
    );
DWORD
GetProcessVersion(
    DWORD ProcessId
    );
VOID
FatalAppExitA(
    UINT uAction,
    LPCSTR lpMessageText
    );
VOID
FatalAppExitW(
    UINT uAction,
    LPCWSTR lpMessageText
    );
static const int FatalAppExit = FatalAppExitA;
VOID
GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo
    );
VOID
GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo
    );
static const int GetStartupInfo = GetStartupInfoA;
LPSTR
GetCommandLineA(
    VOID
    );
LPWSTR
GetCommandLineW(
    VOID
    );
static const int GetCommandLine = GetCommandLineA;
DWORD
GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    DWORD nSize
    );
DWORD
GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    DWORD nSize
    );
static const int GetEnvironmentVariable = GetEnvironmentVariableA;
BOOL
SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue
    );
BOOL
SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue
    );
static const int SetEnvironmentVariable = SetEnvironmentVariableA;
DWORD
ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    DWORD nSize
    );
DWORD
ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    DWORD nSize
    );
static const int ExpandEnvironmentStrings = ExpandEnvironmentStringsA;
DWORD
GetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pBuffer,
    DWORD nSize
    );
DWORD
GetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pBuffer,
    DWORD nSize
    );
static const int GetFirmwareEnvironmentVariable = GetFirmwareEnvironmentVariableA;
BOOL
SetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pValue,
    DWORD nSize
    );
BOOL
SetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pValue,
    DWORD nSize
    );
static const int SetFirmwareEnvironmentVariable = SetFirmwareEnvironmentVariableA;
VOID
OutputDebugStringA(
    LPCSTR lpOutputString
    );
VOID
OutputDebugStringW(
    LPCWSTR lpOutputString
    );
static const int OutputDebugString = OutputDebugStringA;
HRSRC
FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );
HRSRC
FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );
static const int FindResource = FindResourceA;
HRSRC
FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD wLanguage
    );
HRSRC
FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD wLanguage
    );
static const int FindResourceEx = FindResourceExA;
typedef ENUMRESTYPEPROCA;
typedef ENUMRESTYPEPROCW;
typedef ENUMRESTYPEPROCA ENUMRESTYPEPROC;
typedef ENUMRESNAMEPROCA;
typedef ENUMRESNAMEPROCW;
typedef ENUMRESNAMEPROCA ENUMRESNAMEPROC;
typedef ENUMRESLANGPROCA;
typedef ENUMRESLANGPROCW;
typedef ENUMRESLANGPROCA ENUMRESLANGPROC;
BOOL
EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceTypes = EnumResourceTypesA;
BOOL
EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceNames = EnumResourceNamesA;
BOOL
EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceLanguages = EnumResourceLanguagesA;
static const int RESOURCE_ENUM_LN = (0x0001);
static const int RESOURCE_ENUM_MUI = (0x0002);
static const int RESOURCE_ENUM_MUI_SYSTEM = (0x0004);
static const int RESOURCE_ENUM_VALIDATE = (0x0008);
static const int RESOURCE_ENUM_MODULE_EXACT = (0x0010);
BOOL
EnumResourceTypesExA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceTypesExW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceTypesEx = EnumResourceTypesExA;
BOOL
EnumResourceNamesExA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceNamesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceNamesEx = EnumResourceNamesExA;
BOOL
EnumResourceLanguagesExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceLanguagesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceLanguagesEx = EnumResourceLanguagesExA;
HANDLE
BeginUpdateResourceA(
    LPCSTR pFileName,
    BOOL bDeleteExistingResources
    );
HANDLE
BeginUpdateResourceW(
    LPCWSTR pFileName,
    BOOL bDeleteExistingResources
    );
static const int BeginUpdateResource = BeginUpdateResourceA;
BOOL
UpdateResourceA(
    HANDLE hUpdate,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD wLanguage,
    LPVOID lpData,
    DWORD cb
    );
BOOL
UpdateResourceW(
    HANDLE hUpdate,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD wLanguage,
    LPVOID lpData,
    DWORD cb
    );
static const int UpdateResource = UpdateResourceA;
BOOL
EndUpdateResourceA(
    HANDLE hUpdate,
    BOOL fDiscard
    );
BOOL
EndUpdateResourceW(
    HANDLE hUpdate,
    BOOL fDiscard
    );
static const int EndUpdateResource = EndUpdateResourceA;
ATOM
GlobalAddAtomA(
    LPCSTR lpString
    );
ATOM
GlobalAddAtomW(
    LPCWSTR lpString
    );
static const int GlobalAddAtom = GlobalAddAtomA;
ATOM
GlobalFindAtomA(
    LPCSTR lpString
    );
ATOM
GlobalFindAtomW(
    LPCWSTR lpString
    );
static const int GlobalFindAtom = GlobalFindAtomA;
UINT
GlobalGetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
UINT
GlobalGetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );
static const int GlobalGetAtomName = GlobalGetAtomNameA;
ATOM
AddAtomA(
    LPCSTR lpString
    );
ATOM
AddAtomW(
    LPCWSTR lpString
    );
static const int AddAtom = AddAtomA;
ATOM
FindAtomA(
    LPCSTR lpString
    );
ATOM
FindAtomW(
    LPCWSTR lpString
    );
static const int FindAtom = FindAtomA;
UINT
GetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
UINT
GetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );
static const int GetAtomName = GetAtomNameA;
UINT
GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault
    );
UINT
GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault
    );
static const int GetProfileInt = GetProfileIntA;
DWORD
GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize
    );
DWORD
GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize
    );
static const int GetProfileString = GetProfileStringA;
BOOL
WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString
    );
BOOL
WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString
    );
static const int WriteProfileString = WriteProfileStringA;
DWORD
GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize
    );
DWORD
GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize
    );
static const int GetProfileSection = GetProfileSectionA;
BOOL
WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString
    );
BOOL
WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString
    );
static const int WriteProfileSection = WriteProfileSectionA;
UINT
GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault,
    LPCSTR lpFileName
    );
UINT
GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileInt = GetPrivateProfileIntA;
DWORD
GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileString = GetPrivateProfileStringA;
BOOL
WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
BOOL
WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );
static const int WritePrivateProfileString = WritePrivateProfileStringA;
DWORD
GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileSection = GetPrivateProfileSectionA;
BOOL
WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
BOOL
WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );
static const int WritePrivateProfileSection = WritePrivateProfileSectionA;
DWORD
GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileSectionNames = GetPrivateProfileSectionNamesA;
BOOL
GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCSTR szFile
    );
BOOL
GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCWSTR szFile
    );
static const int GetPrivateProfileStruct = GetPrivateProfileStructA;
BOOL
WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCSTR szFile
    );
BOOL
WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCWSTR szFile
    );
static const int WritePrivateProfileStruct = WritePrivateProfileStructA;
UINT
GetDriveTypeA(
    LPCSTR lpRootPathName
    );
UINT
GetDriveTypeW(
    LPCWSTR lpRootPathName
    );
static const int GetDriveType = GetDriveTypeA;
UINT
GetSystemDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemDirectory = GetSystemDirectoryA;
DWORD
GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetTempPath = GetTempPathA;
UINT
GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );
UINT
GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );
static const int GetTempFileName = GetTempFileNameA;
UINT
GetWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetWindowsDirectory = GetWindowsDirectoryA;
UINT
GetSystemWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemWindowsDirectory = GetSystemWindowsDirectoryA;
UINT
GetSystemWow64DirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemWow64DirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemWow64Directory = GetSystemWow64DirectoryA;
BOOLEAN
Wow64EnableWow64FsRedirection (
    BOOLEAN Wow64FsEnableRedirection
    );
BOOL
Wow64DisableWow64FsRedirection (
    PVOID *OldValue
    );
BOOL
Wow64RevertWow64FsRedirection (
    PVOID OlValue
    );
typedef UINT (* PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer, UINT uSize);
typedef UINT (* PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer, UINT uSize);
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = "GetSystemWow64DirectoryA";
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = L"GetSystemWow64DirectoryA";
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = TEXT("GetSystemWow64DirectoryA");
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = "GetSystemWow64DirectoryW";
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = L"GetSystemWow64DirectoryW";
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = TEXT("GetSystemWow64DirectoryW");
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A;
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W;
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T;
BOOL
SetCurrentDirectoryA(
    LPCSTR lpPathName
    );
BOOL
SetCurrentDirectoryW(
    LPCWSTR lpPathName
    );
static const int SetCurrentDirectory = SetCurrentDirectoryA;
DWORD
GetCurrentDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetCurrentDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetCurrentDirectory = GetCurrentDirectoryA;
BOOL
SetDllDirectoryA(
    LPCSTR lpPathName
    );
BOOL
SetDllDirectoryW(
    LPCWSTR lpPathName
    );
static const int SetDllDirectory = SetDllDirectoryA;
DWORD
GetDllDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetDllDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetDllDirectory = GetDllDirectoryA;
static const int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 0x1;
static const int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 0x10000;
static const int BASE_SEARCH_PATH_PERMANENT = 0x8000;
static const int BASE_SEARCH_PATH_INVALID_FLAGS = ~0x18001;
BOOL
SetSearchPathMode (
    DWORD Flags
    );
BOOL
GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
BOOL
GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
static const int GetDiskFreeSpace = GetDiskFreeSpaceA;
BOOL
GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
BOOL
GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
static const int GetDiskFreeSpaceEx = GetDiskFreeSpaceExA;
BOOL
CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateDirectory = CreateDirectoryA;
BOOL
CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateDirectoryEx = CreateDirectoryExA;
BOOL
CreateDirectoryTransactedA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
BOOL
CreateDirectoryTransactedW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
static const int CreateDirectoryTransacted = CreateDirectoryTransactedA;
BOOL
RemoveDirectoryA(
    LPCSTR lpPathName
    );
BOOL
RemoveDirectoryW(
    LPCWSTR lpPathName
    );
static const int RemoveDirectory = RemoveDirectoryA;
BOOL
RemoveDirectoryTransactedA(
    LPCSTR lpPathName,
    HANDLE hTransaction
    );
BOOL
RemoveDirectoryTransactedW(
    LPCWSTR lpPathName,
    HANDLE hTransaction
    );
static const int RemoveDirectoryTransacted = RemoveDirectoryTransactedA;
DWORD
GetFullPathNameA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
DWORD
GetFullPathNameW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );
static const int GetFullPathName = GetFullPathNameA;
DWORD
GetFullPathNameTransactedA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart,
    HANDLE hTransaction
    );
DWORD
GetFullPathNameTransactedW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart,
    HANDLE hTransaction
    );
static const int GetFullPathNameTransacted = GetFullPathNameTransactedA;
static const int DDD_RAW_TARGET_PATH = 0x00000001;
static const int DDD_REMOVE_DEFINITION = 0x00000002;
static const int DDD_EXACT_MATCH_ON_REMOVE = 0x00000004;
static const int DDD_NO_BROADCAST_SYSTEM = 0x00000008;
static const int DDD_LUID_BROADCAST_DRIVE = 0x00000010;
BOOL
DefineDosDeviceA(
    DWORD dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath
    );
BOOL
DefineDosDeviceW(
    DWORD dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath
    );
static const int DefineDosDevice = DefineDosDeviceA;
DWORD
QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    DWORD ucchMax
    );
DWORD
QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    DWORD ucchMax
    );
static const int QueryDosDevice = QueryDosDeviceA;
HANDLE
CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
HANDLE
CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
static const int CreateFile = CreateFileA;
HANDLE
CreateFileTransactedA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter
    );
HANDLE
CreateFileTransactedW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter
    );
static const int CreateFileTransacted = CreateFileTransactedA;
HANDLE
ReOpenFile(
    HANDLE hOriginalFile,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    DWORD dwFlagsAndAttributes
    );
BOOL
SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );
BOOL
SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );
static const int SetFileAttributes = SetFileAttributesA;
DWORD
GetFileAttributesA(
    LPCSTR lpFileName
    );
DWORD
GetFileAttributesW(
    LPCWSTR lpFileName
    );
static const int GetFileAttributes = GetFileAttributesA;
BOOL
SetFileAttributesTransactedA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes,
    HANDLE hTransaction
    );
BOOL
SetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes,
    HANDLE hTransaction
    );
static const int SetFileAttributesTransacted = SetFileAttributesTransactedA;
typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;
BOOL
GetFileAttributesTransactedA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction
    );
BOOL
GetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction
    );
static const int GetFileAttributesTransacted = GetFileAttributesTransactedA;
BOOL
GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
BOOL
GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
static const int GetFileAttributesEx = GetFileAttributesExA;
DWORD
GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
DWORD
GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
static const int GetCompressedFileSize = GetCompressedFileSizeA;
DWORD
GetCompressedFileSizeTransactedA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction
    );
DWORD
GetCompressedFileSizeTransactedW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction
    );
static const int GetCompressedFileSizeTransacted = GetCompressedFileSizeTransactedA;
BOOL
DeleteFileA(
    LPCSTR lpFileName
    );
BOOL
DeleteFileW(
    LPCWSTR lpFileName
    );
static const int DeleteFile = DeleteFileA;
BOOL
DeleteFileTransactedA(
    LPCSTR lpFileName,
    HANDLE hTransaction
    );
BOOL
DeleteFileTransactedW(
    LPCWSTR lpFileName,
    HANDLE hTransaction
    );
static const int DeleteFileTransacted = DeleteFileTransactedA;
BOOL
CheckNameLegalDOS8Dot3A(
    LPCSTR lpName,
    LPSTR lpOemName,
    DWORD OemNameSize,
    PBOOL pbNameContainsSpaces OPTIONAL,
    PBOOL pbNameLegal
    );
BOOL
CheckNameLegalDOS8Dot3W(
    LPCWSTR lpName,
    LPSTR lpOemName,
    DWORD OemNameSize,
    PBOOL pbNameContainsSpaces OPTIONAL,
    PBOOL pbNameLegal
    );
static const int CheckNameLegalDOS8Dot3 = CheckNameLegalDOS8Dot3A;
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
static const int FIND_FIRST_EX_CASE_SENSITIVE = 0x00000001;
static const int FIND_FIRST_EX_LARGE_FETCH = 0x00000002;
HANDLE
FindFirstFileExA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );
HANDLE
FindFirstFileExW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );
static const int FindFirstFileEx = FindFirstFileExA;
HANDLE
FindFirstFileTransactedA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags,
    HANDLE hTransaction
    );
HANDLE
FindFirstFileTransactedW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags,
    HANDLE hTransaction
    );
static const int FindFirstFileTransacted = FindFirstFileTransactedA;
HANDLE
FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );
HANDLE
FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );
static const int FindFirstFile = FindFirstFileA;
BOOL
FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );
BOOL
FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );
static const int FindNextFile = FindNextFileA;
DWORD
SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
DWORD
SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );
static const int SearchPath = SearchPathA;
BOOL
CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );
BOOL
CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );
static const int CopyFile = CopyFileA;
typedef
DWORD
(*LPPROGRESS_ROUTINE)(
    LARGE_INTEGER TotalFileSize,
    LARGE_INTEGER TotalBytesTransferred,
    LARGE_INTEGER StreamSize,
    LARGE_INTEGER StreamBytesTransferred,
    DWORD dwStreamNumber,
    DWORD dwCallbackReason,
    HANDLE hSourceFile,
    HANDLE hDestinationFile,
    LPVOID lpData
    );
BOOL
CopyFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags
    );
BOOL
CopyFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags
    );
static const int CopyFileEx = CopyFileExA;
BOOL
CopyFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags,
    HANDLE hTransaction
    );
BOOL
CopyFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags,
    HANDLE hTransaction
    );
static const int CopyFileTransacted = CopyFileTransactedA;
BOOL
MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );
BOOL
MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );
static const int MoveFile = MoveFileA;
BOOL
MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    DWORD dwFlags
    );
BOOL
MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    DWORD dwFlags
    );
static const int MoveFileEx = MoveFileExA;
BOOL
MoveFileWithProgressA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags
    );
BOOL
MoveFileWithProgressW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags
    );
static const int MoveFileWithProgress = MoveFileWithProgressA;
BOOL
MoveFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOL
MoveFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
static const int MoveFileTransacted = MoveFileTransactedA;
static const int MOVEFILE_REPLACE_EXISTING = 0x00000001;
static const int MOVEFILE_COPY_ALLOWED = 0x00000002;
static const int MOVEFILE_DELAY_UNTIL_REBOOT = 0x00000004;
static const int MOVEFILE_WRITE_THROUGH = 0x00000008;
static const int MOVEFILE_CREATE_HARDLINK = 0x00000010;
static const int MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x00000020;
BOOL
ReplaceFileA(
    LPCSTR lpReplacedFileName,
    LPCSTR lpReplacementFileName,
    LPCSTR lpBackupFileName,
    DWORD dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved
    );
BOOL
ReplaceFileW(
    LPCWSTR lpReplacedFileName,
    LPCWSTR lpReplacementFileName,
    LPCWSTR lpBackupFileName,
    DWORD dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved
    );
static const int ReplaceFile = ReplaceFileA;
BOOL
CreateHardLinkA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateHardLinkW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateHardLink = CreateHardLinkA;
BOOL
CreateHardLinkTransactedA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
BOOL
CreateHardLinkTransactedW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
static const int CreateHardLinkTransacted = CreateHardLinkTransactedA;
typedef enum _STREAM_INFO_LEVELS {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
} STREAM_INFO_LEVELS;
typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ MAX_PATH + 36 ];
} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;
HANDLE
FindFirstStreamW(
    LPCWSTR lpFileName,
    STREAM_INFO_LEVELS InfoLevel,
    LPVOID lpFindStreamData,
    DWORD dwFlags
    );
HANDLE
FindFirstStreamTransactedW (
    LPCWSTR lpFileName,
    STREAM_INFO_LEVELS InfoLevel,
    LPVOID lpFindStreamData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOL
APIENTRY
FindNextStreamW(
    HANDLE hFindStream,
    LPVOID lpFindStreamData
    );
HANDLE
FindFirstFileNameW (
    LPCWSTR lpFileName,
    DWORD dwFlags,
    LPDWORD StringLength,
    PWCHAR LinkName
    );
BOOL
APIENTRY
FindNextFileNameW (
    HANDLE hFindStream,
    LPDWORD StringLength,
    PWCHAR LinkName
    );
HANDLE
FindFirstFileNameTransactedW (
    LPCWSTR lpFileName,
    DWORD dwFlags,
    LPDWORD StringLength,
    PWCHAR LinkName,
    HANDLE hTransaction
    );
HANDLE
CreateNamedPipeA(
    LPCSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
HANDLE
CreateNamedPipeW(
    LPCWSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateNamedPipe = CreateNamedPipeA;
BOOL
GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    DWORD nMaxUserNameSize
    );
BOOL
GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    DWORD nMaxUserNameSize
    );
static const int GetNamedPipeHandleState = GetNamedPipeHandleStateA;
BOOL
CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
BOOL
CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
static const int CallNamedPipe = CallNamedPipeA;
BOOL
WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    DWORD nTimeOut
    );
BOOL
WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    DWORD nTimeOut
    );
static const int WaitNamedPipe = WaitNamedPipeA;
typedef enum {
    PipeAttribute,
    PipeConnectionAttribute,
    PipeHandleAttribute
} PIPE_ATTRIBUTE_TYPE;
BOOL
GetNamedPipeAttribute(
    HANDLE Pipe,
    PIPE_ATTRIBUTE_TYPE AttributeType,
    PSTR AttributeName,
    PVOID AttributeValue,
    PSIZE_T AttributeValueLength
    );
BOOL
SetNamedPipeAttribute(
    HANDLE Pipe,
    PIPE_ATTRIBUTE_TYPE AttributeType,
    PSTR AttributeName,
    PVOID AttributeValue,
    SIZE_T AttributeValueLength
    );
BOOL
GetNamedPipeClientComputerNameA(
    HANDLE Pipe,
    LPSTR ClientComputerName,
    ULONG ClientComputerNameLength
    );
BOOL
GetNamedPipeClientComputerNameW(
    HANDLE Pipe,
    LPWSTR ClientComputerName,
    ULONG ClientComputerNameLength
    );
static const int GetNamedPipeClientComputerName = GetNamedPipeClientComputerNameA;
BOOL
GetNamedPipeClientProcessId(
    HANDLE Pipe,
    PULONG ClientProcessId
    );
BOOL
GetNamedPipeClientSessionId(
    HANDLE Pipe,
    PULONG ClientSessionId
    );
BOOL
GetNamedPipeServerProcessId(
    HANDLE Pipe,
    PULONG ServerProcessId
    );
BOOL
GetNamedPipeServerSessionId(
    HANDLE Pipe,
    PULONG ServerSessionId
    );
BOOL
SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName
    );
BOOL
SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName
    );
static const int SetVolumeLabel = SetVolumeLabelA;
VOID
SetFileApisToOEM( VOID );
VOID
SetFileApisToANSI( VOID );
BOOL
AreFileApisANSI( VOID );
BOOL
GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
BOOL
GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
static const int GetVolumeInformation = GetVolumeInformationA;
BOOL
GetVolumeInformationByHandleW(
    HANDLE hFile,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
BOOL
CancelSynchronousIo(
    HANDLE hThread
    );
BOOL
CancelIoEx(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped
    );
BOOL
CancelIo(
    HANDLE hFile
    );
BOOL
SetFileBandwidthReservation(
    HANDLE hFile,
    DWORD nPeriodMilliseconds,
    DWORD nBytesPerPeriod,
    BOOL bDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests
    );
BOOL
GetFileBandwidthReservation(
    HANDLE hFile,
    LPDWORD lpPeriodMilliseconds,
    LPDWORD lpBytesPerPeriod,
    LPBOOL pDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests
    );
BOOL
ClearEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
BOOL
ClearEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );
static const int ClearEventLog = ClearEventLogA;
BOOL
BackupEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
BOOL
BackupEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );
static const int BackupEventLog = BackupEventLogA;
BOOL
CloseEventLog (
    HANDLE hEventLog
    );
BOOL
DeregisterEventSource (
    HANDLE hEventLog
    );
BOOL
NotifyChangeEventLog(
    HANDLE hEventLog,
    HANDLE hEvent
    );
BOOL
GetNumberOfEventLogRecords (
    HANDLE hEventLog,
    PDWORD NumberOfRecords
    );
BOOL
GetOldestEventLogRecord (
    HANDLE hEventLog,
    PDWORD OldestRecord
    );
HANDLE
OpenEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
HANDLE
OpenEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );
static const int OpenEventLog = OpenEventLogA;
HANDLE
RegisterEventSourceA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
HANDLE
RegisterEventSourceW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );
static const int RegisterEventSource = RegisterEventSourceA;
HANDLE
OpenBackupEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName
    );
HANDLE
OpenBackupEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName
    );
static const int OpenBackupEventLog = OpenBackupEventLogA;
BOOL
ReadEventLogA (
    HANDLE hEventLog,
    DWORD dwReadFlags,
    DWORD dwRecordOffset,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    DWORD *pnBytesRead,
    DWORD *pnMinNumberOfBytesNeeded
    );
BOOL
ReadEventLogW (
    HANDLE hEventLog,
    DWORD dwReadFlags,
    DWORD dwRecordOffset,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    DWORD *pnBytesRead,
    DWORD *pnMinNumberOfBytesNeeded
    );
static const int ReadEventLog = ReadEventLogA;
BOOL
ReportEventA (
    HANDLE hEventLog,
    WORD wType,
    WORD wCategory,
    DWORD dwEventID,
    PSID lpUserSid,
    WORD wNumStrings,
    DWORD dwDataSize,
    LPCSTR *lpStrings,
    LPVOID lpRawData
    );
BOOL
ReportEventW (
    HANDLE hEventLog,
    WORD wType,
    WORD wCategory,
    DWORD dwEventID,
    PSID lpUserSid,
    WORD wNumStrings,
    DWORD dwDataSize,
    LPCWSTR *lpStrings,
    LPVOID lpRawData
    );
static const int ReportEvent = ReportEventA;
static const int EVENTLOG_FULL_INFO = 0;
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;
BOOL
GetEventLogInformation (
    HANDLE hEventLog,
    DWORD dwInfoLevel,
    LPVOID lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
DuplicateToken(
    HANDLE ExistingTokenHandle,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    PHANDLE DuplicateTokenHandle
    );
BOOL
GetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
BOOL
ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    );
BOOL
ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
BOOL
RevertToSelf (
    VOID
    );
BOOL
APIENTRY
SetThreadToken (
    PHANDLE Thread,
    HANDLE Token
    );
BOOL
AccessCheck (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );
BOOL
AccessCheckByType (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );
BOOL
AccessCheckByTypeResultList (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccessList,
    LPDWORD AccessStatusList
    );
BOOL
OpenProcessToken (
    HANDLE ProcessHandle,
    DWORD DesiredAccess,
    PHANDLE TokenHandle
    );
BOOL
OpenThreadToken (
    HANDLE ThreadHandle,
    DWORD DesiredAccess,
    BOOL OpenAsSelf,
    PHANDLE TokenHandle
    );
BOOL
GetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength,
    PDWORD ReturnLength
    );
BOOL
SetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength
    );
BOOL
AdjustTokenPrivileges (
    HANDLE TokenHandle,
    BOOL DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    DWORD BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength
    );
BOOL
AdjustTokenGroups (
    HANDLE TokenHandle,
    BOOL ResetToDefault,
    PTOKEN_GROUPS NewState,
    DWORD BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength
    );
BOOL
PrivilegeCheck (
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult
    );
BOOL
AccessCheckAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmA;
BOOL
AccessCheckByTypeAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmA;
BOOL
AccessCheckByTypeResultListAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeResultListAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmA;
BOOL
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeResultListAndAuditAlarmByHandleW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleA;
BOOL
ObjectOpenAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
BOOL
ObjectOpenAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
static const int ObjectOpenAuditAlarm = ObjectOpenAuditAlarmA;
BOOL
ObjectPrivilegeAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
BOOL
ObjectPrivilegeAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
static const int ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmA;
BOOL
ObjectCloseAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
BOOL
ObjectCloseAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
static const int ObjectCloseAuditAlarm = ObjectCloseAuditAlarmA;
BOOL
ObjectDeleteAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
BOOL
ObjectDeleteAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
static const int ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmA;
BOOL
PrivilegedServiceAuditAlarmA (
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
BOOL
PrivilegedServiceAuditAlarmW (
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
static const int PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmA;
BOOL
IsWellKnownSid (
    PSID pSid,
    WELL_KNOWN_SID_TYPE WellKnownSidType
    );
BOOL
CreateWellKnownSid(
    WELL_KNOWN_SID_TYPE WellKnownSidType,
    PSID DomainSid,
    PSID pSid,
    DWORD *cbSid
    );
BOOL
EqualDomainSid(
    PSID pSid1,
    PSID pSid2,
    BOOL *pfEqual
    );
BOOL
GetWindowsAccountDomainSid(
    PSID pSid,
    PSID pDomainSid,
    DWORD* cbDomainSid
    );
BOOL
IsValidSid (
    PSID pSid
    );
BOOL
EqualSid (
    PSID pSid1,
    PSID pSid2
    );
BOOL
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );
DWORD
GetSidLengthRequired (
    UCHAR nSubAuthorityCount
    );
BOOL
AllocateAndInitializeSid (
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount,
    DWORD nSubAuthority0,
    DWORD nSubAuthority1,
    DWORD nSubAuthority2,
    DWORD nSubAuthority3,
    DWORD nSubAuthority4,
    DWORD nSubAuthority5,
    DWORD nSubAuthority6,
    DWORD nSubAuthority7,
    PSID *pSid
    );
PVOID
FreeSid(
    PSID pSid
    );
BOOL
InitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount
    );
PSID_IDENTIFIER_AUTHORITY
GetSidIdentifierAuthority (
    PSID pSid
    );
PDWORD
GetSidSubAuthority (
    PSID pSid,
    DWORD nSubAuthority
    );
PUCHAR
GetSidSubAuthorityCount (
    PSID pSid
    );
DWORD
GetLengthSid (
    PSID pSid
    );
BOOL
CopySid (
    DWORD nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid
    );
BOOL
AreAllAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );
BOOL
AreAnyAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );
VOID
MapGenericMask (
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
IsValidAcl (
    PACL pAcl
    );
BOOL
InitializeAcl (
    PACL pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
    );
BOOL
GetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );
BOOL
SetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );
BOOL
AddAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwStartingAceIndex,
    LPVOID pAceList,
    DWORD nAceListLength
    );
BOOL
DeleteAce (
    PACL pAcl,
    DWORD dwAceIndex
    );
BOOL
GetAce (
    PACL pAcl,
    DWORD dwAceIndex,
    LPVOID *pAce
    );
BOOL
AddAccessAllowedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAccessAllowedAceEx (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddMandatoryAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD MandatoryPolicy,
    PSID pLabelSid
    );
BOOL
AddConditionalAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    UCHAR AceType,
    DWORD AccessMask,
    PSID pSid,
    PWCHAR ConditionStr,
    DWORD *ReturnLength
    );
BOOL
AddAccessDeniedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAccessDeniedAceEx (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAuditAccessAce(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
AddAuditAccessAceEx(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
AddAccessAllowedObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid
    );
BOOL
AddAccessDeniedObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid
    );
BOOL
AddAuditAccessObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
FindFirstFreeAce (
    PACL pAcl,
    LPVOID *pAce
    );
BOOL
InitializeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD dwRevision
    );
BOOL
IsValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
IsValidRelativeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    ULONG SecurityDescriptorLength,
    SECURITY_INFORMATION RequiredInformation
    );
DWORD
GetSecurityDescriptorLength (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
GetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision
    );
BOOL
SetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
    SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );
BOOL
SetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bDaclPresent,
    PACL pDacl,
    BOOL bDaclDefaulted
    );
BOOL
GetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    PACL *pDacl,
    LPBOOL lpbDaclDefaulted
    );
BOOL
SetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bSaclPresent,
    PACL pSacl,
    BOOL bSaclDefaulted
    );
BOOL
GetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    PACL *pSacl,
    LPBOOL lpbSaclDefaulted
    );
BOOL
SetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    BOOL bOwnerDefaulted
    );
BOOL
GetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pOwner,
    LPBOOL lpbOwnerDefaulted
    );
BOOL
SetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    BOOL bGroupDefaulted
    );
BOOL
GetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pGroup,
    LPBOOL lpbGroupDefaulted
    );
DWORD
SetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl
    );
DWORD
GetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl
    );
BOOL
CreatePrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOL IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
ConvertToAutoInheritPrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
    PSECURITY_DESCRIPTOR *NewSecurityDescriptor,
    GUID *ObjectType,
    BOOLEAN IsDirectoryObject,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
CreatePrivateObjectSecurityEx (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    GUID *ObjectType,
    BOOL IsContainerObject,
    ULONG AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
CreatePrivateObjectSecurityWithMultipleInheritance (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    GUID **ObjectTypes,
    ULONG GuidCount,
    BOOL IsContainerObject,
    ULONG AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
SetPrivateObjectSecurity (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );
BOOL
SetPrivateObjectSecurityEx (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    ULONG AutoInheritFlags,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );
BOOL
GetPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    DWORD DescriptorLength,
    PDWORD ReturnLength
    );
BOOL
DestroyPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );
BOOL
MakeSelfRelativeSD (
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength
    );
BOOL
MakeAbsoluteSD (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize
    );
BOOL
MakeAbsoluteSD2 (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferSize
    );
VOID
QuerySecurityAccessMask(
    SECURITY_INFORMATION SecurityInformation,
    LPDWORD DesiredAccess
    );
VOID
SetSecurityAccessMask(
    SECURITY_INFORMATION SecurityInformation,
    LPDWORD DesiredAccess
    );
BOOL
SetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
SetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
static const int SetFileSecurity = SetFileSecurityA;
BOOL
GetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
BOOL
GetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
static const int GetFileSecurity = GetFileSecurityA;
BOOL
SetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );
HANDLE
FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
HANDLE
FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
static const int FindFirstChangeNotification = FindFirstChangeNotificationA;
BOOL
FindNextChangeNotification(
    HANDLE hChangeHandle
    );
BOOL
FindCloseChangeNotification(
    HANDLE hChangeHandle
    );
BOOL
ReadDirectoryChangesW(
    HANDLE hDirectory,
    LPVOID lpBuffer,
    DWORD nBufferLength,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
VirtualLock(
    LPVOID lpAddress,
    SIZE_T dwSize
    );
BOOL
VirtualUnlock(
    LPVOID lpAddress,
    SIZE_T dwSize
    );
LPVOID
MapViewOfFileEx(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap,
    LPVOID lpBaseAddress
    );
LPVOID
MapViewOfFileExNuma(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap,
    LPVOID lpBaseAddress,
    DWORD nndPreferred
    );
BOOL
SetPriorityClass(
    HANDLE hProcess,
    DWORD dwPriorityClass
    );
DWORD
GetPriorityClass(
    HANDLE hProcess
    );
BOOL
IsBadReadPtr(
    VOID *lp,
    UINT_PTR ucb
    );
BOOL
IsBadWritePtr(
    LPVOID lp,
    UINT_PTR ucb
    );
BOOL
IsBadHugeReadPtr(
    VOID *lp,
    UINT_PTR ucb
    );
BOOL
IsBadHugeWritePtr(
    LPVOID lp,
    UINT_PTR ucb
    );
BOOL
IsBadCodePtr(
    lpfn
    );
BOOL
IsBadStringPtrA(
    LPCSTR lpsz,
    UINT_PTR ucchMax
    );
BOOL
IsBadStringPtrW(
    LPCWSTR lpsz,
    UINT_PTR ucchMax
    );
static const int IsBadStringPtr = IsBadStringPtrA;
BOOL
LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
BOOL
LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountSid = LookupAccountSidA;
BOOL
LookupAccountSidLocalA(
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
BOOL
LookupAccountSidLocalW(
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountSidLocal = LookupAccountSidLocalA;
BOOL
LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
BOOL
LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountName = LookupAccountNameA;
BOOL
LookupAccountNameLocalA(
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
BOOL
LookupAccountNameLocalW(
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountNameLocal = LookupAccountNameLocalA;
BOOL
LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID lpLuid
    );
BOOL
LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID lpLuid
    );
static const int LookupPrivilegeValue = LookupPrivilegeValueA;
BOOL
LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID lpLuid,
    LPSTR lpName,
    LPDWORD cchName
    );
BOOL
LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID lpLuid,
    LPWSTR lpName,
    LPDWORD cchName
    );
static const int LookupPrivilegeName = LookupPrivilegeNameA;
BOOL
LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId
    );
BOOL
LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId
    );
static const int LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameA;
BOOL
AllocateLocallyUniqueId(
    PLUID Luid
    );
BOOL
BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB
    );
BOOL
BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB
    );
static const int BuildCommDCB = BuildCommDCBA;
BOOL
BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
static const int BuildCommDCBAndTimeouts = BuildCommDCBAndTimeoutsA;
BOOL
CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
BOOL
CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
static const int CommConfigDialog = CommConfigDialogA;
BOOL
GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
BOOL
GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
static const int GetDefaultCommConfig = GetDefaultCommConfigA;
BOOL
SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
BOOL
SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
static const int SetDefaultCommConfig = SetDefaultCommConfigA;
static const int MAX_COMPUTERNAME_LENGTH = 15;
BOOL
GetComputerNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
BOOL
GetComputerNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );
static const int GetComputerName = GetComputerNameA;
BOOL
SetComputerNameA (
    LPCSTR lpComputerName
    );
BOOL
SetComputerNameW (
    LPCWSTR lpComputerName
    );
static const int SetComputerName = SetComputerNameA;
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;
BOOL
GetComputerNameExA (
    COMPUTER_NAME_FORMAT NameType,
    LPSTR lpBuffer,
    LPDWORD nSize
    );
BOOL
GetComputerNameExW (
    COMPUTER_NAME_FORMAT NameType,
    LPWSTR lpBuffer,
    LPDWORD nSize
    );
static const int GetComputerNameEx = GetComputerNameExA;
BOOL
SetComputerNameExA (
    COMPUTER_NAME_FORMAT NameType,
    LPCSTR lpBuffer
    );
BOOL
SetComputerNameExW (
    COMPUTER_NAME_FORMAT NameType,
    LPCWSTR lpBuffer
    );
static const int SetComputerNameEx = SetComputerNameExA;
BOOL
DnsHostnameToComputerNameA (
    LPCSTR Hostname,
    LPSTR ComputerName,
    LPDWORD nSize
    );
BOOL
DnsHostnameToComputerNameW (
    LPCWSTR Hostname,
    LPWSTR ComputerName,
    LPDWORD nSize
    );
static const int DnsHostnameToComputerName = DnsHostnameToComputerNameA;
BOOL
GetUserNameA (
    LPSTR lpBuffer,
    LPDWORD pcbBuffer
    );
BOOL
GetUserNameW (
    LPWSTR lpBuffer,
    LPDWORD pcbBuffer
    );
static const int GetUserName = GetUserNameA;
static const int LOGON32_LOGON_INTERACTIVE = 2;
static const int LOGON32_LOGON_NETWORK = 3;
static const int LOGON32_LOGON_BATCH = 4;
static const int LOGON32_LOGON_SERVICE = 5;
static const int LOGON32_LOGON_UNLOCK = 7;
static const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8;
static const int LOGON32_LOGON_NEW_CREDENTIALS = 9;
static const int LOGON32_PROVIDER_DEFAULT = 0;
static const int LOGON32_PROVIDER_WINNT35 = 1;
static const int LOGON32_PROVIDER_WINNT40 = 2;
static const int LOGON32_PROVIDER_WINNT50 = 3;
static const int LOGON32_PROVIDER_VIRTUAL = 4;
BOOL
LogonUserA (
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
BOOL
LogonUserW (
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
static const int LogonUser = LogonUserA;
BOOL
LogonUserExA (
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken,
    PSID *ppLogonSid,
    PVOID *ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits
    );
BOOL
LogonUserExW (
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken,
    PSID *ppLogonSid,
    PVOID *ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits
    );
static const int LogonUserEx = LogonUserExA;
BOOL
ImpersonateLoggedOnUser(
    HANDLE hToken
    );
BOOL
CreateProcessAsUserA (
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
BOOL
CreateProcessAsUserW (
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
static const int CreateProcessAsUser = CreateProcessAsUserA;
static const int LOGON_WITH_PROFILE = 0x00000001;
static const int LOGON_NETCREDENTIALS_ONLY = 0x00000002;
static const int LOGON_ZERO_PASSWORD_BUFFER = 0x80000000;
BOOL
CreateProcessWithLogonW(
    LPCWSTR lpUsername,
    LPCWSTR lpDomain,
    LPCWSTR lpPassword,
    DWORD dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
      );
BOOL
CreateProcessWithTokenW(
    HANDLE hToken,
    DWORD dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
      );
BOOL
APIENTRY
ImpersonateAnonymousToken(
    HANDLE ThreadHandle
    );
BOOL
DuplicateTokenEx(
    HANDLE hExistingToken,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    TOKEN_TYPE TokenType,
    PHANDLE phNewToken);
BOOL
APIENTRY
CreateRestrictedToken(
    HANDLE ExistingTokenHandle,
    DWORD Flags,
    DWORD DisableSidCount,
    PSID_AND_ATTRIBUTES SidsToDisable,
    DWORD DeletePrivilegeCount,
    PLUID_AND_ATTRIBUTES PrivilegesToDelete,
    DWORD RestrictedSidCount,
    PSID_AND_ATTRIBUTES SidsToRestrict,
    PHANDLE NewTokenHandle
    );
BOOL
IsTokenRestricted(
    HANDLE TokenHandle
    );
BOOL
IsTokenUntrusted(
    HANDLE TokenHandle
    );
BOOL
APIENTRY
CheckTokenMembership(
    HANDLE TokenHandle,
    PSID SidToCheck,
    PBOOL IsMember
    );
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK ;
BOOL
RegisterWaitForSingleObject(
    PHANDLE phNewWaitObject,
    HANDLE hObject,
    WAITORTIMERCALLBACK Callback,
    PVOID Context,
    ULONG dwMilliseconds,
    ULONG dwFlags
    );
HANDLE
RegisterWaitForSingleObjectEx(
    HANDLE hObject,
    WAITORTIMERCALLBACK Callback,
    PVOID Context,
    ULONG dwMilliseconds,
    ULONG dwFlags
    );
BOOL
UnregisterWait(
    HANDLE WaitHandle
    );
BOOL
UnregisterWaitEx(
    HANDLE WaitHandle,
    HANDLE CompletionEvent
    );
BOOL
QueueUserWorkItem(
    LPTHREAD_START_ROUTINE Function,
    PVOID Context,
    ULONG Flags
    );
BOOL
BindIoCompletionCallback (
    HANDLE FileHandle,
    LPOVERLAPPED_COMPLETION_ROUTINE Function,
    ULONG Flags
    );
HANDLE
CreateTimerQueue(
    VOID
    );
BOOL
CreateTimerQueueTimer(
    PHANDLE phNewTimer,
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    DWORD DueTime,
    DWORD Period,
    ULONG Flags
    );
BOOL
ChangeTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    ULONG DueTime,
    ULONG Period
    );
BOOL
DeleteTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    HANDLE CompletionEvent
    );
BOOL
DeleteTimerQueueEx(
    HANDLE TimerQueue,
    HANDLE CompletionEvent
    );
HANDLE
SetTimerQueueTimer(
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    DWORD DueTime,
    DWORD Period,
    BOOL PreferIo
    );
BOOL
CancelTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer
    );
BOOL
DeleteTimerQueue(
    HANDLE TimerQueue
    );
typedef VOID (*PTP_WIN32_IO_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PVOID Overlapped,
    ULONG IoResult,
    ULONG_PTR NumberOfBytesTransferred,
    PTP_IO Io
    );
PTP_POOL
CreateThreadpool(
    PVOID reserved
    );
VOID
SetThreadpoolThreadMaximum(
    PTP_POOL ptpp,
    DWORD cthrdMost
    );
BOOL
SetThreadpoolThreadMinimum(
    PTP_POOL ptpp,
    DWORD cthrdMic
    );
BOOL
SetThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi
    );
BOOL
QueryThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi
    );
VOID
CloseThreadpool(
    PTP_POOL ptpp
    );
PTP_CLEANUP_GROUP
CreateThreadpoolCleanupGroup(
    VOID
    );
VOID
CloseThreadpoolCleanupGroupMembers(
    PTP_CLEANUP_GROUP ptpcg,
    BOOL fCancelPendingCallbacks,
    PVOID pvCleanupContext
    );
VOID
CloseThreadpoolCleanupGroup(
    PTP_CLEANUP_GROUP ptpcg
    );
FORCEINLINE
VOID
InitializeThreadpoolEnvironment(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}
FORCEINLINE
VOID
SetThreadpoolCallbackPool(
    PTP_CALLBACK_ENVIRON pcbe,
    PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}
FORCEINLINE
VOID
SetThreadpoolCallbackCleanupGroup(
    PTP_CALLBACK_ENVIRON pcbe,
    PTP_CLEANUP_GROUP ptpcg,
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}
FORCEINLINE
VOID
SetThreadpoolCallbackRunsLong(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}
FORCEINLINE
VOID
SetThreadpoolCallbackLibrary(
    PTP_CALLBACK_ENVIRON pcbe,
    PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}
FORCEINLINE
VOID
SetThreadpoolCallbackPriority(
    PTP_CALLBACK_ENVIRON pcbe,
    TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}
FORCEINLINE
VOID
SetThreadpoolCallbackPersistent(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}
FORCEINLINE
VOID
DestroyThreadpoolEnvironment(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}
VOID
SetEventWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE evt
    );
VOID
ReleaseSemaphoreWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE sem,
    DWORD crel
    );
VOID
ReleaseMutexWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE mut
    );
VOID
LeaveCriticalSectionWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    PCRITICAL_SECTION pcs
    );
VOID
FreeLibraryWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HMODULE mod
    );
BOOL
CallbackMayRunLong(
    PTP_CALLBACK_INSTANCE pci
    );
VOID
DisassociateCurrentThreadFromCallback(
    PTP_CALLBACK_INSTANCE pci
    );
BOOL
TrySubmitThreadpoolCallback(
    PTP_SIMPLE_CALLBACK pfns,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
PTP_WORK
CreateThreadpoolWork(
    PTP_WORK_CALLBACK pfnwk,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
VOID
SubmitThreadpoolWork(
    PTP_WORK pwk
    );
VOID
WaitForThreadpoolWorkCallbacks(
    PTP_WORK pwk,
    BOOL fCancelPendingCallbacks
    );
VOID
CloseThreadpoolWork(
    PTP_WORK pwk
    );
PTP_TIMER
CreateThreadpoolTimer(
    PTP_TIMER_CALLBACK pfnti,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
VOID
SetThreadpoolTimer(
    PTP_TIMER pti,
    PFILETIME pftDueTime,
    DWORD msPeriod,
    DWORD msWindowLength
    );
BOOL
IsThreadpoolTimerSet(
    PTP_TIMER pti
    );
VOID
WaitForThreadpoolTimerCallbacks(
    PTP_TIMER pti,
    BOOL fCancelPendingCallbacks
    );
VOID
CloseThreadpoolTimer(
    PTP_TIMER pti
    );
PTP_WAIT
CreateThreadpoolWait(
    PTP_WAIT_CALLBACK pfnwa,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
VOID
SetThreadpoolWait(
    PTP_WAIT pwa,
    HANDLE h,
    PFILETIME pftTimeout
    );
VOID
WaitForThreadpoolWaitCallbacks(
    PTP_WAIT pwa,
    BOOL fCancelPendingCallbacks
    );
VOID
CloseThreadpoolWait(
    PTP_WAIT pwa
    );
PTP_IO
CreateThreadpoolIo(
    HANDLE fl,
    PTP_WIN32_IO_CALLBACK pfnio,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
VOID
StartThreadpoolIo(
    PTP_IO pio
    );
VOID
CancelThreadpoolIo(
    PTP_IO pio
    );
VOID
WaitForThreadpoolIoCallbacks(
    PTP_IO pio,
    BOOL fCancelPendingCallbacks
    );
VOID
CloseThreadpoolIo(
    PTP_IO pio
    );
HANDLE
CreatePrivateNamespaceA(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix
    );
HANDLE
CreatePrivateNamespaceW(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix
    );
static const int CreatePrivateNamespace = CreatePrivateNamespaceA;
HANDLE
OpenPrivateNamespaceA(
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix
    );
HANDLE
OpenPrivateNamespaceW(
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix
    );
static const int OpenPrivateNamespace = OpenPrivateNamespaceA;
static const int PRIVATE_NAMESPACE_FLAG_DESTROY = 0x00000001;
BOOLEAN
ClosePrivateNamespace(
    HANDLE Handle,
    ULONG Flags
    );
HANDLE
APIENTRY
CreateBoundaryDescriptorA(
    LPCSTR Name,
    ULONG Flags
    );
HANDLE
APIENTRY
CreateBoundaryDescriptorW(
    LPCWSTR Name,
    ULONG Flags
    );
static const int CreateBoundaryDescriptor = CreateBoundaryDescriptorA;
BOOL
AddSIDToBoundaryDescriptor(
    HANDLE * BoundaryDescriptor,
    PSID RequiredSid
    );
BOOL
AddIntegrityLabelToBoundaryDescriptor(
    HANDLE * BoundaryDescriptor,
    PSID IntegrityLabel
    );
VOID
DeleteBoundaryDescriptor(
    HANDLE BoundaryDescriptor
    );
static const int HW_PROFILE_GUIDLEN = 39;
static const int MAX_PROFILE_LEN = 80;
static const int DOCKINFO_UNDOCKED = (0x1);
static const int DOCKINFO_DOCKED = (0x2);
static const int DOCKINFO_USER_SUPPLIED = (0x4);
static const int DOCKINFO_USER_UNDOCKED = (DOCKINFO_USER_SUPPLIED | DOCKINFO_UNDOCKED);
static const int DOCKINFO_USER_DOCKED = (DOCKINFO_USER_SUPPLIED | DOCKINFO_DOCKED);
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
BOOL
GetCurrentHwProfileA (
    LPHW_PROFILE_INFOA lpHwProfileInfo
    );
BOOL
GetCurrentHwProfileW (
    LPHW_PROFILE_INFOW lpHwProfileInfo
    );
static const int GetCurrentHwProfile = GetCurrentHwProfileA;
BOOL
QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );
BOOL
QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );
BOOL
GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
BOOL
GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );
static const int GetVersionEx = GetVersionExA;
BOOL
VerifyVersionInfoA(
    LPOSVERSIONINFOEXA lpVersionInformation,
    DWORD dwTypeMask,
    DWORDLONG dwlConditionMask
    );
BOOL
VerifyVersionInfoW(
    LPOSVERSIONINFOEXW lpVersionInformation,
    DWORD dwTypeMask,
    DWORDLONG dwlConditionMask
    );
static const int VerifyVersionInfo = VerifyVersionInfoA;
BOOL
GetProductInfo(
    DWORD dwOSMajorVersion,
    DWORD dwOSMinorVersion,
    DWORD dwSpMajorVersion,
    DWORD dwSpMinorVersion,
    PDWORD pdwReturnedProductType
    );
static const int FORCEINLINE = ;
static const int _USE_DECLSPECS_FOR_SAL = 0;
static const int _USE_ATTRIBUTES_FOR_SAL = 0;
static const int _In_ = _Pre1_impl_(_$notnull) _Deref_pre2_impl_(_$valid, _$readaccess);
static const int _In_opt_ = _Pre_opt_valid_ _Deref_pre_readonly_;
static const int _In_z_ = _Pre_z_ _Deref_pre_readonly_;
static const int _In_opt_z_ = _Pre_opt_z_ _Deref_pre_readonly_;
static const int _In_count_(size) = _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_count_(size) = _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_bytecount_(size) = _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_count_c_(size) = _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_count_c_(size) = _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_bytecount_c_(size) = _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_z_count_(size) = _Pre_z_ _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_(size) = _Pre_opt_z_ _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_(size) = _Pre_z_ _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_(size) = _Pre_opt_z_ _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_z_count_c_(size) = _Pre_z_ _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_c_(size) = _Pre_opt_z_ _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_c_(size) = _Pre_z_ _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_c_(size) = _Pre_opt_z_ _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_count_x_(size) = _Pre_count_x_(size) _Deref_pre_readonly_;
static const int _In_opt_count_x_(size) = _Pre_opt_count_x_(size) _Deref_pre_readonly_;
static const int _In_bytecount_x_(size) = _Pre_bytecount_x_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Deref_pre_readonly_;
static const int _Out_ = _Pre_cap_c_(1) _Pre_invalid_;
static const int _Out_opt_ = _Pre_opt_cap_c_(1) _Pre_invalid_;
static const int _Out_cap_(size) = _Pre_cap_(size) _Pre_invalid_;
static const int _Out_opt_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_;
static const int _Out_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_;
static const int _Out_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_;
static const int _Out_opt_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_;
static const int _Out_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_;
static const int _Out_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_opt_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_z_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_ptrdiff_cap_(size) = _Pre_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_opt_ptrdiff_cap_(size) = _Pre_opt_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_;
static const int _Out_opt_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_;
static const int _Out_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_;
static const int _Out_z_cap_(size) = _Pre_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_opt_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_opt_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_z_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_opt_z_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_z_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_opt_z_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_opt_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_opt_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_capcount_x_(capcount) = _Pre_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_opt_capcount_x_(capcount) = _Pre_opt_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_bytecapcount_x_(capcount) = _Pre_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_opt_bytecapcount_x_(capcount) = _Pre_opt_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_z_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_opt_z_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_z_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Out_opt_z_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Inout_ = _Prepost_valid_;
static const int _Inout_opt_ = _Prepost_opt_valid_;
static const int _Inout_z_ = _Prepost_z_;
static const int _Inout_opt_z_ = _Prepost_opt_z_;
static const int _Inout_count_(size) = _Prepost_count_(size);
static const int _Inout_opt_count_(size) = _Prepost_opt_count_(size);
static const int _Inout_bytecount_(size) = _Prepost_bytecount_(size);
static const int _Inout_opt_bytecount_(size) = _Prepost_opt_bytecount_(size);
static const int _Inout_count_c_(size) = _Prepost_count_c_(size);
static const int _Inout_opt_count_c_(size) = _Prepost_opt_count_c_(size);
static const int _Inout_bytecount_c_(size) = _Prepost_bytecount_c_(size);
static const int _Inout_opt_bytecount_c_(size) = _Prepost_opt_bytecount_c_(size);
static const int _Inout_z_count_(size) = _Prepost_z_ _Prepost_count_(size);
static const int _Inout_opt_z_count_(size) = _Prepost_z_ _Prepost_opt_count_(size);
static const int _Inout_z_bytecount_(size) = _Prepost_z_ _Prepost_bytecount_(size);
static const int _Inout_opt_z_bytecount_(size) = _Prepost_z_ _Prepost_opt_bytecount_(size);
static const int _Inout_z_count_c_(size) = _Prepost_z_ _Prepost_count_c_(size);
static const int _Inout_opt_z_count_c_(size) = _Prepost_z_ _Prepost_opt_count_c_(size);
static const int _Inout_z_bytecount_c_(size) = _Prepost_z_ _Prepost_bytecount_c_(size);
static const int _Inout_opt_z_bytecount_c_(size) = _Prepost_z_ _Prepost_opt_bytecount_c_(size);
static const int _Inout_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size);
static const int _Inout_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size);
static const int _Inout_count_x_(size) = _Prepost_count_x_(size);
static const int _Inout_opt_count_x_(size) = _Prepost_opt_count_x_(size);
static const int _Inout_bytecount_x_(size) = _Prepost_bytecount_x_(size);
static const int _Inout_opt_bytecount_x_(size) = _Prepost_opt_bytecount_x_(size);
static const int _Inout_cap_(size) = _Pre_valid_cap_(size) _Post_valid_;
static const int _Inout_opt_cap_(size) = _Pre_opt_valid_cap_(size) _Post_valid_;
static const int _Inout_bytecap_(size) = _Pre_valid_bytecap_(size) _Post_valid_;
static const int _Inout_opt_bytecap_(size) = _Pre_opt_valid_bytecap_(size) _Post_valid_;
static const int _Inout_cap_c_(size) = _Pre_valid_cap_c_(size) _Post_valid_;
static const int _Inout_opt_cap_c_(size) = _Pre_opt_valid_cap_c_(size) _Post_valid_;
static const int _Inout_bytecap_c_(size) = _Pre_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_opt_bytecap_c_(size) = _Pre_opt_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_cap_x_(size) = _Pre_valid_cap_x_(size) _Post_valid_;
static const int _Inout_opt_cap_x_(size) = _Pre_opt_valid_cap_x_(size) _Post_valid_;
static const int _Inout_bytecap_x_(size) = _Pre_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_opt_bytecap_x_(size) = _Pre_opt_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_z_cap_(size) = _Pre_z_cap_(size) _Post_z_;
static const int _Inout_opt_z_cap_(size) = _Pre_opt_z_cap_(size) _Post_z_;
static const int _Inout_z_bytecap_(size) = _Pre_z_bytecap_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_(size) = _Pre_opt_z_bytecap_(size) _Post_z_;
static const int _Inout_z_cap_c_(size) = _Pre_z_cap_c_(size) _Post_z_;
static const int _Inout_opt_z_cap_c_(size) = _Pre_opt_z_cap_c_(size) _Post_z_;
static const int _Inout_z_bytecap_c_(size) = _Pre_z_bytecap_c_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_c_(size) = _Pre_opt_z_bytecap_c_(size) _Post_z_;
static const int _Inout_z_cap_x_(size) = _Pre_z_cap_x_(size) _Post_z_;
static const int _Inout_opt_z_cap_x_(size) = _Pre_opt_z_cap_x_(size) _Post_z_;
static const int _Inout_z_bytecap_x_(size) = _Pre_z_bytecap_x_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_x_(size) = _Pre_opt_z_bytecap_x_(size) _Post_z_;
static const int _Ret_ = _Ret_valid_;
static const int _Ret_opt_ = _Ret_opt_valid_;
static const int _Deref_out_ = _Out_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_out_opt_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_opt_out_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_opt_out_opt_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_out_opt_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Deref_opt_out_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_opt_out_opt_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Check_return_ = _Check_return_impl_;
static const int _Printf_format_string_ = _Printf_format_string_impl_;
static const int _Scanf_format_string_ = _Scanf_format_string_impl_;
static const int _Scanf_s_format_string_ = _Scanf_s_format_string_impl_;
static const int _Success_(expr) = _Success_impl_(expr);
static const int _In_bound_ = _In_bound_impl_;
static const int _Out_bound_ = _Out_bound_impl_;
static const int _Ret_bound_ = _Ret_bound_impl_;
static const int _Deref_in_bound_ = _Deref_in_bound_impl_;
static const int _Deref_out_bound_ = _Deref_out_bound_impl_;
static const int _Deref_inout_bound_ = _Deref_in_bound_ _Deref_out_bound_;
static const int _Deref_ret_bound_ = _Deref_ret_bound_impl_;
static const int _In_range_(lb,ub) = _In_range_impl_(lb,ub);
static const int _Out_range_(lb,ub) = _Out_range_impl_(lb,ub);
static const int _Ret_range_(lb,ub) = _Ret_range_impl_(lb,ub);
static const int _Deref_in_range_(lb,ub) = _Deref_in_range_impl_(lb,ub);
static const int _Deref_out_range_(lb,ub) = _Deref_out_range_impl_(lb,ub);
static const int _Deref_ret_range_(lb,ub) = _Deref_ret_range_impl_(lb,ub);
static const int _Pre_z_ = _Pre2_impl_(_$notnull, _$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_ = _Pre2_impl_(_$maybenull,_$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size));
static const int _Pre_opt_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size));
static const int _Pre_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size));
static const int _Pre_opt_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Pre_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size));
static const int _Pre_opt_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Pre_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Pre_opt_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Pre_cap_m_(mult,size) = _Pre2_impl_(_$notnull, _$mult(mult,size));
static const int _Pre_opt_cap_m_(mult,size) = _Pre2_impl_(_$maybenull,_$mult(mult,size));
static const int _Pre_cap_for_(param) = _Pre2_impl_(_$notnull, _$cap_for(param));
static const int _Pre_opt_cap_for_(param) = _Pre2_impl_(_$maybenull,_$cap_for(param));
static const int _Pre_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size));
static const int _Pre_opt_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Pre_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Pre_opt_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Pre_ptrdiff_cap_(ptr) = _Pre2_impl_(_$notnull, _$cap_x(__ptrdiff(ptr)));
static const int _Pre_opt_ptrdiff_cap_(ptr) = _Pre2_impl_(_$maybenull,_$cap_x(__ptrdiff(ptr)));
static const int _Pre_z_cap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_(size) = _Pre2_impl_(_$notnull, _$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_(size) = _Pre2_impl_(_$maybenull,_$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_(size) = _Pre2_impl_(_$notnull, _$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_(size) = _Pre2_impl_(_$maybenull,_$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_c_(size) = _Pre2_impl_(_$notnull, _$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_c_(size) = _Pre2_impl_(_$maybenull,_$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_c_(size) = _Pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_c_(size) = _Pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_x_(size) = _Pre2_impl_(_$notnull, _$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_x_(size) = _Pre2_impl_(_$maybenull,_$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_x_(size) = _Pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_x_(size) = _Pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_ptrdiff_count_(ptr) = _Pre2_impl_(_$notnull, _$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_ptrdiff_count_(ptr) = _Pre2_impl_(_$maybenull,_$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_ = _Pre1_impl_(_$notnull) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_ = _Pre1_impl_(_$maybenull) _Deref_pre1_impl_(_$valid);
static const int _Pre_invalid_ = _Deref_pre1_impl_(_$notvalid);
static const int _Pre_notnull_ = _Pre1_impl_(_$notnull);
static const int _Pre_maybenull_ = _Pre1_impl_(_$maybenull);
static const int _Pre_null_ = _Pre1_impl_(_$null);
static const int _Pre_readonly_ = _Pre1_impl_(_$readaccess);
static const int _Pre_writeonly_ = _Pre1_impl_(_$writeaccess);
static const int _Post_z_ = _Post1_impl_(_$zterm) _Deref_post1_impl_(_$valid);
static const int _Post_maybez_ = _Post1_impl_(_$maybezterm);
static const int _Post_cap_(size) = _Post1_impl_(_$cap(size));
static const int _Post_bytecap_(size) = _Post1_impl_(_$bytecap(size));
static const int _Post_count_(size) = _Post1_impl_(_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_(size) = _Post1_impl_(_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_c_(size) = _Post1_impl_(_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_c_(size) = _Post1_impl_(_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_x_(size) = _Post1_impl_(_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_x_(size) = _Post1_impl_(_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_(size) = _Post2_impl_(_$zterm,_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_(size) = _Post2_impl_(_$zterm,_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_c_(size) = _Post2_impl_(_$zterm,_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_c_(size) = _Post2_impl_(_$zterm,_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_x_(size) = _Post2_impl_(_$zterm,_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_x_(size) = _Post2_impl_(_$zterm,_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_ptr_invalid_ = _Post1_impl_(_$notvalid);
static const int _Post_valid_ = _Deref_post1_impl_(_$valid);
static const int _Post_invalid_ = _Deref_post1_impl_(_$notvalid);
static const int _Post_notnull_ = _Post1_impl_(_$notnull);
static const int _Ret_z_ = _Ret2_impl_(_$notnull, _$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_ = _Ret2_impl_(_$maybenull,_$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_cap_(size) = _Ret2_impl_(_$notnull, _$cap(size));
static const int _Ret_opt_cap_(size) = _Ret2_impl_(_$maybenull,_$cap(size));
static const int _Ret_bytecap_(size) = _Ret2_impl_(_$notnull, _$bytecap(size));
static const int _Ret_opt_bytecap_(size) = _Ret2_impl_(_$maybenull,_$bytecap(size));
static const int _Ret_cap_c_(size) = _Ret2_impl_(_$notnull, _$cap_c(size));
static const int _Ret_opt_cap_c_(size) = _Ret2_impl_(_$maybenull,_$cap_c(size));
static const int _Ret_bytecap_c_(size) = _Ret2_impl_(_$notnull, _$bytecap_c(size));
static const int _Ret_opt_bytecap_c_(size) = _Ret2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Ret_cap_x_(size) = _Ret2_impl_(_$notnull, _$cap_x(size));
static const int _Ret_opt_cap_x_(size) = _Ret2_impl_(_$maybenull,_$cap_x(size));
static const int _Ret_bytecap_x_(size) = _Ret2_impl_(_$notnull, _$bytecap_x(size));
static const int _Ret_opt_bytecap_x_(size) = _Ret2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Ret_z_cap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_cap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_(size) = _Ret2_impl_(_$notnull, _$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_(size) = _Ret2_impl_(_$maybenull,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_(size) = _Ret2_impl_(_$notnull, _$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_(size) = _Ret2_impl_(_$maybenull,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_c_(size) = _Ret2_impl_(_$notnull, _$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_c_(size) = _Ret2_impl_(_$maybenull,_$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_c_(size) = _Ret2_impl_(_$notnull, _$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_c_(size) = _Ret2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_x_(size) = _Ret2_impl_(_$notnull, _$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_x_(size) = _Ret2_impl_(_$maybenull,_$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_x_(size) = _Ret2_impl_(_$notnull, _$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_x_(size) = _Ret2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_count_(size) = _Ret3_impl_(_$notnull, _$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_count_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecount_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecount_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_valid_ = _Ret1_impl_(_$notnull) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_valid_ = _Ret1_impl_(_$maybenull) _Deref_ret1_impl_(_$valid);
static const int _Ret_notnull_ = _Ret1_impl_(_$notnull);
static const int _Ret_maybenull_ = _Ret1_impl_(_$maybenull);
static const int _Ret_null_ = _Ret1_impl_(_$null);
static const int _Deref_pre_z_ = _Deref_pre2_impl_(_$notnull, _$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_ = _Deref_pre2_impl_(_$maybenull,_$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size));
static const int _Deref_pre_opt_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size));
static const int _Deref_pre_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_pre_opt_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_pre_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size));
static const int _Deref_pre_opt_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Deref_pre_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Deref_pre_opt_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Deref_pre_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_pre_opt_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_pre_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_pre_opt_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_pre_z_cap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_(size) = _Deref_pre2_impl_(_$notnull, _$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_(size) = _Deref_pre2_impl_(_$maybenull,_$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_c_(size) = _Deref_pre2_impl_(_$notnull, _$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_c_(size) = _Deref_pre2_impl_(_$maybenull,_$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_x_(size) = _Deref_pre2_impl_(_$notnull, _$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_x_(size) = _Deref_pre2_impl_(_$maybenull,_$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_ = _Deref_pre1_impl_(_$notnull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_ = _Deref_pre1_impl_(_$maybenull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_invalid_ = _Deref2_pre1_impl_(_$notvalid);
static const int _Deref_pre_notnull_ = _Deref_pre1_impl_(_$notnull);
static const int _Deref_pre_maybenull_ = _Deref_pre1_impl_(_$maybenull);
static const int _Deref_pre_null_ = _Deref_pre1_impl_(_$null);
static const int _Deref_pre_readonly_ = _Deref_pre1_impl_(_$readaccess);
static const int _Deref_pre_writeonly_ = _Deref_pre1_impl_(_$writeaccess);
static const int _Deref_post_z_ = _Deref_post2_impl_(_$notnull, _$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_ = _Deref_post2_impl_(_$maybenull,_$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size));
static const int _Deref_post_opt_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size));
static const int _Deref_post_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_post_opt_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_post_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_z(size));
static const int _Deref_post_opt_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_z(size));
static const int _Deref_post_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_z(size));
static const int _Deref_post_opt_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_z(size));
static const int _Deref_post_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_post_opt_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_post_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_post_opt_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_post_z_cap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_(size) = _Deref_post2_impl_(_$notnull, _$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_(size) = _Deref_post2_impl_(_$maybenull,_$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_(size) = _Deref_post2_impl_(_$notnull, _$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_c_(size) = _Deref_post2_impl_(_$notnull, _$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_c_(size) = _Deref_post2_impl_(_$maybenull,_$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_x_(size) = _Deref_post2_impl_(_$notnull, _$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_x_(size) = _Deref_post2_impl_(_$maybenull,_$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_ = _Deref_post1_impl_(_$notnull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_ = _Deref_post1_impl_(_$maybenull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_notnull_ = _Deref_post1_impl_(_$notnull);
static const int _Deref_post_maybenull_ = _Deref_post1_impl_(_$maybenull);
static const int _Deref_post_null_ = _Deref_post1_impl_(_$null);
static const int _Deref_ret_z_ = _Deref_ret2_impl_(_$notnull, _$zterm);
static const int _Deref_ret_opt_z_ = _Deref_ret2_impl_(_$maybenull,_$zterm);
static const int _Deref2_pre_readonly_ = _Deref2_pre1_impl_(_$readaccess);
static const int _Prepost_z_ = _Pre_z_ _Post_z_;
static const int _Prepost_opt_z_ = _Pre_opt_z_ _Post_z_;
static const int _Prepost_count_(size) = _Pre_count_(size) _Post_count_(size);
static const int _Prepost_opt_count_(size) = _Pre_opt_count_(size) _Post_count_(size);
static const int _Prepost_bytecount_(size) = _Pre_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_count_c_(size) = _Pre_count_c_(size) _Post_count_c_(size);
static const int _Prepost_opt_count_c_(size) = _Pre_opt_count_c_(size) _Post_count_c_(size);
static const int _Prepost_bytecount_c_(size) = _Pre_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_count_x_(size) = _Pre_count_x_(size) _Post_count_x_(size);
static const int _Prepost_opt_count_x_(size) = _Pre_opt_count_x_(size) _Post_count_x_(size);
static const int _Prepost_bytecount_x_(size) = _Pre_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_valid_ = _Pre_valid_ _Post_valid_;
static const int _Prepost_opt_valid_ = _Pre_opt_valid_ _Post_valid_;
static const int _Deref_prepost_z_ = _Deref_pre_z_ _Deref_post_z_;
static const int _Deref_prepost_opt_z_ = _Deref_pre_opt_z_ _Deref_post_opt_z_;
static const int _Deref_prepost_cap_(size) = _Deref_pre_cap_(size) _Deref_post_cap_(size);
static const int _Deref_prepost_opt_cap_(size) = _Deref_pre_opt_cap_(size) _Deref_post_opt_cap_(size);
static const int _Deref_prepost_bytecap_(size) = _Deref_pre_bytecap_(size) _Deref_post_bytecap_(size);
static const int _Deref_prepost_opt_bytecap_(size) = _Deref_pre_opt_bytecap_(size) _Deref_post_opt_bytecap_(size);
static const int _Deref_prepost_cap_x_(size) = _Deref_pre_cap_x_(size) _Deref_post_cap_x_(size);
static const int _Deref_prepost_opt_cap_x_(size) = _Deref_pre_opt_cap_x_(size) _Deref_post_opt_cap_x_(size);
static const int _Deref_prepost_bytecap_x_(size) = _Deref_pre_bytecap_x_(size) _Deref_post_bytecap_x_(size);
static const int _Deref_prepost_opt_bytecap_x_(size) = _Deref_pre_opt_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size);
static const int _Deref_prepost_z_cap_(size) = _Deref_pre_z_cap_(size) _Deref_post_z_cap_(size);
static const int _Deref_prepost_opt_z_cap_(size) = _Deref_pre_opt_z_cap_(size) _Deref_post_opt_z_cap_(size);
static const int _Deref_prepost_z_bytecap_(size) = _Deref_pre_z_bytecap_(size) _Deref_post_z_bytecap_(size);
static const int _Deref_prepost_opt_z_bytecap_(size) = _Deref_pre_opt_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size);
static const int _Deref_prepost_valid_cap_(size) = _Deref_pre_valid_cap_(size) _Deref_post_valid_cap_(size);
static const int _Deref_prepost_opt_valid_cap_(size) = _Deref_pre_opt_valid_cap_(size) _Deref_post_opt_valid_cap_(size);
static const int _Deref_prepost_valid_bytecap_(size) = _Deref_pre_valid_bytecap_(size) _Deref_post_valid_bytecap_(size);
static const int _Deref_prepost_opt_valid_bytecap_(size) = _Deref_pre_opt_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size);
static const int _Deref_prepost_valid_cap_x_(size) = _Deref_pre_valid_cap_x_(size) _Deref_post_valid_cap_x_(size);
static const int _Deref_prepost_opt_valid_cap_x_(size) = _Deref_pre_opt_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size);
static const int _Deref_prepost_valid_bytecap_x_(size) = _Deref_pre_valid_bytecap_x_(size) _Deref_post_valid_bytecap_x_(size);
static const int _Deref_prepost_opt_valid_bytecap_x_(size) = _Deref_pre_opt_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size);
static const int _Deref_prepost_count_(size) = _Deref_pre_count_(size) _Deref_post_count_(size);
static const int _Deref_prepost_opt_count_(size) = _Deref_pre_opt_count_(size) _Deref_post_opt_count_(size);
static const int _Deref_prepost_bytecount_(size) = _Deref_pre_bytecount_(size) _Deref_post_bytecount_(size);
static const int _Deref_prepost_opt_bytecount_(size) = _Deref_pre_opt_bytecount_(size) _Deref_post_opt_bytecount_(size);
static const int _Deref_prepost_count_x_(size) = _Deref_pre_count_x_(size) _Deref_post_count_x_(size);
static const int _Deref_prepost_opt_count_x_(size) = _Deref_pre_opt_count_x_(size) _Deref_post_opt_count_x_(size);
static const int _Deref_prepost_bytecount_x_(size) = _Deref_pre_bytecount_x_(size) _Deref_post_bytecount_x_(size);
static const int _Deref_prepost_opt_bytecount_x_(size) = _Deref_pre_opt_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size);
static const int _Deref_prepost_valid_ = _Deref_pre_valid_ _Deref_post_valid_;
static const int _Deref_prepost_opt_valid_ = _Deref_pre_opt_valid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_cap_c_(size) = _Deref_pre_cap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_cap_c_(size) = _Deref_pre_z_cap_c_(size) _Deref_post_z_;
static const int _Deref_out_z_bytecap_c_(size) = _Deref_pre_bytecap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_bytecap_c_(size) = _Deref_pre_z_bytecap_c_(size) _Deref_post_z_;
static const int _Deref_inout_z_ = _Deref_prepost_z_;
static const int _= __notnull __elem_writableTo(size);
static const int _= __notnull __byte_writableTo(size);
static const int = __pre __valid __pre __readonly;
static const int = __pre __elem_readableTo(size);
static const int = __pre __byte_readableTo(size);
static const int __in_z = __pre __nullterminated;
static const int __in_ecount_z(size) = __pre __nullterminated;
static const int __in_bcount_z(size) = __pre __nullterminated;
static const int __in_nz = __in;
static const int __in_ecount_nz(size) = ;
static const int __in_bcount_nz(size) = ;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int = ;
static const int = ;
static const int __out_z = __valid __refparam __nullterminated;
static const int __out_z_opt = __valid __refparam __nullterminated __exceptthat __maybenull;
static const int __out_ecount_z(size) = ___valid __refparam __nullterminated;
static const int __out_bcount_z(size) = ___valid __refparam __nullterminated;
static const int __out_ecount_part_z(size,length) = __nullterminated;
static const int __out_bcount_part_z(size,length) = __nullterminated;
static const int __out_ecount_full_z(size) = __nullterminated;
static const int __out_bcount_full_z(size) = __nullterminated;
static const int __out_nz = __valid __refparam ;
static const int __out_nz_opt = __valid __refparam __exceptthat __maybenull;
static const int __out_ecount_nz(size) = ___valid __refparam;
static const int __out_bcount_nz(size) = ___valid __refparam;
static const int = __pre __valid __valid __refparam;
static const int = __pre __valid;
static const int = __pre __valid;
static const int = __pre __valid __pre __elem_readableTo(length);
static const int = __pre __valid __pre __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = ___exceptthat __maybenull;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __in_z_opt = __pre __nullterminated;
static const int __in_ecount_z_opt(size) = __pre __nullterminated;
static const int __in_bcount_z_opt(size) = __pre __nullterminated;
static const int __in_nz_opt = ;
static const int __in_ecount_nz_opt(size) = ;
static const int __in_bcount_nz_opt(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_ecount_full_opt(size) = __exceptthat __maybenull;
static const int __out_bcount_full_opt(size) = __exceptthat __maybenull;
static const int __out_ecount_z_opt(size) = __nullterminated;
static const int __out_bcount_z_opt(size) = __nullterminated;
static const int __out_ecount_part_z_opt(size,length) = __nullterminated;
static const int __out_bcount_part_z_opt(size,length) = __nullterminated;
static const int __out_ecount_full_z_opt(size) = __out_ecount_full_opt(size) __nullterminated;
static const int __out_bcount_full_z_opt(size) = __out_bcount_full_opt(size) __nullterminated;
static const int __out_ecount_nz_opt(size) = __nullterminated;
static const int __out_bcount_nz_opt(size) = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = ;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int = ___elem_readableTo(1) __notnull __elem_writableTo(size);
static const int = ___elem_readableTo(1) __notnull __byte_writableTo(size);
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __valid __refparam __nullterminated;
static const int _ecount_z(size) = __nullterminated;
static const int _bcount_z(size) = __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __notnull __elem_readableTo(1) __pre __valid __valid __refparam;
static const int _z = __pre __nullterminated __nullterminated;
static const int = __pre __elem_writableTo(size) __elem_writableTo(size);
static const int = __pre __byte_writableTo(size) __byte_writableTo(size);
static const int = __pre __elem_readableTo(length) __elem_readableTo(length);
static const int = __pre __byte_readableTo(length) __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _opt = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __execeptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _z_opt = _opt __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _z = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _ecount_full(size) __exceptthat __maybenull;
static const int = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout = __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout_z = _opt_inout __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz = _opt_inout;
static const int _opt_inout_ecount_nz(size) = _opt_inout;
static const int _opt_inout_bcount_nz(size) = _opt_inout;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = _opt __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __exceptthat __maybenull __pre __exceptthat __maybenull __exceptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt_inout_opt = _opt __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_z_opt = _opt_inout_opt __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz_opt = _opt_inout_opt;
static const int _opt_inout_ecount_nz_opt(size) = _opt_inout;
static const int _opt_inout_bcount_nz_opt(size) = _opt_inout;
static const int = __inner_success(expr);
static const int __nullterminated = __readableTo(sentinel(0));
static const int = __pre __null;
static const int = __inner_checkReturn;
static const int __typefix(ctype) = __inner_typefix(ctype);
static const int __override = __inner_override;
static const int = __inner_callback;
static const int __blocksOn(resource) = __inner_blocksOn(resource);
static const int __control_entrypoint(category) = __inner_control_entrypoint(category);
static const int __data_entrypoint(category) = __inner_data_entrypoint(category);
static const int __fallthrough = __inner_fallthrough;
static const int __SAL_H_FULL_VER = 140050727;
static const int _= __notnull __inexpressible_writableTo(size);
static const int = __pre __inexpressible_readableTo(size);
static const int = ___valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int = ;
static const int = __pre __valid;
static const int = __pre __valid __pre __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_xcount_full_opt(size) = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = ___elem_readableTo(1) __notnull __inexpressible_writableTo(size);
static const int _in = __pre __readonly;
static const int _in= _in __pre __elem_readableTo(size);
static const int _in= _in __pre __byte_readableTo(size);
static const int _in= _in __pre __inexpressible_readableTo(size);
static const int = __valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __valid __refparam;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = ___elem_readableTo(1) __notnull __inexpressible_writableTo(size);
static const int _in = __pre __readonly;
static const int _in= _in __pre __elem_readableTo(size);
static const int _in= _in __pre __byte_readableTo(size);
static const int _in= _in __pre __inexpressible_readableTo(size);
static const int = __valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __valid __refparam;
static const int = __pre __inexpressible_writableTo(size) __inexpressible_writableTo(size);
static const int = __pre __inexpressible_readableTo(length) __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __exceptthat __maybenull;
static const int _in_opt = _in __pre __exceptthat __maybenull;
static const int _in_opt_out = __pre __exceptthat __maybenull __notnull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int _opt_in = _in __exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _xcount_full(size) __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_xcount_full(size) = _xcount_full(size) __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int _opt_in_opt = _in_opt __exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_xcount_full_opt(size) = _xcount_full_opt(size) __exceptthat __maybenull;
static const int = __inexpressible_readableTo("string terminated by two nulls") __nullterminated;
static const int = __inner_checkReturn;
static const int __field= __notnull __elem_writableTo(size);
static const int = __notnull __byte_writableTo(size);
static const int __field= __notnull __inexpressible_writableTo(size);
static const int __field= __maybenull __elem_writableTo(size);
static const int __field= __maybenull __byte_writableTo(size);
static const int __field= __maybenull __inexpressible_writableTo(size);
static const int __field= __notnull __elem_writableTo(size) __elem_readableTo(init);
static const int __field= __notnull __byte_writableTo(size) __byte_readableTo(init);
static const int __field= __notnull __inexpressible_writableTo(size) __inexpressible_readableTo(init);
static const int __field= __maybenull __elem_writableTo(size) __elem_readableTo(init);
static const int __field= __maybenull __byte_writableTo(size) __byte_readableTo(init);
static const int __field= __maybenull __inexpressible_writableTo(size) __inexpressible_readableTo(init);
static const int __field_ecount_full(size) = __field;
static const int __field_bcount_full(size) = __field;
static const int __field_xcount_full(size) = __field;
static const int __field_ecount_full_opt(size) = __field;
static const int __field_bcount_full_opt(size) = __field;
static const int __field_xcount_full_opt(size) = __field;
static const int __field_nullterminated = __nullterminated;
static const int __struct= __byte_writableTo(size);
static const int __struct= __inexpressible_writableTo(size);
static const int __out_awcount(expr,size) = __pre __notnull __byte_writableTo((expr) ? (size) : (size) * 2) __valid __refparam;
static const int __in_awcount(expr,size) = __pre __valid __pre __readonly __byte_readableTo((expr) ? (size) : (size) * 2);
static const int _invalid = ;
static const int __allocator = __inner_allocator;
static const int __deallocate(kind) = __pre __notnull _invalid;
static const int __deallocate_opt(kind) = __pre __maybenull _invalid;
static const int __bound = __inner_bound;
static const int __range(lb,ub) = __inner_range(lb,ub);
static const int __in_bound = __pre __inner_bound;
static const int __out_bound = __inner_bound;
static const int _bound = __inner_bound;
static const int __in_range(lb,ub) = __pre __inner_range(lb,ub);
static const int __out_range(lb,ub) = __inner_range(lb,ub);
static const int _in_range(lb,ub) = __pre __inner_range(lb,ub);
static const int _range(lb,ub) = __inner_range(lb,ub);
static const int _range(lb,ub) = _in_range(lb,ub) _range(lb,ub);
static const int __field_range(lb,ub) = __range(lb,ub);
static const int __field_data_source(src_sym) = __inner_data_source(#src_sym);
static const int __range_max(a,b) = __range(>=,a) __range(>=,b);
static const int __range_min(a,b) = __range(<=,a) __range(<=,b);
static const int __in_data_source(src_sym) = __pre __inner_data_source(#src_sym);
static const int = __inner_data_source(#src_sym);
static const int __out_validated(typ_sym) = __inner_out_validated(#typ_sym);
static const int __this_out_data_source(src_sym) = __inner_this_data_source(#src_sym);
static const int __this_out_validated(typ_sym) = __inner_this_out_validated(#typ_sym);
static const int __transfer(formal) = __inner_transfer(formal);
static const int __rpc_entry = __inner_control_entrypoint(RPC);
static const int __kernel_entry = __inner_control_entrypoint(UserToKernel);
static const int __gdi_entry = __inner_control_entrypoint(GDI);
static const int __encoded_pointer = __inner_encoded;
static const int __encoded_array = __inner_encoded;
static const int __field_encoded_pointer = __inner_encoded;
static const int __field_encoded_array = __inner_encoded;
static const int _volatile = __volatile;
static const int _nonvolatile = __nonvolatile;
static const int __analysis_assume_nullterminated(x) = __inner_analysis_assume_nullterminated(x);
static const int __assume_validated(p) = __inner_assume_validated(p);
static const int __assume_bound(i) = __inner_assume_bound(i);
static const int __SPECSTRINGS_STRICT_LEVEL = 1;
static const int __drv_deref(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int __drv_in(annotes) = __pre __$drv_group( ##__drv_nop(annotes));
static const int __drv_in_deref(annotes) = __pre __$drv_group( ##__drv_nop(annotes));
static const int __drv_out(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int __drv_out_deref(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int static const int __drv_at(expr,annotes) = __drv_declspec("SAL_at(" SPECSTRINGIZE(expr) ")") __$drv_group( ##__drv_nop(annotes));
static const int __drv_fun(annotes) = __drv_at(return, ##__drv_nop(annotes));
static const int __drv_ret(annotes) = __drv_at(return, ##__drv_nop(annotes));
static const int __drv_arg(expr,annotes) = __drv_at(expr, ##__drv_nop(annotes));
static const int __drv_unit(p) = typedef int __$drv_unit_ ##p $GENSYM(__prefast_flag_kernel_driver_mode);;
static const int __$drv_unit_internal_kernel_driver = __drv_declspec("SAL_internal_kernel_driver");
static const int __$drv_unit_kernel_code = __drv_declspec("SAL_kernel") __drv_declspec("SAL_nodriver");
static const int __$drv_unit_kernel_driver = __drv_declspec("SAL_kernel") __drv_declspec("SAL_driver");
static const int __$drv_unit_user_driver = __drv_declspec("SAL_nokernel") __drv_declspec("SAL_driver");
static const int __$drv_unit_user_code = __drv_declspec("SAL_nokernel") __drv_declspec("SAL_nodriver");
static const int __drv_defined(x) = macroDefined$( #x );
static const int __drv_functionClass(x) = __drv_out(__drv_declspec("SAL_functionClass(\""#x"\")"));
static const int __drv_acquiresResource(kind) = __drv_declspec("SAL_acquire(\"" #kind "\")");
static const int __drv_releasesResource(kind) = __drv_declspec("SAL_release(\"" #kind "\")");
static const int __drv_innerAcquiresGlobal(kind,param) = __drv_declspec("SAL_acquireGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_acquiresResourceGlobal(kind,param) = __drv_innerAcquiresGlobal(kind, param);
static const int __drv_innerReleasesGlobal(kind,param) = __drv_declspec("SAL_releaseGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_releasesResourceGlobal(kind,param) = __drv_innerReleasesGlobal(kind, param);
static const int __drv_mustHold(kind) = __pre __drv_declspec("SAL_mustHold(\""#kind"\")");
static const int __drv_innerMustHoldGlobal(kind,param) = __pre __drv_declspec("SAL_mustHoldGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_mustHoldGlobal(kind,param) = __drv_innerMustHoldGlobal(kind, param);
static const int __drv_neverHold(kind) = __pre __drv_declspec("SAL_neverHold(\"" #kind "\")");
static const int __drv_innerNeverHoldGlobal(kind,param) = __pre __drv_declspec("SAL_neverHoldGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_neverHoldGlobal(kind,param) = __drv_innerNeverHoldGlobal(kind, param);
static const int __drv_clearDoInit(yesNo) = __drv_declspec("SAL_clearDoInit(" SPECSTRINGIZE(yesNo) ")");
static const int __drv_IoGetDmaAdapter = __drv_declspec("SAL_IoGetDmaAdapter");
static const int __drv_valueIs(arglist) = __drv_declspec("SAL_return("SPECSTRINGIZE(arglist)")");
static const int __drv_constant = __pre __drv_declspec("SAL_constant(__yes)");
static const int __drv_nonConstant = __pre __drv_declspec("SAL_constant(__no)");
static const int __drv_strictTypeMatch(mode) = __pre __drv_declspec("SAL_strictTypeMatch("SPECSTRINGIZE(mode)")");
static const int __drv_strictType(typename,mode) = __pre __drv_declspec("SAL_strictType("SPECSTRINGIZE(typename)"," SPECSTRINGIZE(mode)")");
static const int __drv_typeConst = 0;
static const int __drv_typeCond = 1;
static const int __drv_typeBitset = 2;
static const int __drv_typeExpr = 3;
static const int __drv_notPointer = __pre __drv_declspec("SAL_mayBePointer(__no)");
static const int __drv_isObjectPointer = __drv_deref(__drv_notPointer);
static const int = __drv_declspec("SAL_IsAliased");
static const int __drv_allocatesMem(kind) = __drv_declspec("SAL_NeedsRelease(__yes)");
static const int = __drv_declspec("SAL_NeedsRelease(__no)");
static const int = __pre __drv_declspec( "SAL_preferredFunction(" SPECSTRINGIZE(func) "," SPECSTRINGIZE(why) ")");
static const int  // ---------------------------------------------------------------------
static const int __drv_floatSaved = __drv_declspec("SAL_floatSaved");
static const int __drv_floatRestored = __drv_declspec("SAL_floatRestored");
static const int __drv_floatUsed = __drv_declspec("SAL_floatUsed");
static const int __drv_interlocked = __pre __drv_declspec("SAL_interlocked");
static const int __drv_inTry = __pre __drv_declspec("SAL_inTry(__yes)");
static const int __drv_notInTry = __pre __drv_declspec("SAL_inTry(__no)");
static const int __drv_formatString(kind) = __drv_declspec("SAL_IsFormatString(\"" #kind "\")");
static const int __drv_dispatchType(kindlist) = __pre __drv_declspec("SAL_dispatchType(" SPECSTRINGIZE(kindlist) ")" );
static const int __drv_dispatchType_other = __drv_dispatchType(-1);
static const int __drv_completionType(kindlist) = __drv_declspec("SAL_completionType(" #kindlist ")" );
static const int __drv_callbackType(kind) = __drv_declspec("SAL_callbackType(" #kind ")" );
static const int FACILITY_XPS = 82;
static const int FACILITY_WINRM = 51;
static const int FACILITY_WINDOWSUPDATE = 36;
static const int FACILITY_WINDOWS_DEFENDER = 80;
static const int FACILITY_WINDOWS_CE = 24;
static const int FACILITY_WINDOWS = 8;
static const int FACILITY_USERMODE_VOLMGR = 56;
static const int FACILITY_USERMODE_VIRTUALIZATION = 55;
static const int FACILITY_USERMODE_VHD = 58;
static const int FACILITY_URT = 19;
static const int FACILITY_UMI = 22;
static const int FACILITY_UI = 42;
static const int FACILITY_TPM_SOFTWARE = 41;
static const int FACILITY_TPM_SERVICES = 40;
static const int FACILITY_SXS = 23;
static const int FACILITY_STORAGE = 3;
static const int FACILITY_STATE_MANAGEMENT = 34;
static const int FACILITY_SSPI = 9;
static const int FACILITY_SCARD = 16;
static const int FACILITY_SHELL = 39;
static const int FACILITY_SETUPAPI = 15;
static const int FACILITY_SECURITY = 9;
static const int FACILITY_SDIAG = 60;
static const int FACILITY_RPC = 1;
static const int FACILITY_RAS = 83;
static const int FACILITY_PLA = 48;
static const int FACILITY_OPC = 81;
static const int FACILITY_WIN32 = 7;
static const int FACILITY_CONTROL = 10;
static const int FACILITY_WEBSERVICES = 61;
static const int FACILITY_NULL = 0;
static const int FACILITY_NDIS = 52;
static const int FACILITY_METADIRECTORY = 35;
static const int FACILITY_MSMQ = 14;
static const int FACILITY_MEDIASERVER = 13;
static const int FACILITY_MBN = 84;
static const int FACILITY_INTERNET = 12;
static const int FACILITY_ITF = 4;
static const int FACILITY_USERMODE_HYPERVISOR = 53;
static const int FACILITY_HTTP = 25;
static const int FACILITY_GRAPHICS = 38;
static const int FACILITY_FWP = 50;
static const int FACILITY_FVE = 49;
static const int FACILITY_USERMODE_FILTER_MANAGER = 31;
static const int FACILITY_DPLAY = 21;
static const int FACILITY_DISPATCH = 2;
static const int FACILITY_DIRECTORYSERVICE = 37;
static const int FACILITY_CONFIGURATION = 33;
static const int FACILITY_COMPLUS = 17;
static const int FACILITY_USERMODE_COMMONLOG = 26;
static const int FACILITY_CMI = 54;
static const int FACILITY_CERT = 11;
static const int FACILITY_BCD = 57;
static const int FACILITY_BACKGROUNDCOPY = 32;
static const int FACILITY_ACS = 20;
static const int FACILITY_AAF = 18;
static const long ERROR_SUCCESS = 0L;
static const long NO_ERROR = 0L;
static const int SEC_E_OK = ((HRESULT)0x00000000L);
static const long ERROR_INVALID_FUNCTION = 1L;
static const long ERROR_FILE_NOT_FOUND = 2L;
static const long ERROR_PATH_NOT_FOUND = 3L;
static const long ERROR_TOO_MANY_OPEN_FILES = 4L;
static const long ERROR_ACCESS_DENIED = 5L;
static const long ERROR_INVALID_HANDLE = 6L;
static const long ERROR_ARENA_TRASHED = 7L;
static const long ERROR_NOT_ENOUGH_MEMORY = 8L;
static const long ERROR_INVALID_BLOCK = 9L;
static const long ERROR_BAD_ENVIRONMENT = 10L;
static const long ERROR_BAD_FORMAT = 11L;
static const long ERROR_INVALID_ACCESS = 12L;
static const long ERROR_INVALID_DATA = 13L;
static const long ERROR_OUTOFMEMORY = 14L;
static const long ERROR_INVALID_DRIVE = 15L;
static const long ERROR_CURRENT_DIRECTORY = 16L;
static const long ERROR_NOT_SAME_DEVICE = 17L;
static const long ERROR_NO_MORE_FILES = 18L;
static const long ERROR_WRITE_PROTECT = 19L;
static const long ERROR_BAD_UNIT = 20L;
static const long ERROR_NOT_READY = 21L;
static const long ERROR_BAD_COMMAND = 22L;
static const long ERROR_CRC = 23L;
static const long ERROR_BAD_LENGTH = 24L;
static const long ERROR_SEEK = 25L;
static const long ERROR_NOT_DOS_DISK = 26L;
static const long ERROR_SECTOR_NOT_FOUND = 27L;
static const long ERROR_OUT_OF_PAPER = 28L;
static const long ERROR_WRITE_FAULT = 29L;
static const long ERROR_READ_FAULT = 30L;
static const long ERROR_GEN_FAILURE = 31L;
static const long ERROR_SHARING_VIOLATION = 32L;
static const long ERROR_LOCK_VIOLATION = 33L;
static const long ERROR_WRONG_DISK = 34L;
static const long ERROR_SHARING_BUFFER_EXCEEDED = 36L;
static const long ERROR_HANDLE_EOF = 38L;
static const long ERROR_HANDLE_DISK_FULL = 39L;
static const long ERROR_NOT_SUPPORTED = 50L;
static const long ERROR_REM_NOT_LIST = 51L;
static const long ERROR_DUP_NAME = 52L;
static const long ERROR_BAD_NETPATH = 53L;
static const long ERROR_NETWORK_BUSY = 54L;
static const long ERROR_DEV_NOT_EXIST = 55L;
static const long ERROR_TOO_MANY_CMDS = 56L;
static const long ERROR_ADAP_HDW_ERR = 57L;
static const long ERROR_BAD_NET_RESP = 58L;
static const long ERROR_UNEXP_NET_ERR = 59L;
static const long ERROR_BAD_REM_ADAP = 60L;
static const long ERROR_PRINTQ_FULL = 61L;
static const long ERROR_NO_SPOOL_SPACE = 62L;
static const long ERROR_PRINT_CANCELLED = 63L;
static const long ERROR_NETNAME_DELETED = 64L;
static const long ERROR_NETWORK_ACCESS_DENIED = 65L;
static const long ERROR_BAD_DEV_TYPE = 66L;
static const long ERROR_BAD_NET_NAME = 67L;
static const long ERROR_TOO_MANY_NAMES = 68L;
static const long ERROR_TOO_MANY_SESS = 69L;
static const long ERROR_SHARING_PAUSED = 70L;
static const long ERROR_REQ_NOT_ACCEP = 71L;
static const long ERROR_REDIR_PAUSED = 72L;
static const long ERROR_FILE_EXISTS = 80L;
static const long ERROR_CANNOT_MAKE = 82L;
static const long ERROR_FAIL_I24 = 83L;
static const long ERROR_OUT_OF_STRUCTURES = 84L;
static const long ERROR_ALREADY_ASSIGNED = 85L;
static const long ERROR_INVALID_PASSWORD = 86L;
static const long ERROR_INVALID_PARAMETER = 87L;
static const long ERROR_NET_WRITE_FAULT = 88L;
static const long ERROR_NO_PROC_SLOTS = 89L;
static const long ERROR_TOO_MANY_SEMAPHORES = 100L;
static const long ERROR_EXCL_SEM_ALREADY_OWNED = 101L;
static const long ERROR_SEM_IS_SET = 102L;
static const long ERROR_TOO_MANY_SEM_REQUESTS = 103L;
static const long ERROR_INVALID_AT_INTERRUPT_TIME = 104L;
static const long ERROR_SEM_OWNER_DIED = 105L;
static const long ERROR_SEM_USER_LIMIT = 106L;
static const long ERROR_DISK_CHANGE = 107L;
static const long ERROR_DRIVE_LOCKED = 108L;
static const long ERROR_BROKEN_PIPE = 109L;
static const long ERROR_OPEN_FAILED = 110L;
static const long ERROR_BUFFER_OVERFLOW = 111L;
static const long ERROR_DISK_FULL = 112L;
static const long ERROR_NO_MORE_SEARCH_HANDLES = 113L;
static const long ERROR_INVALID_TARGET_HANDLE = 114L;
static const long ERROR_INVALID_CATEGORY = 117L;
static const long ERROR_INVALID_VERIFY_SWITCH = 118L;
static const long ERROR_BAD_DRIVER_LEVEL = 119L;
static const long ERROR_CALL_NOT_IMPLEMENTED = 120L;
static const long ERROR_SEM_TIMEOUT = 121L;
static const long ERROR_INSUFFICIENT_BUFFER = 122L;
static const long ERROR_INVALID_NAME = 123L;
static const long ERROR_INVALID_LEVEL = 124L;
static const long ERROR_NO_VOLUME_LABEL = 125L;
static const long ERROR_MOD_NOT_FOUND = 126L;
static const long ERROR_PROC_NOT_FOUND = 127L;
static const long ERROR_WAIT_NO_CHILDREN = 128L;
static const long ERROR_CHILD_NOT_COMPLETE = 129L;
static const long ERROR_DIRECT_ACCESS_HANDLE = 130L;
static const long ERROR_NEGATIVE_SEEK = 131L;
static const long ERROR_SEEK_ON_DEVICE = 132L;
static const long ERROR_IS_JOIN_TARGET = 133L;
static const long ERROR_IS_JOINED = 134L;
static const long ERROR_IS_SUBSTED = 135L;
static const long ERROR_NOT_JOINED = 136L;
static const long ERROR_NOT_SUBSTED = 137L;
static const long ERROR_JOIN_TO_JOIN = 138L;
static const long ERROR_SUBST_TO_SUBST = 139L;
static const long ERROR_JOIN_TO_SUBST = 140L;
static const long ERROR_SUBST_TO_JOIN = 141L;
static const long ERROR_BUSY_DRIVE = 142L;
static const long ERROR_SAME_DRIVE = 143L;
static const long ERROR_DIR_NOT_ROOT = 144L;
static const long ERROR_DIR_NOT_EMPTY = 145L;
static const long ERROR_IS_SUBST_PATH = 146L;
static const long ERROR_IS_JOIN_PATH = 147L;
static const long ERROR_PATH_BUSY = 148L;
static const long ERROR_IS_SUBST_TARGET = 149L;
static const long ERROR_SYSTEM_TRACE = 150L;
static const long ERROR_INVALID_EVENT_COUNT = 151L;
static const long ERROR_TOO_MANY_MUXWAITERS = 152L;
static const long ERROR_INVALID_LIST_FORMAT = 153L;
static const long ERROR_LABEL_TOO_LONG = 154L;
static const long ERROR_TOO_MANY_TCBS = 155L;
static const long ERROR_SIGNAL_REFUSED = 156L;
static const long ERROR_DISCARDED = 157L;
static const long ERROR_NOT_LOCKED = 158L;
static const long ERROR_BAD_THREADID_ADDR = 159L;
static const long ERROR_BAD_ARGUMENTS = 160L;
static const long ERROR_BAD_PATHNAME = 161L;
static const long ERROR_SIGNAL_PENDING = 162L;
static const long ERROR_MAX_THRDS_REACHED = 164L;
static const long ERROR_LOCK_FAILED = 167L;
static const long ERROR_BUSY = 170L;
static const long ERROR_CANCEL_VIOLATION = 173L;
static const long ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174L;
static const long ERROR_INVALID_SEGMENT_NUMBER = 180L;
static const long ERROR_INVALID_ORDINAL = 182L;
static const long ERROR_ALREADY_EXISTS = 183L;
static const long ERROR_INVALID_FLAG_NUMBER = 186L;
static const long ERROR_SEM_NOT_FOUND = 187L;
static const long ERROR_INVALID_STARTING_CODESEG = 188L;
static const long ERROR_INVALID_STACKSEG = 189L;
static const long ERROR_INVALID_MODULETYPE = 190L;
static const long ERROR_INVALID_EXE_SIGNATURE = 191L;
static const long ERROR_EXE_MARKED_INVALID = 192L;
static const long ERROR_BAD_EXE_FORMAT = 193L;
static const long ERROR_ITERATED_DATA_EXCEEDS_64k = 194L;
static const long ERROR_INVALID_MINALLOCSIZE = 195L;
static const long ERROR_DYNLINK_FROM_INVALID_RING = 196L;
static const long ERROR_IOPL_NOT_ENABLED = 197L;
static const long ERROR_INVALID_SEGDPL = 198L;
static const long ERROR_AUTODATASEG_EXCEEDS_64k = 199L;
static const long ERROR_RING2SEG_MUST_BE_MOVABLE = 200L;
static const long ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201L;
static const long ERROR_INFLOOP_IN_RELOC_CHAIN = 202L;
static const long ERROR_ENVVAR_NOT_FOUND = 203L;
static const long ERROR_NO_SIGNAL_SENT = 205L;
static const long ERROR_FILENAME_EXCED_RANGE = 206L;
static const long ERROR_RING2_STACK_IN_USE = 207L;
static const long ERROR_META_EXPANSION_TOO_LONG = 208L;
static const long ERROR_INVALID_SIGNAL_NUMBER = 209L;
static const long ERROR_THREAD_1_INACTIVE = 210L;
static const long ERROR_LOCKED = 212L;
static const long ERROR_TOO_MANY_MODULES = 214L;
static const long ERROR_NESTING_NOT_ALLOWED = 215L;
static const long ERROR_EXE_MACHINE_TYPE_MISMATCH = 216L;
static const long ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217L;
static const long ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218L;
static const long ERROR_FILE_CHECKED_OUT = 220L;
static const long ERROR_CHECKOUT_REQUIRED = 221L;
static const long ERROR_BAD_FILE_TYPE = 222L;
static const long ERROR_FILE_TOO_LARGE = 223L;
static const long ERROR_FORMS_AUTH_REQUIRED = 224L;
static const long ERROR_VIRUS_INFECTED = 225L;
static const long ERROR_VIRUS_DELETED = 226L;
static const long ERROR_PIPE_LOCAL = 229L;
static const long ERROR_BAD_PIPE = 230L;
static const long ERROR_PIPE_BUSY = 231L;
static const long ERROR_NO_DATA = 232L;
static const long ERROR_PIPE_NOT_CONNECTED = 233L;
static const long ERROR_MORE_DATA = 234L;
static const long ERROR_VC_DISCONNECTED = 240L;
static const long ERROR_INVALID_EA_NAME = 254L;
static const long ERROR_EA_LIST_INCONSISTENT = 255L;
static const long WAIT_TIMEOUT = 258L;
static const long ERROR_NO_MORE_ITEMS = 259L;
static const long ERROR_CANNOT_COPY = 266L;
static const long ERROR_DIRECTORY = 267L;
static const long ERROR_EAS_DIDNT_FIT = 275L;
static const long ERROR_EA_FILE_CORRUPT = 276L;
static const long ERROR_EA_TABLE_FULL = 277L;
static const long ERROR_INVALID_EA_HANDLE = 278L;
static const long ERROR_EAS_NOT_SUPPORTED = 282L;
static const long ERROR_NOT_OWNER = 288L;
static const long ERROR_TOO_MANY_POSTS = 298L;
static const long ERROR_PARTIAL_COPY = 299L;
static const long ERROR_OPLOCK_NOT_GRANTED = 300L;
static const long ERROR_INVALID_OPLOCK_PROTOCOL = 301L;
static const long ERROR_DISK_TOO_FRAGMENTED = 302L;
static const long ERROR_DELETE_PENDING = 303L;
static const long ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304L;
static const long ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305L;
static const long ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306L;
static const long ERROR_INVALID_LOCK_RANGE = 307L;
static const long ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308L;
static const long ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309L;
static const long ERROR_MR_MID_NOT_FOUND = 317L;
static const long ERROR_SCOPE_NOT_FOUND = 318L;
static const long ERROR_FAIL_NOACTION_REBOOT = 350L;
static const long ERROR_FAIL_SHUTDOWN = 351L;
static const long ERROR_FAIL_RESTART = 352L;
static const long ERROR_MAX_SESSIONS_REACHED = 353L;
static const long ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400L;
static const long ERROR_THREAD_MODE_NOT_BACKGROUND = 401L;
static const long ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402L;
static const long ERROR_PROCESS_MODE_NOT_BACKGROUND = 403L;
static const long ERROR_INVALID_ADDRESS = 487L;
static const long ERROR_USER_PROFILE_LOAD = 500L;
static const long ERROR_ARITHMETIC_OVERFLOW = 534L;
static const long ERROR_PIPE_CONNECTED = 535L;
static const long ERROR_PIPE_LISTENING = 536L;
static const long ERROR_VERIFIER_STOP = 537L;
static const long ERROR_ABIOS_ERROR = 538L;
static const long ERROR_WX86_WARNING = 539L;
static const long ERROR_WX86_ERROR = 540L;
static const long ERROR_TIMER_NOT_CANCELED = 541L;
static const long ERROR_UNWIND = 542L;
static const long ERROR_BAD_STACK = 543L;
static const long ERROR_INVALID_UNWIND_TARGET = 544L;
static const long ERROR_INVALID_PORT_ATTRIBUTES = 545L;
static const long ERROR_PORT_MESSAGE_TOO_LONG = 546L;
static const long ERROR_INVALID_QUOTA_LOWER = 547L;
static const long ERROR_DEVICE_ALREADY_ATTACHED = 548L;
static const long ERROR_INSTRUCTION_MISALIGNMENT = 549L;
static const long ERROR_PROFILING_NOT_STARTED = 550L;
static const long ERROR_PROFILING_NOT_STOPPED = 551L;
static const long ERROR_COULD_NOT_INTERPRET = 552L;
static const long ERROR_PROFILING_AT_LIMIT = 553L;
static const long ERROR_CANT_WAIT = 554L;
static const long ERROR_CANT_TERMINATE_SELF = 555L;
static const long ERROR_UNEXPECTED_MM_CREATE_ERR = 556L;
static const long ERROR_UNEXPECTED_MM_MAP_ERROR = 557L;
static const long ERROR_UNEXPECTED_MM_EXTEND_ERR = 558L;
static const long ERROR_BAD_FUNCTION_TABLE = 559L;
static const long ERROR_NO_GUID_TRANSLATION = 560L;
static const long ERROR_INVALID_LDT_SIZE = 561L;
static const long ERROR_INVALID_LDT_OFFSET = 563L;
static const long ERROR_INVALID_LDT_DESCRIPTOR = 564L;
static const long ERROR_TOO_MANY_THREADS = 565L;
static const long ERROR_THREAD_NOT_IN_PROCESS = 566L;
static const long ERROR_PAGEFILE_QUOTA_EXCEEDED = 567L;
static const long ERROR_LOGON_SERVER_CONFLICT = 568L;
static const long ERROR_SYNCHRONIZATION_REQUIRED = 569L;
static const long ERROR_NET_OPEN_FAILED = 570L;
static const long ERROR_IO_PRIVILEGE_FAILED = 571L;
static const long ERROR_CONTROL_C_EXIT = 572L;
static const long ERROR_MISSING_SYSTEMFILE = 573L;
static const long ERROR_UNHANDLED_EXCEPTION = 574L;
static const long ERROR_APP_INIT_FAILURE = 575L;
static const long ERROR_PAGEFILE_CREATE_FAILED = 576L;
static const long ERROR_INVALID_IMAGE_HASH = 577L;
static const long ERROR_NO_PAGEFILE = 578L;
static const long ERROR_ILLEGAL_FLOAT_CONTEXT = 579L;
static const long ERROR_NO_EVENT_PAIR = 580L;
static const long ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581L;
static const long ERROR_ILLEGAL_CHARACTER = 582L;
static const long ERROR_UNDEFINED_CHARACTER = 583L;
static const long ERROR_FLOPPY_VOLUME = 584L;
static const long ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585L;
static const long ERROR_BACKUP_CONTROLLER = 586L;
static const long ERROR_MUTANT_LIMIT_EXCEEDED = 587L;
static const long ERROR_FS_DRIVER_REQUIRED = 588L;
static const long ERROR_CANNOT_LOAD_REGISTRY_FILE = 589L;
static const long ERROR_DEBUG_ATTACH_FAILED = 590L;
static const long ERROR_SYSTEM_PROCESS_TERMINATED = 591L;
static const long ERROR_DATA_NOT_ACCEPTED = 592L;
static const long ERROR_VDM_HARD_ERROR = 593L;
static const long ERROR_DRIVER_CANCEL_TIMEOUT = 594L;
static const long ERROR_REPLY_MESSAGE_MISMATCH = 595L;
static const long ERROR_LOST_WRITEBEHIND_DATA = 596L;
static const long ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597L;
static const long ERROR_NOT_TINY_STREAM = 598L;
static const long ERROR_STACK_OVERFLOW_READ = 599L;
static const long ERROR_CONVERT_TO_LARGE = 600L;
static const long ERROR_FOUND_OUT_OF_SCOPE = 601L;
static const long ERROR_ALLOCATE_BUCKET = 602L;
static const long ERROR_MARSHALL_OVERFLOW = 603L;
static const long ERROR_INVALID_VARIANT = 604L;
static const long ERROR_BAD_COMPRESSION_BUFFER = 605L;
static const long ERROR_AUDIT_FAILED = 606L;
static const long ERROR_TIMER_RESOLUTION_NOT_SET = 607L;
static const long ERROR_INSUFFICIENT_LOGON_INFO = 608L;
static const long ERROR_BAD_DLL_ENTRYPOINT = 609L;
static const long ERROR_BAD_SERVICE_ENTRYPOINT = 610L;
static const long ERROR_IP_ADDRESS_CONFLICT1 = 611L;
static const long ERROR_IP_ADDRESS_CONFLICT2 = 612L;
static const long ERROR_REGISTRY_QUOTA_LIMIT = 613L;
static const long ERROR_NO_CALLBACK_ACTIVE = 614L;
static const long ERROR_PWD_TOO_SHORT = 615L;
static const long ERROR_PWD_TOO_RECENT = 616L;
static const long ERROR_PWD_HISTORY_CONFLICT = 617L;
static const long ERROR_UNSUPPORTED_COMPRESSION = 618L;
static const long ERROR_INVALID_HW_PROFILE = 619L;
static const long ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620L;
static const long ERROR_QUOTA_LIST_INCONSISTENT = 621L;
static const long ERROR_EVALUATION_EXPIRATION = 622L;
static const long ERROR_ILLEGAL_DLL_RELOCATION = 623L;
static const long ERROR_DLL_INIT_FAILED_LOGOFF = 624L;
static const long ERROR_VALIDATE_CONTINUE = 625L;
static const long ERROR_NO_MORE_MATCHES = 626L;
static const long ERROR_RANGE_LIST_CONFLICT = 627L;
static const long ERROR_SERVER_SID_MISMATCH = 628L;
static const long ERROR_CANT_ENABLE_DENY_ONLY = 629L;
static const long ERROR_FLOAT_MULTIPLE_FAULTS = 630L;
static const long ERROR_FLOAT_MULTIPLE_TRAPS = 631L;
static const long ERROR_NOINTERFACE = 632L;
static const long ERROR_DRIVER_FAILED_SLEEP = 633L;
static const long ERROR_CORRUPT_SYSTEM_FILE = 634L;
static const long ERROR_COMMITMENT_MINIMUM = 635L;
static const long ERROR_PNP_RESTART_ENUMERATION = 636L;
static const long ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637L;
static const long ERROR_PNP_REBOOT_REQUIRED = 638L;
static const long ERROR_INSUFFICIENT_POWER = 639L;
static const long ERROR_MULTIPLE_FAULT_VIOLATION = 640L;
static const long ERROR_SYSTEM_SHUTDOWN = 641L;
static const long ERROR_PORT_NOT_SET = 642L;
static const long ERROR_DS_VERSION_CHECK_FAILURE = 643L;
static const long ERROR_RANGE_NOT_FOUND = 644L;
static const long ERROR_NOT_SAFE_MODE_DRIVER = 646L;
static const long ERROR_FAILED_DRIVER_ENTRY = 647L;
static const long ERROR_DEVICE_ENUMERATION_ERROR = 648L;
static const long ERROR_MOUNT_POINT_NOT_RESOLVED = 649L;
static const long ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650L;
static const long ERROR_MCA_OCCURED = 651L;
static const long ERROR_DRIVER_DATABASE_ERROR = 652L;
static const long ERROR_SYSTEM_HIVE_TOO_LARGE = 653L;
static const long ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654L;
static const long ERROR_VOLSNAP_PREPARE_HIBERNATE = 655L;
static const long ERROR_HIBERNATION_FAILURE = 656L;
static const long ERROR_FILE_SYSTEM_LIMITATION = 665L;
static const long ERROR_ASSERTION_FAILURE = 668L;
static const long ERROR_ACPI_ERROR = 669L;
static const long ERROR_WOW_ASSERTION = 670L;
static const long ERROR_PNP_BAD_MPS_TABLE = 671L;
static const long ERROR_PNP_TRANSLATION_FAILED = 672L;
static const long ERROR_PNP_IRQ_TRANSLATION_FAILED = 673L;
static const long ERROR_PNP_INVALID_ID = 674L;
static const long ERROR_WAKE_SYSTEM_DEBUGGER = 675L;
static const long ERROR_HANDLES_CLOSED = 676L;
static const long ERROR_EXTRANEOUS_INFORMATION = 677L;
static const long ERROR_RXACT_COMMIT_NECESSARY = 678L;
static const long ERROR_MEDIA_CHECK = 679L;
static const long ERROR_GUID_SUBSTITUTION_MADE = 680L;
static const long ERROR_STOPPED_ON_SYMLINK = 681L;
static const long ERROR_LONGJUMP = 682L;
static const long ERROR_PLUGPLAY_QUERY_VETOED = 683L;
static const long ERROR_UNWIND_CONSOLIDATE = 684L;
static const long ERROR_REGISTRY_HIVE_RECOVERED = 685L;
static const long ERROR_DLL_MIGHT_BE_INSECURE = 686L;
static const long ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687L;
static const long ERROR_DBG_EXCEPTION_NOT_HANDLED = 688L;
static const long ERROR_DBG_REPLY_LATER = 689L;
static const long ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690L;
static const long ERROR_DBG_TERMINATE_THREAD = 691L;
static const long ERROR_DBG_TERMINATE_PROCESS = 692L;
static const long ERROR_DBG_CONTROL_C = 693L;
static const long ERROR_DBG_PRINTEXCEPTION_C = 694L;
static const long ERROR_DBG_RIPEXCEPTION = 695L;
static const long ERROR_DBG_CONTROL_BREAK = 696L;
static const long ERROR_DBG_COMMAND_EXCEPTION = 697L;
static const long ERROR_OBJECT_NAME_EXISTS = 698L;
static const long ERROR_THREAD_WAS_SUSPENDED = 699L;
static const long ERROR_IMAGE_NOT_AT_BASE = 700L;
static const long ERROR_RXACT_STATE_CREATED = 701L;
static const long ERROR_SEGMENT_NOTIFICATION = 702L;
static const long ERROR_BAD_CURRENT_DIRECTORY = 703L;
static const long ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704L;
static const long ERROR_FT_WRITE_RECOVERY = 705L;
static const long ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706L;
static const long ERROR_RECEIVE_PARTIAL = 707L;
static const long ERROR_RECEIVE_EXPEDITED = 708L;
static const long ERROR_RECEIVE_PARTIAL_EXPEDITED = 709L;
static const long ERROR_EVENT_DONE = 710L;
static const long ERROR_EVENT_PENDING = 711L;
static const long ERROR_CHECKING_FILE_SYSTEM = 712L;
static const long ERROR_FATAL_APP_EXIT = 713L;
static const long ERROR_PREDEFINED_HANDLE = 714L;
static const long ERROR_WAS_UNLOCKED = 715L;
static const long ERROR_SERVICE_NOTIFICATION = 716L;
static const long ERROR_WAS_LOCKED = 717L;
static const long ERROR_LOG_HARD_ERROR = 718L;
static const long ERROR_ALREADY_WIN32 = 719L;
static const long ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720L;
static const long ERROR_NO_YIELD_PERFORMED = 721L;
static const long ERROR_TIMER_RESUME_IGNORED = 722L;
static const long ERROR_ARBITRATION_UNHANDLED = 723L;
static const long ERROR_CARDBUS_NOT_SUPPORTED = 724L;
static const long ERROR_MP_PROCESSOR_MISMATCH = 725L;
static const long ERROR_HIBERNATED = 726L;
static const long ERROR_RESUME_HIBERNATION = 727L;
static const long ERROR_FIRMWARE_UPDATED = 728L;
static const long ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729L;
static const long ERROR_WAKE_SYSTEM = 730L;
static const long ERROR_WAIT_1 = 731L;
static const long ERROR_WAIT_2 = 732L;
static const long ERROR_WAIT_3 = 733L;
static const long ERROR_WAIT_63 = 734L;
static const long ERROR_ABANDONED_WAIT_0 = 735L;
static const long ERROR_ABANDONED_WAIT_63 = 736L;
static const long ERROR_USER_APC = 737L;
static const long ERROR_KERNEL_APC = 738L;
static const long ERROR_ALERTED = 739L;
static const long ERROR_ELEVATION_REQUIRED = 740L;
static const long ERROR_REPARSE = 741L;
static const long ERROR_OPLOCK_BREAK_IN_PROGRESS = 742L;
static const long ERROR_VOLUME_MOUNTED = 743L;
static const long ERROR_RXACT_COMMITTED = 744L;
static const long ERROR_NOTIFY_CLEANUP = 745L;
static const long ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746L;
static const long ERROR_PAGE_FAULT_TRANSITION = 747L;
static const long ERROR_PAGE_FAULT_DEMAND_ZERO = 748L;
static const long ERROR_PAGE_FAULT_COPY_ON_WRITE = 749L;
static const long ERROR_PAGE_FAULT_GUARD_PAGE = 750L;
static const long ERROR_PAGE_FAULT_PAGING_FILE = 751L;
static const long ERROR_CACHE_PAGE_LOCKED = 752L;
static const long ERROR_CRASH_DUMP = 753L;
static const long ERROR_BUFFER_ALL_ZEROS = 754L;
static const long ERROR_REPARSE_OBJECT = 755L;
static const long ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756L;
static const long ERROR_TRANSLATION_COMPLETE = 757L;
static const long ERROR_NOTHING_TO_TERMINATE = 758L;
static const long ERROR_PROCESS_NOT_IN_JOB = 759L;
static const long ERROR_PROCESS_IN_JOB = 760L;
static const long ERROR_VOLSNAP_HIBERNATE_READY = 761L;
static const long ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762L;
static const long ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763L;
static const long ERROR_INTERRUPT_STILL_CONNECTED = 764L;
static const long ERROR_WAIT_FOR_OPLOCK = 765L;
static const long ERROR_DBG_EXCEPTION_HANDLED = 766L;
static const long ERROR_DBG_CONTINUE = 767L;
static const long ERROR_CALLBACK_POP_STACK = 768L;
static const long ERROR_COMPRESSION_DISABLED = 769L;
static const long ERROR_CANTFETCHBACKWARDS = 770L;
static const long ERROR_CANTSCROLLBACKWARDS = 771L;
static const long ERROR_ROWSNOTRELEASED = 772L;
static const long ERROR_BAD_ACCESSOR_FLAGS = 773L;
static const long ERROR_ERRORS_ENCOUNTERED = 774L;
static const long ERROR_NOT_CAPABLE = 775L;
static const long ERROR_REQUEST_OUT_OF_SEQUENCE = 776L;
static const long ERROR_VERSION_PARSE_ERROR = 777L;
static const long ERROR_BADSTARTPOSITION = 778L;
static const long ERROR_MEMORY_HARDWARE = 779L;
static const long ERROR_DISK_REPAIR_DISABLED = 780L;
static const long ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781L;
static const long ERROR_SYSTEM_POWERSTATE_TRANSITION = 782L;
static const long ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783L;
static const long ERROR_MCA_EXCEPTION = 784L;
static const long ERROR_ACCESS_AUDIT_BY_POLICY = 785L;
static const long ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786L;
static const long ERROR_ABANDON_HIBERFILE = 787L;
static const long ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788L;
static const long ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789L;
static const long ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790L;
static const long ERROR_BAD_MCFG_TABLE = 791L;
static const long ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800L;
static const long ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801L;
static const long ERROR_CANNOT_BREAK_OPLOCK = 802L;
static const long ERROR_OPLOCK_HANDLE_CLOSED = 803L;
static const long ERROR_NO_ACE_CONDITION = 804L;
static const long ERROR_INVALID_ACE_CONDITION = 805L;
static const long ERROR_EA_ACCESS_DENIED = 994L;
static const long ERROR_OPERATION_ABORTED = 995L;
static const long ERROR_IO_INCOMPLETE = 996L;
static const long ERROR_IO_PENDING = 997L;
static const long ERROR_NOACCESS = 998L;
static const long ERROR_SWAPERROR = 999L;
static const long ERROR_STACK_OVERFLOW = 1001L;
static const long ERROR_INVALID_MESSAGE = 1002L;
static const long ERROR_CAN_NOT_COMPLETE = 1003L;
static const long ERROR_INVALID_FLAGS = 1004L;
static const long ERROR_UNRECOGNIZED_VOLUME = 1005L;
static const long ERROR_FILE_INVALID = 1006L;
static const long ERROR_FULLSCREEN_MODE = 1007L;
static const long ERROR_NO_TOKEN = 1008L;
static const long ERROR_BADDB = 1009L;
static const long ERROR_BADKEY = 1010L;
static const long ERROR_CANTOPEN = 1011L;
static const long ERROR_CANTREAD = 1012L;
static const long ERROR_CANTWRITE = 1013L;
static const long ERROR_REGISTRY_RECOVERED = 1014L;
static const long ERROR_REGISTRY_CORRUPT = 1015L;
static const long ERROR_REGISTRY_IO_FAILED = 1016L;
static const long ERROR_NOT_REGISTRY_FILE = 1017L;
static const long ERROR_KEY_DELETED = 1018L;
static const long ERROR_NO_LOG_SPACE = 1019L;
static const long ERROR_KEY_HAS_CHILDREN = 1020L;
static const long ERROR_CHILD_MUST_BE_VOLATILE = 1021L;
static const long ERROR_NOTIFY_ENUM_DIR = 1022L;
static const long ERROR_DEPENDENT_SERVICES_RUNNING = 1051L;
static const long ERROR_INVALID_SERVICE_CONTROL = 1052L;
static const long ERROR_SERVICE_REQUEST_TIMEOUT = 1053L;
static const long ERROR_SERVICE_NO_THREAD = 1054L;
static const long ERROR_SERVICE_DATABASE_LOCKED = 1055L;
static const long ERROR_SERVICE_ALREADY_RUNNING = 1056L;
static const long ERROR_INVALID_SERVICE_ACCOUNT = 1057L;
static const long ERROR_SERVICE_DISABLED = 1058L;
static const long ERROR_CIRCULAR_DEPENDENCY = 1059L;
static const long ERROR_SERVICE_DOES_NOT_EXIST = 1060L;
static const long ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061L;
static const long ERROR_SERVICE_NOT_ACTIVE = 1062L;
static const long ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063L;
static const long ERROR_EXCEPTION_IN_SERVICE = 1064L;
static const long ERROR_DATABASE_DOES_NOT_EXIST = 1065L;
static const long ERROR_SERVICE_SPECIFIC_ERROR = 1066L;
static const long ERROR_PROCESS_ABORTED = 1067L;
static const long ERROR_SERVICE_DEPENDENCY_FAIL = 1068L;
static const long ERROR_SERVICE_LOGON_FAILED = 1069L;
static const long ERROR_SERVICE_START_HANG = 1070L;
static const long ERROR_INVALID_SERVICE_LOCK = 1071L;
static const long ERROR_SERVICE_MARKED_FOR_DELETE = 1072L;
static const long ERROR_SERVICE_EXISTS = 1073L;
static const long ERROR_ALREADY_RUNNING_LKG = 1074L;
static const long ERROR_SERVICE_DEPENDENCY_DELETED = 1075L;
static const long ERROR_BOOT_ALREADY_ACCEPTED = 1076L;
static const long ERROR_SERVICE_NEVER_STARTED = 1077L;
static const long ERROR_DUPLICATE_SERVICE_NAME = 1078L;
static const long ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079L;
static const long ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080L;
static const long ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081L;
static const long ERROR_NO_RECOVERY_PROGRAM = 1082L;
static const long ERROR_SERVICE_NOT_IN_EXE = 1083L;
static const long ERROR_NOT_SAFEBOOT_SERVICE = 1084L;
static const long ERROR_END_OF_MEDIA = 1100L;
static const long ERROR_FILEMARK_DETECTED = 1101L;
static const long ERROR_BEGINNING_OF_MEDIA = 1102L;
static const long ERROR_SETMARK_DETECTED = 1103L;
static const long ERROR_NO_DATA_DETECTED = 1104L;
static const long ERROR_PARTITION_FAILURE = 1105L;
static const long ERROR_INVALID_BLOCK_LENGTH = 1106L;
static const long ERROR_DEVICE_NOT_PARTITIONED = 1107L;
static const long ERROR_UNABLE_TO_LOCK_MEDIA = 1108L;
static const long ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109L;
static const long ERROR_MEDIA_CHANGED = 1110L;
static const long ERROR_BUS_RESET = 1111L;
static const long ERROR_NO_MEDIA_IN_DRIVE = 1112L;
static const long ERROR_NO_UNICODE_TRANSLATION = 1113L;
static const long ERROR_DLL_INIT_FAILED = 1114L;
static const long ERROR_SHUTDOWN_IN_PROGRESS = 1115L;
static const long ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116L;
static const long ERROR_IO_DEVICE = 1117L;
static const long ERROR_SERIAL_NO_DEVICE = 1118L;
static const long ERROR_IRQ_BUSY = 1119L;
static const long ERROR_MORE_WRITES = 1120L;
static const long ERROR_COUNTER_TIMEOUT = 1121L;
static const long ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122L;
static const long ERROR_FLOPPY_WRONG_CYLINDER = 1123L;
static const long ERROR_FLOPPY_UNKNOWN_ERROR = 1124L;
static const long ERROR_FLOPPY_BAD_REGISTERS = 1125L;
static const long ERROR_DISK_RECALIBRATE_FAILED = 1126L;
static const long ERROR_DISK_OPERATION_FAILED = 1127L;
static const long ERROR_DISK_RESET_FAILED = 1128L;
static const long ERROR_EOM_OVERFLOW = 1129L;
static const long ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130L;
static const long ERROR_POSSIBLE_DEADLOCK = 1131L;
static const long ERROR_MAPPED_ALIGNMENT = 1132L;
static const long ERROR_SET_POWER_STATE_VETOED = 1140L;
static const long ERROR_SET_POWER_STATE_FAILED = 1141L;
static const long ERROR_TOO_MANY_LINKS = 1142L;
static const long ERROR_OLD_WIN_VERSION = 1150L;
static const long ERROR_APP_WRONG_OS = 1151L;
static const long ERROR_SINGLE_INSTANCE_APP = 1152L;
static const long ERROR_RMODE_APP = 1153L;
static const long ERROR_INVALID_DLL = 1154L;
static const long ERROR_NO_ASSOCIATION = 1155L;
static const long ERROR_DDE_FAIL = 1156L;
static const long ERROR_DLL_NOT_FOUND = 1157L;
static const long ERROR_NO_MORE_USER_HANDLES = 1158L;
static const long ERROR_MESSAGE_SYNC_ONLY = 1159L;
static const long ERROR_SOURCE_ELEMENT_EMPTY = 1160L;
static const long ERROR_DESTINATION_ELEMENT_FULL = 1161L;
static const long ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162L;
static const long ERROR_MAGAZINE_NOT_PRESENT = 1163L;
static const long ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164L;
static const long ERROR_DEVICE_REQUIRES_CLEANING = 1165L;
static const long ERROR_DEVICE_DOOR_OPEN = 1166L;
static const long ERROR_DEVICE_NOT_CONNECTED = 1167L;
static const long ERROR_NOT_FOUND = 1168L;
static const long ERROR_NO_MATCH = 1169L;
static const long ERROR_SET_NOT_FOUND = 1170L;
static const long ERROR_POINT_NOT_FOUND = 1171L;
static const long ERROR_NO_TRACKING_SERVICE = 1172L;
static const long ERROR_NO_VOLUME_ID = 1173L;
static const long ERROR_UNABLE_TO_REMOVE_REPLACED = 1175L;
static const long ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176L;
static const long ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177L;
static const long ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178L;
static const long ERROR_JOURNAL_NOT_ACTIVE = 1179L;
static const long ERROR_POTENTIAL_FILE_FOUND = 1180L;
static const long ERROR_JOURNAL_ENTRY_DELETED = 1181L;
static const long ERROR_SHUTDOWN_IS_SCHEDULED = 1190L;
static const long ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191L;
static const long ERROR_BAD_DEVICE = 1200L;
static const long ERROR_CONNECTION_UNAVAIL = 1201L;
static const long ERROR_DEVICE_ALREADY_REMEMBERED = 1202L;
static const long ERROR_NO_NET_OR_BAD_PATH = 1203L;
static const long ERROR_BAD_PROVIDER = 1204L;
static const long ERROR_CANNOT_OPEN_PROFILE = 1205L;
static const long ERROR_BAD_PROFILE = 1206L;
static const long ERROR_NOT_CONTAINER = 1207L;
static const long ERROR_EXTENDED_ERROR = 1208L;
static const long ERROR_INVALID_GROUPNAME = 1209L;
static const long ERROR_INVALID_COMPUTERNAME = 1210L;
static const long ERROR_INVALID_EVENTNAME = 1211L;
static const long ERROR_INVALID_DOMAINNAME = 1212L;
static const long ERROR_INVALID_SERVICENAME = 1213L;
static const long ERROR_INVALID_NETNAME = 1214L;
static const long ERROR_INVALID_SHARENAME = 1215L;
static const long ERROR_INVALID_PASSWORDNAME = 1216L;
static const long ERROR_INVALID_MESSAGENAME = 1217L;
static const long ERROR_INVALID_MESSAGEDEST = 1218L;
static const long ERROR_SESSION_CREDENTIAL_CONFLICT = 1219L;
static const long ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220L;
static const long ERROR_DUP_DOMAINNAME = 1221L;
static const long ERROR_NO_NETWORK = 1222L;
static const long ERROR_CANCELLED = 1223L;
static const long ERROR_USER_MAPPED_FILE = 1224L;
static const long ERROR_CONNECTION_REFUSED = 1225L;
static const long ERROR_GRACEFUL_DISCONNECT = 1226L;
static const long ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227L;
static const long ERROR_ADDRESS_NOT_ASSOCIATED = 1228L;
static const long ERROR_CONNECTION_INVALID = 1229L;
static const long ERROR_CONNECTION_ACTIVE = 1230L;
static const long ERROR_NETWORK_UNREACHABLE = 1231L;
static const long ERROR_HOST_UNREACHABLE = 1232L;
static const long ERROR_PROTOCOL_UNREACHABLE = 1233L;
static const long ERROR_PORT_UNREACHABLE = 1234L;
static const long ERROR_REQUEST_ABORTED = 1235L;
static const long ERROR_CONNECTION_ABORTED = 1236L;
static const long ERROR_RETRY = 1237L;
static const long ERROR_CONNECTION_COUNT_LIMIT = 1238L;
static const long ERROR_LOGIN_TIME_RESTRICTION = 1239L;
static const long ERROR_LOGIN_WKSTA_RESTRICTION = 1240L;
static const long ERROR_INCORRECT_ADDRESS = 1241L;
static const long ERROR_ALREADY_REGISTERED = 1242L;
static const long ERROR_SERVICE_NOT_FOUND = 1243L;
static const long ERROR_NOT_AUTHENTICATED = 1244L;
static const long ERROR_NOT_LOGGED_ON = 1245L;
static const long ERROR_CONTINUE = 1246L;
static const long ERROR_ALREADY_INITIALIZED = 1247L;
static const long ERROR_NO_MORE_DEVICES = 1248L;
static const long ERROR_NO_SUCH_SITE = 1249L;
static const long ERROR_DOMAIN_CONTROLLER_EXISTS = 1250L;
static const long ERROR_ONLY_IF_CONNECTED = 1251L;
static const long ERROR_OVERRIDE_NOCHANGES = 1252L;
static const long ERROR_BAD_USER_PROFILE = 1253L;
static const long ERROR_NOT_SUPPORTED_ON_SBS = 1254L;
static const long ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255L;
static const long ERROR_HOST_DOWN = 1256L;
static const long ERROR_NON_ACCOUNT_SID = 1257L;
static const long ERROR_NON_DOMAIN_SID = 1258L;
static const long ERROR_APPHELP_BLOCK = 1259L;
static const long ERROR_ACCESS_DISABLED_BY_POLICY = 1260L;
static const long ERROR_REG_NAT_CONSUMPTION = 1261L;
static const long ERROR_CSCSHARE_OFFLINE = 1262L;
static const long ERROR_PKINIT_FAILURE = 1263L;
static const long ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264L;
static const long ERROR_DOWNGRADE_DETECTED = 1265L;
static const long ERROR_MACHINE_LOCKED = 1271L;
static const long ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273L;
static const long ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274L;
static const long ERROR_DRIVER_BLOCKED = 1275L;
static const long ERROR_INVALID_IMPORT_OF_NON_DLL = 1276L;
static const long ERROR_ACCESS_DISABLED_WEBBLADE = 1277L;
static const long ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278L;
static const long ERROR_RECOVERY_FAILURE = 1279L;
static const long ERROR_ALREADY_FIBER = 1280L;
static const long ERROR_ALREADY_THREAD = 1281L;
static const long ERROR_STACK_BUFFER_OVERRUN = 1282L;
static const long ERROR_PARAMETER_QUOTA_EXCEEDED = 1283L;
static const long ERROR_DEBUGGER_INACTIVE = 1284L;
static const long ERROR_DELAY_LOAD_FAILED = 1285L;
static const long ERROR_VDM_DISALLOWED = 1286L;
static const long ERROR_UNIDENTIFIED_ERROR = 1287L;
static const long ERROR_INVALID_CRUNTIME_PARAMETER = 1288L;
static const long ERROR_BEYOND_VDL = 1289L;
static const long ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290L;
static const long ERROR_DRIVER_PROCESS_TERMINATED = 1291L;
static const long ERROR_IMPLEMENTATION_LIMIT = 1292L;
static const long ERROR_PROCESS_IS_PROTECTED = 1293L;
static const long ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294L;
static const long ERROR_DISK_QUOTA_EXCEEDED = 1295L;
static const long ERROR_CONTENT_BLOCKED = 1296L;
static const long ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297L;
static const long ERROR_APP_HANG = 1298L;
static const long ERROR_INVALID_LABEL = 1299L;
static const long ERROR_NOT_ALL_ASSIGNED = 1300L;
static const long ERROR_SOME_NOT_MAPPED = 1301L;
static const long ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302L;
static const long ERROR_LOCAL_USER_SESSION_KEY = 1303L;
static const long ERROR_NULL_LM_PASSWORD = 1304L;
static const long ERROR_UNKNOWN_REVISION = 1305L;
static const long ERROR_REVISION_MISMATCH = 1306L;
static const long ERROR_INVALID_OWNER = 1307L;
static const long ERROR_INVALID_PRIMARY_GROUP = 1308L;
static const long ERROR_NO_IMPERSONATION_TOKEN = 1309L;
static const long ERROR_CANT_DISABLE_MANDATORY = 1310L;
static const long ERROR_NO_LOGON_SERVERS = 1311L;
static const long ERROR_NO_SUCH_LOGON_SESSION = 1312L;
static const long ERROR_NO_SUCH_PRIVILEGE = 1313L;
static const long ERROR_PRIVILEGE_NOT_HELD = 1314L;
static const long ERROR_INVALID_ACCOUNT_NAME = 1315L;
static const long ERROR_USER_EXISTS = 1316L;
static const long ERROR_NO_SUCH_USER = 1317L;
static const long ERROR_GROUP_EXISTS = 1318L;
static const long ERROR_NO_SUCH_GROUP = 1319L;
static const long ERROR_MEMBER_IN_GROUP = 1320L;
static const long ERROR_MEMBER_NOT_IN_GROUP = 1321L;
static const long ERROR_LAST_ADMIN = 1322L;
static const long ERROR_WRONG_PASSWORD = 1323L;
static const long ERROR_ILL_FORMED_PASSWORD = 1324L;
static const long ERROR_PASSWORD_RESTRICTION = 1325L;
static const long ERROR_LOGON_FAILURE = 1326L;
static const long ERROR_ACCOUNT_RESTRICTION = 1327L;
static const long ERROR_INVALID_LOGON_HOURS = 1328L;
static const long ERROR_INVALID_WORKSTATION = 1329L;
static const long ERROR_PASSWORD_EXPIRED = 1330L;
static const long ERROR_ACCOUNT_DISABLED = 1331L;
static const long ERROR_NONE_MAPPED = 1332L;
static const long ERROR_TOO_MANY_LUIDS_REQUESTED = 1333L;
static const long ERROR_LUIDS_EXHAUSTED = 1334L;
static const long ERROR_INVALID_SUB_AUTHORITY = 1335L;
static const long ERROR_INVALID_ACL = 1336L;
static const long ERROR_INVALID_SID = 1337L;
static const long ERROR_INVALID_SECURITY_DESCR = 1338L;
static const long ERROR_BAD_INHERITANCE_ACL = 1340L;
static const long ERROR_SERVER_DISABLED = 1341L;
static const long ERROR_SERVER_NOT_DISABLED = 1342L;
static const long ERROR_INVALID_ID_AUTHORITY = 1343L;
static const long ERROR_ALLOTTED_SPACE_EXCEEDED = 1344L;
static const long ERROR_INVALID_GROUP_ATTRIBUTES = 1345L;
static const long ERROR_BAD_IMPERSONATION_LEVEL = 1346L;
static const long ERROR_CANT_OPEN_ANONYMOUS = 1347L;
static const long ERROR_BAD_VALIDATION_CLASS = 1348L;
static const long ERROR_BAD_TOKEN_TYPE = 1349L;
static const long ERROR_NO_SECURITY_ON_OBJECT = 1350L;
static const long ERROR_CANT_ACCESS_DOMAIN_INFO = 1351L;
static const long ERROR_INVALID_SERVER_STATE = 1352L;
static const long ERROR_INVALID_DOMAIN_STATE = 1353L;
static const long ERROR_INVALID_DOMAIN_ROLE = 1354L;
static const long ERROR_NO_SUCH_DOMAIN = 1355L;
static const long ERROR_DOMAIN_EXISTS = 1356L;
static const long ERROR_DOMAIN_LIMIT_EXCEEDED = 1357L;
static const long ERROR_INTERNAL_DB_CORRUPTION = 1358L;
static const long ERROR_INTERNAL_ERROR = 1359L;
static const long ERROR_GENERIC_NOT_MAPPED = 1360L;
static const long ERROR_BAD_DESCRIPTOR_FORMAT = 1361L;
static const long ERROR_NOT_LOGON_PROCESS = 1362L;
static const long ERROR_LOGON_SESSION_EXISTS = 1363L;
static const long ERROR_NO_SUCH_PACKAGE = 1364L;
static const long ERROR_BAD_LOGON_SESSION_STATE = 1365L;
static const long ERROR_LOGON_SESSION_COLLISION = 1366L;
static const long ERROR_INVALID_LOGON_TYPE = 1367L;
static const long ERROR_CANNOT_IMPERSONATE = 1368L;
static const long ERROR_RXACT_INVALID_STATE = 1369L;
static const long ERROR_RXACT_COMMIT_FAILURE = 1370L;
static const long ERROR_SPECIAL_ACCOUNT = 1371L;
static const long ERROR_SPECIAL_GROUP = 1372L;
static const long ERROR_SPECIAL_USER = 1373L;
static const long ERROR_MEMBERS_PRIMARY_GROUP = 1374L;
static const long ERROR_TOKEN_ALREADY_IN_USE = 1375L;
static const long ERROR_NO_SUCH_ALIAS = 1376L;
static const long ERROR_MEMBER_NOT_IN_ALIAS = 1377L;
static const long ERROR_MEMBER_IN_ALIAS = 1378L;
static const long ERROR_ALIAS_EXISTS = 1379L;
static const long ERROR_LOGON_NOT_GRANTED = 1380L;
static const long ERROR_TOO_MANY_SECRETS = 1381L;
static const long ERROR_SECRET_TOO_LONG = 1382L;
static const long ERROR_INTERNAL_DB_ERROR = 1383L;
static const long ERROR_TOO_MANY_CONTEXT_IDS = 1384L;
static const long ERROR_LOGON_TYPE_NOT_GRANTED = 1385L;
static const long ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386L;
static const long ERROR_NO_SUCH_MEMBER = 1387L;
static const long ERROR_INVALID_MEMBER = 1388L;
static const long ERROR_TOO_MANY_SIDS = 1389L;
static const long ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390L;
static const long ERROR_NO_INHERITANCE = 1391L;
static const long ERROR_FILE_CORRUPT = 1392L;
static const long ERROR_DISK_CORRUPT = 1393L;
static const long ERROR_NO_USER_SESSION_KEY = 1394L;
static const long ERROR_LICENSE_QUOTA_EXCEEDED = 1395L;
static const long ERROR_WRONG_TARGET_NAME = 1396L;
static const long ERROR_MUTUAL_AUTH_FAILED = 1397L;
static const long ERROR_TIME_SKEW = 1398L;
static const long ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399L;
static const long ERROR_INVALID_WINDOW_HANDLE = 1400L;
static const long ERROR_INVALID_MENU_HANDLE = 1401L;
static const long ERROR_INVALID_CURSOR_HANDLE = 1402L;
static const long ERROR_INVALID_ACCEL_HANDLE = 1403L;
static const long ERROR_INVALID_HOOK_HANDLE = 1404L;
static const long ERROR_INVALID_DWP_HANDLE = 1405L;
static const long ERROR_TLW_WITH_WSCHILD = 1406L;
static const long ERROR_CANNOT_FIND_WND_CLASS = 1407L;
static const long ERROR_WINDOW_OF_OTHER_THREAD = 1408L;
static const long ERROR_HOTKEY_ALREADY_REGISTERED = 1409L;
static const long ERROR_CLASS_ALREADY_EXISTS = 1410L;
static const long ERROR_CLASS_DOES_NOT_EXIST = 1411L;
static const long ERROR_CLASS_HAS_WINDOWS = 1412L;
static const long ERROR_INVALID_INDEX = 1413L;
static const long ERROR_INVALID_ICON_HANDLE = 1414L;
static const long ERROR_PRIVATE_DIALOG_INDEX = 1415L;
static const long ERROR_LISTBOX_ID_NOT_FOUND = 1416L;
static const long ERROR_NO_WILDCARD_CHARACTERS = 1417L;
static const long ERROR_CLIPBOARD_NOT_OPEN = 1418L;
static const long ERROR_HOTKEY_NOT_REGISTERED = 1419L;
static const long ERROR_WINDOW_NOT_DIALOG = 1420L;
static const long ERROR_CONTROL_ID_NOT_FOUND = 1421L;
static const long ERROR_INVALID_COMBOBOX_MESSAGE = 1422L;
static const long ERROR_WINDOW_NOT_COMBOBOX = 1423L;
static const long ERROR_INVALID_EDIT_HEIGHT = 1424L;
static const long ERROR_DC_NOT_FOUND = 1425L;
static const long ERROR_INVALID_HOOK_FILTER = 1426L;
static const long ERROR_INVALID_FILTER_PROC = 1427L;
static const long ERROR_HOOK_NEEDS_HMOD = 1428L;
static const long ERROR_GLOBAL_ONLY_HOOK = 1429L;
static const long ERROR_JOURNAL_HOOK_SET = 1430L;
static const long ERROR_HOOK_NOT_INSTALLED = 1431L;
static const long ERROR_INVALID_LB_MESSAGE = 1432L;
static const long ERROR_SETCOUNT_ON_BAD_LB = 1433L;
static const long ERROR_LB_WITHOUT_TABSTOPS = 1434L;
static const long ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435L;
static const long ERROR_CHILD_WINDOW_MENU = 1436L;
static const long ERROR_NO_SYSTEM_MENU = 1437L;
static const long ERROR_INVALID_MSGBOX_STYLE = 1438L;
static const long ERROR_INVALID_SPI_VALUE = 1439L;
static const long ERROR_SCREEN_ALREADY_LOCKED = 1440L;
static const long ERROR_HWNDS_HAVE_DIFF_PARENT = 1441L;
static const long ERROR_NOT_CHILD_WINDOW = 1442L;
static const long ERROR_INVALID_GW_COMMAND = 1443L;
static const long ERROR_INVALID_THREAD_ID = 1444L;
static const long ERROR_NON_MDICHILD_WINDOW = 1445L;
static const long ERROR_POPUP_ALREADY_ACTIVE = 1446L;
static const long ERROR_NO_SCROLLBARS = 1447L;
static const long ERROR_INVALID_SCROLLBAR_RANGE = 1448L;
static const long ERROR_INVALID_SHOWWIN_COMMAND = 1449L;
static const long ERROR_NO_SYSTEM_RESOURCES = 1450L;
static const long ERROR_NONPAGED_SYSTEM_RESOURCES = 1451L;
static const long ERROR_PAGED_SYSTEM_RESOURCES = 1452L;
static const long ERROR_WORKING_SET_QUOTA = 1453L;
static const long ERROR_PAGEFILE_QUOTA = 1454L;
static const long ERROR_COMMITMENT_LIMIT = 1455L;
static const long ERROR_MENU_ITEM_NOT_FOUND = 1456L;
static const long ERROR_INVALID_KEYBOARD_HANDLE = 1457L;
static const long ERROR_HOOK_TYPE_NOT_ALLOWED = 1458L;
static const long ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459L;
static const long ERROR_TIMEOUT = 1460L;
static const long ERROR_INVALID_MONITOR_HANDLE = 1461L;
static const long ERROR_INCORRECT_SIZE = 1462L;
static const long ERROR_SYMLINK_CLASS_DISABLED = 1463L;
static const long ERROR_SYMLINK_NOT_SUPPORTED = 1464L;
static const long ERROR_XML_PARSE_ERROR = 1465L;
static const long ERROR_XMLDSIG_ERROR = 1466L;
static const long ERROR_RESTART_APPLICATION = 1467L;
static const long ERROR_WRONG_COMPARTMENT = 1468L;
static const long ERROR_AUTHIP_FAILURE = 1469L;
static const long ERROR_NO_NVRAM_RESOURCES = 1470L;
static const long ERROR_EVENTLOG_FILE_CORRUPT = 1500L;
static const long ERROR_EVENTLOG_CANT_START = 1501L;
static const long ERROR_LOG_FILE_FULL = 1502L;
static const long ERROR_EVENTLOG_FILE_CHANGED = 1503L;
static const long ERROR_INVALID_TASK_NAME = 1550L;
static const long ERROR_INVALID_TASK_INDEX = 1551L;
static const long ERROR_THREAD_ALREADY_IN_TASK = 1552L;
static const long ERROR_INSTALL_SERVICE_FAILURE = 1601L;
static const long ERROR_INSTALL_USEREXIT = 1602L;
static const long ERROR_INSTALL_FAILURE = 1603L;
static const long ERROR_INSTALL_SUSPEND = 1604L;
static const long ERROR_UNKNOWN_PRODUCT = 1605L;
static const long ERROR_UNKNOWN_FEATURE = 1606L;
static const long ERROR_UNKNOWN_COMPONENT = 1607L;
static const long ERROR_UNKNOWN_PROPERTY = 1608L;
static const long ERROR_INVALID_HANDLE_STATE = 1609L;
static const long ERROR_BAD_CONFIGURATION = 1610L;
static const long ERROR_INDEX_ABSENT = 1611L;
static const long ERROR_INSTALL_SOURCE_ABSENT = 1612L;
static const long ERROR_INSTALL_PACKAGE_VERSION = 1613L;
static const long ERROR_PRODUCT_UNINSTALLED = 1614L;
static const long ERROR_BAD_QUERY_SYNTAX = 1615L;
static const long ERROR_INVALID_FIELD = 1616L;
static const long ERROR_DEVICE_REMOVED = 1617L;
static const long ERROR_INSTALL_ALREADY_RUNNING = 1618L;
static const long ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619L;
static const long ERROR_INSTALL_PACKAGE_INVALID = 1620L;
static const long ERROR_INSTALL_UI_FAILURE = 1621L;
static const long ERROR_INSTALL_LOG_FAILURE = 1622L;
static const long ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623L;
static const long ERROR_INSTALL_TRANSFORM_FAILURE = 1624L;
static const long ERROR_INSTALL_PACKAGE_REJECTED = 1625L;
static const long ERROR_FUNCTION_NOT_CALLED = 1626L;
static const long ERROR_FUNCTION_FAILED = 1627L;
static const long ERROR_INVALID_TABLE = 1628L;
static const long ERROR_DATATYPE_MISMATCH = 1629L;
static const long ERROR_UNSUPPORTED_TYPE = 1630L;
static const long ERROR_CREATE_FAILED = 1631L;
static const long ERROR_INSTALL_TEMP_UNWRITABLE = 1632L;
static const long ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633L;
static const long ERROR_INSTALL_NOTUSED = 1634L;
static const long ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635L;
static const long ERROR_PATCH_PACKAGE_INVALID = 1636L;
static const long ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637L;
static const long ERROR_PRODUCT_VERSION = 1638L;
static const long ERROR_INVALID_COMMAND_LINE = 1639L;
static const long ERROR_INSTALL_REMOTE_DISALLOWED = 1640L;
static const long ERROR_SUCCESS_REBOOT_INITIATED = 1641L;
static const long ERROR_PATCH_TARGET_NOT_FOUND = 1642L;
static const long ERROR_PATCH_PACKAGE_REJECTED = 1643L;
static const long ERROR_INSTALL_TRANSFORM_REJECTED = 1644L;
static const long ERROR_INSTALL_REMOTE_PROHIBITED = 1645L;
static const long ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646L;
static const long ERROR_UNKNOWN_PATCH = 1647L;
static const long ERROR_PATCH_NO_SEQUENCE = 1648L;
static const long ERROR_PATCH_REMOVAL_DISALLOWED = 1649L;
static const long ERROR_INVALID_PATCH_XML = 1650L;
static const long ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651L;
static const long ERROR_INSTALL_SERVICE_SAFEBOOT = 1652L;
static const long ERROR_FAIL_FAST_EXCEPTION = 1653L;
static const long RPC_S_INVALID_STRING_BINDING = 1700L;
static const long RPC_S_WRONG_KIND_OF_BINDING = 1701L;
static const long RPC_S_INVALID_BINDING = 1702L;
static const long RPC_S_PROTSEQ_NOT_SUPPORTED = 1703L;
static const long RPC_S_INVALID_RPC_PROTSEQ = 1704L;
static const long RPC_S_INVALID_STRING_UUID = 1705L;
static const long RPC_S_INVALID_ENDPOINT_FORMAT = 1706L;
static const long RPC_S_INVALID_NET_ADDR = 1707L;
static const long RPC_S_NO_ENDPOINT_FOUND = 1708L;
static const long RPC_S_INVALID_TIMEOUT = 1709L;
static const long RPC_S_OBJECT_NOT_FOUND = 1710L;
static const long RPC_S_ALREADY_REGISTERED = 1711L;
static const long RPC_S_TYPE_ALREADY_REGISTERED = 1712L;
static const long RPC_S_ALREADY_LISTENING = 1713L;
static const long RPC_S_NO_PROTSEQS_REGISTERED = 1714L;
static const long RPC_S_NOT_LISTENING = 1715L;
static const long RPC_S_UNKNOWN_MGR_TYPE = 1716L;
static const long RPC_S_UNKNOWN_IF = 1717L;
static const long RPC_S_NO_BINDINGS = 1718L;
static const long RPC_S_NO_PROTSEQS = 1719L;
static const long RPC_S_CANT_CREATE_ENDPOINT = 1720L;
static const long RPC_S_OUT_OF_RESOURCES = 1721L;
static const long RPC_S_SERVER_UNAVAILABLE = 1722L;
static const long RPC_S_SERVER_TOO_BUSY = 1723L;
static const long RPC_S_INVALID_NETWORK_OPTIONS = 1724L;
static const long RPC_S_NO_CALL_ACTIVE = 1725L;
static const long RPC_S_CALL_FAILED = 1726L;
static const long RPC_S_CALL_FAILED_DNE = 1727L;
static const long RPC_S_PROTOCOL_ERROR = 1728L;
static const long RPC_S_PROXY_ACCESS_DENIED = 1729L;
static const long RPC_S_UNSUPPORTED_TRANS_SYN = 1730L;
static const long RPC_S_UNSUPPORTED_TYPE = 1732L;
static const long RPC_S_INVALID_TAG = 1733L;
static const long RPC_S_INVALID_BOUND = 1734L;
static const long RPC_S_NO_ENTRY_NAME = 1735L;
static const long RPC_S_INVALID_NAME_SYNTAX = 1736L;
static const long RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737L;
static const long RPC_S_UUID_NO_ADDRESS = 1739L;
static const long RPC_S_DUPLICATE_ENDPOINT = 1740L;
static const long RPC_S_UNKNOWN_AUTHN_TYPE = 1741L;
static const long RPC_S_MAX_CALLS_TOO_SMALL = 1742L;
static const long RPC_S_STRING_TOO_LONG = 1743L;
static const long RPC_S_PROTSEQ_NOT_FOUND = 1744L;
static const long RPC_S_PROCNUM_OUT_OF_RANGE = 1745L;
static const long RPC_S_BINDING_HAS_NO_AUTH = 1746L;
static const long RPC_S_UNKNOWN_AUTHN_SERVICE = 1747L;
static const long RPC_S_UNKNOWN_AUTHN_LEVEL = 1748L;
static const long RPC_S_INVALID_AUTH_IDENTITY = 1749L;
static const long RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750L;
static const long EPT_S_INVALID_ENTRY = 1751L;
static const long EPT_S_CANT_PERFORM_OP = 1752L;
static const long EPT_S_NOT_REGISTERED = 1753L;
static const long RPC_S_NOTHING_TO_EXPORT = 1754L;
static const long RPC_S_INCOMPLETE_NAME = 1755L;
static const long RPC_S_INVALID_VERS_OPTION = 1756L;
static const long RPC_S_NO_MORE_MEMBERS = 1757L;
static const long RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758L;
static const long RPC_S_INTERFACE_NOT_FOUND = 1759L;
static const long RPC_S_ENTRY_ALREADY_EXISTS = 1760L;
static const long RPC_S_ENTRY_NOT_FOUND = 1761L;
static const long RPC_S_NAME_SERVICE_UNAVAILABLE = 1762L;
static const long RPC_S_INVALID_NAF_ID = 1763L;
static const long RPC_S_CANNOT_SUPPORT = 1764L;
static const long RPC_S_NO_CONTEXT_AVAILABLE = 1765L;
static const long RPC_S_INTERNAL_ERROR = 1766L;
static const long RPC_S_ZERO_DIVIDE = 1767L;
static const long RPC_S_ADDRESS_ERROR = 1768L;
static const long RPC_S_FP_DIV_ZERO = 1769L;
static const long RPC_S_FP_UNDERFLOW = 1770L;
static const long RPC_S_FP_OVERFLOW = 1771L;
static const long RPC_X_NO_MORE_ENTRIES = 1772L;
static const long RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773L;
static const long RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774L;
static const long RPC_X_SS_IN_NULL_CONTEXT = 1775L;
static const long RPC_X_SS_CONTEXT_DAMAGED = 1777L;
static const long RPC_X_SS_HANDLES_MISMATCH = 1778L;
static const long RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779L;
static const long RPC_X_NULL_REF_POINTER = 1780L;
static const long RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781L;
static const long RPC_X_BYTE_COUNT_TOO_SMALL = 1782L;
static const long RPC_X_BAD_STUB_DATA = 1783L;
static const long ERROR_INVALID_USER_BUFFER = 1784L;
static const long ERROR_UNRECOGNIZED_MEDIA = 1785L;
static const long ERROR_NO_TRUST_LSA_SECRET = 1786L;
static const long ERROR_NO_TRUST_SAM_ACCOUNT = 1787L;
static const long ERROR_TRUSTED_DOMAIN_FAILURE = 1788L;
static const long ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789L;
static const long ERROR_TRUST_FAILURE = 1790L;
static const long RPC_S_CALL_IN_PROGRESS = 1791L;
static const long ERROR_NETLOGON_NOT_STARTED = 1792L;
static const long ERROR_ACCOUNT_EXPIRED = 1793L;
static const long ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794L;
static const long ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795L;
static const long ERROR_UNKNOWN_PORT = 1796L;
static const long ERROR_UNKNOWN_PRINTER_DRIVER = 1797L;
static const long ERROR_UNKNOWN_PRINTPROCESSOR = 1798L;
static const long ERROR_INVALID_SEPARATOR_FILE = 1799L;
static const long ERROR_INVALID_PRIORITY = 1800L;
static const long ERROR_INVALID_PRINTER_NAME = 1801L;
static const long ERROR_PRINTER_ALREADY_EXISTS = 1802L;
static const long ERROR_INVALID_PRINTER_COMMAND = 1803L;
static const long ERROR_INVALID_DATATYPE = 1804L;
static const long ERROR_INVALID_ENVIRONMENT = 1805L;
static const long RPC_S_NO_MORE_BINDINGS = 1806L;
static const long ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807L;
static const long ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808L;
static const long ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809L;
static const long ERROR_DOMAIN_TRUST_INCONSISTENT = 1810L;
static const long ERROR_SERVER_HAS_OPEN_HANDLES = 1811L;
static const long ERROR_RESOURCE_DATA_NOT_FOUND = 1812L;
static const long ERROR_RESOURCE_TYPE_NOT_FOUND = 1813L;
static const long ERROR_RESOURCE_NAME_NOT_FOUND = 1814L;
static const long ERROR_RESOURCE_LANG_NOT_FOUND = 1815L;
static const long ERROR_NOT_ENOUGH_QUOTA = 1816L;
static const long RPC_S_NO_INTERFACES = 1817L;
static const long RPC_S_CALL_CANCELLED = 1818L;
static const long RPC_S_BINDING_INCOMPLETE = 1819L;
static const long RPC_S_COMM_FAILURE = 1820L;
static const long RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821L;
static const long RPC_S_NO_PRINC_NAME = 1822L;
static const long RPC_S_NOT_RPC_ERROR = 1823L;
static const long RPC_S_UUID_LOCAL_ONLY = 1824L;
static const long RPC_S_SEC_PKG_ERROR = 1825L;
static const long RPC_S_NOT_CANCELLED = 1826L;
static const long RPC_X_INVALID_ES_ACTION = 1827L;
static const long RPC_X_WRONG_ES_VERSION = 1828L;
static const long RPC_X_WRONG_STUB_VERSION = 1829L;
static const long RPC_X_INVALID_PIPE_OBJECT = 1830L;
static const long RPC_X_WRONG_PIPE_ORDER = 1831L;
static const long RPC_X_WRONG_PIPE_VERSION = 1832L;
static const long RPC_S_COOKIE_AUTH_FAILED = 1833L;
static const long RPC_S_GROUP_MEMBER_NOT_FOUND = 1898L;
static const long EPT_S_CANT_CREATE = 1899L;
static const long RPC_S_INVALID_OBJECT = 1900L;
static const long ERROR_INVALID_TIME = 1901L;
static const long ERROR_INVALID_FORM_NAME = 1902L;
static const long ERROR_INVALID_FORM_SIZE = 1903L;
static const long ERROR_ALREADY_WAITING = 1904L;
static const long ERROR_PRINTER_DELETED = 1905L;
static const long ERROR_INVALID_PRINTER_STATE = 1906L;
static const long ERROR_PASSWORD_MUST_CHANGE = 1907L;
static const long ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908L;
static const long ERROR_ACCOUNT_LOCKED_OUT = 1909L;
static const long OR_INVALID_OXID = 1910L;
static const long OR_INVALID_OID = 1911L;
static const long OR_INVALID_SET = 1912L;
static const long RPC_S_SEND_INCOMPLETE = 1913L;
static const long RPC_S_INVALID_ASYNC_HANDLE = 1914L;
static const long RPC_S_INVALID_ASYNC_CALL = 1915L;
static const long RPC_X_PIPE_CLOSED = 1916L;
static const long RPC_X_PIPE_DISCIPLINE_ERROR = 1917L;
static const long RPC_X_PIPE_EMPTY = 1918L;
static const long ERROR_NO_SITENAME = 1919L;
static const long ERROR_CANT_ACCESS_FILE = 1920L;
static const long ERROR_CANT_RESOLVE_FILENAME = 1921L;
static const long RPC_S_ENTRY_TYPE_MISMATCH = 1922L;
static const long RPC_S_NOT_ALL_OBJS_EXPORTED = 1923L;
static const long RPC_S_INTERFACE_NOT_EXPORTED = 1924L;
static const long RPC_S_PROFILE_NOT_ADDED = 1925L;
static const long RPC_S_PRF_ELT_NOT_ADDED = 1926L;
static const long RPC_S_PRF_ELT_NOT_REMOVED = 1927L;
static const long RPC_S_GRP_ELT_NOT_ADDED = 1928L;
static const long RPC_S_GRP_ELT_NOT_REMOVED = 1929L;
static const long ERROR_KM_DRIVER_BLOCKED = 1930L;
static const long ERROR_CONTEXT_EXPIRED = 1931L;
static const long ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932L;
static const long ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933L;
static const long ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934L;
static const long ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935L;
static const long ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936L;
static const long ERROR_NTLM_BLOCKED = 1937L;
static const long ERROR_INVALID_PIXEL_FORMAT = 2000L;
static const long ERROR_BAD_DRIVER = 2001L;
static const long ERROR_INVALID_WINDOW_STYLE = 2002L;
static const long ERROR_METAFILE_NOT_SUPPORTED = 2003L;
static const long ERROR_TRANSFORM_NOT_SUPPORTED = 2004L;
static const long ERROR_CLIPPING_NOT_SUPPORTED = 2005L;
static const long ERROR_INVALID_CMM = 2010L;
static const long ERROR_INVALID_PROFILE = 2011L;
static const long ERROR_TAG_NOT_FOUND = 2012L;
static const long ERROR_TAG_NOT_PRESENT = 2013L;
static const long ERROR_DUPLICATE_TAG = 2014L;
static const long ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015L;
static const long ERROR_PROFILE_NOT_FOUND = 2016L;
static const long ERROR_INVALID_COLORSPACE = 2017L;
static const long ERROR_ICM_NOT_ENABLED = 2018L;
static const long ERROR_DELETING_ICM_XFORM = 2019L;
static const long ERROR_INVALID_TRANSFORM = 2020L;
static const long ERROR_COLORSPACE_MISMATCH = 2021L;
static const long ERROR_INVALID_COLORINDEX = 2022L;
static const long ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023L;
static const long ERROR_CONNECTED_OTHER_PASSWORD = 2108L;
static const long ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109L;
static const long ERROR_BAD_USERNAME = 2202L;
static const long ERROR_NOT_CONNECTED = 2250L;
static const long ERROR_OPEN_FILES = 2401L;
static const long ERROR_ACTIVE_CONNECTIONS = 2402L;
static const long ERROR_DEVICE_IN_USE = 2404L;
static const long ERROR_UNKNOWN_PRINT_MONITOR = 3000L;
static const long ERROR_PRINTER_DRIVER_IN_USE = 3001L;
static const long ERROR_SPOOL_FILE_NOT_FOUND = 3002L;
static const long ERROR_SPL_NO_STARTDOC = 3003L;
static const long ERROR_SPL_NO_ADDJOB = 3004L;
static const long ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005L;
static const long ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006L;
static const long ERROR_INVALID_PRINT_MONITOR = 3007L;
static const long ERROR_PRINT_MONITOR_IN_USE = 3008L;
static const long ERROR_PRINTER_HAS_JOBS_QUEUED = 3009L;
static const long ERROR_SUCCESS_REBOOT_REQUIRED = 3010L;
static const long ERROR_SUCCESS_RESTART_REQUIRED = 3011L;
static const long ERROR_PRINTER_NOT_FOUND = 3012L;
static const long ERROR_PRINTER_DRIVER_WARNED = 3013L;
static const long ERROR_PRINTER_DRIVER_BLOCKED = 3014L;
static const long ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015L;
static const long ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016L;
static const long ERROR_FAIL_REBOOT_REQUIRED = 3017L;
static const long ERROR_FAIL_REBOOT_INITIATED = 3018L;
static const long ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019L;
static const long ERROR_PRINT_JOB_RESTART_REQUIRED = 3020L;
static const long ERROR_IO_REISSUE_AS_CACHED = 3950L;
static const long ERROR_WINS_INTERNAL = 4000L;
static const long ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001L;
static const long ERROR_STATIC_INIT = 4002L;
static const long ERROR_INC_BACKUP = 4003L;
static const long ERROR_FULL_BACKUP = 4004L;
static const long ERROR_REC_NON_EXISTENT = 4005L;
static const long ERROR_RPL_NOT_ALLOWED = 4006L;
static const long PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = 4050L;
static const long PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = 4051L;
static const long PEERDIST_ERROR_MISSING_DATA = 4052L;
static const long PEERDIST_ERROR_NO_MORE = 4053L;
static const long PEERDIST_ERROR_NOT_INITIALIZED = 4054L;
static const long PEERDIST_ERROR_ALREADY_INITIALIZED = 4055L;
static const long PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = 4056L;
static const long PEERDIST_ERROR_INVALIDATED = 4057L;
static const long PEERDIST_ERROR_ALREADY_EXISTS = 4058L;
static const long PEERDIST_ERROR_OPERATION_NOTFOUND = 4059L;
static const long PEERDIST_ERROR_ALREADY_COMPLETED = 4060L;
static const long PEERDIST_ERROR_OUT_OF_BOUNDS = 4061L;
static const long PEERDIST_ERROR_VERSION_UNSUPPORTED = 4062L;
static const long PEERDIST_ERROR_INVALID_CONFIGURATION = 4063L;
static const long PEERDIST_ERROR_NOT_LICENSED = 4064L;
static const long PEERDIST_ERROR_SERVICE_UNAVAILABLE = 4065L;
static const long ERROR_DHCP_ADDRESS_CONFLICT = 4100L;
static const long ERROR_WMI_GUID_NOT_FOUND = 4200L;
static const long ERROR_WMI_INSTANCE_NOT_FOUND = 4201L;
static const long ERROR_WMI_ITEMID_NOT_FOUND = 4202L;
static const long ERROR_WMI_TRY_AGAIN = 4203L;
static const long ERROR_WMI_DP_NOT_FOUND = 4204L;
static const long ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205L;
static const long ERROR_WMI_ALREADY_ENABLED = 4206L;
static const long ERROR_WMI_GUID_DISCONNECTED = 4207L;
static const long ERROR_WMI_SERVER_UNAVAILABLE = 4208L;
static const long ERROR_WMI_DP_FAILED = 4209L;
static const long ERROR_WMI_INVALID_MOF = 4210L;
static const long ERROR_WMI_INVALID_REGINFO = 4211L;
static const long ERROR_WMI_ALREADY_DISABLED = 4212L;
static const long ERROR_WMI_READ_ONLY = 4213L;
static const long ERROR_WMI_SET_FAILURE = 4214L;
static const long ERROR_INVALID_MEDIA = 4300L;
static const long ERROR_INVALID_LIBRARY = 4301L;
static const long ERROR_INVALID_MEDIA_POOL = 4302L;
static const long ERROR_DRIVE_MEDIA_MISMATCH = 4303L;
static const long ERROR_MEDIA_OFFLINE = 4304L;
static const long ERROR_LIBRARY_OFFLINE = 4305L;
static const long ERROR_EMPTY = 4306L;
static const long ERROR_NOT_EMPTY = 4307L;
static const long ERROR_MEDIA_UNAVAILABLE = 4308L;
static const long ERROR_RESOURCE_DISABLED = 4309L;
static const long ERROR_INVALID_CLEANER = 4310L;
static const long ERROR_UNABLE_TO_CLEAN = 4311L;
static const long ERROR_OBJECT_NOT_FOUND = 4312L;
static const long ERROR_DATABASE_FAILURE = 4313L;
static const long ERROR_DATABASE_FULL = 4314L;
static const long ERROR_MEDIA_INCOMPATIBLE = 4315L;
static const long ERROR_RESOURCE_NOT_PRESENT = 4316L;
static const long ERROR_INVALID_OPERATION = 4317L;
static const long ERROR_MEDIA_NOT_AVAILABLE = 4318L;
static const long ERROR_DEVICE_NOT_AVAILABLE = 4319L;
static const long ERROR_REQUEST_REFUSED = 4320L;
static const long ERROR_INVALID_DRIVE_OBJECT = 4321L;
static const long ERROR_LIBRARY_FULL = 4322L;
static const long ERROR_MEDIUM_NOT_ACCESSIBLE = 4323L;
static const long ERROR_UNABLE_TO_LOAD_MEDIUM = 4324L;
static const long ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325L;
static const long ERROR_UNABLE_TO_INVENTORY_SLOT = 4326L;
static const long ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327L;
static const long ERROR_TRANSPORT_FULL = 4328L;
static const long ERROR_CONTROLLING_IEPORT = 4329L;
static const long ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330L;
static const long ERROR_CLEANER_SLOT_SET = 4331L;
static const long ERROR_CLEANER_SLOT_NOT_SET = 4332L;
static const long ERROR_CLEANER_CARTRIDGE_SPENT = 4333L;
static const long ERROR_UNEXPECTED_OMID = 4334L;
static const long ERROR_CANT_DELETE_LAST_ITEM = 4335L;
static const long ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336L;
static const long ERROR_VOLUME_CONTAINS_SYS_FILES = 4337L;
static const long ERROR_INDIGENOUS_TYPE = 4338L;
static const long ERROR_NO_SUPPORTING_DRIVES = 4339L;
static const long ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340L;
static const long ERROR_IEPORT_FULL = 4341L;
static const long ERROR_FILE_OFFLINE = 4350L;
static const long ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351L;
static const long ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352L;
static const long ERROR_NOT_A_REPARSE_POINT = 4390L;
static const long ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391L;
static const long ERROR_INVALID_REPARSE_DATA = 4392L;
static const long ERROR_REPARSE_TAG_INVALID = 4393L;
static const long ERROR_REPARSE_TAG_MISMATCH = 4394L;
static const long ERROR_VOLUME_NOT_SIS_ENABLED = 4500L;
static const long ERROR_DEPENDENT_RESOURCE_EXISTS = 5001L;
static const long ERROR_DEPENDENCY_NOT_FOUND = 5002L;
static const long ERROR_DEPENDENCY_ALREADY_EXISTS = 5003L;
static const long ERROR_RESOURCE_NOT_ONLINE = 5004L;
static const long ERROR_HOST_NODE_NOT_AVAILABLE = 5005L;
static const long ERROR_RESOURCE_NOT_AVAILABLE = 5006L;
static const long ERROR_RESOURCE_NOT_FOUND = 5007L;
static const long ERROR_SHUTDOWN_CLUSTER = 5008L;
static const long ERROR_CANT_EVICT_ACTIVE_NODE = 5009L;
static const long ERROR_OBJECT_ALREADY_EXISTS = 5010L;
static const long ERROR_OBJECT_IN_LIST = 5011L;
static const long ERROR_GROUP_NOT_AVAILABLE = 5012L;
static const long ERROR_GROUP_NOT_FOUND = 5013L;
static const long ERROR_GROUP_NOT_ONLINE = 5014L;
static const long ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015L;
static const long ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016L;
static const long ERROR_RESMON_CREATE_FAILED = 5017L;
static const long ERROR_RESMON_ONLINE_FAILED = 5018L;
static const long ERROR_RESOURCE_ONLINE = 5019L;
static const long ERROR_QUORUM_RESOURCE = 5020L;
static const long ERROR_NOT_QUORUM_CAPABLE = 5021L;
static const long ERROR_CLUSTER_SHUTTING_DOWN = 5022L;
static const long ERROR_INVALID_STATE = 5023L;
static const long ERROR_RESOURCE_PROPERTIES_STORED = 5024L;
static const long ERROR_NOT_QUORUM_CLASS = 5025L;
static const long ERROR_CORE_RESOURCE = 5026L;
static const long ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027L;
static const long ERROR_QUORUMLOG_OPEN_FAILED = 5028L;
static const long ERROR_CLUSTERLOG_CORRUPT = 5029L;
static const long ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030L;
static const long ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031L;
static const long ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032L;
static const long ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033L;
static const long ERROR_QUORUM_OWNER_ALIVE = 5034L;
static const long ERROR_NETWORK_NOT_AVAILABLE = 5035L;
static const long ERROR_NODE_NOT_AVAILABLE = 5036L;
static const long ERROR_ALL_NODES_NOT_AVAILABLE = 5037L;
static const long ERROR_RESOURCE_FAILED = 5038L;
static const long ERROR_CLUSTER_INVALID_NODE = 5039L;
static const long ERROR_CLUSTER_NODE_EXISTS = 5040L;
static const long ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041L;
static const long ERROR_CLUSTER_NODE_NOT_FOUND = 5042L;
static const long ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043L;
static const long ERROR_CLUSTER_NETWORK_EXISTS = 5044L;
static const long ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045L;
static const long ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046L;
static const long ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047L;
static const long ERROR_CLUSTER_INVALID_REQUEST = 5048L;
static const long ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049L;
static const long ERROR_CLUSTER_NODE_DOWN = 5050L;
static const long ERROR_CLUSTER_NODE_UNREACHABLE = 5051L;
static const long ERROR_CLUSTER_NODE_NOT_MEMBER = 5052L;
static const long ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053L;
static const long ERROR_CLUSTER_INVALID_NETWORK = 5054L;
static const long ERROR_CLUSTER_NODE_UP = 5056L;
static const long ERROR_CLUSTER_IPADDR_IN_USE = 5057L;
static const long ERROR_CLUSTER_NODE_NOT_PAUSED = 5058L;
static const long ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059L;
static const long ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060L;
static const long ERROR_CLUSTER_NODE_ALREADY_UP = 5061L;
static const long ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062L;
static const long ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063L;
static const long ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064L;
static const long ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065L;
static const long ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066L;
static const long ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067L;
static const long ERROR_INVALID_OPERATION_ON_QUORUM = 5068L;
static const long ERROR_DEPENDENCY_NOT_ALLOWED = 5069L;
static const long ERROR_CLUSTER_NODE_PAUSED = 5070L;
static const long ERROR_NODE_CANT_HOST_RESOURCE = 5071L;
static const long ERROR_CLUSTER_NODE_NOT_READY = 5072L;
static const long ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073L;
static const long ERROR_CLUSTER_JOIN_ABORTED = 5074L;
static const long ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075L;
static const long ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076L;
static const long ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077L;
static const long ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078L;
static const long ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079L;
static const long ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080L;
static const long ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081L;
static const long ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082L;
static const long ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083L;
static const long ERROR_RESMON_INVALID_STATE = 5084L;
static const long ERROR_CLUSTER_GUM_NOT_LOCKER = 5085L;
static const long ERROR_QUORUM_DISK_NOT_FOUND = 5086L;
static const long ERROR_DATABASE_BACKUP_CORRUPT = 5087L;
static const long ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088L;
static const long ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089L;
static const long ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890L;
static const long ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891L;
static const long ERROR_CLUSTER_MEMBERSHIP_HALT = 5892L;
static const long ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893L;
static const long ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894L;
static const long ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895L;
static const long ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896L;
static const long ERROR_CLUSTER_PARAMETER_MISMATCH = 5897L;
static const long ERROR_NODE_CANNOT_BE_CLUSTERED = 5898L;
static const long ERROR_CLUSTER_WRONG_OS_VERSION = 5899L;
static const long ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900L;
static const long ERROR_CLUSCFG_ALREADY_COMMITTED = 5901L;
static const long ERROR_CLUSCFG_ROLLBACK_FAILED = 5902L;
static const long ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903L;
static const long ERROR_CLUSTER_OLD_VERSION = 5904L;
static const long ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905L;
static const long ERROR_CLUSTER_NO_NET_ADAPTERS = 5906L;
static const long ERROR_CLUSTER_POISONED = 5907L;
static const long ERROR_CLUSTER_GROUP_MOVING = 5908L;
static const long ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909L;
static const long ERROR_RESOURCE_CALL_TIMED_OUT = 5910L;
static const long ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911L;
static const long ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912L;
static const long ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913L;
static const long ERROR_CLUSTER_PARTIAL_SEND = 5914L;
static const long ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915L;
static const long ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916L;
static const long ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917L;
static const long ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918L;
static const long ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919L;
static const long ERROR_CLUSTER_NULL_DATA = 5920L;
static const long ERROR_CLUSTER_PARTIAL_READ = 5921L;
static const long ERROR_CLUSTER_PARTIAL_WRITE = 5922L;
static const long ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923L;
static const long ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924L;
static const long ERROR_CLUSTER_NO_QUORUM = 5925L;
static const long ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926L;
static const long ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927L;
static const long ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928L;
static const long ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929L;
static const long ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930L;
static const long ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931L;
static const long ERROR_CLUSTER_NOT_INSTALLED = 5932L;
static const long ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933L;
static const long ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934L;
static const long ERROR_CLUSTER_TOO_MANY_NODES = 5935L;
static const long ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936L;
static const long ERROR_NONCORE_GROUPS_FOUND = 5937L;
static const long ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938L;
static const long ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939L;
static const long ERROR_CLUSTER_SINGLETON_RESOURCE = 5940L;
static const long ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941L;
static const long ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942L;
static const long ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943L;
static const long ERROR_CLUSTER_GROUP_BUSY = 5944L;
static const long ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945L;
static const long ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946L;
static const long ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947L;
static const long ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948L;
static const long ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949L;
static const long ERROR_NON_CSV_PATH = 5950L;
static const long ERROR_CSV_VOLUME_NOT_LOCAL = 5951L;
static const long ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952L;
static const long ERROR_ENCRYPTION_FAILED = 6000L;
static const long ERROR_DECRYPTION_FAILED = 6001L;
static const long ERROR_FILE_ENCRYPTED = 6002L;
static const long ERROR_NO_RECOVERY_POLICY = 6003L;
static const long ERROR_NO_EFS = 6004L;
static const long ERROR_WRONG_EFS = 6005L;
static const long ERROR_NO_USER_KEYS = 6006L;
static const long ERROR_FILE_NOT_ENCRYPTED = 6007L;
static const long ERROR_NOT_EXPORT_FORMAT = 6008L;
static const long ERROR_FILE_READ_ONLY = 6009L;
static const long ERROR_DIR_EFS_DISALLOWED = 6010L;
static const long ERROR_EFS_SERVER_NOT_TRUSTED = 6011L;
static const long ERROR_BAD_RECOVERY_POLICY = 6012L;
static const long ERROR_EFS_ALG_BLOB_TOO_BIG = 6013L;
static const long ERROR_VOLUME_NOT_SUPPORT_EFS = 6014L;
static const long ERROR_EFS_DISABLED = 6015L;
static const long ERROR_EFS_VERSION_NOT_SUPPORT = 6016L;
static const long ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017L;
static const long ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018L;
static const long ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019L;
static const long ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020L;
static const long ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021L;
static const long ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022L;
static const long ERROR_NO_BROWSER_SERVERS_FOUND = 6118L;
static const long SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200L;
static const long ERROR_LOG_SECTOR_INVALID = 6600L;
static const long ERROR_LOG_SECTOR_PARITY_INVALID = 6601L;
static const long ERROR_LOG_SECTOR_REMAPPED = 6602L;
static const long ERROR_LOG_BLOCK_INCOMPLETE = 6603L;
static const long ERROR_LOG_INVALID_RANGE = 6604L;
static const long ERROR_LOG_BLOCKS_EXHAUSTED = 6605L;
static const long ERROR_LOG_READ_CONTEXT_INVALID = 6606L;
static const long ERROR_LOG_RESTART_INVALID = 6607L;
static const long ERROR_LOG_BLOCK_VERSION = 6608L;
static const long ERROR_LOG_BLOCK_INVALID = 6609L;
static const long ERROR_LOG_READ_MODE_INVALID = 6610L;
static const long ERROR_LOG_NO_RESTART = 6611L;
static const long ERROR_LOG_METADATA_CORRUPT = 6612L;
static const long ERROR_LOG_METADATA_INVALID = 6613L;
static const long ERROR_LOG_METADATA_INCONSISTENT = 6614L;
static const long ERROR_LOG_RESERVATION_INVALID = 6615L;
static const long ERROR_LOG_CANT_DELETE = 6616L;
static const long ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617L;
static const long ERROR_LOG_START_OF_LOG = 6618L;
static const long ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619L;
static const long ERROR_LOG_POLICY_NOT_INSTALLED = 6620L;
static const long ERROR_LOG_POLICY_INVALID = 6621L;
static const long ERROR_LOG_POLICY_CONFLICT = 6622L;
static const long ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623L;
static const long ERROR_LOG_RECORD_NONEXISTENT = 6624L;
static const long ERROR_LOG_RECORDS_RESERVED_INVALID = 6625L;
static const long ERROR_LOG_SPACE_RESERVED_INVALID = 6626L;
static const long ERROR_LOG_TAIL_INVALID = 6627L;
static const long ERROR_LOG_FULL = 6628L;
static const long ERROR_COULD_NOT_RESIZE_LOG = 6629L;
static const long ERROR_LOG_MULTIPLEXED = 6630L;
static const long ERROR_LOG_DEDICATED = 6631L;
static const long ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632L;
static const long ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633L;
static const long ERROR_LOG_EPHEMERAL = 6634L;
static const long ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635L;
static const long ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636L;
static const long ERROR_LOG_CLIENT_NOT_REGISTERED = 6637L;
static const long ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638L;
static const long ERROR_LOG_CONTAINER_READ_FAILED = 6639L;
static const long ERROR_LOG_CONTAINER_WRITE_FAILED = 6640L;
static const long ERROR_LOG_CONTAINER_OPEN_FAILED = 6641L;
static const long ERROR_LOG_CONTAINER_STATE_INVALID = 6642L;
static const long ERROR_LOG_STATE_INVALID = 6643L;
static const long ERROR_LOG_PINNED = 6644L;
static const long ERROR_LOG_METADATA_FLUSH_FAILED = 6645L;
static const long ERROR_LOG_INCONSISTENT_SECURITY = 6646L;
static const long ERROR_LOG_APPENDED_FLUSH_FAILED = 6647L;
static const long ERROR_LOG_PINNED_RESERVATION = 6648L;
static const long ERROR_INVALID_TRANSACTION = 6700L;
static const long ERROR_TRANSACTION_NOT_ACTIVE = 6701L;
static const long ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702L;
static const long ERROR_TRANSACTION_NOT_REQUESTED = 6703L;
static const long ERROR_TRANSACTION_ALREADY_ABORTED = 6704L;
static const long ERROR_TRANSACTION_ALREADY_COMMITTED = 6705L;
static const long ERROR_TM_INITIALIZATION_FAILED = 6706L;
static const long ERROR_RESOURCEMANAGER_READ_ONLY = 6707L;
static const long ERROR_TRANSACTION_NOT_JOINED = 6708L;
static const long ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709L;
static const long ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710L;
static const long ERROR_TRANSACTION_PROPAGATION_FAILED = 6711L;
static const long ERROR_CRM_PROTOCOL_NOT_FOUND = 6712L;
static const long ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713L;
static const long ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714L;
static const long ERROR_TRANSACTION_NOT_FOUND = 6715L;
static const long ERROR_RESOURCEMANAGER_NOT_FOUND = 6716L;
static const long ERROR_ENLISTMENT_NOT_FOUND = 6717L;
static const long ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718L;
static const long ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719L;
static const long ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720L;
static const long ERROR_TRANSACTION_NOT_ROOT = 6721L;
static const long ERROR_TRANSACTION_OBJECT_EXPIRED = 6722L;
static const long ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723L;
static const long ERROR_TRANSACTION_RECORD_TOO_LONG = 6724L;
static const long ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725L;
static const long ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726L;
static const long ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727L;
static const long ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728L;
static const long ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729L;
static const long ERROR_TRANSACTION_NO_SUPERIOR = 6730L;
static const long ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731L;
static const long ERROR_TRANSACTIONAL_CONFLICT = 6800L;
static const long ERROR_RM_NOT_ACTIVE = 6801L;
static const long ERROR_RM_METADATA_CORRUPT = 6802L;
static const long ERROR_DIRECTORY_NOT_RM = 6803L;
static const long ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805L;
static const long ERROR_LOG_RESIZE_INVALID_SIZE = 6806L;
static const long ERROR_OBJECT_NO_LONGER_EXISTS = 6807L;
static const long ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808L;
static const long ERROR_STREAM_MINIVERSION_NOT_VALID = 6809L;
static const long ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810L;
static const long ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811L;
static const long ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812L;
static const long ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814L;
static const long ERROR_HANDLE_NO_LONGER_VALID = 6815L;
static const long ERROR_NO_TXF_METADATA = 6816L;
static const long ERROR_LOG_CORRUPTION_DETECTED = 6817L;
static const long ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818L;
static const long ERROR_RM_DISCONNECTED = 6819L;
static const long ERROR_ENLISTMENT_NOT_SUPERIOR = 6820L;
static const long ERROR_RECOVERY_NOT_NEEDED = 6821L;
static const long ERROR_RM_ALREADY_STARTED = 6822L;
static const long ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823L;
static const long ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824L;
static const long ERROR_CANT_CROSS_RM_BOUNDARY = 6825L;
static const long ERROR_TXF_DIR_NOT_EMPTY = 6826L;
static const long ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827L;
static const long ERROR_TM_VOLATILE = 6828L;
static const long ERROR_ROLLBACK_TIMER_EXPIRED = 6829L;
static const long ERROR_TXF_ATTRIBUTE_CORRUPT = 6830L;
static const long ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831L;
static const long ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832L;
static const long ERROR_LOG_GROWTH_FAILED = 6833L;
static const long ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834L;
static const long ERROR_TXF_METADATA_ALREADY_PRESENT = 6835L;
static const long ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836L;
static const long ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837L;
static const long ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838L;
static const long ERROR_TRANSACTIONS_NOT_FROZEN = 6839L;
static const long ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840L;
static const long ERROR_NOT_SNAPSHOT_VOLUME = 6841L;
static const long ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842L;
static const long ERROR_DATA_LOST_REPAIR = 6843L;
static const long ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844L;
static const long ERROR_TM_IDENTITY_MISMATCH = 6845L;
static const long ERROR_FLOATED_SECTION = 6846L;
static const long ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847L;
static const long ERROR_CANNOT_ABORT_TRANSACTIONS = 6848L;
static const long ERROR_BAD_CLUSTERS = 6849L;
static const long ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850L;
static const long ERROR_VOLUME_DIRTY = 6851L;
static const long ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852L;
static const long ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853L;
static const long ERROR_EXPIRED_HANDLE = 6854L;
static const long ERROR_TRANSACTION_NOT_ENLISTED = 6855L;
static const long ERROR_CTX_WINSTATION_NAME_INVALID = 7001L;
static const long ERROR_CTX_INVALID_PD = 7002L;
static const long ERROR_CTX_PD_NOT_FOUND = 7003L;
static const long ERROR_CTX_WD_NOT_FOUND = 7004L;
static const long ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005L;
static const long ERROR_CTX_SERVICE_NAME_COLLISION = 7006L;
static const long ERROR_CTX_CLOSE_PENDING = 7007L;
static const long ERROR_CTX_NO_OUTBUF = 7008L;
static const long ERROR_CTX_MODEM_INF_NOT_FOUND = 7009L;
static const long ERROR_CTX_INVALID_MODEMNAME = 7010L;
static const long ERROR_CTX_MODEM_RESPONSE_ERROR = 7011L;
static const long ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012L;
static const long ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013L;
static const long ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014L;
static const long ERROR_CTX_MODEM_RESPONSE_BUSY = 7015L;
static const long ERROR_CTX_MODEM_RESPONSE_VOICE = 7016L;
static const long ERROR_CTX_TD_ERROR = 7017L;
static const long ERROR_CTX_WINSTATION_NOT_FOUND = 7022L;
static const long ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023L;
static const long ERROR_CTX_WINSTATION_BUSY = 7024L;
static const long ERROR_CTX_BAD_VIDEO_MODE = 7025L;
static const long ERROR_CTX_GRAPHICS_INVALID = 7035L;
static const long ERROR_CTX_LOGON_DISABLED = 7037L;
static const long ERROR_CTX_NOT_CONSOLE = 7038L;
static const long ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040L;
static const long ERROR_CTX_CONSOLE_DISCONNECT = 7041L;
static const long ERROR_CTX_CONSOLE_CONNECT = 7042L;
static const long ERROR_CTX_SHADOW_DENIED = 7044L;
static const long ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045L;
static const long ERROR_CTX_INVALID_WD = 7049L;
static const long ERROR_CTX_SHADOW_INVALID = 7050L;
static const long ERROR_CTX_SHADOW_DISABLED = 7051L;
static const long ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052L;
static const long ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053L;
static const long ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054L;
static const long ERROR_CTX_LICENSE_CLIENT_INVALID = 7055L;
static const long ERROR_CTX_LICENSE_EXPIRED = 7056L;
static const long ERROR_CTX_SHADOW_NOT_RUNNING = 7057L;
static const long ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058L;
static const long ERROR_ACTIVATION_COUNT_EXCEEDED = 7059L;
static const long ERROR_CTX_WINSTATIONS_DISABLED = 7060L;
static const long ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061L;
static const long ERROR_CTX_SESSION_IN_USE = 7062L;
static const long ERROR_CTX_NO_FORCE_LOGOFF = 7063L;
static const long ERROR_CTX_ACCOUNT_RESTRICTION = 7064L;
static const long ERROR_RDP_PROTOCOL_ERROR = 7065L;
static const long ERROR_CTX_CDM_CONNECT = 7066L;
static const long ERROR_CTX_CDM_DISCONNECT = 7067L;
static const long ERROR_CTX_SECURITY_LAYER_ERROR = 7068L;
static const long ERROR_TS_INCOMPATIBLE_SESSIONS = 7069L;
static const long ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070L;
static const long FRS_ERR_INVALID_API_SEQUENCE = 8001L;
static const long FRS_ERR_STARTING_SERVICE = 8002L;
static const long FRS_ERR_STOPPING_SERVICE = 8003L;
static const long FRS_ERR_INTERNAL_API = 8004L;
static const long FRS_ERR_INTERNAL = 8005L;
static const long FRS_ERR_SERVICE_COMM = 8006L;
static const long FRS_ERR_INSUFFICIENT_PRIV = 8007L;
static const long FRS_ERR_AUTHENTICATION = 8008L;
static const long FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009L;
static const long FRS_ERR_PARENT_AUTHENTICATION = 8010L;
static const long FRS_ERR_CHILD_TO_PARENT_COMM = 8011L;
static const long FRS_ERR_PARENT_TO_CHILD_COMM = 8012L;
static const long FRS_ERR_SYSVOL_POPULATE = 8013L;
static const long FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014L;
static const long FRS_ERR_SYSVOL_IS_BUSY = 8015L;
static const long FRS_ERR_SYSVOL_DEMOTE = 8016L;
static const long FRS_ERR_INVALID_SERVICE_PARAMETER = 8017L;
static const int DS_S_SUCCESS = NO_ERROR;
static const long ERROR_DS_NOT_INSTALLED = 8200L;
static const long ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201L;
static const long ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202L;
static const long ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203L;
static const long ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204L;
static const long ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205L;
static const long ERROR_DS_BUSY = 8206L;
static const long ERROR_DS_UNAVAILABLE = 8207L;
static const long ERROR_DS_NO_RIDS_ALLOCATED = 8208L;
static const long ERROR_DS_NO_MORE_RIDS = 8209L;
static const long ERROR_DS_INCORRECT_ROLE_OWNER = 8210L;
static const long ERROR_DS_RIDMGR_INIT_ERROR = 8211L;
static const long ERROR_DS_OBJ_CLASS_VIOLATION = 8212L;
static const long ERROR_DS_CANT_ON_NON_LEAF = 8213L;
static const long ERROR_DS_CANT_ON_RDN = 8214L;
static const long ERROR_DS_CANT_MOD_OBJ_CLASS = 8215L;
static const long ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216L;
static const long ERROR_DS_GC_NOT_AVAILABLE = 8217L;
static const long ERROR_SHARED_POLICY = 8218L;
static const long ERROR_POLICY_OBJECT_NOT_FOUND = 8219L;
static const long ERROR_POLICY_ONLY_IN_DS = 8220L;
static const long ERROR_PROMOTION_ACTIVE = 8221L;
static const long ERROR_NO_PROMOTION_ACTIVE = 8222L;
static const long ERROR_DS_OPERATIONS_ERROR = 8224L;
static const long ERROR_DS_PROTOCOL_ERROR = 8225L;
static const long ERROR_DS_TIMELIMIT_EXCEEDED = 8226L;
static const long ERROR_DS_SIZELIMIT_EXCEEDED = 8227L;
static const long ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228L;
static const long ERROR_DS_COMPARE_FALSE = 8229L;
static const long ERROR_DS_COMPARE_TRUE = 8230L;
static const long ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231L;
static const long ERROR_DS_STRONG_AUTH_REQUIRED = 8232L;
static const long ERROR_DS_INAPPROPRIATE_AUTH = 8233L;
static const long ERROR_DS_AUTH_UNKNOWN = 8234L;
static const long ERROR_DS_REFERRAL = 8235L;
static const long ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236L;
static const long ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237L;
static const long ERROR_DS_INAPPROPRIATE_MATCHING = 8238L;
static const long ERROR_DS_CONSTRAINT_VIOLATION = 8239L;
static const long ERROR_DS_NO_SUCH_OBJECT = 8240L;
static const long ERROR_DS_ALIAS_PROBLEM = 8241L;
static const long ERROR_DS_INVALID_DN_SYNTAX = 8242L;
static const long ERROR_DS_IS_LEAF = 8243L;
static const long ERROR_DS_ALIAS_DEREF_PROBLEM = 8244L;
static const long ERROR_DS_UNWILLING_TO_PERFORM = 8245L;
static const long ERROR_DS_LOOP_DETECT = 8246L;
static const long ERROR_DS_NAMING_VIOLATION = 8247L;
static const long ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248L;
static const long ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249L;
static const long ERROR_DS_SERVER_DOWN = 8250L;
static const long ERROR_DS_LOCAL_ERROR = 8251L;
static const long ERROR_DS_ENCODING_ERROR = 8252L;
static const long ERROR_DS_DECODING_ERROR = 8253L;
static const long ERROR_DS_FILTER_UNKNOWN = 8254L;
static const long ERROR_DS_PARAM_ERROR = 8255L;
static const long ERROR_DS_NOT_SUPPORTED = 8256L;
static const long ERROR_DS_NO_RESULTS_RETURNED = 8257L;
static const long ERROR_DS_CONTROL_NOT_FOUND = 8258L;
static const long ERROR_DS_CLIENT_LOOP = 8259L;
static const long ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260L;
static const long ERROR_DS_SORT_CONTROL_MISSING = 8261L;
static const long ERROR_DS_OFFSET_RANGE_ERROR = 8262L;
static const long ERROR_DS_ROOT_MUST_BE_NC = 8301L;
static const long ERROR_DS_ADD_REPLICA_INHIBITED = 8302L;
static const long ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303L;
static const long ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304L;
static const long ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305L;
static const long ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306L;
static const long ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307L;
static const long ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308L;
static const long ERROR_DS_USER_BUFFER_TO_SMALL = 8309L;
static const long ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310L;
static const long ERROR_DS_ILLEGAL_MOD_OPERATION = 8311L;
static const long ERROR_DS_OBJ_TOO_LARGE = 8312L;
static const long ERROR_DS_BAD_INSTANCE_TYPE = 8313L;
static const long ERROR_DS_MASTERDSA_REQUIRED = 8314L;
static const long ERROR_DS_OBJECT_CLASS_REQUIRED = 8315L;
static const long ERROR_DS_MISSING_REQUIRED_ATT = 8316L;
static const long ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317L;
static const long ERROR_DS_ATT_ALREADY_EXISTS = 8318L;
static const long ERROR_DS_CANT_ADD_ATT_VALUES = 8320L;
static const long ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321L;
static const long ERROR_DS_RANGE_CONSTRAINT = 8322L;
static const long ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323L;
static const long ERROR_DS_CANT_REM_MISSING_ATT = 8324L;
static const long ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325L;
static const long ERROR_DS_ROOT_CANT_BE_SUBREF = 8326L;
static const long ERROR_DS_NO_CHAINING = 8327L;
static const long ERROR_DS_NO_CHAINED_EVAL = 8328L;
static const long ERROR_DS_NO_PARENT_OBJECT = 8329L;
static const long ERROR_DS_PARENT_IS_AN_ALIAS = 8330L;
static const long ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331L;
static const long ERROR_DS_CHILDREN_EXIST = 8332L;
static const long ERROR_DS_OBJ_NOT_FOUND = 8333L;
static const long ERROR_DS_ALIASED_OBJ_MISSING = 8334L;
static const long ERROR_DS_BAD_NAME_SYNTAX = 8335L;
static const long ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336L;
static const long ERROR_DS_CANT_DEREF_ALIAS = 8337L;
static const long ERROR_DS_OUT_OF_SCOPE = 8338L;
static const long ERROR_DS_OBJECT_BEING_REMOVED = 8339L;
static const long ERROR_DS_CANT_DELETE_DSA_OBJ = 8340L;
static const long ERROR_DS_GENERIC_ERROR = 8341L;
static const long ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342L;
static const long ERROR_DS_CLASS_NOT_DSA = 8343L;
static const long ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344L;
static const long ERROR_DS_ILLEGAL_SUPERIOR = 8345L;
static const long ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346L;
static const long ERROR_DS_NAME_TOO_MANY_PARTS = 8347L;
static const long ERROR_DS_NAME_TOO_LONG = 8348L;
static const long ERROR_DS_NAME_VALUE_TOO_LONG = 8349L;
static const long ERROR_DS_NAME_UNPARSEABLE = 8350L;
static const long ERROR_DS_NAME_TYPE_UNKNOWN = 8351L;
static const long ERROR_DS_NOT_AN_OBJECT = 8352L;
static const long ERROR_DS_SEC_DESC_TOO_SHORT = 8353L;
static const long ERROR_DS_SEC_DESC_INVALID = 8354L;
static const long ERROR_DS_NO_DELETED_NAME = 8355L;
static const long ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356L;
static const long ERROR_DS_NCNAME_MUST_BE_NC = 8357L;
static const long ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358L;
static const long ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359L;
static const long ERROR_DS_INVALID_DMD = 8360L;
static const long ERROR_DS_OBJ_GUID_EXISTS = 8361L;
static const long ERROR_DS_NOT_ON_BACKLINK = 8362L;
static const long ERROR_DS_NO_CROSSREF_FOR_NC = 8363L;
static const long ERROR_DS_SHUTTING_DOWN = 8364L;
static const long ERROR_DS_UNKNOWN_OPERATION = 8365L;
static const long ERROR_DS_INVALID_ROLE_OWNER = 8366L;
static const long ERROR_DS_COULDNT_CONTACT_FSMO = 8367L;
static const long ERROR_DS_CROSS_NC_DN_RENAME = 8368L;
static const long ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369L;
static const long ERROR_DS_REPLICATOR_ONLY = 8370L;
static const long ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371L;
static const long ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372L;
static const long ERROR_DS_NAME_REFERENCE_INVALID = 8373L;
static const long ERROR_DS_CROSS_REF_EXISTS = 8374L;
static const long ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375L;
static const long ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376L;
static const long ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377L;
static const long ERROR_DS_DUP_RDN = 8378L;
static const long ERROR_DS_DUP_OID = 8379L;
static const long ERROR_DS_DUP_MAPI_ID = 8380L;
static const long ERROR_DS_DUP_SCHEMA_ID_GUID = 8381L;
static const long ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382L;
static const long ERROR_DS_SEMANTIC_ATT_TEST = 8383L;
static const long ERROR_DS_SYNTAX_MISMATCH = 8384L;
static const long ERROR_DS_EXISTS_IN_MUST_HAVE = 8385L;
static const long ERROR_DS_EXISTS_IN_MAY_HAVE = 8386L;
static const long ERROR_DS_NONEXISTENT_MAY_HAVE = 8387L;
static const long ERROR_DS_NONEXISTENT_MUST_HAVE = 8388L;
static const long ERROR_DS_AUX_CLS_TEST_FAIL = 8389L;
static const long ERROR_DS_NONEXISTENT_POSS_SUP = 8390L;
static const long ERROR_DS_SUB_CLS_TEST_FAIL = 8391L;
static const long ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392L;
static const long ERROR_DS_EXISTS_IN_AUX_CLS = 8393L;
static const long ERROR_DS_EXISTS_IN_SUB_CLS = 8394L;
static const long ERROR_DS_EXISTS_IN_POSS_SUP = 8395L;
static const long ERROR_DS_RECALCSCHEMA_FAILED = 8396L;
static const long ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397L;
static const long ERROR_DS_CANT_DELETE = 8398L;
static const long ERROR_DS_ATT_SCHEMA_REQ_ID = 8399L;
static const long ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400L;
static const long ERROR_DS_CANT_CACHE_ATT = 8401L;
static const long ERROR_DS_CANT_CACHE_CLASS = 8402L;
static const long ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403L;
static const long ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404L;
static const long ERROR_DS_CANT_RETRIEVE_DN = 8405L;
static const long ERROR_DS_MISSING_SUPREF = 8406L;
static const long ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407L;
static const long ERROR_DS_CODE_INCONSISTENCY = 8408L;
static const long ERROR_DS_DATABASE_ERROR = 8409L;
static const long ERROR_DS_GOVERNSID_MISSING = 8410L;
static const long ERROR_DS_MISSING_EXPECTED_ATT = 8411L;
static const long ERROR_DS_NCNAME_MISSING_CR_REF = 8412L;
static const long ERROR_DS_SECURITY_CHECKING_ERROR = 8413L;
static const long ERROR_DS_SCHEMA_NOT_LOADED = 8414L;
static const long ERROR_DS_SCHEMA_ALLOC_FAILED = 8415L;
static const long ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416L;
static const long ERROR_DS_GCVERIFY_ERROR = 8417L;
static const long ERROR_DS_DRA_SCHEMA_MISMATCH = 8418L;
static const long ERROR_DS_CANT_FIND_DSA_OBJ = 8419L;
static const long ERROR_DS_CANT_FIND_EXPECTED_NC = 8420L;
static const long ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421L;
static const long ERROR_DS_CANT_RETRIEVE_CHILD = 8422L;
static const long ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423L;
static const long ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424L;
static const long ERROR_DS_BAD_HIERARCHY_FILE = 8425L;
static const long ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426L;
static const long ERROR_DS_CONFIG_PARAM_MISSING = 8427L;
static const long ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428L;
static const long ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429L;
static const long ERROR_DS_INTERNAL_FAILURE = 8430L;
static const long ERROR_DS_UNKNOWN_ERROR = 8431L;
static const long ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432L;
static const long ERROR_DS_REFUSING_FSMO_ROLES = 8433L;
static const long ERROR_DS_MISSING_FSMO_SETTINGS = 8434L;
static const long ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435L;
static const long ERROR_DS_DRA_GENERIC = 8436L;
static const long ERROR_DS_DRA_INVALID_PARAMETER = 8437L;
static const long ERROR_DS_DRA_BUSY = 8438L;
static const long ERROR_DS_DRA_BAD_DN = 8439L;
static const long ERROR_DS_DRA_BAD_NC = 8440L;
static const long ERROR_DS_DRA_DN_EXISTS = 8441L;
static const long ERROR_DS_DRA_INTERNAL_ERROR = 8442L;
static const long ERROR_DS_DRA_INCONSISTENT_DIT = 8443L;
static const long ERROR_DS_DRA_CONNECTION_FAILED = 8444L;
static const long ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445L;
static const long ERROR_DS_DRA_OUT_OF_MEM = 8446L;
static const long ERROR_DS_DRA_MAIL_PROBLEM = 8447L;
static const long ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448L;
static const long ERROR_DS_DRA_REF_NOT_FOUND = 8449L;
static const long ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450L;
static const long ERROR_DS_DRA_DB_ERROR = 8451L;
static const long ERROR_DS_DRA_NO_REPLICA = 8452L;
static const long ERROR_DS_DRA_ACCESS_DENIED = 8453L;
static const long ERROR_DS_DRA_NOT_SUPPORTED = 8454L;
static const long ERROR_DS_DRA_RPC_CANCELLED = 8455L;
static const long ERROR_DS_DRA_SOURCE_DISABLED = 8456L;
static const long ERROR_DS_DRA_SINK_DISABLED = 8457L;
static const long ERROR_DS_DRA_NAME_COLLISION = 8458L;
static const long ERROR_DS_DRA_SOURCE_REINSTALLED = 8459L;
static const long ERROR_DS_DRA_MISSING_PARENT = 8460L;
static const long ERROR_DS_DRA_PREEMPTED = 8461L;
static const long ERROR_DS_DRA_ABANDON_SYNC = 8462L;
static const long ERROR_DS_DRA_SHUTDOWN = 8463L;
static const long ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464L;
static const long ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465L;
static const long ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466L;
static const long ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467L;
static const long ERROR_DS_DUP_LINK_ID = 8468L;
static const long ERROR_DS_NAME_ERROR_RESOLVING = 8469L;
static const long ERROR_DS_NAME_ERROR_NOT_FOUND = 8470L;
static const long ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471L;
static const long ERROR_DS_NAME_ERROR_NO_MAPPING = 8472L;
static const long ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473L;
static const long ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474L;
static const long ERROR_DS_CONSTRUCTED_ATT_MOD = 8475L;
static const long ERROR_DS_WRONG_OM_OBJ_CLASS = 8476L;
static const long ERROR_DS_DRA_REPL_PENDING = 8477L;
static const long ERROR_DS_DS_REQUIRED = 8478L;
static const long ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479L;
static const long ERROR_DS_NON_BASE_SEARCH = 8480L;
static const long ERROR_DS_CANT_RETRIEVE_ATTS = 8481L;
static const long ERROR_DS_BACKLINK_WITHOUT_LINK = 8482L;
static const long ERROR_DS_EPOCH_MISMATCH = 8483L;
static const long ERROR_DS_SRC_NAME_MISMATCH = 8484L;
static const long ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485L;
static const long ERROR_DS_DST_NC_MISMATCH = 8486L;
static const long ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487L;
static const long ERROR_DS_SRC_GUID_MISMATCH = 8488L;
static const long ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489L;
static const long ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490L;
static const long ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491L;
static const long ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492L;
static const long ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493L;
static const long ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494L;
static const long ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495L;
static const long ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496L;
static const long ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497L;
static const long ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498L;
static const long ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499L;
static const long ERROR_DS_INVALID_SEARCH_FLAG = 8500L;
static const long ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501L;
static const long ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502L;
static const long ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503L;
static const long ERROR_DS_SAM_INIT_FAILURE = 8504L;
static const long ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505L;
static const long ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506L;
static const long ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507L;
static const long ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508L;
static const long ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509L;
static const long ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510L;
static const long ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511L;
static const long ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512L;
static const long ERROR_DS_INVALID_GROUP_TYPE = 8513L;
static const long ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514L;
static const long ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517L;
static const long ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519L;
static const long ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520L;
static const long ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521L;
static const long ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522L;
static const long ERROR_DS_NAMING_MASTER_GC = 8523L;
static const long ERROR_DS_DNS_LOOKUP_FAILURE = 8524L;
static const long ERROR_DS_COULDNT_UPDATE_SPNS = 8525L;
static const long ERROR_DS_CANT_RETRIEVE_SD = 8526L;
static const long ERROR_DS_KEY_NOT_UNIQUE = 8527L;
static const long ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528L;
static const long ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529L;
static const long ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530L;
static const long ERROR_DS_CANT_START = 8531L;
static const long ERROR_DS_INIT_FAILURE = 8532L;
static const long ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533L;
static const long ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534L;
static const long ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535L;
static const long ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536L;
static const long ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537L;
static const long ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538L;
static const long ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539L;
static const long ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540L;
static const long ERROR_SAM_INIT_FAILURE = 8541L;
static const long ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542L;
static const long ERROR_DS_DRA_SCHEMA_CONFLICT = 8543L;
static const long ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544L;
static const long ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545L;
static const long ERROR_DS_NC_STILL_HAS_DSAS = 8546L;
static const long ERROR_DS_GC_REQUIRED = 8547L;
static const long ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548L;
static const long ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549L;
static const long ERROR_DS_CANT_ADD_TO_GC = 8550L;
static const long ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551L;
static const long ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552L;
static const long ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553L;
static const long ERROR_DS_INVALID_NAME_FOR_SPN = 8554L;
static const long ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555L;
static const long ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556L;
static const long ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557L;
static const long ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558L;
static const long ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559L;
static const long ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560L;
static const long ERROR_DS_INIT_FAILURE_CONSOLE = 8561L;
static const long ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562L;
static const long ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563L;
static const long ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564L;
static const long ERROR_DS_FOREST_VERSION_TOO_LOW = 8565L;
static const long ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566L;
static const long ERROR_DS_INCOMPATIBLE_VERSION = 8567L;
static const long ERROR_DS_LOW_DSA_VERSION = 8568L;
static const long ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569L;
static const long ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570L;
static const long ERROR_DS_NAME_NOT_UNIQUE = 8571L;
static const long ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572L;
static const long ERROR_DS_OUT_OF_VERSION_STORE = 8573L;
static const long ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574L;
static const long ERROR_DS_NO_REF_DOMAIN = 8575L;
static const long ERROR_DS_RESERVED_LINK_ID = 8576L;
static const long ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577L;
static const long ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578L;
static const long ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579L;
static const long ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580L;
static const long ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581L;
static const long ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582L;
static const long ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583L;
static const long ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584L;
static const long ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585L;
static const long ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586L;
static const long ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587L;
static const long ERROR_DS_NOT_CLOSEST = 8588L;
static const long ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589L;
static const long ERROR_DS_SINGLE_USER_MODE_FAILED = 8590L;
static const long ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591L;
static const long ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592L;
static const long ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593L;
static const long ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594L;
static const long ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595L;
static const long ERROR_DS_NO_MSDS_INTID = 8596L;
static const long ERROR_DS_DUP_MSDS_INTID = 8597L;
static const long ERROR_DS_EXISTS_IN_RDNATTID = 8598L;
static const long ERROR_DS_AUTHORIZATION_FAILED = 8599L;
static const long ERROR_DS_INVALID_SCRIPT = 8600L;
static const long ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601L;
static const long ERROR_DS_CROSS_REF_BUSY = 8602L;
static const long ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603L;
static const long ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604L;
static const long ERROR_DS_DUPLICATE_ID_FOUND = 8605L;
static const long ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606L;
static const long ERROR_DS_GROUP_CONVERSION_ERROR = 8607L;
static const long ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608L;
static const long ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609L;
static const long ERROR_DS_ROLE_NOT_VERIFIED = 8610L;
static const long ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611L;
static const long ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612L;
static const long ERROR_DS_EXISTING_AD_CHILD_NC = 8613L;
static const long ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614L;
static const long ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615L;
static const long ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616L;
static const long ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617L;
static const long ERROR_DS_POLICY_NOT_KNOWN = 8618L;
static const long ERROR_NO_SITE_SETTINGS_OBJECT = 8619L;
static const long ERROR_NO_SECRETS = 8620L;
static const long ERROR_NO_WRITABLE_DC_FOUND = 8621L;
static const long ERROR_DS_NO_SERVER_OBJECT = 8622L;
static const long ERROR_DS_NO_NTDSA_OBJECT = 8623L;
static const long ERROR_DS_NON_ASQ_SEARCH = 8624L;
static const long ERROR_DS_AUDIT_FAILURE = 8625L;
static const long ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626L;
static const long ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627L;
static const long ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628L;
static const long ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629L;
static const long ERROR_DS_DRA_SECRETS_DENIED = 8630L;
static const long ERROR_DS_RESERVED_MAPI_ID = 8631L;
static const long ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632L;
static const long ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633L;
static const long ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634L;
static const long ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635L;
static const long ERROR_INVALID_USER_PRINCIPAL_NAME = 8636L;
static const long ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637L;
static const long ERROR_DS_OID_NOT_FOUND = 8638L;
static const long ERROR_DS_DRA_RECYCLED_TARGET = 8639L;
static const int DNS_ERROR_RESPONSE_CODES_BASE = 9000;
static const int DNS_ERROR_RCODE_NO_ERROR = NO_ERROR;
static const int DNS_ERROR_MASK = 0x00002328;
static const long DNS_ERROR_RCODE_FORMAT_ERROR = 9001L;
static const long DNS_ERROR_RCODE_SERVER_FAILURE = 9002L;
static const long DNS_ERROR_RCODE_NAME_ERROR = 9003L;
static const long DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004L;
static const long DNS_ERROR_RCODE_REFUSED = 9005L;
static const long DNS_ERROR_RCODE_YXDOMAIN = 9006L;
static const long DNS_ERROR_RCODE_YXRRSET = 9007L;
static const long DNS_ERROR_RCODE_NXRRSET = 9008L;
static const long DNS_ERROR_RCODE_NOTAUTH = 9009L;
static const long DNS_ERROR_RCODE_NOTZONE = 9010L;
static const long DNS_ERROR_RCODE_BADSIG = 9016L;
static const long DNS_ERROR_RCODE_BADKEY = 9017L;
static const long DNS_ERROR_RCODE_BADTIME = 9018L;
static const int DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME;
static const int DNS_ERROR_PACKET_FMT_BASE = 9500;
static const long DNS_INFO_NO_RECORDS = 9501L;
static const long DNS_ERROR_BAD_PACKET = 9502L;
static const long DNS_ERROR_NO_PACKET = 9503L;
static const long DNS_ERROR_RCODE = 9504L;
static const long DNS_ERROR_UNSECURE_PACKET = 9505L;
static const int DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET;
static const int DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY;
static const int DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME;
static const int DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA;
static const int DNS_ERROR_GENERAL_API_BASE = 9550;
static const long DNS_ERROR_INVALID_TYPE = 9551L;
static const long DNS_ERROR_INVALID_IP_ADDRESS = 9552L;
static const long DNS_ERROR_INVALID_PROPERTY = 9553L;
static const long DNS_ERROR_TRY_AGAIN_LATER = 9554L;
static const long DNS_ERROR_NOT_UNIQUE = 9555L;
static const long DNS_ERROR_NON_RFC_NAME = 9556L;
static const long DNS_STATUS_FQDN = 9557L;
static const long DNS_STATUS_DOTTED_NAME = 9558L;
static const long DNS_STATUS_SINGLE_PART_NAME = 9559L;
static const long DNS_ERROR_INVALID_NAME_CHAR = 9560L;
static const long DNS_ERROR_NUMERIC_NAME = 9561L;
static const long DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562L;
static const long DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563L;
static const long DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564L;
static const long DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565L;
static const long DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566L;
static const long DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567L;
static const long DNS_ERROR_BACKGROUND_LOADING = 9568L;
static const long DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569L;
static const long DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570L;
static const long DNS_ERROR_DELEGATION_REQUIRED = 9571L;
static const long DNS_ERROR_INVALID_POLICY_TABLE = 9572L;
static const int DNS_ERROR_ZONE_BASE = 9600;
static const long DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601L;
static const long DNS_ERROR_NO_ZONE_INFO = 9602L;
static const long DNS_ERROR_INVALID_ZONE_OPERATION = 9603L;
static const long DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604L;
static const long DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605L;
static const long DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606L;
static const long DNS_ERROR_ZONE_LOCKED = 9607L;
static const long DNS_ERROR_ZONE_CREATION_FAILED = 9608L;
static const long DNS_ERROR_ZONE_ALREADY_EXISTS = 9609L;
static const long DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610L;
static const long DNS_ERROR_INVALID_ZONE_TYPE = 9611L;
static const long DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612L;
static const long DNS_ERROR_ZONE_NOT_SECONDARY = 9613L;
static const long DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614L;
static const long DNS_ERROR_WINS_INIT_FAILED = 9615L;
static const long DNS_ERROR_NEED_WINS_SERVERS = 9616L;
static const long DNS_ERROR_NBSTAT_INIT_FAILED = 9617L;
static const long DNS_ERROR_SOA_DELETE_INVALID = 9618L;
static const long DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619L;
static const long DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620L;
static const long DNS_ERROR_ZONE_IS_SHUTDOWN = 9621L;
static const int DNS_ERROR_DATAFILE_BASE = 9650;
static const long DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651L;
static const long DNS_ERROR_INVALID_DATAFILE_NAME = 9652L;
static const long DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653L;
static const long DNS_ERROR_FILE_WRITEBACK_FAILED = 9654L;
static const long DNS_ERROR_DATAFILE_PARSING = 9655L;
static const int DNS_ERROR_DATABASE_BASE = 9700;
static const long DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701L;
static const long DNS_ERROR_RECORD_FORMAT = 9702L;
static const long DNS_ERROR_NODE_CREATION_FAILED = 9703L;
static const long DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704L;
static const long DNS_ERROR_RECORD_TIMED_OUT = 9705L;
static const long DNS_ERROR_NAME_NOT_IN_ZONE = 9706L;
static const long DNS_ERROR_CNAME_LOOP = 9707L;
static const long DNS_ERROR_NODE_IS_CNAME = 9708L;
static const long DNS_ERROR_CNAME_COLLISION = 9709L;
static const long DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710L;
static const long DNS_ERROR_RECORD_ALREADY_EXISTS = 9711L;
static const long DNS_ERROR_SECONDARY_DATA = 9712L;
static const long DNS_ERROR_NO_CREATE_CACHE_DATA = 9713L;
static const long DNS_ERROR_NAME_DOES_NOT_EXIST = 9714L;
static const long DNS_WARNING_PTR_CREATE_FAILED = 9715L;
static const long DNS_WARNING_DOMAIN_UNDELETED = 9716L;
static const long DNS_ERROR_DS_UNAVAILABLE = 9717L;
static const long DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718L;
static const long DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719L;
static const long DNS_ERROR_NODE_IS_DNAME = 9720L;
static const long DNS_ERROR_DNAME_COLLISION = 9721L;
static const long DNS_ERROR_ALIAS_LOOP = 9722L;
static const int DNS_ERROR_OPERATION_BASE = 9750;
static const long DNS_INFO_AXFR_COMPLETE = 9751L;
static const long DNS_ERROR_AXFR = 9752L;
static const long DNS_INFO_ADDED_LOCAL_WINS = 9753L;
static const int DNS_ERROR_SECURE_BASE = 9800;
static const long DNS_STATUS_CONTINUE_NEEDED = 9801L;
static const int DNS_ERROR_SETUP_BASE = 9850;
static const long DNS_ERROR_NO_TCPIP = 9851L;
static const long DNS_ERROR_NO_DNS_SERVERS = 9852L;
static const int DNS_ERROR_DP_BASE = 9900;
static const long DNS_ERROR_DP_DOES_NOT_EXIST = 9901L;
static const long DNS_ERROR_DP_ALREADY_EXISTS = 9902L;
static const long DNS_ERROR_DP_NOT_ENLISTED = 9903L;
static const long DNS_ERROR_DP_ALREADY_ENLISTED = 9904L;
static const long DNS_ERROR_DP_NOT_AVAILABLE = 9905L;
static const long DNS_ERROR_DP_FSMO_ERROR = 9906L;
static const int WSABASEERR = 10000;
static const long WSAEINTR = 10004L;
static const long WSAEBADF = 10009L;
static const long WSAEACCES = 10013L;
static const long WSAEFAULT = 10014L;
static const long WSAEINVAL = 10022L;
static const long WSAEMFILE = 10024L;
static const long WSAEWOULDBLOCK = 10035L;
static const long WSAEINPROGRESS = 10036L;
static const long WSAEALREADY = 10037L;
static const long WSAENOTSOCK = 10038L;
static const long WSAEDESTADDRREQ = 10039L;
static const long WSAEMSGSIZE = 10040L;
static const long WSAEPROTOTYPE = 10041L;
static const long WSAENOPROTOOPT = 10042L;
static const long WSAEPROTONOSUPPORT = 10043L;
static const long WSAESOCKTNOSUPPORT = 10044L;
static const long WSAEOPNOTSUPP = 10045L;
static const long WSAEPFNOSUPPORT = 10046L;
static const long WSAEAFNOSUPPORT = 10047L;
static const long WSAEADDRINUSE = 10048L;
static const long WSAEADDRNOTAVAIL = 10049L;
static const long WSAENETDOWN = 10050L;
static const long WSAENETUNREACH = 10051L;
static const long WSAENETRESET = 10052L;
static const long WSAECONNABORTED = 10053L;
static const long WSAECONNRESET = 10054L;
static const long WSAENOBUFS = 10055L;
static const long WSAEISCONN = 10056L;
static const long WSAENOTCONN = 10057L;
static const long WSAESHUTDOWN = 10058L;
static const long WSAETOOMANYREFS = 10059L;
static const long WSAETIMEDOUT = 10060L;
static const long WSAECONNREFUSED = 10061L;
static const long WSAELOOP = 10062L;
static const long WSAENAMETOOLONG = 10063L;
static const long WSAEHOSTDOWN = 10064L;
static const long WSAEHOSTUNREACH = 10065L;
static const long WSAENOTEMPTY = 10066L;
static const long WSAEPROCLIM = 10067L;
static const long WSAEUSERS = 10068L;
static const long WSAEDQUOT = 10069L;
static const long WSAESTALE = 10070L;
static const long WSAEREMOTE = 10071L;
static const long WSASYSNOTREADY = 10091L;
static const long WSAVERNOTSUPPORTED = 10092L;
static const long WSANOTINITIALISED = 10093L;
static const long WSAEDISCON = 10101L;
static const long WSAENOMORE = 10102L;
static const long WSAECANCELLED = 10103L;
static const long WSAEINVALIDPROCTABLE = 10104L;
static const long WSAEINVALIDPROVIDER = 10105L;
static const long WSAEPROVIDERFAILEDINIT = 10106L;
static const long WSASYSCALLFAILURE = 10107L;
static const long WSASERVICE_NOT_FOUND = 10108L;
static const long WSATYPE_NOT_FOUND = 10109L;
static const long WSA_E_NO_MORE = 10110L;
static const long WSA_E_CANCELLED = 10111L;
static const long WSAEREFUSED = 10112L;
static const long WSAHOST_NOT_FOUND = 11001L;
static const long WSATRY_AGAIN = 11002L;
static const long WSANO_RECOVERY = 11003L;
static const long WSANO_DATA = 11004L;
static const long WSA_QOS_RECEIVERS = 11005L;
static const long WSA_QOS_SENDERS = 11006L;
static const long WSA_QOS_NO_SENDERS = 11007L;
static const long WSA_QOS_NO_RECEIVERS = 11008L;
static const long WSA_QOS_REQUEST_CONFIRMED = 11009L;
static const long WSA_QOS_ADMISSION_FAILURE = 11010L;
static const long WSA_QOS_POLICY_FAILURE = 11011L;
static const long WSA_QOS_BAD_STYLE = 11012L;
static const long WSA_QOS_BAD_OBJECT = 11013L;
static const long WSA_QOS_TRAFFIC_CTRL_ERROR = 11014L;
static const long WSA_QOS_GENERIC_ERROR = 11015L;
static const long WSA_QOS_ESERVICETYPE = 11016L;
static const long WSA_QOS_EFLOWSPEC = 11017L;
static const long WSA_QOS_EPROVSPECBUF = 11018L;
static const long WSA_QOS_EFILTERSTYLE = 11019L;
static const long WSA_QOS_EFILTERTYPE = 11020L;
static const long WSA_QOS_EFILTERCOUNT = 11021L;
static const long WSA_QOS_EOBJLENGTH = 11022L;
static const long WSA_QOS_EFLOWCOUNT = 11023L;
static const long WSA_QOS_EUNKOWNPSOBJ = 11024L;
static const long WSA_QOS_EPOLICYOBJ = 11025L;
static const long WSA_QOS_EFLOWDESC = 11026L;
static const long WSA_QOS_EPSFLOWSPEC = 11027L;
static const long WSA_QOS_EPSFILTERSPEC = 11028L;
static const long WSA_QOS_ESDMODEOBJ = 11029L;
static const long WSA_QOS_ESHAPERATEOBJ = 11030L;
static const long WSA_QOS_RESERVED_PETYPE = 11031L;
static const long WSA_SECURE_HOST_NOT_FOUND = 11032L;
static const long WSA_IPSEC_NAME_POLICY_ERROR = 11033L;
static const long ERROR_IPSEC_QM_POLICY_EXISTS = 13000L;
static const long ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001L;
static const long ERROR_IPSEC_QM_POLICY_IN_USE = 13002L;
static const long ERROR_IPSEC_MM_POLICY_EXISTS = 13003L;
static const long ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004L;
static const long ERROR_IPSEC_MM_POLICY_IN_USE = 13005L;
static const long ERROR_IPSEC_MM_FILTER_EXISTS = 13006L;
static const long ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009L;
static const long ERROR_IPSEC_MM_AUTH_EXISTS = 13010L;
static const long ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011L;
static const long ERROR_IPSEC_MM_AUTH_IN_USE = 13012L;
static const long ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013L;
static const long ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014L;
static const long ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015L;
static const long ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016L;
static const long ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017L;
static const long ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019L;
static const long ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020L;
static const long ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021L;
static const long ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022L;
static const long ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023L;
static const long WARNING_IPSEC_MM_POLICY_PRUNED = 13024L;
static const long WARNING_IPSEC_QM_POLICY_PRUNED = 13025L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800L;
static const long ERROR_IPSEC_IKE_AUTH_FAIL = 13801L;
static const long ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802L;
static const long ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803L;
static const long ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804L;
static const long ERROR_IPSEC_IKE_TIMED_OUT = 13805L;
static const long ERROR_IPSEC_IKE_NO_CERT = 13806L;
static const long ERROR_IPSEC_IKE_SA_DELETED = 13807L;
static const long ERROR_IPSEC_IKE_SA_REAPED = 13808L;
static const long ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809L;
static const long ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810L;
static const long ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811L;
static const long ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812L;
static const long ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813L;
static const long ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814L;
static const long ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815L;
static const long ERROR_IPSEC_IKE_ERROR = 13816L;
static const long ERROR_IPSEC_IKE_CRL_FAILED = 13817L;
static const long ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818L;
static const long ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819L;
static const long ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820L;
static const long ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821L;
static const long ERROR_IPSEC_IKE_DH_FAIL = 13822L;
static const long ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823L;
static const long ERROR_IPSEC_IKE_INVALID_HEADER = 13824L;
static const long ERROR_IPSEC_IKE_NO_POLICY = 13825L;
static const long ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826L;
static const long ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827L;
static const long ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR = 13829L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842L;
static const long ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843L;
static const long ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844L;
static const long ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845L;
static const long ERROR_IPSEC_IKE_INVALID_COOKIE = 13846L;
static const long ERROR_IPSEC_IKE_NO_PEER_CERT = 13847L;
static const long ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848L;
static const long ERROR_IPSEC_IKE_POLICY_CHANGE = 13849L;
static const long ERROR_IPSEC_IKE_NO_MM_POLICY = 13850L;
static const long ERROR_IPSEC_IKE_NOTCBPRIV = 13851L;
static const long ERROR_IPSEC_IKE_SECLOADFAIL = 13852L;
static const long ERROR_IPSEC_IKE_FAILSSPINIT = 13853L;
static const long ERROR_IPSEC_IKE_FAILQUERYSSP = 13854L;
static const long ERROR_IPSEC_IKE_SRVACQFAIL = 13855L;
static const long ERROR_IPSEC_IKE_SRVQUERYCRED = 13856L;
static const long ERROR_IPSEC_IKE_GETSPIFAIL = 13857L;
static const long ERROR_IPSEC_IKE_INVALID_FILTER = 13858L;
static const long ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859L;
static const long ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860L;
static const long ERROR_IPSEC_IKE_INVALID_POLICY = 13861L;
static const long ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862L;
static const long ERROR_IPSEC_IKE_INVALID_SITUATION = 13863L;
static const long ERROR_IPSEC_IKE_DH_FAILURE = 13864L;
static const long ERROR_IPSEC_IKE_INVALID_GROUP = 13865L;
static const long ERROR_IPSEC_IKE_ENCRYPT = 13866L;
static const long ERROR_IPSEC_IKE_DECRYPT = 13867L;
static const long ERROR_IPSEC_IKE_POLICY_MATCH = 13868L;
static const long ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869L;
static const long ERROR_IPSEC_IKE_INVALID_HASH = 13870L;
static const long ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871L;
static const long ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872L;
static const long ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873L;
static const long ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874L;
static const long ERROR_IPSEC_IKE_INVALID_SIG = 13875L;
static const long ERROR_IPSEC_IKE_LOAD_FAILED = 13876L;
static const long ERROR_IPSEC_IKE_RPC_DELETE = 13877L;
static const long ERROR_IPSEC_IKE_BENIGN_REINIT = 13878L;
static const long ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879L;
static const long ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880L;
static const long ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881L;
static const long ERROR_IPSEC_IKE_MM_LIMIT = 13882L;
static const long ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883L;
static const long ERROR_IPSEC_IKE_QM_LIMIT = 13884L;
static const long ERROR_IPSEC_IKE_MM_EXPIRED = 13885L;
static const long ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886L;
static const long ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887L;
static const long ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888L;
static const long ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889L;
static const long ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890L;
static const long ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891L;
static const long ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893L;
static const long ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894L;
static const long ERROR_IPSEC_IKE_QM_EXPIRED = 13895L;
static const long ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_END = 13897L;
static const long ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898L;
static const long ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899L;
static const long ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900L;
static const long ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901L;
static const long ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902L;
static const long ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903L;
static const long ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904L;
static const long ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905L;
static const long ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906L;
static const long ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907L;
static const long ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909L;
static const long ERROR_IPSEC_BAD_SPI = 13910L;
static const long ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911L;
static const long ERROR_IPSEC_WRONG_SA = 13912L;
static const long ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913L;
static const long ERROR_IPSEC_INVALID_PACKET = 13914L;
static const long ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915L;
static const long ERROR_IPSEC_CLEAR_TEXT_DROP = 13916L;
static const long ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917L;
static const long ERROR_IPSEC_THROTTLE_DROP = 13918L;
static const long ERROR_IPSEC_DOSP_BLOCK = 13925L;
static const long ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926L;
static const long ERROR_IPSEC_DOSP_INVALID_PACKET = 13927L;
static const long ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928L;
static const long ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929L;
static const long ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930L;
static const long ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931L;
static const long ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932L;
static const long ERROR_SXS_SECTION_NOT_FOUND = 14000L;
static const long ERROR_SXS_CANT_GEN_ACTCTX = 14001L;
static const long ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002L;
static const long ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003L;
static const long ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004L;
static const long ERROR_SXS_MANIFEST_PARSE_ERROR = 14005L;
static const long ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006L;
static const long ERROR_SXS_KEY_NOT_FOUND = 14007L;
static const long ERROR_SXS_VERSION_CONFLICT = 14008L;
static const long ERROR_SXS_WRONG_SECTION_TYPE = 14009L;
static const long ERROR_SXS_THREAD_QUERIES_DISABLED = 14010L;
static const long ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011L;
static const long ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012L;
static const long ERROR_SXS_UNKNOWN_ENCODING = 14013L;
static const long ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014L;
static const long ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015L;
static const long ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016L;
static const long ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017L;
static const long ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018L;
static const long ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019L;
static const long ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020L;
static const long ERROR_SXS_DUPLICATE_DLL_NAME = 14021L;
static const long ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022L;
static const long ERROR_SXS_DUPLICATE_CLSID = 14023L;
static const long ERROR_SXS_DUPLICATE_IID = 14024L;
static const long ERROR_SXS_DUPLICATE_TLBID = 14025L;
static const long ERROR_SXS_DUPLICATE_PROGID = 14026L;
static const long ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027L;
static const long ERROR_SXS_FILE_HASH_MISMATCH = 14028L;
static const long ERROR_SXS_POLICY_PARSE_ERROR = 14029L;
static const long ERROR_SXS_XML_E_MISSINGQUOTE = 14030L;
static const long ERROR_SXS_XML_E_COMMENTSYNTAX = 14031L;
static const long ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032L;
static const long ERROR_SXS_XML_E_BADNAMECHAR = 14033L;
static const long ERROR_SXS_XML_E_BADCHARINSTRING = 14034L;
static const long ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035L;
static const long ERROR_SXS_XML_E_BADCHARDATA = 14036L;
static const long ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037L;
static const long ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038L;
static const long ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039L;
static const long ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040L;
static const long ERROR_SXS_XML_E_INTERNALERROR = 14041L;
static const long ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042L;
static const long ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043L;
static const long ERROR_SXS_XML_E_MISSING_PAREN = 14044L;
static const long ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045L;
static const long ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046L;
static const long ERROR_SXS_XML_E_INVALID_DECIMAL = 14047L;
static const long ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048L;
static const long ERROR_SXS_XML_E_INVALID_UNICODE = 14049L;
static const long ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050L;
static const long ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051L;
static const long ERROR_SXS_XML_E_UNCLOSEDTAG = 14052L;
static const long ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053L;
static const long ERROR_SXS_XML_E_MULTIPLEROOTS = 14054L;
static const long ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055L;
static const long ERROR_SXS_XML_E_BADXMLDECL = 14056L;
static const long ERROR_SXS_XML_E_MISSINGROOT = 14057L;
static const long ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058L;
static const long ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059L;
static const long ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060L;
static const long ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061L;
static const long ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062L;
static const long ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063L;
static const long ERROR_SXS_XML_E_UNCLOSEDDECL = 14064L;
static const long ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065L;
static const long ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066L;
static const long ERROR_SXS_XML_E_INVALIDENCODING = 14067L;
static const long ERROR_SXS_XML_E_INVALIDSWITCH = 14068L;
static const long ERROR_SXS_XML_E_BADXMLCASE = 14069L;
static const long ERROR_SXS_XML_E_INVALID_STANDALONE = 14070L;
static const long ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071L;
static const long ERROR_SXS_XML_E_INVALID_VERSION = 14072L;
static const long ERROR_SXS_XML_E_MISSINGEQUALS = 14073L;
static const long ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074L;
static const long ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075L;
static const long ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076L;
static const long ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077L;
static const long ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078L;
static const long ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079L;
static const long ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080L;
static const long ERROR_SXS_ASSEMBLY_MISSING = 14081L;
static const long ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082L;
static const long ERROR_SXS_CORRUPTION = 14083L;
static const long ERROR_SXS_EARLY_DEACTIVATION = 14084L;
static const long ERROR_SXS_INVALID_DEACTIVATION = 14085L;
static const long ERROR_SXS_MULTIPLE_DEACTIVATION = 14086L;
static const long ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087L;
static const long ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088L;
static const long ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089L;
static const long ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090L;
static const long ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091L;
static const long ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092L;
static const long ERROR_SXS_IDENTITY_PARSE_ERROR = 14093L;
static const long ERROR_MALFORMED_SUBSTITUTION_STRING = 14094L;
static const long ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095L;
static const long ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096L;
static const long ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097L;
static const long ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098L;
static const long ERROR_ADVANCED_INSTALLER_FAILED = 14099L;
static const long ERROR_XML_ENCODING_MISMATCH = 14100L;
static const long ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101L;
static const long ERROR_SXS_IDENTITIES_DIFFERENT = 14102L;
static const long ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103L;
static const long ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104L;
static const long ERROR_SXS_MANIFEST_TOO_BIG = 14105L;
static const long ERROR_SXS_SETTING_NOT_REGISTERED = 14106L;
static const long ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107L;
static const long ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108L;
static const long ERROR_GENERIC_COMMAND_FAILED = 14109L;
static const long ERROR_SXS_FILE_HASH_MISSING = 14110L;
static const long ERROR_EVT_INVALID_CHANNEL_PATH = 15000L;
static const long ERROR_EVT_INVALID_QUERY = 15001L;
static const long ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002L;
static const long ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003L;
static const long ERROR_EVT_INVALID_PUBLISHER_NAME = 15004L;
static const long ERROR_EVT_INVALID_EVENT_DATA = 15005L;
static const long ERROR_EVT_CHANNEL_NOT_FOUND = 15007L;
static const long ERROR_EVT_MALFORMED_XML_TEXT = 15008L;
static const long ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009L;
static const long ERROR_EVT_CONFIGURATION_ERROR = 15010L;
static const long ERROR_EVT_QUERY_RESULT_STALE = 15011L;
static const long ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012L;
static const long ERROR_EVT_NON_VALIDATING_MSXML = 15013L;
static const long ERROR_EVT_FILTER_ALREADYSCOPED = 15014L;
static const long ERROR_EVT_FILTER_NOTELTSET = 15015L;
static const long ERROR_EVT_FILTER_INVARG = 15016L;
static const long ERROR_EVT_FILTER_INVTEST = 15017L;
static const long ERROR_EVT_FILTER_INVTYPE = 15018L;
static const long ERROR_EVT_FILTER_PARSEERR = 15019L;
static const long ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020L;
static const long ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021L;
static const long ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022L;
static const long ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023L;
static const long ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024L;
static const long ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025L;
static const long ERROR_EVT_FILTER_TOO_COMPLEX = 15026L;
static const long ERROR_EVT_MESSAGE_NOT_FOUND = 15027L;
static const long ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028L;
static const long ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029L;
static const long ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030L;
static const long ERROR_EVT_MAX_INSERTS_REACHED = 15031L;
static const long ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032L;
static const long ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033L;
static const long ERROR_EVT_VERSION_TOO_OLD = 15034L;
static const long ERROR_EVT_VERSION_TOO_NEW = 15035L;
static const long ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036L;
static const long ERROR_EVT_PUBLISHER_DISABLED = 15037L;
static const long ERROR_EVT_FILTER_OUT_OF_RANGE = 15038L;
static const long ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080L;
static const long ERROR_EC_LOG_DISABLED = 15081L;
static const long ERROR_EC_CIRCULAR_FORWARDING = 15082L;
static const long ERROR_EC_CREDSTORE_FULL = 15083L;
static const long ERROR_EC_CRED_NOT_FOUND = 15084L;
static const long ERROR_EC_NO_ACTIVE_CHANNEL = 15085L;
static const long ERROR_MUI_FILE_NOT_FOUND = 15100L;
static const long ERROR_MUI_INVALID_FILE = 15101L;
static const long ERROR_MUI_INVALID_RC_CONFIG = 15102L;
static const long ERROR_MUI_INVALID_LOCALE_NAME = 15103L;
static const long ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104L;
static const long ERROR_MUI_FILE_NOT_LOADED = 15105L;
static const long ERROR_RESOURCE_ENUM_USER_STOP = 15106L;
static const long ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107L;
static const long ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108L;
static const long ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200L;
static const long ERROR_MCA_INVALID_VCP_VERSION = 15201L;
static const long ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202L;
static const long ERROR_MCA_MCCS_VERSION_MISMATCH = 15203L;
static const long ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204L;
static const long ERROR_MCA_INTERNAL_ERROR = 15205L;
static const long ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206L;
static const long ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207L;
static const long ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250L;
static const long ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299L;
static const long ERROR_HASH_NOT_SUPPORTED = 15300L;
static const long ERROR_HASH_NOT_PRESENT = 15301L;
static const int SEVERITY_SUCCESS = 0;
static const int SEVERITY_ERROR = 1;
static const int SUCCEEDED(hr) = (((HRESULT)(hr)) >= 0);
static const int FAILED(hr) = (((HRESULT)(hr)) < 0);
static const int IS_ERROR(Status) = (((unsigned long)(Status)) >> 31 == SEVERITY_ERROR);
static const int HRESULT_CODE(hr) = ((hr) & 0xFFFF);
static const int SCODE_CODE(sc) = ((sc) & 0xFFFF);
static const int HRESULT_FACILITY(hr) = (((hr) >> 16) & 0x1fff);
static const int SCODE_FACILITY(sc) = (((sc) >> 16) & 0x1fff);
static const int HRESULT_SEVERITY(hr) = (((hr) >> 31) & 0x1);
static const int SCODE_SEVERITY(sc) = (((sc) >> 31) & 0x1);
static const int MAKE_HRESULT(sev,fac,code) = ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) );
static const int MAKE_SCODE(sev,fac,code) = ((SCODE) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) );
static const int FACILITY_NT_BIT = 0x10000000;
static const int __HRESULT_FROM_WIN32(x) = ((HRESULT)(x) <= 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000)));
typedef long HRESULT;
HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
static const int HRESULT_FROM_NT(x) = ((HRESULT) ((x) | FACILITY_NT_BIT));
static const int GetScode(hr) = ((SCODE) (hr));
static const int ResultFromScode(sc) = ((HRESULT) (sc));
static const int PropagateResult(hrPrevious,scBase) = ((HRESULT) scBase);
static const int E_NOT_SET = HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
static const int E_NOT_VALID_STATE = HRESULT_FROM_WIN32(ERROR_INVALID_STATE);
static const int E_NOT_SUFFICIENT_BUFFER = HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER);
static const int _HRESULT_TYPEDEF_(_sc) = ((HRESULT)_sc);
static const int NOERROR = 0;
static const int E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8000FFFFL);
static const int E_NOTIMPL = _HRESULT_TYPEDEF_(0x80004001L);
static const int E_OUTOFMEMORY = _HRESULT_TYPEDEF_(0x8007000EL);
static const int E_INVALIDARG = _HRESULT_TYPEDEF_(0x80070057L);
static const int E_NOINTERFACE = _HRESULT_TYPEDEF_(0x80004002L);
static const int E_POINTER = _HRESULT_TYPEDEF_(0x80004003L);
static const int E_HANDLE = _HRESULT_TYPEDEF_(0x80070006L);
static const int E_ABORT = _HRESULT_TYPEDEF_(0x80004004L);
static const int E_FAIL = _HRESULT_TYPEDEF_(0x80004005L);
static const int E_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80070005L);
static const int E_PENDING = _HRESULT_TYPEDEF_(0x8000000AL);
static const int CO_E_INIT_TLS = _HRESULT_TYPEDEF_(0x80004006L);
static const int CO_E_INIT_SHARED_ALLOCATOR = _HRESULT_TYPEDEF_(0x80004007L);
static const int CO_E_INIT_MEMORY_ALLOCATOR = _HRESULT_TYPEDEF_(0x80004008L);
static const int CO_E_INIT_CLASS_CACHE = _HRESULT_TYPEDEF_(0x80004009L);
static const int CO_E_INIT_RPC_CHANNEL = _HRESULT_TYPEDEF_(0x8000400AL);
static const int CO_E_INIT_TLS_SET_CHANNEL_CONTROL = _HRESULT_TYPEDEF_(0x8000400BL);
static const int CO_E_INIT_TLS_CHANNEL_CONTROL = _HRESULT_TYPEDEF_(0x8000400CL);
static const int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = _HRESULT_TYPEDEF_(0x8000400DL);
static const int CO_E_INIT_SCM_MUTEX_EXISTS = _HRESULT_TYPEDEF_(0x8000400EL);
static const int CO_E_INIT_SCM_FILE_MAPPING_EXISTS = _HRESULT_TYPEDEF_(0x8000400FL);
static const int CO_E_INIT_SCM_MAP_VIEW_OF_FILE = _HRESULT_TYPEDEF_(0x80004010L);
static const int CO_E_INIT_SCM_EXEC_FAILURE = _HRESULT_TYPEDEF_(0x80004011L);
static const int CO_E_INIT_ONLY_SINGLE_THREADED = _HRESULT_TYPEDEF_(0x80004012L);
static const int CO_E_CANT_REMOTE = _HRESULT_TYPEDEF_(0x80004013L);
static const int CO_E_BAD_SERVER_NAME = _HRESULT_TYPEDEF_(0x80004014L);
static const int CO_E_WRONG_SERVER_IDENTITY = _HRESULT_TYPEDEF_(0x80004015L);
static const int CO_E_OLE1DDE_DISABLED = _HRESULT_TYPEDEF_(0x80004016L);
static const int CO_E_RUNAS_SYNTAX = _HRESULT_TYPEDEF_(0x80004017L);
static const int CO_E_CREATEPROCESS_FAILURE = _HRESULT_TYPEDEF_(0x80004018L);
static const int CO_E_RUNAS_CREATEPROCESS_FAILURE = _HRESULT_TYPEDEF_(0x80004019L);
static const int CO_E_RUNAS_LOGON_FAILURE = _HRESULT_TYPEDEF_(0x8000401AL);
static const int CO_E_LAUNCH_PERMSSION_DENIED = _HRESULT_TYPEDEF_(0x8000401BL);
static const int CO_E_START_SERVICE_FAILURE = _HRESULT_TYPEDEF_(0x8000401CL);
static const int CO_E_REMOTE_COMMUNICATION_FAILURE = _HRESULT_TYPEDEF_(0x8000401DL);
static const int CO_E_SERVER_START_TIMEOUT = _HRESULT_TYPEDEF_(0x8000401EL);
static const int CO_E_CLSREG_INCONSISTENT = _HRESULT_TYPEDEF_(0x8000401FL);
static const int CO_E_IIDREG_INCONSISTENT = _HRESULT_TYPEDEF_(0x80004020L);
static const int CO_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80004021L);
static const int CO_E_RELOAD_DLL = _HRESULT_TYPEDEF_(0x80004022L);
static const int CO_E_MSI_ERROR = _HRESULT_TYPEDEF_(0x80004023L);
static const int CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = _HRESULT_TYPEDEF_(0x80004024L);
static const int CO_E_SERVER_PAUSED = _HRESULT_TYPEDEF_(0x80004025L);
static const int CO_E_SERVER_NOT_PAUSED = _HRESULT_TYPEDEF_(0x80004026L);
static const int CO_E_CLASS_DISABLED = _HRESULT_TYPEDEF_(0x80004027L);
static const int CO_E_CLRNOTAVAILABLE = _HRESULT_TYPEDEF_(0x80004028L);
static const int CO_E_ASYNC_WORK_REJECTED = _HRESULT_TYPEDEF_(0x80004029L);
static const int CO_E_SERVER_INIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8000402AL);
static const int CO_E_NO_SECCTX_IN_ACTIVATE = _HRESULT_TYPEDEF_(0x8000402BL);
static const int CO_E_TRACKER_CONFIG = _HRESULT_TYPEDEF_(0x80004030L);
static const int CO_E_THREADPOOL_CONFIG = _HRESULT_TYPEDEF_(0x80004031L);
static const int CO_E_SXS_CONFIG = _HRESULT_TYPEDEF_(0x80004032L);
static const int CO_E_MALFORMED_SPN = _HRESULT_TYPEDEF_(0x80004033L);
static const int S_OK = ((HRESULT)0L);
static const int S_FALSE = ((HRESULT)1L);
static const int OLE_E_FIRST = ((HRESULT)0x80040000L);
static const int OLE_E_LAST = ((HRESULT)0x800400FFL);
static const int OLE_S_FIRST = ((HRESULT)0x00040000L);
static const int OLE_S_LAST = ((HRESULT)0x000400FFL);
static const int OLE_E_OLEVERB = _HRESULT_TYPEDEF_(0x80040000L);
static const int OLE_E_ADVF = _HRESULT_TYPEDEF_(0x80040001L);
static const int OLE_E_ENUM_NOMORE = _HRESULT_TYPEDEF_(0x80040002L);
static const int OLE_E_ADVISENOTSUPPORTED = _HRESULT_TYPEDEF_(0x80040003L);
static const int OLE_E_NOCONNECTION = _HRESULT_TYPEDEF_(0x80040004L);
static const int OLE_E_NOTRUNNING = _HRESULT_TYPEDEF_(0x80040005L);
static const int OLE_E_NOCACHE = _HRESULT_TYPEDEF_(0x80040006L);
static const int OLE_E_BLANK = _HRESULT_TYPEDEF_(0x80040007L);
static const int OLE_E_CLASSDIFF = _HRESULT_TYPEDEF_(0x80040008L);
static const int OLE_E_CANT_GETMONIKER = _HRESULT_TYPEDEF_(0x80040009L);
static const int OLE_E_CANT_BINDTOSOURCE = _HRESULT_TYPEDEF_(0x8004000AL);
static const int OLE_E_STATIC = _HRESULT_TYPEDEF_(0x8004000BL);
static const int OLE_E_PROMPTSAVECANCELLED = _HRESULT_TYPEDEF_(0x8004000CL);
static const int OLE_E_INVALIDRECT = _HRESULT_TYPEDEF_(0x8004000DL);
static const int OLE_E_WRONGCOMPOBJ = _HRESULT_TYPEDEF_(0x8004000EL);
static const int OLE_E_INVALIDHWND = _HRESULT_TYPEDEF_(0x8004000FL);
static const int OLE_E_NOT_INPLACEACTIVE = _HRESULT_TYPEDEF_(0x80040010L);
static const int OLE_E_CANTCONVERT = _HRESULT_TYPEDEF_(0x80040011L);
static const int OLE_E_NOSTORAGE = _HRESULT_TYPEDEF_(0x80040012L);
static const int DV_E_FORMATETC = _HRESULT_TYPEDEF_(0x80040064L);
static const int DV_E_DVTARGETDEVICE = _HRESULT_TYPEDEF_(0x80040065L);
static const int DV_E_STGMEDIUM = _HRESULT_TYPEDEF_(0x80040066L);
static const int DV_E_STATDATA = _HRESULT_TYPEDEF_(0x80040067L);
static const int DV_E_LINDEX = _HRESULT_TYPEDEF_(0x80040068L);
static const int DV_E_TYMED = _HRESULT_TYPEDEF_(0x80040069L);
static const int DV_E_CLIPFORMAT = _HRESULT_TYPEDEF_(0x8004006AL);
static const int DV_E_DVASPECT = _HRESULT_TYPEDEF_(0x8004006BL);
static const int DV_E_DVTARGETDEVICE_SIZE = _HRESULT_TYPEDEF_(0x8004006CL);
static const int DV_E_NOIVIEWOBJECT = _HRESULT_TYPEDEF_(0x8004006DL);
static const long DRAGDROP_E_FIRST = 0x80040100L;
static const int DRAGDROP_E_LAST = 0x8004010FL;
static const long DRAGDROP_S_FIRST = 0x00040100L;
static const int DRAGDROP_S_LAST = 0x0004010FL;
static const int DRAGDROP_E_NOTREGISTERED = _HRESULT_TYPEDEF_(0x80040100L);
static const int DRAGDROP_E_ALREADYREGISTERED = _HRESULT_TYPEDEF_(0x80040101L);
static const int DRAGDROP_E_INVALIDHWND = _HRESULT_TYPEDEF_(0x80040102L);
static const long CLASSFACTORY_E_FIRST = 0x80040110L;
static const int CLASSFACTORY_E_LAST = 0x8004011FL;
static const long CLASSFACTORY_S_FIRST = 0x00040110L;
static const int CLASSFACTORY_S_LAST = 0x0004011FL;
static const int CLASS_E_NOAGGREGATION = _HRESULT_TYPEDEF_(0x80040110L);
static const int CLASS_E_CLASSNOTAVAILABLE = _HRESULT_TYPEDEF_(0x80040111L);
static const int CLASS_E_NOTLICENSED = _HRESULT_TYPEDEF_(0x80040112L);
static const long MARSHAL_E_FIRST = 0x80040120L;
static const int MARSHAL_E_LAST = 0x8004012FL;
static const long MARSHAL_S_FIRST = 0x00040120L;
static const int MARSHAL_S_LAST = 0x0004012FL;
static const long DATA_E_FIRST = 0x80040130L;
static const int DATA_E_LAST = 0x8004013FL;
static const long DATA_S_FIRST = 0x00040130L;
static const int DATA_S_LAST = 0x0004013FL;
static const long VIEW_E_FIRST = 0x80040140L;
static const int VIEW_E_LAST = 0x8004014FL;
static const long VIEW_S_FIRST = 0x00040140L;
static const int VIEW_S_LAST = 0x0004014FL;
static const int VIEW_E_DRAW = _HRESULT_TYPEDEF_(0x80040140L);
static const long REGDB_E_FIRST = 0x80040150L;
static const int REGDB_E_LAST = 0x8004015FL;
static const long REGDB_S_FIRST = 0x00040150L;
static const int REGDB_S_LAST = 0x0004015FL;
static const int REGDB_E_READREGDB = _HRESULT_TYPEDEF_(0x80040150L);
static const int REGDB_E_WRITEREGDB = _HRESULT_TYPEDEF_(0x80040151L);
static const int REGDB_E_KEYMISSING = _HRESULT_TYPEDEF_(0x80040152L);
static const int REGDB_E_INVALIDVALUE = _HRESULT_TYPEDEF_(0x80040153L);
static const int REGDB_E_CLASSNOTREG = _HRESULT_TYPEDEF_(0x80040154L);
static const int REGDB_E_IIDNOTREG = _HRESULT_TYPEDEF_(0x80040155L);
static const int REGDB_E_BADTHREADINGMODEL = _HRESULT_TYPEDEF_(0x80040156L);
static const long CAT_E_FIRST = 0x80040160L;
static const long CAT_E_LAST = 0x80040161L;
static const int CAT_E_CATIDNOEXIST = _HRESULT_TYPEDEF_(0x80040160L);
static const int CAT_E_NODESCRIPTION = _HRESULT_TYPEDEF_(0x80040161L);
static const long CS_E_FIRST = 0x80040164L;
static const int CS_E_LAST = 0x8004016FL;
static const int CS_E_PACKAGE_NOTFOUND = _HRESULT_TYPEDEF_(0x80040164L);
static const int CS_E_NOT_DELETABLE = _HRESULT_TYPEDEF_(0x80040165L);
static const int CS_E_CLASS_NOTFOUND = _HRESULT_TYPEDEF_(0x80040166L);
static const int CS_E_INVALID_VERSION = _HRESULT_TYPEDEF_(0x80040167L);
static const int CS_E_NO_CLASSSTORE = _HRESULT_TYPEDEF_(0x80040168L);
static const int CS_E_OBJECT_NOTFOUND = _HRESULT_TYPEDEF_(0x80040169L);
static const int CS_E_OBJECT_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x8004016AL);
static const int CS_E_INVALID_PATH = _HRESULT_TYPEDEF_(0x8004016BL);
static const int CS_E_NETWORK_ERROR = _HRESULT_TYPEDEF_(0x8004016CL);
static const int CS_E_ADMIN_LIMIT_EXCEEDED = _HRESULT_TYPEDEF_(0x8004016DL);
static const int CS_E_SCHEMA_MISMATCH = _HRESULT_TYPEDEF_(0x8004016EL);
static const int CS_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x8004016FL);
static const long CACHE_E_FIRST = 0x80040170L;
static const int CACHE_E_LAST = 0x8004017FL;
static const long CACHE_S_FIRST = 0x00040170L;
static const int CACHE_S_LAST = 0x0004017FL;
static const int CACHE_E_NOCACHE_UPDATED = _HRESULT_TYPEDEF_(0x80040170L);
static const long OLEOBJ_E_FIRST = 0x80040180L;
static const int OLEOBJ_E_LAST = 0x8004018FL;
static const long OLEOBJ_S_FIRST = 0x00040180L;
static const int OLEOBJ_S_LAST = 0x0004018FL;
static const int OLEOBJ_E_NOVERBS = _HRESULT_TYPEDEF_(0x80040180L);
static const int OLEOBJ_E_INVALIDVERB = _HRESULT_TYPEDEF_(0x80040181L);
static const long CLIENTSITE_E_FIRST = 0x80040190L;
static const int CLIENTSITE_E_LAST = 0x8004019FL;
static const long CLIENTSITE_S_FIRST = 0x00040190L;
static const int CLIENTSITE_S_LAST = 0x0004019FL;
static const int INPLACE_E_NOTUNDOABLE = _HRESULT_TYPEDEF_(0x800401A0L);
static const int INPLACE_E_NOTOOLSPACE = _HRESULT_TYPEDEF_(0x800401A1L);
static const long INPLACE_E_FIRST = 0x800401A0L;
static const int INPLACE_E_LAST = 0x800401AFL;
static const long INPLACE_S_FIRST = 0x000401A0L;
static const int INPLACE_S_LAST = 0x000401AFL;
static const long ENUM_E_FIRST = 0x800401B0L;
static const int ENUM_E_LAST = 0x800401BFL;
static const long ENUM_S_FIRST = 0x000401B0L;
static const int ENUM_S_LAST = 0x000401BFL;
static const long CONVERT10_E_FIRST = 0x800401C0L;
static const int CONVERT10_E_LAST = 0x800401CFL;
static const long CONVERT10_S_FIRST = 0x000401C0L;
static const int CONVERT10_S_LAST = 0x000401CFL;
static const int CONVERT10_E_OLESTREAM_GET = _HRESULT_TYPEDEF_(0x800401C0L);
static const int CONVERT10_E_OLESTREAM_PUT = _HRESULT_TYPEDEF_(0x800401C1L);
static const int CONVERT10_E_OLESTREAM_FMT = _HRESULT_TYPEDEF_(0x800401C2L);
static const int CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = _HRESULT_TYPEDEF_(0x800401C3L);
static const int CONVERT10_E_STG_FMT = _HRESULT_TYPEDEF_(0x800401C4L);
static const int CONVERT10_E_STG_NO_STD_STREAM = _HRESULT_TYPEDEF_(0x800401C5L);
static const int CONVERT10_E_STG_DIB_TO_BITMAP = _HRESULT_TYPEDEF_(0x800401C6L);
static const long CLIPBRD_E_FIRST = 0x800401D0L;
static const int CLIPBRD_E_LAST = 0x800401DFL;
static const long CLIPBRD_S_FIRST = 0x000401D0L;
static const int CLIPBRD_S_LAST = 0x000401DFL;
static const int CLIPBRD_E_CANT_OPEN = _HRESULT_TYPEDEF_(0x800401D0L);
static const int CLIPBRD_E_CANT_EMPTY = _HRESULT_TYPEDEF_(0x800401D1L);
static const int CLIPBRD_E_CANT_SET = _HRESULT_TYPEDEF_(0x800401D2L);
static const int CLIPBRD_E_BAD_DATA = _HRESULT_TYPEDEF_(0x800401D3L);
static const int CLIPBRD_E_CANT_CLOSE = _HRESULT_TYPEDEF_(0x800401D4L);
static const long MK_E_FIRST = 0x800401E0L;
static const int MK_E_LAST = 0x800401EFL;
static const long MK_S_FIRST = 0x000401E0L;
static const int MK_S_LAST = 0x000401EFL;
static const int MK_E_CONNECTMANUALLY = _HRESULT_TYPEDEF_(0x800401E0L);
static const int MK_E_EXCEEDEDDEADLINE = _HRESULT_TYPEDEF_(0x800401E1L);
static const int MK_E_NEEDGENERIC = _HRESULT_TYPEDEF_(0x800401E2L);
static const int MK_E_UNAVAILABLE = _HRESULT_TYPEDEF_(0x800401E3L);
static const int MK_E_SYNTAX = _HRESULT_TYPEDEF_(0x800401E4L);
static const int MK_E_NOOBJECT = _HRESULT_TYPEDEF_(0x800401E5L);
static const int MK_E_INVALIDEXTENSION = _HRESULT_TYPEDEF_(0x800401E6L);
static const int MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = _HRESULT_TYPEDEF_(0x800401E7L);
static const int MK_E_NOTBINDABLE = _HRESULT_TYPEDEF_(0x800401E8L);
static const int MK_E_NOTBOUND = _HRESULT_TYPEDEF_(0x800401E9L);
static const int MK_E_CANTOPENFILE = _HRESULT_TYPEDEF_(0x800401EAL);
static const int MK_E_MUSTBOTHERUSER = _HRESULT_TYPEDEF_(0x800401EBL);
static const int MK_E_NOINVERSE = _HRESULT_TYPEDEF_(0x800401ECL);
static const int MK_E_NOSTORAGE = _HRESULT_TYPEDEF_(0x800401EDL);
static const int MK_E_NOPREFIX = _HRESULT_TYPEDEF_(0x800401EEL);
static const int MK_E_ENUMERATION_FAILED = _HRESULT_TYPEDEF_(0x800401EFL);
static const long CO_E_FIRST = 0x800401F0L;
static const int CO_E_LAST = 0x800401FFL;
static const long CO_S_FIRST = 0x000401F0L;
static const int CO_S_LAST = 0x000401FFL;
static const int CO_E_NOTINITIALIZED = _HRESULT_TYPEDEF_(0x800401F0L);
static const int CO_E_ALREADYINITIALIZED = _HRESULT_TYPEDEF_(0x800401F1L);
static const int CO_E_CANTDETERMINECLASS = _HRESULT_TYPEDEF_(0x800401F2L);
static const int CO_E_CLASSSTRING = _HRESULT_TYPEDEF_(0x800401F3L);
static const int CO_E_IIDSTRING = _HRESULT_TYPEDEF_(0x800401F4L);
static const int CO_E_APPNOTFOUND = _HRESULT_TYPEDEF_(0x800401F5L);
static const int CO_E_APPSINGLEUSE = _HRESULT_TYPEDEF_(0x800401F6L);
static const int CO_E_ERRORINAPP = _HRESULT_TYPEDEF_(0x800401F7L);
static const int CO_E_DLLNOTFOUND = _HRESULT_TYPEDEF_(0x800401F8L);
static const int CO_E_ERRORINDLL = _HRESULT_TYPEDEF_(0x800401F9L);
static const int CO_E_WRONGOSFORAPP = _HRESULT_TYPEDEF_(0x800401FAL);
static const int CO_E_OBJNOTREG = _HRESULT_TYPEDEF_(0x800401FBL);
static const int CO_E_OBJISREG = _HRESULT_TYPEDEF_(0x800401FCL);
static const int CO_E_OBJNOTCONNECTED = _HRESULT_TYPEDEF_(0x800401FDL);
static const int CO_E_APPDIDNTREG = _HRESULT_TYPEDEF_(0x800401FEL);
static const int CO_E_RELEASED = _HRESULT_TYPEDEF_(0x800401FFL);
static const long EVENT_E_FIRST = 0x80040200L;
static const int EVENT_E_LAST = 0x8004021FL;
static const long EVENT_S_FIRST = 0x00040200L;
static const int EVENT_S_LAST = 0x0004021FL;
static const int EVENT_S_SOME_SUBSCRIBERS_FAILED = _HRESULT_TYPEDEF_(0x00040200L);
static const int EVENT_E_ALL_SUBSCRIBERS_FAILED = _HRESULT_TYPEDEF_(0x80040201L);
static const int EVENT_S_NOSUBSCRIBERS = _HRESULT_TYPEDEF_(0x00040202L);
static const int EVENT_E_QUERYSYNTAX = _HRESULT_TYPEDEF_(0x80040203L);
static const int EVENT_E_QUERYFIELD = _HRESULT_TYPEDEF_(0x80040204L);
static const int EVENT_E_INTERNALEXCEPTION = _HRESULT_TYPEDEF_(0x80040205L);
static const int EVENT_E_INTERNALERROR = _HRESULT_TYPEDEF_(0x80040206L);
static const int EVENT_E_INVALID_PER_USER_SID = _HRESULT_TYPEDEF_(0x80040207L);
static const int EVENT_E_USER_EXCEPTION = _HRESULT_TYPEDEF_(0x80040208L);
static const int EVENT_E_TOO_MANY_METHODS = _HRESULT_TYPEDEF_(0x80040209L);
static const int EVENT_E_MISSING_EVENTCLASS = _HRESULT_TYPEDEF_(0x8004020AL);
static const int EVENT_E_NOT_ALL_REMOVED = _HRESULT_TYPEDEF_(0x8004020BL);
static const int EVENT_E_COMPLUS_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8004020CL);
static const int EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = _HRESULT_TYPEDEF_(0x8004020DL);
static const int EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = _HRESULT_TYPEDEF_(0x8004020EL);
static const int EVENT_E_INVALID_EVENT_CLASS_PARTITION = _HRESULT_TYPEDEF_(0x8004020FL);
static const int EVENT_E_PER_USER_SID_NOT_LOGGED_ON = _HRESULT_TYPEDEF_(0x80040210L);
static const int XACT_E_FIRST = 0x8004D000;
static const int XACT_E_LAST = 0x8004D02B;
static const int XACT_S_FIRST = 0x0004D000;
static const int XACT_S_LAST = 0x0004D010;
static const int XACT_E_ALREADYOTHERSINGLEPHASE = _HRESULT_TYPEDEF_(0x8004D000L);
static const int XACT_E_CANTRETAIN = _HRESULT_TYPEDEF_(0x8004D001L);
static const int XACT_E_COMMITFAILED = _HRESULT_TYPEDEF_(0x8004D002L);
static const int XACT_E_COMMITPREVENTED = _HRESULT_TYPEDEF_(0x8004D003L);
static const int XACT_E_HEURISTICABORT = _HRESULT_TYPEDEF_(0x8004D004L);
static const int XACT_E_HEURISTICCOMMIT = _HRESULT_TYPEDEF_(0x8004D005L);
static const int XACT_E_HEURISTICDAMAGE = _HRESULT_TYPEDEF_(0x8004D006L);
static const int XACT_E_HEURISTICDANGER = _HRESULT_TYPEDEF_(0x8004D007L);
static const int XACT_E_ISOLATIONLEVEL = _HRESULT_TYPEDEF_(0x8004D008L);
static const int XACT_E_NOASYNC = _HRESULT_TYPEDEF_(0x8004D009L);
static const int XACT_E_NOENLIST = _HRESULT_TYPEDEF_(0x8004D00AL);
static const int XACT_E_NOISORETAIN = _HRESULT_TYPEDEF_(0x8004D00BL);
static const int XACT_E_NORESOURCE = _HRESULT_TYPEDEF_(0x8004D00CL);
static const int XACT_E_NOTCURRENT = _HRESULT_TYPEDEF_(0x8004D00DL);
static const int XACT_E_NOTRANSACTION = _HRESULT_TYPEDEF_(0x8004D00EL);
static const int XACT_E_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x8004D00FL);
static const int XACT_E_UNKNOWNRMGRID = _HRESULT_TYPEDEF_(0x8004D010L);
static const int XACT_E_WRONGSTATE = _HRESULT_TYPEDEF_(0x8004D011L);
static const int XACT_E_WRONGUOW = _HRESULT_TYPEDEF_(0x8004D012L);
static const int XACT_E_XTIONEXISTS = _HRESULT_TYPEDEF_(0x8004D013L);
static const int XACT_E_NOIMPORTOBJECT = _HRESULT_TYPEDEF_(0x8004D014L);
static const int XACT_E_INVALIDCOOKIE = _HRESULT_TYPEDEF_(0x8004D015L);
static const int XACT_E_INDOUBT = _HRESULT_TYPEDEF_(0x8004D016L);
static const int XACT_E_NOTIMEOUT = _HRESULT_TYPEDEF_(0x8004D017L);
static const int XACT_E_ALREADYINPROGRESS = _HRESULT_TYPEDEF_(0x8004D018L);
static const int XACT_E_ABORTED = _HRESULT_TYPEDEF_(0x8004D019L);
static const int XACT_E_LOGFULL = _HRESULT_TYPEDEF_(0x8004D01AL);
static const int XACT_E_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004D01BL);
static const int XACT_E_CONNECTION_DOWN = _HRESULT_TYPEDEF_(0x8004D01CL);
static const int XACT_E_CONNECTION_DENIED = _HRESULT_TYPEDEF_(0x8004D01DL);
static const int XACT_E_REENLISTTIMEOUT = _HRESULT_TYPEDEF_(0x8004D01EL);
static const int XACT_E_TIP_CONNECT_FAILED = _HRESULT_TYPEDEF_(0x8004D01FL);
static const int XACT_E_TIP_PROTOCOL_ERROR = _HRESULT_TYPEDEF_(0x8004D020L);
static const int XACT_E_TIP_PULL_FAILED = _HRESULT_TYPEDEF_(0x8004D021L);
static const int XACT_E_DEST_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004D022L);
static const int XACT_E_TIP_DISABLED = _HRESULT_TYPEDEF_(0x8004D023L);
static const int XACT_E_NETWORK_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D024L);
static const int XACT_E_PARTNER_NETWORK_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D025L);
static const int XACT_E_XA_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D026L);
static const int XACT_E_UNABLE_TO_READ_DTC_CONFIG = _HRESULT_TYPEDEF_(0x8004D027L);
static const int XACT_E_UNABLE_TO_LOAD_DTC_PROXY = _HRESULT_TYPEDEF_(0x8004D028L);
static const int XACT_E_ABORTING = _HRESULT_TYPEDEF_(0x8004D029L);
static const int XACT_E_PUSH_COMM_FAILURE = _HRESULT_TYPEDEF_(0x8004D02AL);
static const int XACT_E_PULL_COMM_FAILURE = _HRESULT_TYPEDEF_(0x8004D02BL);
static const int XACT_E_LU_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D02CL);
static const int XACT_E_CLERKNOTFOUND = _HRESULT_TYPEDEF_(0x8004D080L);
static const int XACT_E_CLERKEXISTS = _HRESULT_TYPEDEF_(0x8004D081L);
static const int XACT_E_RECOVERYINPROGRESS = _HRESULT_TYPEDEF_(0x8004D082L);
static const int XACT_E_TRANSACTIONCLOSED = _HRESULT_TYPEDEF_(0x8004D083L);
static const int XACT_E_INVALIDLSN = _HRESULT_TYPEDEF_(0x8004D084L);
static const int XACT_E_REPLAYREQUEST = _HRESULT_TYPEDEF_(0x8004D085L);
static const int XACT_S_ASYNC = _HRESULT_TYPEDEF_(0x0004D000L);
static const int XACT_S_DEFECT = _HRESULT_TYPEDEF_(0x0004D001L);
static const int XACT_S_READONLY = _HRESULT_TYPEDEF_(0x0004D002L);
static const int XACT_S_SOMENORETAIN = _HRESULT_TYPEDEF_(0x0004D003L);
static const int XACT_S_OKINFORM = _HRESULT_TYPEDEF_(0x0004D004L);
static const int XACT_S_MADECHANGESCONTENT = _HRESULT_TYPEDEF_(0x0004D005L);
static const int XACT_S_MADECHANGESINFORM = _HRESULT_TYPEDEF_(0x0004D006L);
static const int XACT_S_ALLNORETAIN = _HRESULT_TYPEDEF_(0x0004D007L);
static const int XACT_S_ABORTING = _HRESULT_TYPEDEF_(0x0004D008L);
static const int XACT_S_SINGLEPHASE = _HRESULT_TYPEDEF_(0x0004D009L);
static const int XACT_S_LOCALLY_OK = _HRESULT_TYPEDEF_(0x0004D00AL);
static const int XACT_S_LASTRESOURCEMANAGER = _HRESULT_TYPEDEF_(0x0004D010L);
static const long CONTEXT_E_FIRST = 0x8004E000L;
static const int CONTEXT_E_LAST = 0x8004E02FL;
static const long CONTEXT_S_FIRST = 0x0004E000L;
static const int CONTEXT_S_LAST = 0x0004E02FL;
static const int CONTEXT_E_ABORTED = _HRESULT_TYPEDEF_(0x8004E002L);
static const int CONTEXT_E_ABORTING = _HRESULT_TYPEDEF_(0x8004E003L);
static const int CONTEXT_E_NOCONTEXT = _HRESULT_TYPEDEF_(0x8004E004L);
static const int CONTEXT_E_WOULD_DEADLOCK = _HRESULT_TYPEDEF_(0x8004E005L);
static const int CONTEXT_E_SYNCH_TIMEOUT = _HRESULT_TYPEDEF_(0x8004E006L);
static const int CONTEXT_E_OLDREF = _HRESULT_TYPEDEF_(0x8004E007L);
static const int CONTEXT_E_ROLENOTFOUND = _HRESULT_TYPEDEF_(0x8004E00CL);
static const int CONTEXT_E_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004E00FL);
static const int CO_E_ACTIVATIONFAILED = _HRESULT_TYPEDEF_(0x8004E021L);
static const int CO_E_ACTIVATIONFAILED_EVENTLOGGED = _HRESULT_TYPEDEF_(0x8004E022L);
static const int CO_E_ACTIVATIONFAILED_CATALOGERROR = _HRESULT_TYPEDEF_(0x8004E023L);
static const int CO_E_ACTIVATIONFAILED_TIMEOUT = _HRESULT_TYPEDEF_(0x8004E024L);
static const int CO_E_INITIALIZATIONFAILED = _HRESULT_TYPEDEF_(0x8004E025L);
static const int CONTEXT_E_NOJIT = _HRESULT_TYPEDEF_(0x8004E026L);
static const int CONTEXT_E_NOTRANSACTION = _HRESULT_TYPEDEF_(0x8004E027L);
static const int CO_E_THREADINGMODEL_CHANGED = _HRESULT_TYPEDEF_(0x8004E028L);
static const int CO_E_NOIISINTRINSICS = _HRESULT_TYPEDEF_(0x8004E029L);
static const int CO_E_NOCOOKIES = _HRESULT_TYPEDEF_(0x8004E02AL);
static const int CO_E_DBERROR = _HRESULT_TYPEDEF_(0x8004E02BL);
static const int CO_E_NOTPOOLED = _HRESULT_TYPEDEF_(0x8004E02CL);
static const int CO_E_NOTCONSTRUCTED = _HRESULT_TYPEDEF_(0x8004E02DL);
static const int CO_E_NOSYNCHRONIZATION = _HRESULT_TYPEDEF_(0x8004E02EL);
static const int CO_E_ISOLEVELMISMATCH = _HRESULT_TYPEDEF_(0x8004E02FL);
static const int CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8004E030L);
static const int CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = _HRESULT_TYPEDEF_(0x8004E031L);
static const int OLE_S_USEREG = _HRESULT_TYPEDEF_(0x00040000L);
static const int OLE_S_STATIC = _HRESULT_TYPEDEF_(0x00040001L);
static const int OLE_S_MAC_CLIPFORMAT = _HRESULT_TYPEDEF_(0x00040002L);
static const int DRAGDROP_S_DROP = _HRESULT_TYPEDEF_(0x00040100L);
static const int DRAGDROP_S_CANCEL = _HRESULT_TYPEDEF_(0x00040101L);
static const int DRAGDROP_S_USEDEFAULTCURSORS = _HRESULT_TYPEDEF_(0x00040102L);
static const int DATA_S_SAMEFORMATETC = _HRESULT_TYPEDEF_(0x00040130L);
static const int VIEW_S_ALREADY_FROZEN = _HRESULT_TYPEDEF_(0x00040140L);
static const int CACHE_S_FORMATETC_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x00040170L);
static const int CACHE_S_SAMECACHE = _HRESULT_TYPEDEF_(0x00040171L);
static const int CACHE_S_SOMECACHES_NOTUPDATED = _HRESULT_TYPEDEF_(0x00040172L);
static const int OLEOBJ_S_INVALIDVERB = _HRESULT_TYPEDEF_(0x00040180L);
static const int OLEOBJ_S_CANNOT_DOVERB_NOW = _HRESULT_TYPEDEF_(0x00040181L);
static const int OLEOBJ_S_INVALIDHWND = _HRESULT_TYPEDEF_(0x00040182L);
static const int INPLACE_S_TRUNCATED = _HRESULT_TYPEDEF_(0x000401A0L);
static const int CONVERT10_S_NO_PRESENTATION = _HRESULT_TYPEDEF_(0x000401C0L);
static const int MK_S_REDUCED_TO_SELF = _HRESULT_TYPEDEF_(0x000401E2L);
static const int MK_S_ME = _HRESULT_TYPEDEF_(0x000401E4L);
static const int MK_S_HIM = _HRESULT_TYPEDEF_(0x000401E5L);
static const int MK_S_US = _HRESULT_TYPEDEF_(0x000401E6L);
static const int MK_S_MONIKERALREADYREGISTERED = _HRESULT_TYPEDEF_(0x000401E7L);
static const int SCHED_S_TASK_READY = _HRESULT_TYPEDEF_(0x00041300L);
static const int SCHED_S_TASK_RUNNING = _HRESULT_TYPEDEF_(0x00041301L);
static const int SCHED_S_TASK_DISABLED = _HRESULT_TYPEDEF_(0x00041302L);
static const int SCHED_S_TASK_HAS_NOT_RUN = _HRESULT_TYPEDEF_(0x00041303L);
static const int SCHED_S_TASK_NO_MORE_RUNS = _HRESULT_TYPEDEF_(0x00041304L);
static const int SCHED_S_TASK_NOT_SCHEDULED = _HRESULT_TYPEDEF_(0x00041305L);
static const int SCHED_S_TASK_TERMINATED = _HRESULT_TYPEDEF_(0x00041306L);
static const int SCHED_S_TASK_NO_VALID_TRIGGERS = _HRESULT_TYPEDEF_(0x00041307L);
static const int SCHED_S_EVENT_TRIGGER = _HRESULT_TYPEDEF_(0x00041308L);
static const int SCHED_E_TRIGGER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80041309L);
static const int SCHED_E_TASK_NOT_READY = _HRESULT_TYPEDEF_(0x8004130AL);
static const int SCHED_E_TASK_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8004130BL);
static const int SCHED_E_SERVICE_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8004130CL);
static const int SCHED_E_CANNOT_OPEN_TASK = _HRESULT_TYPEDEF_(0x8004130DL);
static const int SCHED_E_INVALID_TASK = _HRESULT_TYPEDEF_(0x8004130EL);
static const int SCHED_E_ACCOUNT_INFORMATION_NOT_SET = _HRESULT_TYPEDEF_(0x8004130FL);
static const int SCHED_E_ACCOUNT_NAME_NOT_FOUND = _HRESULT_TYPEDEF_(0x80041310L);
static const int SCHED_E_ACCOUNT_DBASE_CORRUPT = _HRESULT_TYPEDEF_(0x80041311L);
static const int SCHED_E_NO_SECURITY_SERVICES = _HRESULT_TYPEDEF_(0x80041312L);
static const int SCHED_E_UNKNOWN_OBJECT_VERSION = _HRESULT_TYPEDEF_(0x80041313L);
static const int SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = _HRESULT_TYPEDEF_(0x80041314L);
static const int SCHED_E_SERVICE_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80041315L);
static const int SCHED_E_UNEXPECTEDNODE = _HRESULT_TYPEDEF_(0x80041316L);
static const int SCHED_E_NAMESPACE = _HRESULT_TYPEDEF_(0x80041317L);
static const int SCHED_E_INVALIDVALUE = _HRESULT_TYPEDEF_(0x80041318L);
static const int SCHED_E_MISSINGNODE = _HRESULT_TYPEDEF_(0x80041319L);
static const int SCHED_E_MALFORMEDXML = _HRESULT_TYPEDEF_(0x8004131AL);
static const int SCHED_S_SOME_TRIGGERS_FAILED = _HRESULT_TYPEDEF_(0x0004131BL);
static const int SCHED_S_BATCH_LOGON_PROBLEM = _HRESULT_TYPEDEF_(0x0004131CL);
static const int SCHED_E_TOO_MANY_NODES = _HRESULT_TYPEDEF_(0x8004131DL);
static const int SCHED_E_PAST_END_BOUNDARY = _HRESULT_TYPEDEF_(0x8004131EL);
static const int SCHED_E_ALREADY_RUNNING = _HRESULT_TYPEDEF_(0x8004131FL);
static const int SCHED_E_USER_NOT_LOGGED_ON = _HRESULT_TYPEDEF_(0x80041320L);
static const int SCHED_E_INVALID_TASK_HASH = _HRESULT_TYPEDEF_(0x80041321L);
static const int SCHED_E_SERVICE_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80041322L);
static const int SCHED_E_SERVICE_TOO_BUSY = _HRESULT_TYPEDEF_(0x80041323L);
static const int SCHED_E_TASK_ATTEMPTED = _HRESULT_TYPEDEF_(0x80041324L);
static const int SCHED_S_TASK_QUEUED = _HRESULT_TYPEDEF_(0x00041325L);
static const int SCHED_E_TASK_DISABLED = _HRESULT_TYPEDEF_(0x80041326L);
static const int SCHED_E_TASK_NOT_V1_COMPAT = _HRESULT_TYPEDEF_(0x80041327L);
static const int SCHED_E_START_ON_DEMAND = _HRESULT_TYPEDEF_(0x80041328L);
static const int CO_E_CLASS_CREATE_FAILED = _HRESULT_TYPEDEF_(0x80080001L);
static const int CO_E_SCM_ERROR = _HRESULT_TYPEDEF_(0x80080002L);
static const int CO_E_SCM_RPC_FAILURE = _HRESULT_TYPEDEF_(0x80080003L);
static const int CO_E_BAD_PATH = _HRESULT_TYPEDEF_(0x80080004L);
static const int CO_E_SERVER_EXEC_FAILURE = _HRESULT_TYPEDEF_(0x80080005L);
static const int CO_E_OBJSRV_RPC_FAILURE = _HRESULT_TYPEDEF_(0x80080006L);
static const int MK_E_NO_NORMALIZED = _HRESULT_TYPEDEF_(0x80080007L);
static const int CO_E_SERVER_STOPPING = _HRESULT_TYPEDEF_(0x80080008L);
static const int MEM_E_INVALID_ROOT = _HRESULT_TYPEDEF_(0x80080009L);
static const int MEM_E_INVALID_LINK = _HRESULT_TYPEDEF_(0x80080010L);
static const int MEM_E_INVALID_SIZE = _HRESULT_TYPEDEF_(0x80080011L);
static const int CO_S_NOTALLINTERFACES = _HRESULT_TYPEDEF_(0x00080012L);
static const int CO_S_MACHINENAMENOTFOUND = _HRESULT_TYPEDEF_(0x00080013L);
static const int CO_E_MISSING_DISPLAYNAME = _HRESULT_TYPEDEF_(0x80080015L);
static const int CO_E_RUNAS_VALUE_MUST_BE_AAA = _HRESULT_TYPEDEF_(0x80080016L);
static const int CO_E_ELEVATION_DISABLED = _HRESULT_TYPEDEF_(0x80080017L);
static const int DISP_E_UNKNOWNINTERFACE = _HRESULT_TYPEDEF_(0x80020001L);
static const int DISP_E_MEMBERNOTFOUND = _HRESULT_TYPEDEF_(0x80020003L);
static const int DISP_E_PARAMNOTFOUND = _HRESULT_TYPEDEF_(0x80020004L);
static const int DISP_E_TYPEMISMATCH = _HRESULT_TYPEDEF_(0x80020005L);
static const int DISP_E_UNKNOWNNAME = _HRESULT_TYPEDEF_(0x80020006L);
static const int DISP_E_NONAMEDARGS = _HRESULT_TYPEDEF_(0x80020007L);
static const int DISP_E_BADVARTYPE = _HRESULT_TYPEDEF_(0x80020008L);
static const int DISP_E_EXCEPTION = _HRESULT_TYPEDEF_(0x80020009L);
static const int DISP_E_OVERFLOW = _HRESULT_TYPEDEF_(0x8002000AL);
static const int DISP_E_BADINDEX = _HRESULT_TYPEDEF_(0x8002000BL);
static const int DISP_E_UNKNOWNLCID = _HRESULT_TYPEDEF_(0x8002000CL);
static const int DISP_E_ARRAYISLOCKED = _HRESULT_TYPEDEF_(0x8002000DL);
static const int DISP_E_BADPARAMCOUNT = _HRESULT_TYPEDEF_(0x8002000EL);
static const int DISP_E_PARAMNOTOPTIONAL = _HRESULT_TYPEDEF_(0x8002000FL);
static const int DISP_E_BADCALLEE = _HRESULT_TYPEDEF_(0x80020010L);
static const int DISP_E_NOTACOLLECTION = _HRESULT_TYPEDEF_(0x80020011L);
static const int DISP_E_DIVBYZERO = _HRESULT_TYPEDEF_(0x80020012L);
static const int DISP_E_BUFFERTOOSMALL = _HRESULT_TYPEDEF_(0x80020013L);
static const int TYPE_E_BUFFERTOOSMALL = _HRESULT_TYPEDEF_(0x80028016L);
static const int TYPE_E_FIELDNOTFOUND = _HRESULT_TYPEDEF_(0x80028017L);
static const int TYPE_E_INVDATAREAD = _HRESULT_TYPEDEF_(0x80028018L);
static const int TYPE_E_UNSUPFORMAT = _HRESULT_TYPEDEF_(0x80028019L);
static const int TYPE_E_REGISTRYACCESS = _HRESULT_TYPEDEF_(0x8002801CL);
static const int TYPE_E_LIBNOTREGISTERED = _HRESULT_TYPEDEF_(0x8002801DL);
static const int TYPE_E_UNDEFINEDTYPE = _HRESULT_TYPEDEF_(0x80028027L);
static const int TYPE_E_QUALIFIEDNAMEDISALLOWED = _HRESULT_TYPEDEF_(0x80028028L);
static const int TYPE_E_INVALIDSTATE = _HRESULT_TYPEDEF_(0x80028029L);
static const int TYPE_E_WRONGTYPEKIND = _HRESULT_TYPEDEF_(0x8002802AL);
static const int TYPE_E_ELEMENTNOTFOUND = _HRESULT_TYPEDEF_(0x8002802BL);
static const int TYPE_E_AMBIGUOUSNAME = _HRESULT_TYPEDEF_(0x8002802CL);
static const int TYPE_E_NAMECONFLICT = _HRESULT_TYPEDEF_(0x8002802DL);
static const int TYPE_E_UNKNOWNLCID = _HRESULT_TYPEDEF_(0x8002802EL);
static const int TYPE_E_DLLFUNCTIONNOTFOUND = _HRESULT_TYPEDEF_(0x8002802FL);
static const int TYPE_E_BADMODULEKIND = _HRESULT_TYPEDEF_(0x800288BDL);
static const int TYPE_E_SIZETOOBIG = _HRESULT_TYPEDEF_(0x800288C5L);
static const int TYPE_E_DUPLICATEID = _HRESULT_TYPEDEF_(0x800288C6L);
static const int TYPE_E_INVALIDID = _HRESULT_TYPEDEF_(0x800288CFL);
static const int TYPE_E_TYPEMISMATCH = _HRESULT_TYPEDEF_(0x80028CA0L);
static const int TYPE_E_OUTOFBOUNDS = _HRESULT_TYPEDEF_(0x80028CA1L);
static const int TYPE_E_IOERROR = _HRESULT_TYPEDEF_(0x80028CA2L);
static const int TYPE_E_CANTCREATETMPFILE = _HRESULT_TYPEDEF_(0x80028CA3L);
static const int TYPE_E_CANTLOADLIBRARY = _HRESULT_TYPEDEF_(0x80029C4AL);
static const int TYPE_E_INCONSISTENTPROPFUNCS = _HRESULT_TYPEDEF_(0x80029C83L);
static const int TYPE_E_CIRCULARTYPE = _HRESULT_TYPEDEF_(0x80029C84L);
static const int STG_E_INVALIDFUNCTION = _HRESULT_TYPEDEF_(0x80030001L);
static const int STG_E_FILENOTFOUND = _HRESULT_TYPEDEF_(0x80030002L);
static const int STG_E_PATHNOTFOUND = _HRESULT_TYPEDEF_(0x80030003L);
static const int STG_E_TOOMANYOPENFILES = _HRESULT_TYPEDEF_(0x80030004L);
static const int STG_E_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80030005L);
static const int STG_E_INVALIDHANDLE = _HRESULT_TYPEDEF_(0x80030006L);
static const int STG_E_INSUFFICIENTMEMORY = _HRESULT_TYPEDEF_(0x80030008L);
static const int STG_E_INVALIDPOINTER = _HRESULT_TYPEDEF_(0x80030009L);
static const int STG_E_NOMOREFILES = _HRESULT_TYPEDEF_(0x80030012L);
static const int STG_E_DISKISWRITEPROTECTED = _HRESULT_TYPEDEF_(0x80030013L);
static const int STG_E_SEEKERROR = _HRESULT_TYPEDEF_(0x80030019L);
static const int STG_E_WRITEFAULT = _HRESULT_TYPEDEF_(0x8003001DL);
static const int STG_E_READFAULT = _HRESULT_TYPEDEF_(0x8003001EL);
static const int STG_E_SHAREVIOLATION = _HRESULT_TYPEDEF_(0x80030020L);
static const int STG_E_LOCKVIOLATION = _HRESULT_TYPEDEF_(0x80030021L);
static const int STG_E_FILEALREADYEXISTS = _HRESULT_TYPEDEF_(0x80030050L);
static const int STG_E_INVALIDPARAMETER = _HRESULT_TYPEDEF_(0x80030057L);
static const int STG_E_MEDIUMFULL = _HRESULT_TYPEDEF_(0x80030070L);
static const int STG_E_PROPSETMISMATCHED = _HRESULT_TYPEDEF_(0x800300F0L);
static const int STG_E_ABNORMALAPIEXIT = _HRESULT_TYPEDEF_(0x800300FAL);
static const int STG_E_INVALIDHEADER = _HRESULT_TYPEDEF_(0x800300FBL);
static const int STG_E_INVALIDNAME = _HRESULT_TYPEDEF_(0x800300FCL);
static const int STG_E_UNKNOWN = _HRESULT_TYPEDEF_(0x800300FDL);
static const int STG_E_UNIMPLEMENTEDFUNCTION = _HRESULT_TYPEDEF_(0x800300FEL);
static const int STG_E_INVALIDFLAG = _HRESULT_TYPEDEF_(0x800300FFL);
static const int STG_E_INUSE = _HRESULT_TYPEDEF_(0x80030100L);
static const int STG_E_NOTCURRENT = _HRESULT_TYPEDEF_(0x80030101L);
static const int STG_E_REVERTED = _HRESULT_TYPEDEF_(0x80030102L);
static const int STG_E_CANTSAVE = _HRESULT_TYPEDEF_(0x80030103L);
static const int STG_E_OLDFORMAT = _HRESULT_TYPEDEF_(0x80030104L);
static const int STG_E_OLDDLL = _HRESULT_TYPEDEF_(0x80030105L);
static const int STG_E_SHAREREQUIRED = _HRESULT_TYPEDEF_(0x80030106L);
static const int STG_E_NOTFILEBASEDSTORAGE = _HRESULT_TYPEDEF_(0x80030107L);
static const int STG_E_EXTANTMARSHALLINGS = _HRESULT_TYPEDEF_(0x80030108L);
static const int STG_E_DOCFILECORRUPT = _HRESULT_TYPEDEF_(0x80030109L);
static const int STG_E_BADBASEADDRESS = _HRESULT_TYPEDEF_(0x80030110L);
static const int STG_E_DOCFILETOOLARGE = _HRESULT_TYPEDEF_(0x80030111L);
static const int STG_E_NOTSIMPLEFORMAT = _HRESULT_TYPEDEF_(0x80030112L);
static const int STG_E_INCOMPLETE = _HRESULT_TYPEDEF_(0x80030201L);
static const int STG_E_TERMINATED = _HRESULT_TYPEDEF_(0x80030202L);
static const int STG_S_CONVERTED = _HRESULT_TYPEDEF_(0x00030200L);
static const int STG_S_BLOCK = _HRESULT_TYPEDEF_(0x00030201L);
static const int STG_S_RETRYNOW = _HRESULT_TYPEDEF_(0x00030202L);
static const int STG_S_MONITORING = _HRESULT_TYPEDEF_(0x00030203L);
static const int STG_S_MULTIPLEOPENS = _HRESULT_TYPEDEF_(0x00030204L);
static const int STG_S_CONSOLIDATIONFAILED = _HRESULT_TYPEDEF_(0x00030205L);
static const int STG_S_CANNOTCONSOLIDATE = _HRESULT_TYPEDEF_(0x00030206L);
static const int STG_E_STATUS_COPY_PROTECTION_FAILURE = _HRESULT_TYPEDEF_(0x80030305L);
static const int STG_E_CSS_AUTHENTICATION_FAILURE = _HRESULT_TYPEDEF_(0x80030306L);
static const int STG_E_CSS_KEY_NOT_PRESENT = _HRESULT_TYPEDEF_(0x80030307L);
static const int STG_E_CSS_KEY_NOT_ESTABLISHED = _HRESULT_TYPEDEF_(0x80030308L);
static const int STG_E_CSS_SCRAMBLED_SECTOR = _HRESULT_TYPEDEF_(0x80030309L);
static const int STG_E_CSS_REGION_MISMATCH = _HRESULT_TYPEDEF_(0x8003030AL);
static const int STG_E_RESETS_EXHAUSTED = _HRESULT_TYPEDEF_(0x8003030BL);
static const int RPC_E_CALL_REJECTED = _HRESULT_TYPEDEF_(0x80010001L);
static const int RPC_E_CALL_CANCELED = _HRESULT_TYPEDEF_(0x80010002L);
static const int RPC_E_CANTPOST_INSENDCALL = _HRESULT_TYPEDEF_(0x80010003L);
static const int RPC_E_CANTCALLOUT_INASYNCCALL = _HRESULT_TYPEDEF_(0x80010004L);
static const int RPC_E_CANTCALLOUT_INEXTERNALCALL = _HRESULT_TYPEDEF_(0x80010005L);
static const int RPC_E_CONNECTION_TERMINATED = _HRESULT_TYPEDEF_(0x80010006L);
static const int RPC_E_SERVER_DIED = _HRESULT_TYPEDEF_(0x80010007L);
static const int RPC_E_CLIENT_DIED = _HRESULT_TYPEDEF_(0x80010008L);
static const int RPC_E_INVALID_DATAPACKET = _HRESULT_TYPEDEF_(0x80010009L);
static const int RPC_E_CANTTRANSMIT_CALL = _HRESULT_TYPEDEF_(0x8001000AL);
static const int RPC_E_CLIENT_CANTMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000BL);
static const int RPC_E_CLIENT_CANTUNMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000CL);
static const int RPC_E_SERVER_CANTMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000DL);
static const int RPC_E_SERVER_CANTUNMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000EL);
static const int RPC_E_INVALID_DATA = _HRESULT_TYPEDEF_(0x8001000FL);
static const int RPC_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80010010L);
static const int RPC_E_CANTCALLOUT_AGAIN = _HRESULT_TYPEDEF_(0x80010011L);
static const int RPC_E_SERVER_DIED_DNE = _HRESULT_TYPEDEF_(0x80010012L);
static const int RPC_E_SYS_CALL_FAILED = _HRESULT_TYPEDEF_(0x80010100L);
static const int RPC_E_OUT_OF_RESOURCES = _HRESULT_TYPEDEF_(0x80010101L);
static const int RPC_E_ATTEMPTED_MULTITHREAD = _HRESULT_TYPEDEF_(0x80010102L);
static const int RPC_E_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x80010103L);
static const int RPC_E_FAULT = _HRESULT_TYPEDEF_(0x80010104L);
static const int RPC_E_SERVERFAULT = _HRESULT_TYPEDEF_(0x80010105L);
static const int RPC_E_CHANGED_MODE = _HRESULT_TYPEDEF_(0x80010106L);
static const int RPC_E_INVALIDMETHOD = _HRESULT_TYPEDEF_(0x80010107L);
static const int RPC_E_DISCONNECTED = _HRESULT_TYPEDEF_(0x80010108L);
static const int RPC_E_RETRY = _HRESULT_TYPEDEF_(0x80010109L);
static const int RPC_E_SERVERCALL_RETRYLATER = _HRESULT_TYPEDEF_(0x8001010AL);
static const int RPC_E_SERVERCALL_REJECTED = _HRESULT_TYPEDEF_(0x8001010BL);
static const int RPC_E_INVALID_CALLDATA = _HRESULT_TYPEDEF_(0x8001010CL);
static const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL = _HRESULT_TYPEDEF_(0x8001010DL);
static const int RPC_E_WRONG_THREAD = _HRESULT_TYPEDEF_(0x8001010EL);
static const int RPC_E_THREAD_NOT_INIT = _HRESULT_TYPEDEF_(0x8001010FL);
static const int RPC_E_VERSION_MISMATCH = _HRESULT_TYPEDEF_(0x80010110L);
static const int RPC_E_INVALID_HEADER = _HRESULT_TYPEDEF_(0x80010111L);
static const int RPC_E_INVALID_EXTENSION = _HRESULT_TYPEDEF_(0x80010112L);
static const int RPC_E_INVALID_IPID = _HRESULT_TYPEDEF_(0x80010113L);
static const int RPC_E_INVALID_OBJECT = _HRESULT_TYPEDEF_(0x80010114L);
static const int RPC_S_CALLPENDING = _HRESULT_TYPEDEF_(0x80010115L);
static const int RPC_S_WAITONTIMER = _HRESULT_TYPEDEF_(0x80010116L);
static const int RPC_E_CALL_COMPLETE = _HRESULT_TYPEDEF_(0x80010117L);
static const int RPC_E_UNSECURE_CALL = _HRESULT_TYPEDEF_(0x80010118L);
static const int RPC_E_TOO_LATE = _HRESULT_TYPEDEF_(0x80010119L);
static const int RPC_E_NO_GOOD_SECURITY_PACKAGES = _HRESULT_TYPEDEF_(0x8001011AL);
static const int RPC_E_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x8001011BL);
static const int RPC_E_REMOTE_DISABLED = _HRESULT_TYPEDEF_(0x8001011CL);
static const int RPC_E_INVALID_OBJREF = _HRESULT_TYPEDEF_(0x8001011DL);
static const int RPC_E_NO_CONTEXT = _HRESULT_TYPEDEF_(0x8001011EL);
static const int RPC_E_TIMEOUT = _HRESULT_TYPEDEF_(0x8001011FL);
static const int RPC_E_NO_SYNC = _HRESULT_TYPEDEF_(0x80010120L);
static const int RPC_E_FULLSIC_REQUIRED = _HRESULT_TYPEDEF_(0x80010121L);
static const int RPC_E_INVALID_STD_NAME = _HRESULT_TYPEDEF_(0x80010122L);
static const int CO_E_FAILEDTOIMPERSONATE = _HRESULT_TYPEDEF_(0x80010123L);
static const int CO_E_FAILEDTOGETSECCTX = _HRESULT_TYPEDEF_(0x80010124L);
static const int CO_E_FAILEDTOOPENTHREADTOKEN = _HRESULT_TYPEDEF_(0x80010125L);
static const int CO_E_FAILEDTOGETTOKENINFO = _HRESULT_TYPEDEF_(0x80010126L);
static const int CO_E_TRUSTEEDOESNTMATCHCLIENT = _HRESULT_TYPEDEF_(0x80010127L);
static const int CO_E_FAILEDTOQUERYCLIENTBLANKET = _HRESULT_TYPEDEF_(0x80010128L);
static const int CO_E_FAILEDTOSETDACL = _HRESULT_TYPEDEF_(0x80010129L);
static const int CO_E_ACCESSCHECKFAILED = _HRESULT_TYPEDEF_(0x8001012AL);
static const int CO_E_NETACCESSAPIFAILED = _HRESULT_TYPEDEF_(0x8001012BL);
static const int CO_E_WRONGTRUSTEENAMESYNTAX = _HRESULT_TYPEDEF_(0x8001012CL);
static const int CO_E_INVALIDSID = _HRESULT_TYPEDEF_(0x8001012DL);
static const int CO_E_CONVERSIONFAILED = _HRESULT_TYPEDEF_(0x8001012EL);
static const int CO_E_NOMATCHINGSIDFOUND = _HRESULT_TYPEDEF_(0x8001012FL);
static const int CO_E_LOOKUPACCSIDFAILED = _HRESULT_TYPEDEF_(0x80010130L);
static const int CO_E_NOMATCHINGNAMEFOUND = _HRESULT_TYPEDEF_(0x80010131L);
static const int CO_E_LOOKUPACCNAMEFAILED = _HRESULT_TYPEDEF_(0x80010132L);
static const int CO_E_SETSERLHNDLFAILED = _HRESULT_TYPEDEF_(0x80010133L);
static const int CO_E_FAILEDTOGETWINDIR = _HRESULT_TYPEDEF_(0x80010134L);
static const int CO_E_PATHTOOLONG = _HRESULT_TYPEDEF_(0x80010135L);
static const int CO_E_FAILEDTOGENUUID = _HRESULT_TYPEDEF_(0x80010136L);
static const int CO_E_FAILEDTOCREATEFILE = _HRESULT_TYPEDEF_(0x80010137L);
static const int CO_E_FAILEDTOCLOSEHANDLE = _HRESULT_TYPEDEF_(0x80010138L);
static const int CO_E_EXCEEDSYSACLLIMIT = _HRESULT_TYPEDEF_(0x80010139L);
static const int CO_E_ACESINWRONGORDER = _HRESULT_TYPEDEF_(0x8001013AL);
static const int CO_E_INCOMPATIBLESTREAMVERSION = _HRESULT_TYPEDEF_(0x8001013BL);
static const int CO_E_FAILEDTOOPENPROCESSTOKEN = _HRESULT_TYPEDEF_(0x8001013CL);
static const int CO_E_DECODEFAILED = _HRESULT_TYPEDEF_(0x8001013DL);
static const int CO_E_ACNOTINITIALIZED = _HRESULT_TYPEDEF_(0x8001013FL);
static const int CO_E_CANCEL_DISABLED = _HRESULT_TYPEDEF_(0x80010140L);
static const int RPC_E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8001FFFFL);
static const int ERROR_AUDITING_DISABLED = _HRESULT_TYPEDEF_(0xC0090001L);
static const int ERROR_ALL_SIDS_FILTERED = _HRESULT_TYPEDEF_(0xC0090002L);
static const int ERROR_BIZRULES_NOT_ENABLED = _HRESULT_TYPEDEF_(0xC0090003L);
static const int NTE_BAD_UID = _HRESULT_TYPEDEF_(0x80090001L);
static const int NTE_BAD_HASH = _HRESULT_TYPEDEF_(0x80090002L);
static const int NTE_BAD_KEY = _HRESULT_TYPEDEF_(0x80090003L);
static const int NTE_BAD_LEN = _HRESULT_TYPEDEF_(0x80090004L);
static const int NTE_BAD_DATA = _HRESULT_TYPEDEF_(0x80090005L);
static const int NTE_BAD_SIGNATURE = _HRESULT_TYPEDEF_(0x80090006L);
static const int NTE_BAD_VER = _HRESULT_TYPEDEF_(0x80090007L);
static const int NTE_BAD_ALGID = _HRESULT_TYPEDEF_(0x80090008L);
static const int NTE_BAD_FLAGS = _HRESULT_TYPEDEF_(0x80090009L);
static const int NTE_BAD_TYPE = _HRESULT_TYPEDEF_(0x8009000AL);
static const int NTE_BAD_KEY_STATE = _HRESULT_TYPEDEF_(0x8009000BL);
static const int NTE_BAD_HASH_STATE = _HRESULT_TYPEDEF_(0x8009000CL);
static const int NTE_NO_KEY = _HRESULT_TYPEDEF_(0x8009000DL);
static const int NTE_NO_MEMORY = _HRESULT_TYPEDEF_(0x8009000EL);
static const int NTE_EXISTS = _HRESULT_TYPEDEF_(0x8009000FL);
static const int NTE_PERM = _HRESULT_TYPEDEF_(0x80090010L);
static const int NTE_NOT_FOUND = _HRESULT_TYPEDEF_(0x80090011L);
static const int NTE_DOUBLE_ENCRYPT = _HRESULT_TYPEDEF_(0x80090012L);
static const int NTE_BAD_PROVIDER = _HRESULT_TYPEDEF_(0x80090013L);
static const int NTE_BAD_PROV_TYPE = _HRESULT_TYPEDEF_(0x80090014L);
static const int NTE_BAD_PUBLIC_KEY = _HRESULT_TYPEDEF_(0x80090015L);
static const int NTE_BAD_KEYSET = _HRESULT_TYPEDEF_(0x80090016L);
static const int NTE_PROV_TYPE_NOT_DEF = _HRESULT_TYPEDEF_(0x80090017L);
static const int NTE_PROV_TYPE_ENTRY_BAD = _HRESULT_TYPEDEF_(0x80090018L);
static const int NTE_KEYSET_NOT_DEF = _HRESULT_TYPEDEF_(0x80090019L);
static const int NTE_KEYSET_ENTRY_BAD = _HRESULT_TYPEDEF_(0x8009001AL);
static const int NTE_PROV_TYPE_NO_MATCH = _HRESULT_TYPEDEF_(0x8009001BL);
static const int NTE_SIGNATURE_FILE_BAD = _HRESULT_TYPEDEF_(0x8009001CL);
static const int NTE_PROVIDER_DLL_FAIL = _HRESULT_TYPEDEF_(0x8009001DL);
static const int NTE_PROV_DLL_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009001EL);
static const int NTE_BAD_KEYSET_PARAM = _HRESULT_TYPEDEF_(0x8009001FL);
static const int NTE_FAIL = _HRESULT_TYPEDEF_(0x80090020L);
static const int NTE_SYS_ERR = _HRESULT_TYPEDEF_(0x80090021L);
static const int NTE_SILENT_CONTEXT = _HRESULT_TYPEDEF_(0x80090022L);
static const int NTE_TOKEN_KEYSET_STORAGE_FULL = _HRESULT_TYPEDEF_(0x80090023L);
static const int NTE_TEMPORARY_PROFILE = _HRESULT_TYPEDEF_(0x80090024L);
static const int NTE_FIXEDPARAMETER = _HRESULT_TYPEDEF_(0x80090025L);
static const int NTE_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80090026L);
static const int NTE_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80090027L);
static const int NTE_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80090028L);
static const int NTE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80090029L);
static const int NTE_NO_MORE_ITEMS = _HRESULT_TYPEDEF_(0x8009002AL);
static const int NTE_BUFFERS_OVERLAP = _HRESULT_TYPEDEF_(0x8009002BL);
static const int NTE_DECRYPTION_FAILURE = _HRESULT_TYPEDEF_(0x8009002CL);
static const int NTE_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x8009002DL);
static const int NTE_UI_REQUIRED = _HRESULT_TYPEDEF_(0x8009002EL);
static const int NTE_HMAC_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009002FL);
static const int SEC_E_INSUFFICIENT_MEMORY = _HRESULT_TYPEDEF_(0x80090300L);
static const int SEC_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80090301L);
static const int SEC_E_UNSUPPORTED_FUNCTION = _HRESULT_TYPEDEF_(0x80090302L);
static const int SEC_E_TARGET_UNKNOWN = _HRESULT_TYPEDEF_(0x80090303L);
static const int SEC_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80090304L);
static const int SEC_E_SECPKG_NOT_FOUND = _HRESULT_TYPEDEF_(0x80090305L);
static const int SEC_E_NOT_OWNER = _HRESULT_TYPEDEF_(0x80090306L);
static const int SEC_E_CANNOT_INSTALL = _HRESULT_TYPEDEF_(0x80090307L);
static const int SEC_E_INVALID_TOKEN = _HRESULT_TYPEDEF_(0x80090308L);
static const int SEC_E_CANNOT_PACK = _HRESULT_TYPEDEF_(0x80090309L);
static const int SEC_E_QOP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009030AL);
static const int SEC_E_NO_IMPERSONATION = _HRESULT_TYPEDEF_(0x8009030BL);
static const int SEC_E_LOGON_DENIED = _HRESULT_TYPEDEF_(0x8009030CL);
static const int SEC_E_UNKNOWN_CREDENTIALS = _HRESULT_TYPEDEF_(0x8009030DL);
static const int SEC_E_NO_CREDENTIALS = _HRESULT_TYPEDEF_(0x8009030EL);
static const int SEC_E_MESSAGE_ALTERED = _HRESULT_TYPEDEF_(0x8009030FL);
static const int SEC_E_OUT_OF_SEQUENCE = _HRESULT_TYPEDEF_(0x80090310L);
static const int SEC_E_NO_AUTHENTICATING_AUTHORITY = _HRESULT_TYPEDEF_(0x80090311L);
static const int SEC_I_CONTINUE_NEEDED = _HRESULT_TYPEDEF_(0x00090312L);
static const int SEC_I_COMPLETE_NEEDED = _HRESULT_TYPEDEF_(0x00090313L);
static const int SEC_I_COMPLETE_AND_CONTINUE = _HRESULT_TYPEDEF_(0x00090314L);
static const int SEC_I_LOCAL_LOGON = _HRESULT_TYPEDEF_(0x00090315L);
static const int SEC_E_BAD_PKGID = _HRESULT_TYPEDEF_(0x80090316L);
static const int SEC_E_CONTEXT_EXPIRED = _HRESULT_TYPEDEF_(0x80090317L);
static const int SEC_I_CONTEXT_EXPIRED = _HRESULT_TYPEDEF_(0x00090317L);
static const int SEC_E_INCOMPLETE_MESSAGE = _HRESULT_TYPEDEF_(0x80090318L);
static const int SEC_E_INCOMPLETE_CREDENTIALS = _HRESULT_TYPEDEF_(0x80090320L);
static const int SEC_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80090321L);
static const int SEC_I_INCOMPLETE_CREDENTIALS = _HRESULT_TYPEDEF_(0x00090320L);
static const int SEC_I_RENEGOTIATE = _HRESULT_TYPEDEF_(0x00090321L);
static const int SEC_E_WRONG_PRINCIPAL = _HRESULT_TYPEDEF_(0x80090322L);
static const int SEC_I_NO_LSA_CONTEXT = _HRESULT_TYPEDEF_(0x00090323L);
static const int SEC_E_TIME_SKEW = _HRESULT_TYPEDEF_(0x80090324L);
static const int SEC_E_UNTRUSTED_ROOT = _HRESULT_TYPEDEF_(0x80090325L);
static const int SEC_E_ILLEGAL_MESSAGE = _HRESULT_TYPEDEF_(0x80090326L);
static const int SEC_E_CERT_UNKNOWN = _HRESULT_TYPEDEF_(0x80090327L);
static const int SEC_E_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x80090328L);
static const int SEC_E_ENCRYPT_FAILURE = _HRESULT_TYPEDEF_(0x80090329L);
static const int SEC_E_DECRYPT_FAILURE = _HRESULT_TYPEDEF_(0x80090330L);
static const int SEC_E_ALGORITHM_MISMATCH = _HRESULT_TYPEDEF_(0x80090331L);
static const int SEC_E_SECURITY_QOS_FAILED = _HRESULT_TYPEDEF_(0x80090332L);
static const int SEC_E_UNFINISHED_CONTEXT_DELETED = _HRESULT_TYPEDEF_(0x80090333L);
static const int SEC_E_NO_TGT_REPLY = _HRESULT_TYPEDEF_(0x80090334L);
static const int SEC_E_NO_IP_ADDRESSES = _HRESULT_TYPEDEF_(0x80090335L);
static const int SEC_E_WRONG_CREDENTIAL_HANDLE = _HRESULT_TYPEDEF_(0x80090336L);
static const int SEC_E_CRYPTO_SYSTEM_INVALID = _HRESULT_TYPEDEF_(0x80090337L);
static const int SEC_E_MAX_REFERRALS_EXCEEDED = _HRESULT_TYPEDEF_(0x80090338L);
static const int SEC_E_MUST_BE_KDC = _HRESULT_TYPEDEF_(0x80090339L);
static const int SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009033AL);
static const int SEC_E_TOO_MANY_PRINCIPALS = _HRESULT_TYPEDEF_(0x8009033BL);
static const int SEC_E_NO_PA_DATA = _HRESULT_TYPEDEF_(0x8009033CL);
static const int SEC_E_PKINIT_NAME_MISMATCH = _HRESULT_TYPEDEF_(0x8009033DL);
static const int SEC_E_SMARTCARD_LOGON_REQUIRED = _HRESULT_TYPEDEF_(0x8009033EL);
static const int SEC_E_SHUTDOWN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8009033FL);
static const int SEC_E_KDC_INVALID_REQUEST = _HRESULT_TYPEDEF_(0x80090340L);
static const int SEC_E_KDC_UNABLE_TO_REFER = _HRESULT_TYPEDEF_(0x80090341L);
static const int SEC_E_KDC_UNKNOWN_ETYPE = _HRESULT_TYPEDEF_(0x80090342L);
static const int SEC_E_UNSUPPORTED_PREAUTH = _HRESULT_TYPEDEF_(0x80090343L);
static const int SEC_E_DELEGATION_REQUIRED = _HRESULT_TYPEDEF_(0x80090345L);
static const int SEC_E_BAD_BINDINGS = _HRESULT_TYPEDEF_(0x80090346L);
static const int SEC_E_MULTIPLE_ACCOUNTS = _HRESULT_TYPEDEF_(0x80090347L);
static const int SEC_E_NO_KERB_KEY = _HRESULT_TYPEDEF_(0x80090348L);
static const int SEC_E_CERT_WRONG_USAGE = _HRESULT_TYPEDEF_(0x80090349L);
static const int SEC_E_DOWNGRADE_DETECTED = _HRESULT_TYPEDEF_(0x80090350L);
static const int SEC_E_SMARTCARD_CERT_REVOKED = _HRESULT_TYPEDEF_(0x80090351L);
static const int SEC_E_ISSUING_CA_UNTRUSTED = _HRESULT_TYPEDEF_(0x80090352L);
static const int SEC_E_REVOCATION_OFFLINE_C = _HRESULT_TYPEDEF_(0x80090353L);
static const int SEC_E_PKINIT_CLIENT_FAILURE = _HRESULT_TYPEDEF_(0x80090354L);
static const int SEC_E_SMARTCARD_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x80090355L);
static const int SEC_E_NO_S4U_PROT_SUPPORT = _HRESULT_TYPEDEF_(0x80090356L);
static const int SEC_E_CROSSREALM_DELEGATION_FAILURE = _HRESULT_TYPEDEF_(0x80090357L);
static const int SEC_E_REVOCATION_OFFLINE_KDC = _HRESULT_TYPEDEF_(0x80090358L);
static const int SEC_E_ISSUING_CA_UNTRUSTED_KDC = _HRESULT_TYPEDEF_(0x80090359L);
static const int SEC_E_KDC_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x8009035AL);
static const int SEC_E_KDC_CERT_REVOKED = _HRESULT_TYPEDEF_(0x8009035BL);
static const int SEC_I_SIGNATURE_NEEDED = _HRESULT_TYPEDEF_(0x0009035CL);
static const int SEC_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x8009035DL);
static const int SEC_E_DELEGATION_POLICY = _HRESULT_TYPEDEF_(0x8009035EL);
static const int SEC_E_POLICY_NLTM_ONLY = _HRESULT_TYPEDEF_(0x8009035FL);
static const int SEC_I_NO_RENEGOTIATION = _HRESULT_TYPEDEF_(0x00090360L);
static const int SEC_E_NO_CONTEXT = _HRESULT_TYPEDEF_(0x80090361L);
static const int SEC_E_PKU2U_CERT_FAILURE = _HRESULT_TYPEDEF_(0x80090362L);
static const int SEC_E_MUTUAL_AUTH_FAILED = _HRESULT_TYPEDEF_(0x80090363L);
static const int SEC_E_NO_SPM = SEC_E_INTERNAL_ERROR;
static const int SEC_E_NOT_SUPPORTED = SEC_E_UNSUPPORTED_FUNCTION;
static const int CRYPT_E_MSG_ERROR = _HRESULT_TYPEDEF_(0x80091001L);
static const int CRYPT_E_UNKNOWN_ALGO = _HRESULT_TYPEDEF_(0x80091002L);
static const int CRYPT_E_OID_FORMAT = _HRESULT_TYPEDEF_(0x80091003L);
static const int CRYPT_E_INVALID_MSG_TYPE = _HRESULT_TYPEDEF_(0x80091004L);
static const int CRYPT_E_UNEXPECTED_ENCODING = _HRESULT_TYPEDEF_(0x80091005L);
static const int CRYPT_E_AUTH_ATTR_MISSING = _HRESULT_TYPEDEF_(0x80091006L);
static const int CRYPT_E_HASH_VALUE = _HRESULT_TYPEDEF_(0x80091007L);
static const int CRYPT_E_INVALID_INDEX = _HRESULT_TYPEDEF_(0x80091008L);
static const int CRYPT_E_ALREADY_DECRYPTED = _HRESULT_TYPEDEF_(0x80091009L);
static const int CRYPT_E_NOT_DECRYPTED = _HRESULT_TYPEDEF_(0x8009100AL);
static const int CRYPT_E_RECIPIENT_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009100BL);
static const int CRYPT_E_CONTROL_TYPE = _HRESULT_TYPEDEF_(0x8009100CL);
static const int CRYPT_E_ISSUER_SERIALNUMBER = _HRESULT_TYPEDEF_(0x8009100DL);
static const int CRYPT_E_SIGNER_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009100EL);
static const int CRYPT_E_ATTRIBUTES_MISSING = _HRESULT_TYPEDEF_(0x8009100FL);
static const int CRYPT_E_STREAM_MSG_NOT_READY = _HRESULT_TYPEDEF_(0x80091010L);
static const int CRYPT_E_STREAM_INSUFFICIENT_DATA = _HRESULT_TYPEDEF_(0x80091011L);
static const int CRYPT_I_NEW_PROTECTION_REQUIRED = _HRESULT_TYPEDEF_(0x00091012L);
static const int CRYPT_E_BAD_LEN = _HRESULT_TYPEDEF_(0x80092001L);
static const int CRYPT_E_BAD_ENCODE = _HRESULT_TYPEDEF_(0x80092002L);
static const int CRYPT_E_FILE_ERROR = _HRESULT_TYPEDEF_(0x80092003L);
static const int CRYPT_E_NOT_FOUND = _HRESULT_TYPEDEF_(0x80092004L);
static const int CRYPT_E_EXISTS = _HRESULT_TYPEDEF_(0x80092005L);
static const int CRYPT_E_NO_PROVIDER = _HRESULT_TYPEDEF_(0x80092006L);
static const int CRYPT_E_SELF_SIGNED = _HRESULT_TYPEDEF_(0x80092007L);
static const int CRYPT_E_DELETED_PREV = _HRESULT_TYPEDEF_(0x80092008L);
static const int CRYPT_E_NO_MATCH = _HRESULT_TYPEDEF_(0x80092009L);
static const int CRYPT_E_UNEXPECTED_MSG_TYPE = _HRESULT_TYPEDEF_(0x8009200AL);
static const int CRYPT_E_NO_KEY_PROPERTY = _HRESULT_TYPEDEF_(0x8009200BL);
static const int CRYPT_E_NO_DECRYPT_CERT = _HRESULT_TYPEDEF_(0x8009200CL);
static const int CRYPT_E_BAD_MSG = _HRESULT_TYPEDEF_(0x8009200DL);
static const int CRYPT_E_NO_SIGNER = _HRESULT_TYPEDEF_(0x8009200EL);
static const int CRYPT_E_PENDING_CLOSE = _HRESULT_TYPEDEF_(0x8009200FL);
static const int CRYPT_E_REVOKED = _HRESULT_TYPEDEF_(0x80092010L);
static const int CRYPT_E_NO_REVOCATION_DLL = _HRESULT_TYPEDEF_(0x80092011L);
static const int CRYPT_E_NO_REVOCATION_CHECK = _HRESULT_TYPEDEF_(0x80092012L);
static const int CRYPT_E_REVOCATION_OFFLINE = _HRESULT_TYPEDEF_(0x80092013L);
static const int CRYPT_E_NOT_IN_REVOCATION_DATABASE = _HRESULT_TYPEDEF_(0x80092014L);
static const int CRYPT_E_INVALID_NUMERIC_STRING = _HRESULT_TYPEDEF_(0x80092020L);
static const int CRYPT_E_INVALID_PRINTABLE_STRING = _HRESULT_TYPEDEF_(0x80092021L);
static const int CRYPT_E_INVALID_IA5_STRING = _HRESULT_TYPEDEF_(0x80092022L);
static const int CRYPT_E_INVALID_X500_STRING = _HRESULT_TYPEDEF_(0x80092023L);
static const int CRYPT_E_NOT_CHAR_STRING = _HRESULT_TYPEDEF_(0x80092024L);
static const int CRYPT_E_FILERESIZED = _HRESULT_TYPEDEF_(0x80092025L);
static const int CRYPT_E_SECURITY_SETTINGS = _HRESULT_TYPEDEF_(0x80092026L);
static const int CRYPT_E_NO_VERIFY_USAGE_DLL = _HRESULT_TYPEDEF_(0x80092027L);
static const int CRYPT_E_NO_VERIFY_USAGE_CHECK = _HRESULT_TYPEDEF_(0x80092028L);
static const int CRYPT_E_VERIFY_USAGE_OFFLINE = _HRESULT_TYPEDEF_(0x80092029L);
static const int CRYPT_E_NOT_IN_CTL = _HRESULT_TYPEDEF_(0x8009202AL);
static const int CRYPT_E_NO_TRUSTED_SIGNER = _HRESULT_TYPEDEF_(0x8009202BL);
static const int CRYPT_E_MISSING_PUBKEY_PARA = _HRESULT_TYPEDEF_(0x8009202CL);
static const int CRYPT_E_OSS_ERROR = _HRESULT_TYPEDEF_(0x80093000L);
static const int OSS_MORE_BUF = _HRESULT_TYPEDEF_(0x80093001L);
static const int OSS_NEGATIVE_UINTEGER = _HRESULT_TYPEDEF_(0x80093002L);
static const int OSS_PDU_RANGE = _HRESULT_TYPEDEF_(0x80093003L);
static const int OSS_MORE_INPUT = _HRESULT_TYPEDEF_(0x80093004L);
static const int OSS_DATA_ERROR = _HRESULT_TYPEDEF_(0x80093005L);
static const int OSS_BAD_ARG = _HRESULT_TYPEDEF_(0x80093006L);
static const int OSS_BAD_VERSION = _HRESULT_TYPEDEF_(0x80093007L);
static const int OSS_OUT_MEMORY = _HRESULT_TYPEDEF_(0x80093008L);
static const int OSS_PDU_MISMATCH = _HRESULT_TYPEDEF_(0x80093009L);
static const int OSS_LIMITED = _HRESULT_TYPEDEF_(0x8009300AL);
static const int OSS_BAD_PTR = _HRESULT_TYPEDEF_(0x8009300BL);
static const int OSS_BAD_TIME = _HRESULT_TYPEDEF_(0x8009300CL);
static const int OSS_INDEFINITE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009300DL);
static const int OSS_MEM_ERROR = _HRESULT_TYPEDEF_(0x8009300EL);
static const int OSS_BAD_TABLE = _HRESULT_TYPEDEF_(0x8009300FL);
static const int OSS_TOO_LONG = _HRESULT_TYPEDEF_(0x80093010L);
static const int OSS_CONSTRAINT_VIOLATED = _HRESULT_TYPEDEF_(0x80093011L);
static const int OSS_FATAL_ERROR = _HRESULT_TYPEDEF_(0x80093012L);
static const int OSS_ACCESS_SERIALIZATION_ERROR = _HRESULT_TYPEDEF_(0x80093013L);
static const int OSS_NULL_TBL = _HRESULT_TYPEDEF_(0x80093014L);
static const int OSS_NULL_FCN = _HRESULT_TYPEDEF_(0x80093015L);
static const int OSS_BAD_ENCRULES = _HRESULT_TYPEDEF_(0x80093016L);
static const int OSS_UNAVAIL_ENCRULES = _HRESULT_TYPEDEF_(0x80093017L);
static const int OSS_CANT_OPEN_TRACE_WINDOW = _HRESULT_TYPEDEF_(0x80093018L);
static const int OSS_UNIMPLEMENTED = _HRESULT_TYPEDEF_(0x80093019L);
static const int OSS_OID_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009301AL);
static const int OSS_CANT_OPEN_TRACE_FILE = _HRESULT_TYPEDEF_(0x8009301BL);
static const int OSS_TRACE_FILE_ALREADY_OPEN = _HRESULT_TYPEDEF_(0x8009301CL);
static const int OSS_TABLE_MISMATCH = _HRESULT_TYPEDEF_(0x8009301DL);
static const int OSS_TYPE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009301EL);
static const int OSS_REAL_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009301FL);
static const int OSS_REAL_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093020L);
static const int OSS_OUT_OF_RANGE = _HRESULT_TYPEDEF_(0x80093021L);
static const int OSS_COPIER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093022L);
static const int OSS_CONSTRAINT_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093023L);
static const int OSS_COMPARATOR_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093024L);
static const int OSS_COMPARATOR_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093025L);
static const int OSS_MEM_MGR_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093026L);
static const int OSS_PDV_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093027L);
static const int OSS_PDV_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093028L);
static const int OSS_API_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093029L);
static const int OSS_BERDER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009302AL);
static const int OSS_PER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009302BL);
static const int OSS_OPEN_TYPE_ERROR = _HRESULT_TYPEDEF_(0x8009302CL);
static const int OSS_MUTEX_NOT_CREATED = _HRESULT_TYPEDEF_(0x8009302DL);
static const int OSS_CANT_CLOSE_TRACE_FILE = _HRESULT_TYPEDEF_(0x8009302EL);
static const int CRYPT_E_ASN1_ERROR = _HRESULT_TYPEDEF_(0x80093100L);
static const int CRYPT_E_ASN1_INTERNAL = _HRESULT_TYPEDEF_(0x80093101L);
static const int CRYPT_E_ASN1_EOD = _HRESULT_TYPEDEF_(0x80093102L);
static const int CRYPT_E_ASN1_CORRUPT = _HRESULT_TYPEDEF_(0x80093103L);
static const int CRYPT_E_ASN1_LARGE = _HRESULT_TYPEDEF_(0x80093104L);
static const int CRYPT_E_ASN1_CONSTRAINT = _HRESULT_TYPEDEF_(0x80093105L);
static const int CRYPT_E_ASN1_MEMORY = _HRESULT_TYPEDEF_(0x80093106L);
static const int CRYPT_E_ASN1_OVERFLOW = _HRESULT_TYPEDEF_(0x80093107L);
static const int CRYPT_E_ASN1_BADPDU = _HRESULT_TYPEDEF_(0x80093108L);
static const int CRYPT_E_ASN1_BADARGS = _HRESULT_TYPEDEF_(0x80093109L);
static const int CRYPT_E_ASN1_BADREAL = _HRESULT_TYPEDEF_(0x8009310AL);
static const int CRYPT_E_ASN1_BADTAG = _HRESULT_TYPEDEF_(0x8009310BL);
static const int CRYPT_E_ASN1_CHOICE = _HRESULT_TYPEDEF_(0x8009310CL);
static const int CRYPT_E_ASN1_RULE = _HRESULT_TYPEDEF_(0x8009310DL);
static const int CRYPT_E_ASN1_UTF8 = _HRESULT_TYPEDEF_(0x8009310EL);
static const int CRYPT_E_ASN1_PDU_TYPE = _HRESULT_TYPEDEF_(0x80093133L);
static const int CRYPT_E_ASN1_NYI = _HRESULT_TYPEDEF_(0x80093134L);
static const int CRYPT_E_ASN1_EXTENDED = _HRESULT_TYPEDEF_(0x80093201L);
static const int CRYPT_E_ASN1_NOEOD = _HRESULT_TYPEDEF_(0x80093202L);
static const int CERTSRV_E_BAD_REQUESTSUBJECT = _HRESULT_TYPEDEF_(0x80094001L);
static const int CERTSRV_E_NO_REQUEST = _HRESULT_TYPEDEF_(0x80094002L);
static const int CERTSRV_E_BAD_REQUESTSTATUS = _HRESULT_TYPEDEF_(0x80094003L);
static const int CERTSRV_E_PROPERTY_EMPTY = _HRESULT_TYPEDEF_(0x80094004L);
static const int CERTSRV_E_INVALID_CA_CERTIFICATE = _HRESULT_TYPEDEF_(0x80094005L);
static const int CERTSRV_E_SERVER_SUSPENDED = _HRESULT_TYPEDEF_(0x80094006L);
static const int CERTSRV_E_ENCODING_LENGTH = _HRESULT_TYPEDEF_(0x80094007L);
static const int CERTSRV_E_ROLECONFLICT = _HRESULT_TYPEDEF_(0x80094008L);
static const int CERTSRV_E_RESTRICTEDOFFICER = _HRESULT_TYPEDEF_(0x80094009L);
static const int CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = _HRESULT_TYPEDEF_(0x8009400AL);
static const int CERTSRV_E_NO_VALID_KRA = _HRESULT_TYPEDEF_(0x8009400BL);
static const int CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = _HRESULT_TYPEDEF_(0x8009400CL);
static const int CERTSRV_E_NO_CAADMIN_DEFINED = _HRESULT_TYPEDEF_(0x8009400DL);
static const int CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = _HRESULT_TYPEDEF_(0x8009400EL);
static const int CERTSRV_E_NO_DB_SESSIONS = _HRESULT_TYPEDEF_(0x8009400FL);
static const int CERTSRV_E_ALIGNMENT_FAULT = _HRESULT_TYPEDEF_(0x80094010L);
static const int CERTSRV_E_ENROLL_DENIED = _HRESULT_TYPEDEF_(0x80094011L);
static const int CERTSRV_E_TEMPLATE_DENIED = _HRESULT_TYPEDEF_(0x80094012L);
static const int CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = _HRESULT_TYPEDEF_(0x80094013L);
static const int CERTSRV_E_ADMIN_DENIED_REQUEST = _HRESULT_TYPEDEF_(0x80094014L);
static const int CERTSRV_E_NO_POLICY_SERVER = _HRESULT_TYPEDEF_(0x80094015L);
static const int CERTSRV_E_UNSUPPORTED_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094800L);
static const int CERTSRV_E_NO_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094801L);
static const int CERTSRV_E_TEMPLATE_CONFLICT = _HRESULT_TYPEDEF_(0x80094802L);
static const int CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = _HRESULT_TYPEDEF_(0x80094803L);
static const int CERTSRV_E_ARCHIVED_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80094804L);
static const int CERTSRV_E_SMIME_REQUIRED = _HRESULT_TYPEDEF_(0x80094805L);
static const int CERTSRV_E_BAD_RENEWAL_SUBJECT = _HRESULT_TYPEDEF_(0x80094806L);
static const int CERTSRV_E_BAD_TEMPLATE_VERSION = _HRESULT_TYPEDEF_(0x80094807L);
static const int CERTSRV_E_TEMPLATE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x80094808L);
static const int CERTSRV_E_SIGNATURE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x80094809L);
static const int CERTSRV_E_SIGNATURE_COUNT = _HRESULT_TYPEDEF_(0x8009480AL);
static const int CERTSRV_E_SIGNATURE_REJECTED = _HRESULT_TYPEDEF_(0x8009480BL);
static const int CERTSRV_E_ISSUANCE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x8009480CL);
static const int CERTSRV_E_SUBJECT_UPN_REQUIRED = _HRESULT_TYPEDEF_(0x8009480DL);
static const int CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = _HRESULT_TYPEDEF_(0x8009480EL);
static const int CERTSRV_E_SUBJECT_DNS_REQUIRED = _HRESULT_TYPEDEF_(0x8009480FL);
static const int CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = _HRESULT_TYPEDEF_(0x80094810L);
static const int CERTSRV_E_KEY_LENGTH = _HRESULT_TYPEDEF_(0x80094811L);
static const int CERTSRV_E_SUBJECT_EMAIL_REQUIRED = _HRESULT_TYPEDEF_(0x80094812L);
static const int CERTSRV_E_UNKNOWN_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094813L);
static const int CERTSRV_E_CERT_TYPE_OVERLAP = _HRESULT_TYPEDEF_(0x80094814L);
static const int CERTSRV_E_TOO_MANY_SIGNATURES = _HRESULT_TYPEDEF_(0x80094815L);
static const int XENROLL_E_KEY_NOT_EXPORTABLE = _HRESULT_TYPEDEF_(0x80095000L);
static const int XENROLL_E_CANNOT_ADD_ROOT_CERT = _HRESULT_TYPEDEF_(0x80095001L);
static const int XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = _HRESULT_TYPEDEF_(0x80095002L);
static const int XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = _HRESULT_TYPEDEF_(0x80095003L);
static const int XENROLL_E_RESPONSE_KA_HASH_MISMATCH = _HRESULT_TYPEDEF_(0x80095004L);
static const int XENROLL_E_KEYSPEC_SMIME_MISMATCH = _HRESULT_TYPEDEF_(0x80095005L);
static const int TRUST_E_SYSTEM_ERROR = _HRESULT_TYPEDEF_(0x80096001L);
static const int TRUST_E_NO_SIGNER_CERT = _HRESULT_TYPEDEF_(0x80096002L);
static const int TRUST_E_COUNTER_SIGNER = _HRESULT_TYPEDEF_(0x80096003L);
static const int TRUST_E_CERT_SIGNATURE = _HRESULT_TYPEDEF_(0x80096004L);
static const int TRUST_E_TIME_STAMP = _HRESULT_TYPEDEF_(0x80096005L);
static const int TRUST_E_BAD_DIGEST = _HRESULT_TYPEDEF_(0x80096010L);
static const int TRUST_E_BASIC_CONSTRAINTS = _HRESULT_TYPEDEF_(0x80096019L);
static const int TRUST_E_FINANCIAL_CRITERIA = _HRESULT_TYPEDEF_(0x8009601EL);
static const int MSSIPOTF_E_OUTOFMEMRANGE = _HRESULT_TYPEDEF_(0x80097001L);
static const int MSSIPOTF_E_CANTGETOBJECT = _HRESULT_TYPEDEF_(0x80097002L);
static const int MSSIPOTF_E_NOHEADTABLE = _HRESULT_TYPEDEF_(0x80097003L);
static const int MSSIPOTF_E_BAD_MAGICNUMBER = _HRESULT_TYPEDEF_(0x80097004L);
static const int MSSIPOTF_E_BAD_OFFSET_TABLE = _HRESULT_TYPEDEF_(0x80097005L);
static const int MSSIPOTF_E_TABLE_TAGORDER = _HRESULT_TYPEDEF_(0x80097006L);
static const int MSSIPOTF_E_TABLE_LONGWORD = _HRESULT_TYPEDEF_(0x80097007L);
static const int MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = _HRESULT_TYPEDEF_(0x80097008L);
static const int MSSIPOTF_E_TABLES_OVERLAP = _HRESULT_TYPEDEF_(0x80097009L);
static const int MSSIPOTF_E_TABLE_PADBYTES = _HRESULT_TYPEDEF_(0x8009700AL);
static const int MSSIPOTF_E_FILETOOSMALL = _HRESULT_TYPEDEF_(0x8009700BL);
static const int MSSIPOTF_E_TABLE_CHECKSUM = _HRESULT_TYPEDEF_(0x8009700CL);
static const int MSSIPOTF_E_FILE_CHECKSUM = _HRESULT_TYPEDEF_(0x8009700DL);
static const int MSSIPOTF_E_FAILED_POLICY = _HRESULT_TYPEDEF_(0x80097010L);
static const int MSSIPOTF_E_FAILED_HINTS_CHECK = _HRESULT_TYPEDEF_(0x80097011L);
static const int MSSIPOTF_E_NOT_OPENTYPE = _HRESULT_TYPEDEF_(0x80097012L);
static const int MSSIPOTF_E_FILE = _HRESULT_TYPEDEF_(0x80097013L);
static const int MSSIPOTF_E_CRYPT = _HRESULT_TYPEDEF_(0x80097014L);
static const int MSSIPOTF_E_BADVERSION = _HRESULT_TYPEDEF_(0x80097015L);
static const int MSSIPOTF_E_DSIG_STRUCTURE = _HRESULT_TYPEDEF_(0x80097016L);
static const int MSSIPOTF_E_PCONST_CHECK = _HRESULT_TYPEDEF_(0x80097017L);
static const int MSSIPOTF_E_STRUCTURE = _HRESULT_TYPEDEF_(0x80097018L);
static const int ERROR_CRED_REQUIRES_CONFIRMATION = _HRESULT_TYPEDEF_(0x80097019L);
static const int NTE_OP_OK = 0;
static const int TRUST_E_PROVIDER_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0001L);
static const int TRUST_E_ACTION_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0002L);
static const int TRUST_E_SUBJECT_FORM_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0003L);
static const int TRUST_E_SUBJECT_NOT_TRUSTED = _HRESULT_TYPEDEF_(0x800B0004L);
static const int DIGSIG_E_ENCODE = _HRESULT_TYPEDEF_(0x800B0005L);
static const int DIGSIG_E_DECODE = _HRESULT_TYPEDEF_(0x800B0006L);
static const int DIGSIG_E_EXTENSIBILITY = _HRESULT_TYPEDEF_(0x800B0007L);
static const int DIGSIG_E_CRYPTO = _HRESULT_TYPEDEF_(0x800B0008L);
static const int PERSIST_E_SIZEDEFINITE = _HRESULT_TYPEDEF_(0x800B0009L);
static const int PERSIST_E_SIZEINDEFINITE = _HRESULT_TYPEDEF_(0x800B000AL);
static const int PERSIST_E_NOTSELFSIZING = _HRESULT_TYPEDEF_(0x800B000BL);
static const int TRUST_E_NOSIGNATURE = _HRESULT_TYPEDEF_(0x800B0100L);
static const int CERT_E_EXPIRED = _HRESULT_TYPEDEF_(0x800B0101L);
static const int CERT_E_VALIDITYPERIODNESTING = _HRESULT_TYPEDEF_(0x800B0102L);
static const int CERT_E_ROLE = _HRESULT_TYPEDEF_(0x800B0103L);
static const int CERT_E_PATHLEN= _HRESULT_TYPEDEF_(0x800B0104L);
static const int CERT_E_CRITICAL = _HRESULT_TYPEDEF_(0x800B0105L);
static const int CERT_E_PURPOSE = _HRESULT_TYPEDEF_(0x800B0106L);
static const int CERT_E_ISSUERCHAINING = _HRESULT_TYPEDEF_(0x800B0107L);
static const int CERT_E_MALFORMED = _HRESULT_TYPEDEF_(0x800B0108L);
static const int CERT_E_UNTRUSTEDROOT = _HRESULT_TYPEDEF_(0x800B0109L);
static const int CERT_E_CHAINING = _HRESULT_TYPEDEF_(0x800B010AL);
static const int TRUST_E_FAIL = _HRESULT_TYPEDEF_(0x800B010BL);
static const int CERT_E_REVOKED = _HRESULT_TYPEDEF_(0x800B010CL);
static const int CERT_E_UNTRUSTEDTESTROOT = _HRESULT_TYPEDEF_(0x800B010DL);
static const int CERT_E_REVOCATION_FAILURE = _HRESULT_TYPEDEF_(0x800B010EL);
static const int CERT_E_CN_NO_MATCH = _HRESULT_TYPEDEF_(0x800B010FL);
static const int CERT_E_WRONG_USAGE = _HRESULT_TYPEDEF_(0x800B0110L);
static const int TRUST_E_EXPLICIT_DISTRUST = _HRESULT_TYPEDEF_(0x800B0111L);
static const int CERT_E_UNTRUSTEDCA = _HRESULT_TYPEDEF_(0x800B0112L);
static const int CERT_E_INVALID_POLICY = _HRESULT_TYPEDEF_(0x800B0113L);
static const int CERT_E_INVALID_NAME = _HRESULT_TYPEDEF_(0x800B0114L);
static const int HRESULT_FROM_SETUPAPI(x) = ((((x) & (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR)) == (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR)) ? ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_SETUPAPI << 16) | 0x80000000)) : HRESULT_FROM_WIN32(x));
static const int SPAPI_E_EXPECTED_SECTION_NAME = _HRESULT_TYPEDEF_(0x800F0000L);
static const int SPAPI_E_BAD_SECTION_NAME_LINE = _HRESULT_TYPEDEF_(0x800F0001L);
static const int SPAPI_E_SECTION_NAME_TOO_LONG = _HRESULT_TYPEDEF_(0x800F0002L);
static const int SPAPI_E_GENERAL_SYNTAX = _HRESULT_TYPEDEF_(0x800F0003L);
static const int SPAPI_E_WRONG_INF_STYLE = _HRESULT_TYPEDEF_(0x800F0100L);
static const int SPAPI_E_SECTION_NOT_FOUND = _HRESULT_TYPEDEF_(0x800F0101L);
static const int SPAPI_E_LINE_NOT_FOUND = _HRESULT_TYPEDEF_(0x800F0102L);
static const int SPAPI_E_NO_BACKUP = _HRESULT_TYPEDEF_(0x800F0103L);
static const int SPAPI_E_NO_ASSOCIATED_CLASS = _HRESULT_TYPEDEF_(0x800F0200L);
static const int SPAPI_E_CLASS_MISMATCH = _HRESULT_TYPEDEF_(0x800F0201L);
static const int SPAPI_E_DUPLICATE_FOUND = _HRESULT_TYPEDEF_(0x800F0202L);
static const int SPAPI_E_NO_DRIVER_SELECTED = _HRESULT_TYPEDEF_(0x800F0203L);
static const int SPAPI_E_KEY_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x800F0204L);
static const int SPAPI_E_INVALID_DEVINST_NAME = _HRESULT_TYPEDEF_(0x800F0205L);
static const int SPAPI_E_INVALID_CLASS = _HRESULT_TYPEDEF_(0x800F0206L);
static const int SPAPI_E_DEVINST_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x800F0207L);
static const int SPAPI_E_DEVINFO_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x800F0208L);
static const int SPAPI_E_INVALID_REG_PROPERTY = _HRESULT_TYPEDEF_(0x800F0209L);
static const int SPAPI_E_NO_INF = _HRESULT_TYPEDEF_(0x800F020AL);
static const int SPAPI_E_NO_SUCH_DEVINST = _HRESULT_TYPEDEF_(0x800F020BL);
static const int SPAPI_E_CANT_LOAD_CLASS_ICON = _HRESULT_TYPEDEF_(0x800F020CL);
static const int SPAPI_E_INVALID_CLASS_INSTALLER = _HRESULT_TYPEDEF_(0x800F020DL);
static const int SPAPI_E_DI_DO_DEFAULT = _HRESULT_TYPEDEF_(0x800F020EL);
static const int SPAPI_E_DI_NOFILECOPY = _HRESULT_TYPEDEF_(0x800F020FL);
static const int SPAPI_E_INVALID_HWPROFILE = _HRESULT_TYPEDEF_(0x800F0210L);
static const int SPAPI_E_NO_DEVICE_SELECTED = _HRESULT_TYPEDEF_(0x800F0211L);
static const int SPAPI_E_DEVINFO_LIST_LOCKED = _HRESULT_TYPEDEF_(0x800F0212L);
static const int SPAPI_E_DEVINFO_DATA_LOCKED = _HRESULT_TYPEDEF_(0x800F0213L);
static const int SPAPI_E_DI_BAD_PATH = _HRESULT_TYPEDEF_(0x800F0214L);
static const int SPAPI_E_NO_CLASSINSTALL_PARAMS = _HRESULT_TYPEDEF_(0x800F0215L);
static const int SPAPI_E_FILEQUEUE_LOCKED = _HRESULT_TYPEDEF_(0x800F0216L);
static const int SPAPI_E_BAD_SERVICE_INSTALLSECT = _HRESULT_TYPEDEF_(0x800F0217L);
static const int SPAPI_E_NO_CLASS_DRIVER_LIST = _HRESULT_TYPEDEF_(0x800F0218L);
static const int SPAPI_E_NO_ASSOCIATED_SERVICE = _HRESULT_TYPEDEF_(0x800F0219L);
static const int SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = _HRESULT_TYPEDEF_(0x800F021AL);
static const int SPAPI_E_DEVICE_INTERFACE_ACTIVE = _HRESULT_TYPEDEF_(0x800F021BL);
static const int SPAPI_E_DEVICE_INTERFACE_REMOVED = _HRESULT_TYPEDEF_(0x800F021CL);
static const int SPAPI_E_BAD_INTERFACE_INSTALLSECT = _HRESULT_TYPEDEF_(0x800F021DL);
static const int SPAPI_E_NO_SUCH_INTERFACE_CLASS = _HRESULT_TYPEDEF_(0x800F021EL);
static const int SPAPI_E_INVALID_REFERENCE_STRING = _HRESULT_TYPEDEF_(0x800F021FL);
static const int SPAPI_E_INVALID_MACHINENAME = _HRESULT_TYPEDEF_(0x800F0220L);
static const int SPAPI_E_REMOTE_COMM_FAILURE = _HRESULT_TYPEDEF_(0x800F0221L);
static const int SPAPI_E_MACHINE_UNAVAILABLE = _HRESULT_TYPEDEF_(0x800F0222L);
static const int SPAPI_E_NO_CONFIGMGR_SERVICES = _HRESULT_TYPEDEF_(0x800F0223L);
static const int SPAPI_E_INVALID_PROPPAGE_PROVIDER = _HRESULT_TYPEDEF_(0x800F0224L);
static const int SPAPI_E_NO_SUCH_DEVICE_INTERFACE = _HRESULT_TYPEDEF_(0x800F0225L);
static const int SPAPI_E_DI_POSTPROCESSING_REQUIRED = _HRESULT_TYPEDEF_(0x800F0226L);
static const int SPAPI_E_INVALID_COINSTALLER = _HRESULT_TYPEDEF_(0x800F0227L);
static const int SPAPI_E_NO_COMPAT_DRIVERS = _HRESULT_TYPEDEF_(0x800F0228L);
static const int SPAPI_E_NO_DEVICE_ICON = _HRESULT_TYPEDEF_(0x800F0229L);
static const int SPAPI_E_INVALID_INF_LOGCONFIG = _HRESULT_TYPEDEF_(0x800F022AL);
static const int SPAPI_E_DI_DONT_INSTALL = _HRESULT_TYPEDEF_(0x800F022BL);
static const int SPAPI_E_INVALID_FILTER_DRIVER = _HRESULT_TYPEDEF_(0x800F022CL);
static const int SPAPI_E_NON_WINDOWS_NT_DRIVER = _HRESULT_TYPEDEF_(0x800F022DL);
static const int SPAPI_E_NON_WINDOWS_DRIVER = _HRESULT_TYPEDEF_(0x800F022EL);
static const int SPAPI_E_NO_CATALOG_FOR_OEM_INF = _HRESULT_TYPEDEF_(0x800F022FL);
static const int SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = _HRESULT_TYPEDEF_(0x800F0230L);
static const int SPAPI_E_NOT_DISABLEABLE = _HRESULT_TYPEDEF_(0x800F0231L);
static const int SPAPI_E_CANT_REMOVE_DEVINST = _HRESULT_TYPEDEF_(0x800F0232L);
static const int SPAPI_E_INVALID_TARGET = _HRESULT_TYPEDEF_(0x800F0233L);
static const int SPAPI_E_DRIVER_NONNATIVE = _HRESULT_TYPEDEF_(0x800F0234L);
static const int SPAPI_E_IN_WOW64 = _HRESULT_TYPEDEF_(0x800F0235L);
static const int SPAPI_E_SET_SYSTEM_RESTORE_POINT = _HRESULT_TYPEDEF_(0x800F0236L);
static const int SPAPI_E_INCORRECTLY_COPIED_INF = _HRESULT_TYPEDEF_(0x800F0237L);
static const int SPAPI_E_SCE_DISABLED = _HRESULT_TYPEDEF_(0x800F0238L);
static const int SPAPI_E_UNKNOWN_EXCEPTION = _HRESULT_TYPEDEF_(0x800F0239L);
static const int SPAPI_E_PNP_REGISTRY_ERROR = _HRESULT_TYPEDEF_(0x800F023AL);
static const int SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = _HRESULT_TYPEDEF_(0x800F023BL);
static const int SPAPI_E_NOT_AN_INSTALLED_OEM_INF = _HRESULT_TYPEDEF_(0x800F023CL);
static const int SPAPI_E_INF_IN_USE_BY_DEVICES = _HRESULT_TYPEDEF_(0x800F023DL);
static const int SPAPI_E_DI_FUNCTION_OBSOLETE = _HRESULT_TYPEDEF_(0x800F023EL);
static const int SPAPI_E_NO_AUTHENTICODE_CATALOG = _HRESULT_TYPEDEF_(0x800F023FL);
static const int SPAPI_E_AUTHENTICODE_DISALLOWED = _HRESULT_TYPEDEF_(0x800F0240L);
static const int SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = _HRESULT_TYPEDEF_(0x800F0241L);
static const int SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = _HRESULT_TYPEDEF_(0x800F0242L);
static const int SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = _HRESULT_TYPEDEF_(0x800F0243L);
static const int SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = _HRESULT_TYPEDEF_(0x800F0244L);
static const int SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = _HRESULT_TYPEDEF_(0x800F0245L);
static const int SPAPI_E_DEVICE_INSTALLER_NOT_READY = _HRESULT_TYPEDEF_(0x800F0246L);
static const int SPAPI_E_DRIVER_STORE_ADD_FAILED = _HRESULT_TYPEDEF_(0x800F0247L);
static const int SPAPI_E_DEVICE_INSTALL_BLOCKED = _HRESULT_TYPEDEF_(0x800F0248L);
static const int SPAPI_E_DRIVER_INSTALL_BLOCKED = _HRESULT_TYPEDEF_(0x800F0249L);
static const int SPAPI_E_WRONG_INF_TYPE = _HRESULT_TYPEDEF_(0x800F024AL);
static const int SPAPI_E_FILE_HASH_NOT_IN_CATALOG = _HRESULT_TYPEDEF_(0x800F024BL);
static const int SPAPI_E_DRIVER_STORE_DELETE_FAILED = _HRESULT_TYPEDEF_(0x800F024CL);
static const int SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = _HRESULT_TYPEDEF_(0x800F0300L);
static const int SPAPI_E_ERROR_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x800F1000L);
static const int SCARD_S_SUCCESS = NO_ERROR;
static const int SCARD_F_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80100001L);
static const int SCARD_E_CANCELLED = _HRESULT_TYPEDEF_(0x80100002L);
static const int SCARD_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80100003L);
static const int SCARD_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80100004L);
static const int SCARD_E_INVALID_TARGET = _HRESULT_TYPEDEF_(0x80100005L);
static const int SCARD_E_NO_MEMORY = _HRESULT_TYPEDEF_(0x80100006L);
static const int SCARD_F_WAITED_TOO_LONG = _HRESULT_TYPEDEF_(0x80100007L);
static const int SCARD_E_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x80100008L);
static const int SCARD_E_UNKNOWN_READER = _HRESULT_TYPEDEF_(0x80100009L);
static const int SCARD_E_TIMEOUT = _HRESULT_TYPEDEF_(0x8010000AL);
static const int SCARD_E_SHARING_VIOLATION = _HRESULT_TYPEDEF_(0x8010000BL);
static const int SCARD_E_NO_SMARTCARD = _HRESULT_TYPEDEF_(0x8010000CL);
static const int SCARD_E_UNKNOWN_CARD = _HRESULT_TYPEDEF_(0x8010000DL);
static const int SCARD_E_CANT_DISPOSE = _HRESULT_TYPEDEF_(0x8010000EL);
static const int SCARD_E_PROTO_MISMATCH = _HRESULT_TYPEDEF_(0x8010000FL);
static const int SCARD_E_NOT_READY = _HRESULT_TYPEDEF_(0x80100010L);
static const int SCARD_E_INVALID_VALUE = _HRESULT_TYPEDEF_(0x80100011L);
static const int SCARD_E_SYSTEM_CANCELLED = _HRESULT_TYPEDEF_(0x80100012L);
static const int SCARD_F_COMM_ERROR = _HRESULT_TYPEDEF_(0x80100013L);
static const int SCARD_F_UNKNOWN_ERROR = _HRESULT_TYPEDEF_(0x80100014L);
static const int SCARD_E_INVALID_ATR = _HRESULT_TYPEDEF_(0x80100015L);
static const int SCARD_E_NOT_TRANSACTED = _HRESULT_TYPEDEF_(0x80100016L);
static const int SCARD_E_READER_UNAVAILABLE = _HRESULT_TYPEDEF_(0x80100017L);
static const int SCARD_P_SHUTDOWN = _HRESULT_TYPEDEF_(0x80100018L);
static const int SCARD_E_PCI_TOO_SMALL = _HRESULT_TYPEDEF_(0x80100019L);
static const int SCARD_E_READER_UNSUPPORTED = _HRESULT_TYPEDEF_(0x8010001AL);
static const int SCARD_E_DUPLICATE_READER = _HRESULT_TYPEDEF_(0x8010001BL);
static const int SCARD_E_CARD_UNSUPPORTED = _HRESULT_TYPEDEF_(0x8010001CL);
static const int SCARD_E_NO_SERVICE = _HRESULT_TYPEDEF_(0x8010001DL);
static const int SCARD_E_SERVICE_STOPPED = _HRESULT_TYPEDEF_(0x8010001EL);
static const int SCARD_E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8010001FL);
static const int SCARD_E_ICC_INSTALLATION = _HRESULT_TYPEDEF_(0x80100020L);
static const int SCARD_E_ICC_CREATEORDER = _HRESULT_TYPEDEF_(0x80100021L);
static const int SCARD_E_UNSUPPORTED_FEATURE = _HRESULT_TYPEDEF_(0x80100022L);
static const int SCARD_E_DIR_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100023L);
static const int SCARD_E_FILE_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100024L);
static const int SCARD_E_NO_DIR = _HRESULT_TYPEDEF_(0x80100025L);
static const int SCARD_E_NO_FILE = _HRESULT_TYPEDEF_(0x80100026L);
static const int SCARD_E_NO_ACCESS = _HRESULT_TYPEDEF_(0x80100027L);
static const int SCARD_E_WRITE_TOO_MANY = _HRESULT_TYPEDEF_(0x80100028L);
static const int SCARD_E_BAD_SEEK = _HRESULT_TYPEDEF_(0x80100029L);
static const int SCARD_E_INVALID_CHV = _HRESULT_TYPEDEF_(0x8010002AL);
static const int SCARD_E_UNKNOWN_RES_MNG = _HRESULT_TYPEDEF_(0x8010002BL);
static const int SCARD_E_NO_SUCH_CERTIFICATE = _HRESULT_TYPEDEF_(0x8010002CL);
static const int SCARD_E_CERTIFICATE_UNAVAILABLE = _HRESULT_TYPEDEF_(0x8010002DL);
static const int SCARD_E_NO_READERS_AVAILABLE = _HRESULT_TYPEDEF_(0x8010002EL);
static const int SCARD_E_COMM_DATA_LOST = _HRESULT_TYPEDEF_(0x8010002FL);
static const int SCARD_E_NO_KEY_CONTAINER = _HRESULT_TYPEDEF_(0x80100030L);
static const int SCARD_E_SERVER_TOO_BUSY = _HRESULT_TYPEDEF_(0x80100031L);
static const int SCARD_E_PIN_CACHE_EXPIRED = _HRESULT_TYPEDEF_(0x80100032L);
static const int SCARD_E_NO_PIN_CACHE = _HRESULT_TYPEDEF_(0x80100033L);
static const int SCARD_E_READ_ONLY_CARD = _HRESULT_TYPEDEF_(0x80100034L);
static const int SCARD_W_UNSUPPORTED_CARD = _HRESULT_TYPEDEF_(0x80100065L);
static const int SCARD_W_UNRESPONSIVE_CARD = _HRESULT_TYPEDEF_(0x80100066L);
static const int SCARD_W_UNPOWERED_CARD = _HRESULT_TYPEDEF_(0x80100067L);
static const int SCARD_W_RESET_CARD = _HRESULT_TYPEDEF_(0x80100068L);
static const int SCARD_W_REMOVED_CARD = _HRESULT_TYPEDEF_(0x80100069L);
static const int SCARD_W_SECURITY_VIOLATION = _HRESULT_TYPEDEF_(0x8010006AL);
static const int SCARD_W_WRONG_CHV = _HRESULT_TYPEDEF_(0x8010006BL);
static const int SCARD_W_CHV_BLOCKED = _HRESULT_TYPEDEF_(0x8010006CL);
static const int SCARD_W_EOF = _HRESULT_TYPEDEF_(0x8010006DL);
static const int SCARD_W_CANCELLED_BY_USER = _HRESULT_TYPEDEF_(0x8010006EL);
static const int SCARD_W_CARD_NOT_AUTHENTICATED = _HRESULT_TYPEDEF_(0x8010006FL);
static const int SCARD_W_CACHE_ITEM_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100070L);
static const int SCARD_W_CACHE_ITEM_STALE = _HRESULT_TYPEDEF_(0x80100071L);
static const int SCARD_W_CACHE_ITEM_TOO_BIG = _HRESULT_TYPEDEF_(0x80100072L);
static const int COMADMIN_E_OBJECTERRORS = _HRESULT_TYPEDEF_(0x80110401L);
static const int COMADMIN_E_OBJECTINVALID = _HRESULT_TYPEDEF_(0x80110402L);
static const int COMADMIN_E_KEYMISSING = _HRESULT_TYPEDEF_(0x80110403L);
static const int COMADMIN_E_ALREADYINSTALLED = _HRESULT_TYPEDEF_(0x80110404L);
static const int COMADMIN_E_APP_FILE_WRITEFAIL = _HRESULT_TYPEDEF_(0x80110407L);
static const int COMADMIN_E_APP_FILE_READFAIL = _HRESULT_TYPEDEF_(0x80110408L);
static const int COMADMIN_E_APP_FILE_VERSION = _HRESULT_TYPEDEF_(0x80110409L);
static const int COMADMIN_E_BADPATH = _HRESULT_TYPEDEF_(0x8011040AL);
static const int COMADMIN_E_APPLICATIONEXISTS = _HRESULT_TYPEDEF_(0x8011040BL);
static const int COMADMIN_E_ROLEEXISTS = _HRESULT_TYPEDEF_(0x8011040CL);
static const int COMADMIN_E_CANTCOPYFILE = _HRESULT_TYPEDEF_(0x8011040DL);
static const int COMADMIN_E_NOUSER = _HRESULT_TYPEDEF_(0x8011040FL);
static const int COMADMIN_E_INVALIDUSERIDS = _HRESULT_TYPEDEF_(0x80110410L);
static const int COMADMIN_E_NOREGISTRYCLSID = _HRESULT_TYPEDEF_(0x80110411L);
static const int COMADMIN_E_BADREGISTRYPROGID = _HRESULT_TYPEDEF_(0x80110412L);
static const int COMADMIN_E_AUTHENTICATIONLEVEL = _HRESULT_TYPEDEF_(0x80110413L);
static const int COMADMIN_E_USERPASSWDNOTVALID = _HRESULT_TYPEDEF_(0x80110414L);
static const int COMADMIN_E_CLSIDORIIDMISMATCH = _HRESULT_TYPEDEF_(0x80110418L);
static const int COMADMIN_E_REMOTEINTERFACE = _HRESULT_TYPEDEF_(0x80110419L);
static const int COMADMIN_E_DLLREGISTERSERVER = _HRESULT_TYPEDEF_(0x8011041AL);
static const int COMADMIN_E_NOSERVERSHARE = _HRESULT_TYPEDEF_(0x8011041BL);
static const int COMADMIN_E_DLLLOADFAILED = _HRESULT_TYPEDEF_(0x8011041DL);
static const int COMADMIN_E_BADREGISTRYLIBID = _HRESULT_TYPEDEF_(0x8011041EL);
static const int COMADMIN_E_APPDIRNOTFOUND = _HRESULT_TYPEDEF_(0x8011041FL);
static const int COMADMIN_E_REGISTRARFAILED = _HRESULT_TYPEDEF_(0x80110423L);
static const int COMADMIN_E_COMPFILE_DOESNOTEXIST = _HRESULT_TYPEDEF_(0x80110424L);
static const int COMADMIN_E_COMPFILE_LOADDLLFAIL = _HRESULT_TYPEDEF_(0x80110425L);
static const int COMADMIN_E_COMPFILE_GETCLASSOBJ = _HRESULT_TYPEDEF_(0x80110426L);
static const int COMADMIN_E_COMPFILE_CLASSNOTAVAIL = _HRESULT_TYPEDEF_(0x80110427L);
static const int COMADMIN_E_COMPFILE_BADTLB = _HRESULT_TYPEDEF_(0x80110428L);
static const int COMADMIN_E_COMPFILE_NOTINSTALLABLE = _HRESULT_TYPEDEF_(0x80110429L);
static const int COMADMIN_E_NOTCHANGEABLE = _HRESULT_TYPEDEF_(0x8011042AL);
static const int COMADMIN_E_NOTDELETEABLE = _HRESULT_TYPEDEF_(0x8011042BL);
static const int COMADMIN_E_SESSION = _HRESULT_TYPEDEF_(0x8011042CL);
static const int COMADMIN_E_COMP_MOVE_LOCKED = _HRESULT_TYPEDEF_(0x8011042DL);
static const int COMADMIN_E_COMP_MOVE_BAD_DEST = _HRESULT_TYPEDEF_(0x8011042EL);
static const int COMADMIN_E_REGISTERTLB = _HRESULT_TYPEDEF_(0x80110430L);
static const int COMADMIN_E_SYSTEMAPP = _HRESULT_TYPEDEF_(0x80110433L);
static const int COMADMIN_E_COMPFILE_NOREGISTRAR = _HRESULT_TYPEDEF_(0x80110434L);
static const int COMADMIN_E_COREQCOMPINSTALLED = _HRESULT_TYPEDEF_(0x80110435L);
static const int COMADMIN_E_SERVICENOTINSTALLED = _HRESULT_TYPEDEF_(0x80110436L);
static const int COMADMIN_E_PROPERTYSAVEFAILED = _HRESULT_TYPEDEF_(0x80110437L);
static const int COMADMIN_E_OBJECTEXISTS = _HRESULT_TYPEDEF_(0x80110438L);
static const int COMADMIN_E_COMPONENTEXISTS = _HRESULT_TYPEDEF_(0x80110439L);
static const int COMADMIN_E_REGFILE_CORRUPT = _HRESULT_TYPEDEF_(0x8011043BL);
static const int COMADMIN_E_PROPERTY_OVERFLOW = _HRESULT_TYPEDEF_(0x8011043CL);
static const int COMADMIN_E_NOTINREGISTRY = _HRESULT_TYPEDEF_(0x8011043EL);
static const int COMADMIN_E_OBJECTNOTPOOLABLE = _HRESULT_TYPEDEF_(0x8011043FL);
static const int COMADMIN_E_APPLID_MATCHES_CLSID = _HRESULT_TYPEDEF_(0x80110446L);
static const int COMADMIN_E_ROLE_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x80110447L);
static const int COMADMIN_E_START_APP_NEEDS_COMPONENTS = _HRESULT_TYPEDEF_(0x80110448L);
static const int COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = _HRESULT_TYPEDEF_(0x80110449L);
static const int COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = _HRESULT_TYPEDEF_(0x8011044AL);
static const int COMADMIN_E_CAN_NOT_START_APP = _HRESULT_TYPEDEF_(0x8011044BL);
static const int COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = _HRESULT_TYPEDEF_(0x8011044CL);
static const int COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = _HRESULT_TYPEDEF_(0x8011044DL);
static const int COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = _HRESULT_TYPEDEF_(0x8011044EL);
static const int COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = _HRESULT_TYPEDEF_(0x8011044FL);
static const int COMADMIN_E_BASE_PARTITION_ONLY = _HRESULT_TYPEDEF_(0x80110450L);
static const int COMADMIN_E_START_APP_DISABLED = _HRESULT_TYPEDEF_(0x80110451L);
static const int COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = _HRESULT_TYPEDEF_(0x80110457L);
static const int COMADMIN_E_CAT_INVALID_PARTITION_NAME = _HRESULT_TYPEDEF_(0x80110458L);
static const int COMADMIN_E_CAT_PARTITION_IN_USE = _HRESULT_TYPEDEF_(0x80110459L);
static const int COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = _HRESULT_TYPEDEF_(0x8011045AL);
static const int COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8011045BL);
static const int COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = _HRESULT_TYPEDEF_(0x8011045CL);
static const int COMADMIN_E_AMBIGUOUS_PARTITION_NAME = _HRESULT_TYPEDEF_(0x8011045DL);
static const int COMADMIN_E_REGDB_NOTINITIALIZED = _HRESULT_TYPEDEF_(0x80110472L);
static const int COMADMIN_E_REGDB_NOTOPEN = _HRESULT_TYPEDEF_(0x80110473L);
static const int COMADMIN_E_REGDB_SYSTEMERR = _HRESULT_TYPEDEF_(0x80110474L);
static const int COMADMIN_E_REGDB_ALREADYRUNNING = _HRESULT_TYPEDEF_(0x80110475L);
static const int COMADMIN_E_MIG_VERSIONNOTSUPPORTED = _HRESULT_TYPEDEF_(0x80110480L);
static const int COMADMIN_E_MIG_SCHEMANOTFOUND = _HRESULT_TYPEDEF_(0x80110481L);
static const int COMADMIN_E_CAT_BITNESSMISMATCH = _HRESULT_TYPEDEF_(0x80110482L);
static const int COMADMIN_E_CAT_UNACCEPTABLEBITNESS = _HRESULT_TYPEDEF_(0x80110483L);
static const int COMADMIN_E_CAT_WRONGAPPBITNESS = _HRESULT_TYPEDEF_(0x80110484L);
static const int COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80110485L);
static const int COMADMIN_E_CAT_SERVERFAULT = _HRESULT_TYPEDEF_(0x80110486L);
static const int COMQC_E_APPLICATION_NOT_QUEUED = _HRESULT_TYPEDEF_(0x80110600L);
static const int COMQC_E_NO_QUEUEABLE_INTERFACES = _HRESULT_TYPEDEF_(0x80110601L);
static const int COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80110602L);
static const int COMQC_E_NO_IPERSISTSTREAM = _HRESULT_TYPEDEF_(0x80110603L);
static const int COMQC_E_BAD_MESSAGE = _HRESULT_TYPEDEF_(0x80110604L);
static const int COMQC_E_UNAUTHENTICATED = _HRESULT_TYPEDEF_(0x80110605L);
static const int COMQC_E_UNTRUSTED_ENQUEUER = _HRESULT_TYPEDEF_(0x80110606L);
static const int MSDTC_E_DUPLICATE_RESOURCE = _HRESULT_TYPEDEF_(0x80110701L);
static const int COMADMIN_E_OBJECT_PARENT_MISSING = _HRESULT_TYPEDEF_(0x80110808L);
static const int COMADMIN_E_OBJECT_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x80110809L);
static const int COMADMIN_E_APP_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8011080AL);
static const int COMADMIN_E_INVALID_PARTITION = _HRESULT_TYPEDEF_(0x8011080BL);
static const int COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = _HRESULT_TYPEDEF_(0x8011080DL);
static const int COMADMIN_E_USER_IN_SET = _HRESULT_TYPEDEF_(0x8011080EL);
static const int COMADMIN_E_CANTRECYCLELIBRARYAPPS = _HRESULT_TYPEDEF_(0x8011080FL);
static const int COMADMIN_E_CANTRECYCLESERVICEAPPS = _HRESULT_TYPEDEF_(0x80110811L);
static const int COMADMIN_E_PROCESSALREADYRECYCLED = _HRESULT_TYPEDEF_(0x80110812L);
static const int COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = _HRESULT_TYPEDEF_(0x80110813L);
static const int COMADMIN_E_CANTMAKEINPROCSERVICE = _HRESULT_TYPEDEF_(0x80110814L);
static const int COMADMIN_E_PROGIDINUSEBYCLSID = _HRESULT_TYPEDEF_(0x80110815L);
static const int COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = _HRESULT_TYPEDEF_(0x80110816L);
static const int COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = _HRESULT_TYPEDEF_(0x80110817L);
static const int COMADMIN_E_PARTITION_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110818L);
static const int COMADMIN_E_PARTITION_MSI_ONLY = _HRESULT_TYPEDEF_(0x80110819L);
static const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = _HRESULT_TYPEDEF_(0x8011081AL);
static const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = _HRESULT_TYPEDEF_(0x8011081BL);
static const int COMADMIN_E_COMP_MOVE_SOURCE = _HRESULT_TYPEDEF_(0x8011081CL);
static const int COMADMIN_E_COMP_MOVE_DEST = _HRESULT_TYPEDEF_(0x8011081DL);
static const int COMADMIN_E_COMP_MOVE_PRIVATE = _HRESULT_TYPEDEF_(0x8011081EL);
static const int COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = _HRESULT_TYPEDEF_(0x8011081FL);
static const int COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = _HRESULT_TYPEDEF_(0x80110820L);
static const int COMADMIN_E_PRIVATE_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110821L);
static const int COMADMIN_E_SAFERINVALID = _HRESULT_TYPEDEF_(0x80110822L);
static const int COMADMIN_E_REGISTRY_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110823L);
static const int COMADMIN_E_PARTITIONS_DISABLED = _HRESULT_TYPEDEF_(0x80110824L);
static const int FILTER_HRESULT_FROM_FLT_NTSTATUS(x) = (ASSERT((x & 0xfff0000) == 0x001c0000),(HRESULT) (((x) & 0x8000FFFF) | (FACILITY_USERMODE_FILTER_MANAGER << 16)));
static const int ERROR_FLT_IO_COMPLETE = _HRESULT_TYPEDEF_(0x001F0001L);
static const int ERROR_FLT_NO_HANDLER_DEFINED = _HRESULT_TYPEDEF_(0x801F0001L);
static const int ERROR_FLT_CONTEXT_ALREADY_DEFINED = _HRESULT_TYPEDEF_(0x801F0002L);
static const int ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = _HRESULT_TYPEDEF_(0x801F0003L);
static const int ERROR_FLT_DISALLOW_FAST_IO = _HRESULT_TYPEDEF_(0x801F0004L);
static const int ERROR_FLT_INVALID_NAME_REQUEST = _HRESULT_TYPEDEF_(0x801F0005L);
static const int ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = _HRESULT_TYPEDEF_(0x801F0006L);
static const int ERROR_FLT_NOT_INITIALIZED = _HRESULT_TYPEDEF_(0x801F0007L);
static const int ERROR_FLT_FILTER_NOT_READY = _HRESULT_TYPEDEF_(0x801F0008L);
static const int ERROR_FLT_POST_OPERATION_CLEANUP = _HRESULT_TYPEDEF_(0x801F0009L);
static const int ERROR_FLT_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x801F000AL);
static const int ERROR_FLT_DELETING_OBJECT = _HRESULT_TYPEDEF_(0x801F000BL);
static const int ERROR_FLT_MUST_BE_NONPAGED_POOL = _HRESULT_TYPEDEF_(0x801F000CL);
static const int ERROR_FLT_DUPLICATE_ENTRY = _HRESULT_TYPEDEF_(0x801F000DL);
static const int ERROR_FLT_CBDQ_DISABLED = _HRESULT_TYPEDEF_(0x801F000EL);
static const int ERROR_FLT_DO_NOT_ATTACH = _HRESULT_TYPEDEF_(0x801F000FL);
static const int ERROR_FLT_DO_NOT_DETACH = _HRESULT_TYPEDEF_(0x801F0010L);
static const int ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = _HRESULT_TYPEDEF_(0x801F0011L);
static const int ERROR_FLT_INSTANCE_NAME_COLLISION = _HRESULT_TYPEDEF_(0x801F0012L);
static const int ERROR_FLT_FILTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0013L);
static const int ERROR_FLT_VOLUME_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0014L);
static const int ERROR_FLT_INSTANCE_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0015L);
static const int ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0016L);
static const int ERROR_FLT_INVALID_CONTEXT_REGISTRATION = _HRESULT_TYPEDEF_(0x801F0017L);
static const int ERROR_FLT_NAME_CACHE_MISS = _HRESULT_TYPEDEF_(0x801F0018L);
static const int ERROR_FLT_NO_DEVICE_OBJECT = _HRESULT_TYPEDEF_(0x801F0019L);
static const int ERROR_FLT_VOLUME_ALREADY_MOUNTED = _HRESULT_TYPEDEF_(0x801F001AL);
static const int ERROR_FLT_ALREADY_ENLISTED = _HRESULT_TYPEDEF_(0x801F001BL);
static const int ERROR_FLT_CONTEXT_ALREADY_LINKED = _HRESULT_TYPEDEF_(0x801F001CL);
static const int ERROR_FLT_NO_WAITER_FOR_REPLY = _HRESULT_TYPEDEF_(0x801F0020L);
static const int ERROR_HUNG_DISPLAY_DRIVER_THREAD = _HRESULT_TYPEDEF_(0x80260001L);
static const int DWM_E_COMPOSITIONDISABLED = _HRESULT_TYPEDEF_(0x80263001L);
static const int DWM_E_REMOTING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80263002L);
static const int DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = _HRESULT_TYPEDEF_(0x80263003L);
static const int DWM_E_NOT_QUEUING_PRESENTS = _HRESULT_TYPEDEF_(0x80263004L);
static const int DWM_E_ADAPTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80263005L);
static const int DWM_S_GDI_REDIRECTION_SURFACE = _HRESULT_TYPEDEF_(0x00263005L);
static const int ERROR_MONITOR_NO_DESCRIPTOR = _HRESULT_TYPEDEF_(0x00261001L);
static const int ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = _HRESULT_TYPEDEF_(0x00261002L);
static const int ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = _HRESULT_TYPEDEF_(0xC0261003L);
static const int ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = _HRESULT_TYPEDEF_(0xC0261004L);
static const int ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = _HRESULT_TYPEDEF_(0xC0261005L);
static const int ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = _HRESULT_TYPEDEF_(0xC0261006L);
static const int ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = _HRESULT_TYPEDEF_(0xC0261007L);
static const int ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = _HRESULT_TYPEDEF_(0xC0261008L);
static const int ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = _HRESULT_TYPEDEF_(0xC0261009L);
static const int ERROR_MONITOR_INVALID_MANUFACTURE_DATE = _HRESULT_TYPEDEF_(0xC026100AL);
static const int ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = _HRESULT_TYPEDEF_(0xC0262000L);
static const int ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = _HRESULT_TYPEDEF_(0xC0262001L);
static const int ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = _HRESULT_TYPEDEF_(0xC0262002L);
static const int ERROR_GRAPHICS_ADAPTER_WAS_RESET = _HRESULT_TYPEDEF_(0xC0262003L);
static const int ERROR_GRAPHICS_INVALID_DRIVER_MODEL = _HRESULT_TYPEDEF_(0xC0262004L);
static const int ERROR_GRAPHICS_PRESENT_MODE_CHANGED = _HRESULT_TYPEDEF_(0xC0262005L);
static const int ERROR_GRAPHICS_PRESENT_OCCLUDED = _HRESULT_TYPEDEF_(0xC0262006L);
static const int ERROR_GRAPHICS_PRESENT_DENIED = _HRESULT_TYPEDEF_(0xC0262007L);
static const int ERROR_GRAPHICS_CANNOTCOLORCONVERT = _HRESULT_TYPEDEF_(0xC0262008L);
static const int ERROR_GRAPHICS_DRIVER_MISMATCH = _HRESULT_TYPEDEF_(0xC0262009L);
static const int ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = _HRESULT_TYPEDEF_(0x4026200AL);
static const int ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = _HRESULT_TYPEDEF_(0xC026200BL);
static const int ERROR_GRAPHICS_PRESENT_UNOCCLUDED = _HRESULT_TYPEDEF_(0xC026200CL);
static const int ERROR_GRAPHICS_NO_VIDEO_MEMORY = _HRESULT_TYPEDEF_(0xC0262100L);
static const int ERROR_GRAPHICS_CANT_LOCK_MEMORY = _HRESULT_TYPEDEF_(0xC0262101L);
static const int ERROR_GRAPHICS_ALLOCATION_BUSY = _HRESULT_TYPEDEF_(0xC0262102L);
static const int ERROR_GRAPHICS_TOO_MANY_REFERENCES = _HRESULT_TYPEDEF_(0xC0262103L);
static const int ERROR_GRAPHICS_TRY_AGAIN_LATER = _HRESULT_TYPEDEF_(0xC0262104L);
static const int ERROR_GRAPHICS_TRY_AGAIN_NOW = _HRESULT_TYPEDEF_(0xC0262105L);
static const int ERROR_GRAPHICS_ALLOCATION_INVALID = _HRESULT_TYPEDEF_(0xC0262106L);
static const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = _HRESULT_TYPEDEF_(0xC0262107L);
static const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = _HRESULT_TYPEDEF_(0xC0262108L);
static const int ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = _HRESULT_TYPEDEF_(0xC0262109L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = _HRESULT_TYPEDEF_(0xC0262110L);
static const int ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = _HRESULT_TYPEDEF_(0xC0262111L);
static const int ERROR_GRAPHICS_ALLOCATION_CLOSED = _HRESULT_TYPEDEF_(0xC0262112L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = _HRESULT_TYPEDEF_(0xC0262113L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = _HRESULT_TYPEDEF_(0xC0262114L);
static const int ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = _HRESULT_TYPEDEF_(0xC0262115L);
static const int ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = _HRESULT_TYPEDEF_(0xC0262116L);
static const int ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = _HRESULT_TYPEDEF_(0xC0262200L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262300L);
static const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262301L);
static const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262302L);
static const int ERROR_GRAPHICS_INVALID_VIDPN = _HRESULT_TYPEDEF_(0xC0262303L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = _HRESULT_TYPEDEF_(0xC0262304L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = _HRESULT_TYPEDEF_(0xC0262305L);
static const int ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262306L);
static const int ERROR_GRAPHICS_MODE_NOT_PINNED = _HRESULT_TYPEDEF_(0x00262307L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = _HRESULT_TYPEDEF_(0xC0262308L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = _HRESULT_TYPEDEF_(0xC0262309L);
static const int ERROR_GRAPHICS_INVALID_FREQUENCY = _HRESULT_TYPEDEF_(0xC026230AL);
static const int ERROR_GRAPHICS_INVALID_ACTIVE_REGION = _HRESULT_TYPEDEF_(0xC026230BL);
static const int ERROR_GRAPHICS_INVALID_TOTAL_REGION = _HRESULT_TYPEDEF_(0xC026230CL);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = _HRESULT_TYPEDEF_(0xC0262310L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = _HRESULT_TYPEDEF_(0xC0262311L);
static const int ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = _HRESULT_TYPEDEF_(0xC0262312L);
static const int ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262313L);
static const int ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = _HRESULT_TYPEDEF_(0xC0262314L);
static const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = _HRESULT_TYPEDEF_(0xC0262315L);
static const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = _HRESULT_TYPEDEF_(0xC0262316L);
static const int ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC0262317L);
static const int ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC0262318L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = _HRESULT_TYPEDEF_(0xC0262319L);
static const int ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC026231AL);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = _HRESULT_TYPEDEF_(0xC026231BL);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = _HRESULT_TYPEDEF_(0xC026231CL);
static const int ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = _HRESULT_TYPEDEF_(0xC026231DL);
static const int ERROR_GRAPHICS_NO_PREFERRED_MODE = _HRESULT_TYPEDEF_(0x0026231EL);
static const int ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC026231FL);
static const int ERROR_GRAPHICS_STALE_MODESET = _HRESULT_TYPEDEF_(0xC0262320L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = _HRESULT_TYPEDEF_(0xC0262321L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = _HRESULT_TYPEDEF_(0xC0262322L);
static const int ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = _HRESULT_TYPEDEF_(0xC0262323L);
static const int ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262324L);
static const int ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = _HRESULT_TYPEDEF_(0xC0262325L);
static const int ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = _HRESULT_TYPEDEF_(0xC0262326L);
static const int ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262327L);
static const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = _HRESULT_TYPEDEF_(0xC0262328L);
static const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = _HRESULT_TYPEDEF_(0xC0262329L);
static const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = _HRESULT_TYPEDEF_(0xC026232AL);
static const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = _HRESULT_TYPEDEF_(0xC026232BL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = _HRESULT_TYPEDEF_(0xC026232CL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC026232DL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC026232EL);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = _HRESULT_TYPEDEF_(0xC026232FL);
static const int ERROR_GRAPHICS_RESOURCES_NOT_RELATED = _HRESULT_TYPEDEF_(0xC0262330L);
static const int ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262331L);
static const int ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262332L);
static const int ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = _HRESULT_TYPEDEF_(0xC0262333L);
static const int ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = _HRESULT_TYPEDEF_(0xC0262334L);
static const int ERROR_GRAPHICS_NO_VIDPNMGR = _HRESULT_TYPEDEF_(0xC0262335L);
static const int ERROR_GRAPHICS_NO_ACTIVE_VIDPN = _HRESULT_TYPEDEF_(0xC0262336L);
static const int ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262337L);
static const int ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = _HRESULT_TYPEDEF_(0xC0262338L);
static const int ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262339L);
static const int ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = _HRESULT_TYPEDEF_(0xC026233AL);
static const int ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = _HRESULT_TYPEDEF_(0xC026233BL);
static const int ERROR_GRAPHICS_INVALID_STRIDE = _HRESULT_TYPEDEF_(0xC026233CL);
static const int ERROR_GRAPHICS_INVALID_PIXELFORMAT = _HRESULT_TYPEDEF_(0xC026233DL);
static const int ERROR_GRAPHICS_INVALID_COLORBASIS = _HRESULT_TYPEDEF_(0xC026233EL);
static const int ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = _HRESULT_TYPEDEF_(0xC026233FL);
static const int ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262340L);
static const int ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = _HRESULT_TYPEDEF_(0xC0262341L);
static const int ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = _HRESULT_TYPEDEF_(0xC0262342L);
static const int ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = _HRESULT_TYPEDEF_(0xC0262343L);
static const int ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = _HRESULT_TYPEDEF_(0xC0262344L);
static const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = _HRESULT_TYPEDEF_(0xC0262345L);
static const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262346L);
static const int ERROR_GRAPHICS_INVALID_GAMMA_RAMP = _HRESULT_TYPEDEF_(0xC0262347L);
static const int ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262348L);
static const int ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262349L);
static const int ERROR_GRAPHICS_MODE_NOT_IN_MODESET = _HRESULT_TYPEDEF_(0xC026234AL);
static const int ERROR_GRAPHICS_DATASET_IS_EMPTY = _HRESULT_TYPEDEF_(0x0026234BL);
static const int ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = _HRESULT_TYPEDEF_(0x0026234CL);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = _HRESULT_TYPEDEF_(0xC026234DL);
static const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = _HRESULT_TYPEDEF_(0xC026234EL);
static const int ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = _HRESULT_TYPEDEF_(0xC026234FL);
static const int ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0xC0262350L);
static const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = _HRESULT_TYPEDEF_(0x00262351L);
static const int ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = _HRESULT_TYPEDEF_(0xC0262352L);
static const int ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = _HRESULT_TYPEDEF_(0xC0262353L);
static const int ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = _HRESULT_TYPEDEF_(0xC0262354L);
static const int ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = _HRESULT_TYPEDEF_(0xC0262355L);
static const int ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = _HRESULT_TYPEDEF_(0xC0262356L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = _HRESULT_TYPEDEF_(0xC0262357L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = _HRESULT_TYPEDEF_(0xC0262358L);
static const int ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = _HRESULT_TYPEDEF_(0xC0262359L);
static const int ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = _HRESULT_TYPEDEF_(0xC026235AL);
static const int ERROR_GRAPHICS_INVALID_CLIENT_TYPE = _HRESULT_TYPEDEF_(0xC026235BL);
static const int ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = _HRESULT_TYPEDEF_(0xC026235CL);
static const int ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = _HRESULT_TYPEDEF_(0xC0262400L);
static const int ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262401L);
static const int ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = _HRESULT_TYPEDEF_(0x4026242FL);
static const int ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = _HRESULT_TYPEDEF_(0xC0262430L);
static const int ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = _HRESULT_TYPEDEF_(0xC0262431L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = _HRESULT_TYPEDEF_(0xC0262432L);
static const int ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = _HRESULT_TYPEDEF_(0xC0262433L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = _HRESULT_TYPEDEF_(0xC0262434L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = _HRESULT_TYPEDEF_(0xC0262435L);
static const int ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = _HRESULT_TYPEDEF_(0xC0262436L);
static const int ERROR_GRAPHICS_LEADLINK_START_DEFERRED = _HRESULT_TYPEDEF_(0x40262437L);
static const int ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = _HRESULT_TYPEDEF_(0xC0262438L);
static const int ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = _HRESULT_TYPEDEF_(0x40262439L);
static const int ERROR_GRAPHICS_START_DEFERRED = _HRESULT_TYPEDEF_(0x4026243AL);
static const int ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = _HRESULT_TYPEDEF_(0xC026243BL);
static const int ERROR_GRAPHICS_OPM_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262500L);
static const int ERROR_GRAPHICS_COPP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262501L);
static const int ERROR_GRAPHICS_UAB_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262502L);
static const int ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = _HRESULT_TYPEDEF_(0xC0262503L);
static const int ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = _HRESULT_TYPEDEF_(0xC0262505L);
static const int ERROR_GRAPHICS_OPM_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC026250BL);
static const int ERROR_GRAPHICS_OPM_INVALID_HANDLE = _HRESULT_TYPEDEF_(0xC026250CL);
static const int ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = _HRESULT_TYPEDEF_(0xC026250EL);
static const int ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = _HRESULT_TYPEDEF_(0xC026250FL);
static const int ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = _HRESULT_TYPEDEF_(0xC0262510L);
static const int ERROR_GRAPHICS_PVP_HFS_FAILED = _HRESULT_TYPEDEF_(0xC0262511L);
static const int ERROR_GRAPHICS_OPM_INVALID_SRM = _HRESULT_TYPEDEF_(0xC0262512L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = _HRESULT_TYPEDEF_(0xC0262513L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = _HRESULT_TYPEDEF_(0xC0262514L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = _HRESULT_TYPEDEF_(0xC0262515L);
static const int ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = _HRESULT_TYPEDEF_(0xC0262516L);
static const int ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = _HRESULT_TYPEDEF_(0xC0262517L);
static const int ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = _HRESULT_TYPEDEF_(0xC0262518L);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = _HRESULT_TYPEDEF_(0xC026251AL);
static const int ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = _HRESULT_TYPEDEF_(0xC026251BL);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = _HRESULT_TYPEDEF_(0xC026251CL);
static const int ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = _HRESULT_TYPEDEF_(0xC026251DL);
static const int ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC026251EL);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = _HRESULT_TYPEDEF_(0xC026251FL);
static const int ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262520L);
static const int ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = _HRESULT_TYPEDEF_(0xC0262521L);
static const int ERROR_GRAPHICS_I2C_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262580L);
static const int ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0xC0262581L);
static const int ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = _HRESULT_TYPEDEF_(0xC0262582L);
static const int ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = _HRESULT_TYPEDEF_(0xC0262583L);
static const int ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262584L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_DATA = _HRESULT_TYPEDEF_(0xC0262585L);
static const int ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = _HRESULT_TYPEDEF_(0xC0262586L);
static const int ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = _HRESULT_TYPEDEF_(0xC0262587L);
static const int ERROR_GRAPHICS_MCA_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC0262588L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = _HRESULT_TYPEDEF_(0xC0262589L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = _HRESULT_TYPEDEF_(0xC026258AL);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = _HRESULT_TYPEDEF_(0xC026258BL);
static const int ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = _HRESULT_TYPEDEF_(0xC026258CL);
static const int ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = _HRESULT_TYPEDEF_(0xC026258DL);
static const int ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE = _HRESULT_TYPEDEF_(0xC02625D8L);
static const int ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = _HRESULT_TYPEDEF_(0xC02625D9L);
static const int ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = _HRESULT_TYPEDEF_(0xC02625DAL);
static const int ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = _HRESULT_TYPEDEF_(0xC02625DBL);
static const int ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = _HRESULT_TYPEDEF_(0xC02625DCL);
static const int ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = _HRESULT_TYPEDEF_(0xC02625DEL);
static const int ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = _HRESULT_TYPEDEF_(0xC02625DFL);
static const int ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = _HRESULT_TYPEDEF_(0xC02625E0L);
static const int ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = _HRESULT_TYPEDEF_(0xC02625E1L);
static const int ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = _HRESULT_TYPEDEF_(0xC02625E2L);
static const int ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC02625E3L);
static const int ERROR_GRAPHICS_INVALID_POINTER = _HRESULT_TYPEDEF_(0xC02625E4L);
static const int ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = _HRESULT_TYPEDEF_(0xC02625E5L);
static const int ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = _HRESULT_TYPEDEF_(0xC02625E6L);
static const int ERROR_GRAPHICS_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC02625E7L);
static const int ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = _HRESULT_TYPEDEF_(0xC02605E8L);
static const int TPM_E_ERROR_MASK = _HRESULT_TYPEDEF_(0x80280000L);
static const int TPM_E_AUTHFAIL = _HRESULT_TYPEDEF_(0x80280001L);
static const int TPM_E_BADINDEX = _HRESULT_TYPEDEF_(0x80280002L);
static const int TPM_E_BAD_PARAMETER = _HRESULT_TYPEDEF_(0x80280003L);
static const int TPM_E_AUDITFAILURE = _HRESULT_TYPEDEF_(0x80280004L);
static const int TPM_E_CLEAR_DISABLED = _HRESULT_TYPEDEF_(0x80280005L);
static const int TPM_E_DEACTIVATED = _HRESULT_TYPEDEF_(0x80280006L);
static const int TPM_E_DISABLED = _HRESULT_TYPEDEF_(0x80280007L);
static const int TPM_E_DISABLED_CMD = _HRESULT_TYPEDEF_(0x80280008L);
static const int TPM_E_FAIL = _HRESULT_TYPEDEF_(0x80280009L);
static const int TPM_E_BAD_ORDINAL = _HRESULT_TYPEDEF_(0x8028000AL);
static const int TPM_E_INSTALL_DISABLED = _HRESULT_TYPEDEF_(0x8028000BL);
static const int TPM_E_INVALID_KEYHANDLE = _HRESULT_TYPEDEF_(0x8028000CL);
static const int TPM_E_KEYNOTFOUND = _HRESULT_TYPEDEF_(0x8028000DL);
static const int TPM_E_INAPPROPRIATE_ENC = _HRESULT_TYPEDEF_(0x8028000EL);
static const int TPM_E_MIGRATEFAIL = _HRESULT_TYPEDEF_(0x8028000FL);
static const int TPM_E_INVALID_PCR_INFO = _HRESULT_TYPEDEF_(0x80280010L);
static const int TPM_E_NOSPACE = _HRESULT_TYPEDEF_(0x80280011L);
static const int TPM_E_NOSRK = _HRESULT_TYPEDEF_(0x80280012L);
static const int TPM_E_NOTSEALED_BLOB = _HRESULT_TYPEDEF_(0x80280013L);
static const int TPM_E_OWNER_SET = _HRESULT_TYPEDEF_(0x80280014L);
static const int TPM_E_RESOURCES = _HRESULT_TYPEDEF_(0x80280015L);
static const int TPM_E_SHORTRANDOM = _HRESULT_TYPEDEF_(0x80280016L);
static const int TPM_E_SIZE = _HRESULT_TYPEDEF_(0x80280017L);
static const int TPM_E_WRONGPCRVAL = _HRESULT_TYPEDEF_(0x80280018L);
static const int TPM_E_BAD_PARAM_SIZE = _HRESULT_TYPEDEF_(0x80280019L);
static const int TPM_E_SHA_THREAD = _HRESULT_TYPEDEF_(0x8028001AL);
static const int TPM_E_SHA_ERROR = _HRESULT_TYPEDEF_(0x8028001BL);
static const int TPM_E_FAILEDSELFTEST = _HRESULT_TYPEDEF_(0x8028001CL);
static const int TPM_E_AUTH2FAIL = _HRESULT_TYPEDEF_(0x8028001DL);
static const int TPM_E_BADTAG = _HRESULT_TYPEDEF_(0x8028001EL);
static const int TPM_E_IOERROR = _HRESULT_TYPEDEF_(0x8028001FL);
static const int TPM_E_ENCRYPT_ERROR = _HRESULT_TYPEDEF_(0x80280020L);
static const int TPM_E_DECRYPT_ERROR = _HRESULT_TYPEDEF_(0x80280021L);
static const int TPM_E_INVALID_AUTHHANDLE = _HRESULT_TYPEDEF_(0x80280022L);
static const int TPM_E_NO_ENDORSEMENT = _HRESULT_TYPEDEF_(0x80280023L);
static const int TPM_E_INVALID_KEYUSAGE = _HRESULT_TYPEDEF_(0x80280024L);
static const int TPM_E_WRONG_ENTITYTYPE = _HRESULT_TYPEDEF_(0x80280025L);
static const int TPM_E_INVALID_POSTINIT = _HRESULT_TYPEDEF_(0x80280026L);
static const int TPM_E_INAPPROPRIATE_SIG = _HRESULT_TYPEDEF_(0x80280027L);
static const int TPM_E_BAD_KEY_PROPERTY = _HRESULT_TYPEDEF_(0x80280028L);
static const int TPM_E_BAD_MIGRATION = _HRESULT_TYPEDEF_(0x80280029L);
static const int TPM_E_BAD_SCHEME = _HRESULT_TYPEDEF_(0x8028002AL);
static const int TPM_E_BAD_DATASIZE = _HRESULT_TYPEDEF_(0x8028002BL);
static const int TPM_E_BAD_MODE = _HRESULT_TYPEDEF_(0x8028002CL);
static const int TPM_E_BAD_PRESENCE = _HRESULT_TYPEDEF_(0x8028002DL);
static const int TPM_E_BAD_VERSION = _HRESULT_TYPEDEF_(0x8028002EL);
static const int TPM_E_NO_WRAP_TRANSPORT = _HRESULT_TYPEDEF_(0x8028002FL);
static const int TPM_E_AUDITFAIL_UNSUCCESSFUL = _HRESULT_TYPEDEF_(0x80280030L);
static const int TPM_E_AUDITFAIL_SUCCESSFUL = _HRESULT_TYPEDEF_(0x80280031L);
static const int TPM_E_NOTRESETABLE = _HRESULT_TYPEDEF_(0x80280032L);
static const int TPM_E_NOTLOCAL = _HRESULT_TYPEDEF_(0x80280033L);
static const int TPM_E_BAD_TYPE = _HRESULT_TYPEDEF_(0x80280034L);
static const int TPM_E_INVALID_RESOURCE = _HRESULT_TYPEDEF_(0x80280035L);
static const int TPM_E_NOTFIPS = _HRESULT_TYPEDEF_(0x80280036L);
static const int TPM_E_INVALID_FAMILY = _HRESULT_TYPEDEF_(0x80280037L);
static const int TPM_E_NO_NV_PERMISSION = _HRESULT_TYPEDEF_(0x80280038L);
static const int TPM_E_REQUIRES_SIGN = _HRESULT_TYPEDEF_(0x80280039L);
static const int TPM_E_KEY_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x8028003AL);
static const int TPM_E_AUTH_CONFLICT = _HRESULT_TYPEDEF_(0x8028003BL);
static const int TPM_E_AREA_LOCKED = _HRESULT_TYPEDEF_(0x8028003CL);
static const int TPM_E_BAD_LOCALITY = _HRESULT_TYPEDEF_(0x8028003DL);
static const int TPM_E_READ_ONLY = _HRESULT_TYPEDEF_(0x8028003EL);
static const int TPM_E_PER_NOWRITE = _HRESULT_TYPEDEF_(0x8028003FL);
static const int TPM_E_FAMILYCOUNT = _HRESULT_TYPEDEF_(0x80280040L);
static const int TPM_E_WRITE_LOCKED = _HRESULT_TYPEDEF_(0x80280041L);
static const int TPM_E_BAD_ATTRIBUTES = _HRESULT_TYPEDEF_(0x80280042L);
static const int TPM_E_INVALID_STRUCTURE = _HRESULT_TYPEDEF_(0x80280043L);
static const int TPM_E_KEY_OWNER_CONTROL = _HRESULT_TYPEDEF_(0x80280044L);
static const int TPM_E_BAD_COUNTER = _HRESULT_TYPEDEF_(0x80280045L);
static const int TPM_E_NOT_FULLWRITE = _HRESULT_TYPEDEF_(0x80280046L);
static const int TPM_E_CONTEXT_GAP = _HRESULT_TYPEDEF_(0x80280047L);
static const int TPM_E_MAXNVWRITES = _HRESULT_TYPEDEF_(0x80280048L);
static const int TPM_E_NOOPERATOR = _HRESULT_TYPEDEF_(0x80280049L);
static const int TPM_E_RESOURCEMISSING = _HRESULT_TYPEDEF_(0x8028004AL);
static const int TPM_E_DELEGATE_LOCK = _HRESULT_TYPEDEF_(0x8028004BL);
static const int TPM_E_DELEGATE_FAMILY = _HRESULT_TYPEDEF_(0x8028004CL);
static const int TPM_E_DELEGATE_ADMIN = _HRESULT_TYPEDEF_(0x8028004DL);
static const int TPM_E_TRANSPORT_NOTEXCLUSIVE = _HRESULT_TYPEDEF_(0x8028004EL);
static const int TPM_E_OWNER_CONTROL = _HRESULT_TYPEDEF_(0x8028004FL);
static const int TPM_E_DAA_RESOURCES = _HRESULT_TYPEDEF_(0x80280050L);
static const int TPM_E_DAA_INPUT_DATA0 = _HRESULT_TYPEDEF_(0x80280051L);
static const int TPM_E_DAA_INPUT_DATA1 = _HRESULT_TYPEDEF_(0x80280052L);
static const int TPM_E_DAA_ISSUER_SETTINGS = _HRESULT_TYPEDEF_(0x80280053L);
static const int TPM_E_DAA_TPM_SETTINGS = _HRESULT_TYPEDEF_(0x80280054L);
static const int TPM_E_DAA_STAGE = _HRESULT_TYPEDEF_(0x80280055L);
static const int TPM_E_DAA_ISSUER_VALIDITY = _HRESULT_TYPEDEF_(0x80280056L);
static const int TPM_E_DAA_WRONG_W = _HRESULT_TYPEDEF_(0x80280057L);
static const int TPM_E_BAD_HANDLE = _HRESULT_TYPEDEF_(0x80280058L);
static const int TPM_E_BAD_DELEGATE = _HRESULT_TYPEDEF_(0x80280059L);
static const int TPM_E_BADCONTEXT = _HRESULT_TYPEDEF_(0x8028005AL);
static const int TPM_E_TOOMANYCONTEXTS = _HRESULT_TYPEDEF_(0x8028005BL);
static const int TPM_E_MA_TICKET_SIGNATURE = _HRESULT_TYPEDEF_(0x8028005CL);
static const int TPM_E_MA_DESTINATION = _HRESULT_TYPEDEF_(0x8028005DL);
static const int TPM_E_MA_SOURCE = _HRESULT_TYPEDEF_(0x8028005EL);
static const int TPM_E_MA_AUTHORITY = _HRESULT_TYPEDEF_(0x8028005FL);
static const int TPM_E_PERMANENTEK = _HRESULT_TYPEDEF_(0x80280061L);
static const int TPM_E_BAD_SIGNATURE = _HRESULT_TYPEDEF_(0x80280062L);
static const int TPM_E_NOCONTEXTSPACE = _HRESULT_TYPEDEF_(0x80280063L);
static const int TPM_E_COMMAND_BLOCKED = _HRESULT_TYPEDEF_(0x80280400L);
static const int TPM_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80280401L);
static const int TPM_E_DUPLICATE_VHANDLE = _HRESULT_TYPEDEF_(0x80280402L);
static const int TPM_E_EMBEDDED_COMMAND_BLOCKED = _HRESULT_TYPEDEF_(0x80280403L);
static const int TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = _HRESULT_TYPEDEF_(0x80280404L);
static const int TPM_E_RETRY = _HRESULT_TYPEDEF_(0x80280800L);
static const int TPM_E_NEEDS_SELFTEST = _HRESULT_TYPEDEF_(0x80280801L);
static const int TPM_E_DOING_SELFTEST = _HRESULT_TYPEDEF_(0x80280802L);
static const int TPM_E_DEFEND_LOCK_RUNNING = _HRESULT_TYPEDEF_(0x80280803L);
static const int TBS_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80284001L);
static const int TBS_E_BAD_PARAMETER = _HRESULT_TYPEDEF_(0x80284002L);
static const int TBS_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80284003L);
static const int TBS_E_INVALID_CONTEXT = _HRESULT_TYPEDEF_(0x80284004L);
static const int TBS_E_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x80284005L);
static const int TBS_E_IOERROR = _HRESULT_TYPEDEF_(0x80284006L);
static const int TBS_E_INVALID_CONTEXT_PARAM = _HRESULT_TYPEDEF_(0x80284007L);
static const int TBS_E_SERVICE_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80284008L);
static const int TBS_E_TOO_MANY_TBS_CONTEXTS = _HRESULT_TYPEDEF_(0x80284009L);
static const int TBS_E_TOO_MANY_RESOURCES = _HRESULT_TYPEDEF_(0x8028400AL);
static const int TBS_E_SERVICE_START_PENDING = _HRESULT_TYPEDEF_(0x8028400BL);
static const int TBS_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8028400CL);
static const int TBS_E_COMMAND_CANCELED = _HRESULT_TYPEDEF_(0x8028400DL);
static const int TBS_E_BUFFER_TOO_LARGE = _HRESULT_TYPEDEF_(0x8028400EL);
static const int TBS_E_TPM_NOT_FOUND = _HRESULT_TYPEDEF_(0x8028400FL);
static const int TBS_E_SERVICE_DISABLED = _HRESULT_TYPEDEF_(0x80284010L);
static const int TBS_E_NO_EVENT_LOG = _HRESULT_TYPEDEF_(0x80284011L);
static const int TPMAPI_E_INVALID_STATE = _HRESULT_TYPEDEF_(0x80290100L);
static const int TPMAPI_E_NOT_ENOUGH_DATA = _HRESULT_TYPEDEF_(0x80290101L);
static const int TPMAPI_E_TOO_MUCH_DATA = _HRESULT_TYPEDEF_(0x80290102L);
static const int TPMAPI_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80290103L);
static const int TPMAPI_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80290104L);
static const int TPMAPI_E_OUT_OF_MEMORY = _HRESULT_TYPEDEF_(0x80290105L);
static const int TPMAPI_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80290106L);
static const int TPMAPI_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80290107L);
static const int TPMAPI_E_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x80290108L);
static const int TPMAPI_E_AUTHORIZATION_FAILED = _HRESULT_TYPEDEF_(0x80290109L);
static const int TPMAPI_E_INVALID_CONTEXT_HANDLE = _HRESULT_TYPEDEF_(0x8029010AL);
static const int TPMAPI_E_TBS_COMMUNICATION_ERROR = _HRESULT_TYPEDEF_(0x8029010BL);
static const int TPMAPI_E_TPM_COMMAND_ERROR = _HRESULT_TYPEDEF_(0x8029010CL);
static const int TPMAPI_E_MESSAGE_TOO_LARGE = _HRESULT_TYPEDEF_(0x8029010DL);
static const int TPMAPI_E_INVALID_ENCODING = _HRESULT_TYPEDEF_(0x8029010EL);
static const int TPMAPI_E_INVALID_KEY_SIZE = _HRESULT_TYPEDEF_(0x8029010FL);
static const int TPMAPI_E_ENCRYPTION_FAILED = _HRESULT_TYPEDEF_(0x80290110L);
static const int TPMAPI_E_INVALID_KEY_PARAMS = _HRESULT_TYPEDEF_(0x80290111L);
static const int TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = _HRESULT_TYPEDEF_(0x80290112L);
static const int TPMAPI_E_INVALID_PCR_INDEX = _HRESULT_TYPEDEF_(0x80290113L);
static const int TPMAPI_E_INVALID_DELEGATE_BLOB = _HRESULT_TYPEDEF_(0x80290114L);
static const int TPMAPI_E_INVALID_CONTEXT_PARAMS = _HRESULT_TYPEDEF_(0x80290115L);
static const int TPMAPI_E_INVALID_KEY_BLOB = _HRESULT_TYPEDEF_(0x80290116L);
static const int TPMAPI_E_INVALID_PCR_DATA = _HRESULT_TYPEDEF_(0x80290117L);
static const int TPMAPI_E_INVALID_OWNER_AUTH = _HRESULT_TYPEDEF_(0x80290118L);
static const int TPMAPI_E_FIPS_RNG_CHECK_FAILED = _HRESULT_TYPEDEF_(0x80290119L);
static const int TPMAPI_E_EMPTY_TCG_LOG = _HRESULT_TYPEDEF_(0x8029011AL);
static const int TPMAPI_E_INVALID_TCG_LOG_ENTRY = _HRESULT_TYPEDEF_(0x8029011BL);
static const int TPMAPI_E_TCG_SEPARATOR_ABSENT = _HRESULT_TYPEDEF_(0x8029011CL);
static const int TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = _HRESULT_TYPEDEF_(0x8029011DL);
static const int TBSIMP_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80290200L);
static const int TBSIMP_E_CLEANUP_FAILED = _HRESULT_TYPEDEF_(0x80290201L);
static const int TBSIMP_E_INVALID_CONTEXT_HANDLE = _HRESULT_TYPEDEF_(0x80290202L);
static const int TBSIMP_E_INVALID_CONTEXT_PARAM = _HRESULT_TYPEDEF_(0x80290203L);
static const int TBSIMP_E_TPM_ERROR = _HRESULT_TYPEDEF_(0x80290204L);
static const int TBSIMP_E_HASH_BAD_KEY = _HRESULT_TYPEDEF_(0x80290205L);
static const int TBSIMP_E_DUPLICATE_VHANDLE = _HRESULT_TYPEDEF_(0x80290206L);
static const int TBSIMP_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80290207L);
static const int TBSIMP_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80290208L);
static const int TBSIMP_E_RPC_INIT_FAILED = _HRESULT_TYPEDEF_(0x80290209L);
static const int TBSIMP_E_SCHEDULER_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8029020AL);
static const int TBSIMP_E_COMMAND_CANCELED = _HRESULT_TYPEDEF_(0x8029020BL);
static const int TBSIMP_E_OUT_OF_MEMORY = _HRESULT_TYPEDEF_(0x8029020CL);
static const int TBSIMP_E_LIST_NO_MORE_ITEMS = _HRESULT_TYPEDEF_(0x8029020DL);
static const int TBSIMP_E_LIST_NOT_FOUND = _HRESULT_TYPEDEF_(0x8029020EL);
static const int TBSIMP_E_NOT_ENOUGH_SPACE = _HRESULT_TYPEDEF_(0x8029020FL);
static const int TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = _HRESULT_TYPEDEF_(0x80290210L);
static const int TBSIMP_E_COMMAND_FAILED = _HRESULT_TYPEDEF_(0x80290211L);
static const int TBSIMP_E_UNKNOWN_ORDINAL = _HRESULT_TYPEDEF_(0x80290212L);
static const int TBSIMP_E_RESOURCE_EXPIRED = _HRESULT_TYPEDEF_(0x80290213L);
static const int TBSIMP_E_INVALID_RESOURCE = _HRESULT_TYPEDEF_(0x80290214L);
static const int TBSIMP_E_NOTHING_TO_UNLOAD = _HRESULT_TYPEDEF_(0x80290215L);
static const int TBSIMP_E_HASH_TABLE_FULL = _HRESULT_TYPEDEF_(0x80290216L);
static const int TBSIMP_E_TOO_MANY_TBS_CONTEXTS = _HRESULT_TYPEDEF_(0x80290217L);
static const int TBSIMP_E_TOO_MANY_RESOURCES = _HRESULT_TYPEDEF_(0x80290218L);
static const int TBSIMP_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80290219L);
static const int TBSIMP_E_TPM_INCOMPATIBLE = _HRESULT_TYPEDEF_(0x8029021AL);
static const int TBSIMP_E_NO_EVENT_LOG = _HRESULT_TYPEDEF_(0x8029021BL);
static const int TPM_E_PPI_ACPI_FAILURE = _HRESULT_TYPEDEF_(0x80290300L);
static const int TPM_E_PPI_USER_ABORT = _HRESULT_TYPEDEF_(0x80290301L);
static const int TPM_E_PPI_BIOS_FAILURE = _HRESULT_TYPEDEF_(0x80290302L);
static const int TPM_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80290303L);
static const int PLA_E_DCS_NOT_FOUND = _HRESULT_TYPEDEF_(0x80300002L);
static const int PLA_E_DCS_IN_USE = _HRESULT_TYPEDEF_(0x803000AAL);
static const int PLA_E_TOO_MANY_FOLDERS = _HRESULT_TYPEDEF_(0x80300045L);
static const int PLA_E_NO_MIN_DISK = _HRESULT_TYPEDEF_(0x80300070L);
static const int PLA_E_DCS_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x803000B7L);
static const int PLA_S_PROPERTY_IGNORED = _HRESULT_TYPEDEF_(0x00300100L);
static const int PLA_E_PROPERTY_CONFLICT = _HRESULT_TYPEDEF_(0x80300101L);
static const int PLA_E_DCS_SINGLETON_REQUIRED = _HRESULT_TYPEDEF_(0x80300102L);
static const int PLA_E_CREDENTIALS_REQUIRED = _HRESULT_TYPEDEF_(0x80300103L);
static const int PLA_E_DCS_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80300104L);
static const int PLA_E_CONFLICT_INCL_EXCL_API = _HRESULT_TYPEDEF_(0x80300105L);
static const int PLA_E_NETWORK_EXE_NOT_VALID = _HRESULT_TYPEDEF_(0x80300106L);
static const int PLA_E_EXE_ALREADY_CONFIGURED = _HRESULT_TYPEDEF_(0x80300107L);
static const int PLA_E_EXE_PATH_NOT_VALID = _HRESULT_TYPEDEF_(0x80300108L);
static const int PLA_E_DC_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x80300109L);
static const int PLA_E_DCS_START_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010AL);
static const int PLA_E_DC_START_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010BL);
static const int PLA_E_REPORT_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010CL);
static const int PLA_E_NO_DUPLICATES = _HRESULT_TYPEDEF_(0x8030010DL);
static const int PLA_E_EXE_FULL_PATH_REQUIRED = _HRESULT_TYPEDEF_(0x8030010EL);
static const int PLA_E_INVALID_SESSION_NAME = _HRESULT_TYPEDEF_(0x8030010FL);
static const int PLA_E_PLA_CHANNEL_NOT_ENABLED = _HRESULT_TYPEDEF_(0x80300110L);
static const int PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = _HRESULT_TYPEDEF_(0x80300111L);
static const int PLA_E_RULES_MANAGER_FAILED = _HRESULT_TYPEDEF_(0x80300112L);
static const int PLA_E_CABAPI_FAILURE = _HRESULT_TYPEDEF_(0x80300113L);
static const int FVE_E_LOCKED_VOLUME = _HRESULT_TYPEDEF_(0x80310000L);
static const int FVE_E_NOT_ENCRYPTED = _HRESULT_TYPEDEF_(0x80310001L);
static const int FVE_E_NO_TPM_BIOS = _HRESULT_TYPEDEF_(0x80310002L);
static const int FVE_E_NO_MBR_METRIC = _HRESULT_TYPEDEF_(0x80310003L);
static const int FVE_E_NO_BOOTSECTOR_METRIC = _HRESULT_TYPEDEF_(0x80310004L);
static const int FVE_E_NO_BOOTMGR_METRIC = _HRESULT_TYPEDEF_(0x80310005L);
static const int FVE_E_WRONG_BOOTMGR = _HRESULT_TYPEDEF_(0x80310006L);
static const int FVE_E_SECURE_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310007L);
static const int FVE_E_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80310008L);
static const int FVE_E_ACTION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310009L);
static const int FVE_E_AD_SCHEMA_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8031000AL);
static const int FVE_E_AD_INVALID_DATATYPE = _HRESULT_TYPEDEF_(0x8031000BL);
static const int FVE_E_AD_INVALID_DATASIZE = _HRESULT_TYPEDEF_(0x8031000CL);
static const int FVE_E_AD_NO_VALUES = _HRESULT_TYPEDEF_(0x8031000DL);
static const int FVE_E_AD_ATTR_NOT_SET = _HRESULT_TYPEDEF_(0x8031000EL);
static const int FVE_E_AD_GUID_NOT_FOUND = _HRESULT_TYPEDEF_(0x8031000FL);
static const int FVE_E_BAD_INFORMATION = _HRESULT_TYPEDEF_(0x80310010L);
static const int FVE_E_TOO_SMALL = _HRESULT_TYPEDEF_(0x80310011L);
static const int FVE_E_SYSTEM_VOLUME = _HRESULT_TYPEDEF_(0x80310012L);
static const int FVE_E_FAILED_WRONG_FS = _HRESULT_TYPEDEF_(0x80310013L);
static const int FVE_E_BAD_PARTITION_SIZE = _HRESULT_TYPEDEF_(0x80310014L);
static const int FVE_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310015L);
static const int FVE_E_BAD_DATA = _HRESULT_TYPEDEF_(0x80310016L);
static const int FVE_E_VOLUME_NOT_BOUND = _HRESULT_TYPEDEF_(0x80310017L);
static const int FVE_E_TPM_NOT_OWNED = _HRESULT_TYPEDEF_(0x80310018L);
static const int FVE_E_NOT_DATA_VOLUME = _HRESULT_TYPEDEF_(0x80310019L);
static const int FVE_E_AD_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x8031001AL);
static const int FVE_E_CONV_READ = _HRESULT_TYPEDEF_(0x8031001BL);
static const int FVE_E_CONV_WRITE = _HRESULT_TYPEDEF_(0x8031001CL);
static const int FVE_E_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x8031001DL);
static const int FVE_E_CLUSTERING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8031001EL);
static const int FVE_E_VOLUME_BOUND_ALREADY = _HRESULT_TYPEDEF_(0x8031001FL);
static const int FVE_E_OS_NOT_PROTECTED = _HRESULT_TYPEDEF_(0x80310020L);
static const int FVE_E_PROTECTION_DISABLED = _HRESULT_TYPEDEF_(0x80310021L);
static const int FVE_E_RECOVERY_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310022L);
static const int FVE_E_FOREIGN_VOLUME = _HRESULT_TYPEDEF_(0x80310023L);
static const int FVE_E_OVERLAPPED_UPDATE = _HRESULT_TYPEDEF_(0x80310024L);
static const int FVE_E_TPM_SRK_AUTH_NOT_ZERO = _HRESULT_TYPEDEF_(0x80310025L);
static const int FVE_E_FAILED_SECTOR_SIZE = _HRESULT_TYPEDEF_(0x80310026L);
static const int FVE_E_FAILED_AUTHENTICATION = _HRESULT_TYPEDEF_(0x80310027L);
static const int FVE_E_NOT_OS_VOLUME = _HRESULT_TYPEDEF_(0x80310028L);
static const int FVE_E_AUTOUNLOCK_ENABLED = _HRESULT_TYPEDEF_(0x80310029L);
static const int FVE_E_WRONG_BOOTSECTOR = _HRESULT_TYPEDEF_(0x8031002AL);
static const int FVE_E_WRONG_SYSTEM_FS = _HRESULT_TYPEDEF_(0x8031002BL);
static const int FVE_E_POLICY_PASSWORD_REQUIRED = _HRESULT_TYPEDEF_(0x8031002CL);
static const int FVE_E_CANNOT_SET_FVEK_ENCRYPTED = _HRESULT_TYPEDEF_(0x8031002DL);
static const int FVE_E_CANNOT_ENCRYPT_NO_KEY = _HRESULT_TYPEDEF_(0x8031002EL);
static const int FVE_E_BOOTABLE_CDDVD = _HRESULT_TYPEDEF_(0x80310030L);
static const int FVE_E_PROTECTOR_EXISTS = _HRESULT_TYPEDEF_(0x80310031L);
static const int FVE_E_RELATIVE_PATH = _HRESULT_TYPEDEF_(0x80310032L);
static const int FVE_E_PROTECTOR_NOT_FOUND = _HRESULT_TYPEDEF_(0x80310033L);
static const int FVE_E_INVALID_KEY_FORMAT = _HRESULT_TYPEDEF_(0x80310034L);
static const int FVE_E_INVALID_PASSWORD_FORMAT = _HRESULT_TYPEDEF_(0x80310035L);
static const int FVE_E_FIPS_RNG_CHECK_FAILED = _HRESULT_TYPEDEF_(0x80310036L);
static const int FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = _HRESULT_TYPEDEF_(0x80310037L);
static const int FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = _HRESULT_TYPEDEF_(0x80310038L);
static const int FVE_E_NOT_DECRYPTED = _HRESULT_TYPEDEF_(0x80310039L);
static const int FVE_E_INVALID_PROTECTOR_TYPE = _HRESULT_TYPEDEF_(0x8031003AL);
static const int FVE_E_NO_PROTECTORS_TO_TEST = _HRESULT_TYPEDEF_(0x8031003BL);
static const int FVE_E_KEYFILE_NOT_FOUND = _HRESULT_TYPEDEF_(0x8031003CL);
static const int FVE_E_KEYFILE_INVALID = _HRESULT_TYPEDEF_(0x8031003DL);
static const int FVE_E_KEYFILE_NO_VMK = _HRESULT_TYPEDEF_(0x8031003EL);
static const int FVE_E_TPM_DISABLED = _HRESULT_TYPEDEF_(0x8031003FL);
static const int FVE_E_NOT_ALLOWED_IN_SAFE_MODE = _HRESULT_TYPEDEF_(0x80310040L);
static const int FVE_E_TPM_INVALID_PCR = _HRESULT_TYPEDEF_(0x80310041L);
static const int FVE_E_TPM_NO_VMK = _HRESULT_TYPEDEF_(0x80310042L);
static const int FVE_E_PIN_INVALID = _HRESULT_TYPEDEF_(0x80310043L);
static const int FVE_E_AUTH_INVALID_APPLICATION = _HRESULT_TYPEDEF_(0x80310044L);
static const int FVE_E_AUTH_INVALID_CONFIG = _HRESULT_TYPEDEF_(0x80310045L);
static const int FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310046L);
static const int FVE_E_FS_NOT_EXTENDED = _HRESULT_TYPEDEF_(0x80310047L);
static const int FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310048L);
static const int FVE_E_NO_LICENSE = _HRESULT_TYPEDEF_(0x80310049L);
static const int FVE_E_NOT_ON_STACK = _HRESULT_TYPEDEF_(0x8031004AL);
static const int FVE_E_FS_MOUNTED = _HRESULT_TYPEDEF_(0x8031004BL);
static const int FVE_E_TOKEN_NOT_IMPERSONATED = _HRESULT_TYPEDEF_(0x8031004CL);
static const int FVE_E_DRY_RUN_FAILED = _HRESULT_TYPEDEF_(0x8031004DL);
static const int FVE_E_REBOOT_REQUIRED = _HRESULT_TYPEDEF_(0x8031004EL);
static const int FVE_E_DEBUGGER_ENABLED = _HRESULT_TYPEDEF_(0x8031004FL);
static const int FVE_E_RAW_ACCESS = _HRESULT_TYPEDEF_(0x80310050L);
static const int FVE_E_RAW_BLOCKED = _HRESULT_TYPEDEF_(0x80310051L);
static const int FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = _HRESULT_TYPEDEF_(0x80310052L);
static const int FVE_E_NOT_ALLOWED_IN_VERSION = _HRESULT_TYPEDEF_(0x80310053L);
static const int FVE_E_NO_AUTOUNLOCK_MASTER_KEY = _HRESULT_TYPEDEF_(0x80310054L);
static const int FVE_E_MOR_FAILED = _HRESULT_TYPEDEF_(0x80310055L);
static const int FVE_E_HIDDEN_VOLUME = _HRESULT_TYPEDEF_(0x80310056L);
static const int FVE_E_TRANSIENT_STATE = _HRESULT_TYPEDEF_(0x80310057L);
static const int FVE_E_PUBKEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310058L);
static const int FVE_E_VOLUME_HANDLE_OPEN = _HRESULT_TYPEDEF_(0x80310059L);
static const int FVE_E_NO_FEATURE_LICENSE = _HRESULT_TYPEDEF_(0x8031005AL);
static const int FVE_E_INVALID_STARTUP_OPTIONS = _HRESULT_TYPEDEF_(0x8031005BL);
static const int FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031005CL);
static const int FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = _HRESULT_TYPEDEF_(0x8031005DL);
static const int FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031005EL);
static const int FVE_E_POLICY_RECOVERY_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x8031005FL);
static const int FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310060L);
static const int FVE_E_POLICY_STARTUP_PIN_REQUIRED = _HRESULT_TYPEDEF_(0x80310061L);
static const int FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310062L);
static const int FVE_E_POLICY_STARTUP_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310063L);
static const int FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310064L);
static const int FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310065L);
static const int FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310066L);
static const int FVE_E_POLICY_STARTUP_TPM_REQUIRED = _HRESULT_TYPEDEF_(0x80310067L);
static const int FVE_E_POLICY_INVALID_PIN_LENGTH = _HRESULT_TYPEDEF_(0x80310068L);
static const int FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310069L);
static const int FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031006AL);
static const int FVE_E_POLICY_PASSPHRASE_REQUIRED = _HRESULT_TYPEDEF_(0x8031006BL);
static const int FVE_E_FIPS_PREVENTS_PASSPHRASE = _HRESULT_TYPEDEF_(0x8031006CL);
static const int FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031006DL);
static const int FVE_E_INVALID_BITLOCKER_OID = _HRESULT_TYPEDEF_(0x8031006EL);
static const int FVE_E_VOLUME_TOO_SMALL = _HRESULT_TYPEDEF_(0x8031006FL);
static const int FVE_E_DV_NOT_SUPPORTED_ON_FS = _HRESULT_TYPEDEF_(0x80310070L);
static const int FVE_E_DV_NOT_ALLOWED_BY_GP = _HRESULT_TYPEDEF_(0x80310071L);
static const int FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310072L);
static const int FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = _HRESULT_TYPEDEF_(0x80310073L);
static const int FVE_E_POLICY_USER_CERT_MUST_BE_HW = _HRESULT_TYPEDEF_(0x80310074L);
static const int FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310075L);
static const int FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310076L);
static const int FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310077L);
static const int FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310078L);
static const int FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310079L);
static const int FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = _HRESULT_TYPEDEF_(0x80310080L);
static const int FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = _HRESULT_TYPEDEF_(0x80310081L);
static const int FVE_E_RECOVERY_PARTITION = _HRESULT_TYPEDEF_(0x80310082L);
static const int FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = _HRESULT_TYPEDEF_(0x80310083L);
static const int FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = _HRESULT_TYPEDEF_(0x80310084L);
static const int FVE_E_NON_BITLOCKER_OID = _HRESULT_TYPEDEF_(0x80310085L);
static const int FVE_E_POLICY_PROHIBITS_SELFSIGNED = _HRESULT_TYPEDEF_(0x80310086L);
static const int FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310087L);
static const int FVE_E_CONV_RECOVERY_FAILED = _HRESULT_TYPEDEF_(0x80310088L);
static const int FVE_E_VIRTUALIZED_SPACE_TOO_BIG = _HRESULT_TYPEDEF_(0x80310089L);
static const int FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310090L);
static const int FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310091L);
static const int FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310092L);
static const int FVE_E_NON_BITLOCKER_KU = _HRESULT_TYPEDEF_(0x80310093L);
static const int FVE_E_PRIVATEKEY_AUTH_FAILED = _HRESULT_TYPEDEF_(0x80310094L);
static const int FVE_E_REMOVAL_OF_DRA_FAILED = _HRESULT_TYPEDEF_(0x80310095L);
static const int FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = _HRESULT_TYPEDEF_(0x80310096L);
static const int FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = _HRESULT_TYPEDEF_(0x80310097L);
static const int FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310098L);
static const int FVE_E_ENH_PIN_INVALID = _HRESULT_TYPEDEF_(0x80310099L);
static const int FVE_E_INVALID_PIN_CHARS = _HRESULT_TYPEDEF_(0x8031009AL);
static const int FVE_E_INVALID_DATUM_TYPE = _HRESULT_TYPEDEF_(0x8031009BL);
static const int FWP_E_CALLOUT_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320001L);
static const int FWP_E_CONDITION_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320002L);
static const int FWP_E_FILTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320003L);
static const int FWP_E_LAYER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320004L);
static const int FWP_E_PROVIDER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320005L);
static const int FWP_E_PROVIDER_CONTEXT_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320006L);
static const int FWP_E_SUBLAYER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320007L);
static const int FWP_E_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320008L);
static const int FWP_E_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x80320009L);
static const int FWP_E_IN_USE = _HRESULT_TYPEDEF_(0x8032000AL);
static const int FWP_E_DYNAMIC_SESSION_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000BL);
static const int FWP_E_WRONG_SESSION = _HRESULT_TYPEDEF_(0x8032000CL);
static const int FWP_E_NO_TXN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000DL);
static const int FWP_E_TXN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000EL);
static const int FWP_E_TXN_ABORTED = _HRESULT_TYPEDEF_(0x8032000FL);
static const int FWP_E_SESSION_ABORTED = _HRESULT_TYPEDEF_(0x80320010L);
static const int FWP_E_INCOMPATIBLE_TXN = _HRESULT_TYPEDEF_(0x80320011L);
static const int FWP_E_TIMEOUT = _HRESULT_TYPEDEF_(0x80320012L);
static const int FWP_E_NET_EVENTS_DISABLED = _HRESULT_TYPEDEF_(0x80320013L);
static const int FWP_E_INCOMPATIBLE_LAYER = _HRESULT_TYPEDEF_(0x80320014L);
static const int FWP_E_KM_CLIENTS_ONLY = _HRESULT_TYPEDEF_(0x80320015L);
static const int FWP_E_LIFETIME_MISMATCH = _HRESULT_TYPEDEF_(0x80320016L);
static const int FWP_E_BUILTIN_OBJECT = _HRESULT_TYPEDEF_(0x80320017L);
static const int FWP_E_TOO_MANY_CALLOUTS = _HRESULT_TYPEDEF_(0x80320018L);
static const int FWP_E_NOTIFICATION_DROPPED = _HRESULT_TYPEDEF_(0x80320019L);
static const int FWP_E_TRAFFIC_MISMATCH = _HRESULT_TYPEDEF_(0x8032001AL);
static const int FWP_E_INCOMPATIBLE_SA_STATE = _HRESULT_TYPEDEF_(0x8032001BL);
static const int FWP_E_NULL_POINTER = _HRESULT_TYPEDEF_(0x8032001CL);
static const int FWP_E_INVALID_ENUMERATOR = _HRESULT_TYPEDEF_(0x8032001DL);
static const int FWP_E_INVALID_FLAGS = _HRESULT_TYPEDEF_(0x8032001EL);
static const int FWP_E_INVALID_NET_MASK = _HRESULT_TYPEDEF_(0x8032001FL);
static const int FWP_E_INVALID_RANGE = _HRESULT_TYPEDEF_(0x80320020L);
static const int FWP_E_INVALID_INTERVAL = _HRESULT_TYPEDEF_(0x80320021L);
static const int FWP_E_ZERO_LENGTH_ARRAY = _HRESULT_TYPEDEF_(0x80320022L);
static const int FWP_E_NULL_DISPLAY_NAME = _HRESULT_TYPEDEF_(0x80320023L);
static const int FWP_E_INVALID_ACTION_TYPE = _HRESULT_TYPEDEF_(0x80320024L);
static const int FWP_E_INVALID_WEIGHT = _HRESULT_TYPEDEF_(0x80320025L);
static const int FWP_E_MATCH_TYPE_MISMATCH = _HRESULT_TYPEDEF_(0x80320026L);
static const int FWP_E_TYPE_MISMATCH = _HRESULT_TYPEDEF_(0x80320027L);
static const int FWP_E_OUT_OF_BOUNDS = _HRESULT_TYPEDEF_(0x80320028L);
static const int FWP_E_RESERVED = _HRESULT_TYPEDEF_(0x80320029L);
static const int FWP_E_DUPLICATE_CONDITION = _HRESULT_TYPEDEF_(0x8032002AL);
static const int FWP_E_DUPLICATE_KEYMOD = _HRESULT_TYPEDEF_(0x8032002BL);
static const int FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = _HRESULT_TYPEDEF_(0x8032002CL);
static const int FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = _HRESULT_TYPEDEF_(0x8032002DL);
static const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = _HRESULT_TYPEDEF_(0x8032002EL);
static const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = _HRESULT_TYPEDEF_(0x8032002FL);
static const int FWP_E_INCOMPATIBLE_AUTH_METHOD = _HRESULT_TYPEDEF_(0x80320030L);
static const int FWP_E_INCOMPATIBLE_DH_GROUP = _HRESULT_TYPEDEF_(0x80320031L);
static const int FWP_E_EM_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80320032L);
static const int FWP_E_NEVER_MATCH = _HRESULT_TYPEDEF_(0x80320033L);
static const int FWP_E_PROVIDER_CONTEXT_MISMATCH = _HRESULT_TYPEDEF_(0x80320034L);
static const int FWP_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80320035L);
static const int FWP_E_TOO_MANY_SUBLAYERS = _HRESULT_TYPEDEF_(0x80320036L);
static const int FWP_E_CALLOUT_NOTIFICATION_FAILED = _HRESULT_TYPEDEF_(0x80320037L);
static const int FWP_E_INVALID_AUTH_TRANSFORM = _HRESULT_TYPEDEF_(0x80320038L);
static const int FWP_E_INVALID_CIPHER_TRANSFORM = _HRESULT_TYPEDEF_(0x80320039L);
static const int FWP_E_DROP_NOICMP = _HRESULT_TYPEDEF_(0x80320104L);
static const int FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = _HRESULT_TYPEDEF_(0x8032003AL);
static const int FWP_E_INVALID_TRANSFORM_COMBINATION = _HRESULT_TYPEDEF_(0x8032003BL);
static const int FWP_E_DUPLICATE_AUTH_METHOD = _HRESULT_TYPEDEF_(0x8032003CL);
static const int WS_S_ASYNC = _HRESULT_TYPEDEF_(0x003D0000L);
static const int WS_S_END = _HRESULT_TYPEDEF_(0x003D0001L);
static const int WS_E_INVALID_FORMAT = _HRESULT_TYPEDEF_(0x803D0000L);
static const int WS_E_OBJECT_FAULTED = _HRESULT_TYPEDEF_(0x803D0001L);
static const int WS_E_NUMERIC_OVERFLOW = _HRESULT_TYPEDEF_(0x803D0002L);
static const int WS_E_INVALID_OPERATION = _HRESULT_TYPEDEF_(0x803D0003L);
static const int WS_E_OPERATION_ABORTED = _HRESULT_TYPEDEF_(0x803D0004L);
static const int WS_E_ENDPOINT_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x803D0005L);
static const int WS_E_OPERATION_TIMED_OUT = _HRESULT_TYPEDEF_(0x803D0006L);
static const int WS_E_OPERATION_ABANDONED = _HRESULT_TYPEDEF_(0x803D0007L);
static const int WS_E_QUOTA_EXCEEDED = _HRESULT_TYPEDEF_(0x803D0008L);
static const int WS_E_NO_TRANSLATION_AVAILABLE = _HRESULT_TYPEDEF_(0x803D0009L);
static const int WS_E_SECURITY_VERIFICATION_FAILURE = _HRESULT_TYPEDEF_(0x803D000AL);
static const int WS_E_ADDRESS_IN_USE = _HRESULT_TYPEDEF_(0x803D000BL);
static const int WS_E_ADDRESS_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x803D000CL);
static const int WS_E_ENDPOINT_NOT_FOUND = _HRESULT_TYPEDEF_(0x803D000DL);
static const int WS_E_ENDPOINT_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x803D000EL);
static const int WS_E_ENDPOINT_FAILURE = _HRESULT_TYPEDEF_(0x803D000FL);
static const int WS_E_ENDPOINT_UNREACHABLE = _HRESULT_TYPEDEF_(0x803D0010L);
static const int WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x803D0011L);
static const int WS_E_ENDPOINT_TOO_BUSY = _HRESULT_TYPEDEF_(0x803D0012L);
static const int WS_E_ENDPOINT_FAULT_RECEIVED = _HRESULT_TYPEDEF_(0x803D0013L);
static const int WS_E_ENDPOINT_DISCONNECTED = _HRESULT_TYPEDEF_(0x803D0014L);
static const int WS_E_PROXY_FAILURE = _HRESULT_TYPEDEF_(0x803D0015L);
static const int WS_E_PROXY_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x803D0016L);
static const int WS_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x803D0017L);
static const int WS_E_PROXY_REQUIRES_BASIC_AUTH = _HRESULT_TYPEDEF_(0x803D0018L);
static const int WS_E_PROXY_REQUIRES_DIGEST_AUTH = _HRESULT_TYPEDEF_(0x803D0019L);
static const int WS_E_PROXY_REQUIRES_NTLM_AUTH = _HRESULT_TYPEDEF_(0x803D001AL);
static const int WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = _HRESULT_TYPEDEF_(0x803D001BL);
static const int WS_E_SERVER_REQUIRES_BASIC_AUTH = _HRESULT_TYPEDEF_(0x803D001CL);
static const int WS_E_SERVER_REQUIRES_DIGEST_AUTH = _HRESULT_TYPEDEF_(0x803D001DL);
static const int WS_E_SERVER_REQUIRES_NTLM_AUTH = _HRESULT_TYPEDEF_(0x803D001EL);
static const int WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = _HRESULT_TYPEDEF_(0x803D001FL);
static const int WS_E_INVALID_ENDPOINT_URL = _HRESULT_TYPEDEF_(0x803D0020L);
static const int WS_E_OTHER = _HRESULT_TYPEDEF_(0x803D0021L);
static const int WS_E_SECURITY_TOKEN_EXPIRED = _HRESULT_TYPEDEF_(0x803D0022L);
static const int WS_E_SECURITY_SYSTEM_FAILURE = _HRESULT_TYPEDEF_(0x803D0023L);
static const int _NDIS_ERROR_TYPEDEF_(_sc) = (DWORD)(_sc);
static const int ERROR_NDIS_INTERFACE_CLOSING = _NDIS_ERROR_TYPEDEF_(0x80340002L);
static const int ERROR_NDIS_BAD_VERSION = _NDIS_ERROR_TYPEDEF_(0x80340004L);
static const int ERROR_NDIS_BAD_CHARACTERISTICS = _NDIS_ERROR_TYPEDEF_(0x80340005L);
static const int ERROR_NDIS_ADAPTER_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x80340006L);
static const int ERROR_NDIS_OPEN_FAILED = _NDIS_ERROR_TYPEDEF_(0x80340007L);
static const int ERROR_NDIS_DEVICE_FAILED = _NDIS_ERROR_TYPEDEF_(0x80340008L);
static const int ERROR_NDIS_MULTICAST_FULL = _NDIS_ERROR_TYPEDEF_(0x80340009L);
static const int ERROR_NDIS_MULTICAST_EXISTS = _NDIS_ERROR_TYPEDEF_(0x8034000AL);
static const int ERROR_NDIS_MULTICAST_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034000BL);
static const int ERROR_NDIS_REQUEST_ABORTED = _NDIS_ERROR_TYPEDEF_(0x8034000CL);
static const int ERROR_NDIS_RESET_IN_PROGRESS = _NDIS_ERROR_TYPEDEF_(0x8034000DL);
static const int ERROR_NDIS_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0x803400BBL);
static const int ERROR_NDIS_INVALID_PACKET = _NDIS_ERROR_TYPEDEF_(0x8034000FL);
static const int ERROR_NDIS_ADAPTER_NOT_READY = _NDIS_ERROR_TYPEDEF_(0x80340011L);
static const int ERROR_NDIS_INVALID_LENGTH = _NDIS_ERROR_TYPEDEF_(0x80340014L);
static const int ERROR_NDIS_INVALID_DATA = _NDIS_ERROR_TYPEDEF_(0x80340015L);
static const int ERROR_NDIS_BUFFER_TOO_SHORT = _NDIS_ERROR_TYPEDEF_(0x80340016L);
static const int ERROR_NDIS_INVALID_OID = _NDIS_ERROR_TYPEDEF_(0x80340017L);
static const int ERROR_NDIS_ADAPTER_REMOVED = _NDIS_ERROR_TYPEDEF_(0x80340018L);
static const int ERROR_NDIS_UNSUPPORTED_MEDIA = _NDIS_ERROR_TYPEDEF_(0x80340019L);
static const int ERROR_NDIS_GROUP_ADDRESS_IN_USE = _NDIS_ERROR_TYPEDEF_(0x8034001AL);
static const int ERROR_NDIS_FILE_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034001BL);
static const int ERROR_NDIS_ERROR_READING_FILE = _NDIS_ERROR_TYPEDEF_(0x8034001CL);
static const int ERROR_NDIS_ALREADY_MAPPED = _NDIS_ERROR_TYPEDEF_(0x8034001DL);
static const int ERROR_NDIS_RESOURCE_CONFLICT = _NDIS_ERROR_TYPEDEF_(0x8034001EL);
static const int ERROR_NDIS_MEDIA_DISCONNECTED = _NDIS_ERROR_TYPEDEF_(0x8034001FL);
static const int ERROR_NDIS_INVALID_ADDRESS = _NDIS_ERROR_TYPEDEF_(0x80340022L);
static const int ERROR_NDIS_INVALID_DEVICE_REQUEST = _NDIS_ERROR_TYPEDEF_(0x80340010L);
static const int ERROR_NDIS_PAUSED = _NDIS_ERROR_TYPEDEF_(0x8034002AL);
static const int ERROR_NDIS_INTERFACE_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034002BL);
static const int ERROR_NDIS_UNSUPPORTED_REVISION = _NDIS_ERROR_TYPEDEF_(0x8034002CL);
static const int ERROR_NDIS_INVALID_PORT = _NDIS_ERROR_TYPEDEF_(0x8034002DL);
static const int ERROR_NDIS_INVALID_PORT_STATE = _NDIS_ERROR_TYPEDEF_(0x8034002EL);
static const int ERROR_NDIS_LOW_POWER_STATE = _NDIS_ERROR_TYPEDEF_(0x8034002FL);
static const int ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = _NDIS_ERROR_TYPEDEF_(0x80342000L);
static const int ERROR_NDIS_DOT11_MEDIA_IN_USE = _NDIS_ERROR_TYPEDEF_(0x80342001L);
static const int ERROR_NDIS_DOT11_POWER_STATE_INVALID = _NDIS_ERROR_TYPEDEF_(0x80342002L);
static const int ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = _NDIS_ERROR_TYPEDEF_(0x80342003L);
static const int ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = _NDIS_ERROR_TYPEDEF_(0x80342004L);
static const int ERROR_NDIS_INDICATION_REQUIRED = _NDIS_ERROR_TYPEDEF_(0x00340001L);
static const int ERROR_NDIS_OFFLOAD_POLICY = _NDIS_ERROR_TYPEDEF_(0xC034100FL);
static const int ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = _NDIS_ERROR_TYPEDEF_(0xC0341012L);
static const int ERROR_NDIS_OFFLOAD_PATH_REJECTED = _NDIS_ERROR_TYPEDEF_(0xC0341013L);
static const int ERROR_HV_INVALID_HYPERCALL_CODE = _NDIS_ERROR_TYPEDEF_(0xC0350002L);
static const int ERROR_HV_INVALID_HYPERCALL_INPUT = _NDIS_ERROR_TYPEDEF_(0xC0350003L);
static const int ERROR_HV_INVALID_ALIGNMENT = _NDIS_ERROR_TYPEDEF_(0xC0350004L);
static const int ERROR_HV_INVALID_PARAMETER = _NDIS_ERROR_TYPEDEF_(0xC0350005L);
static const int ERROR_HV_ACCESS_DENIED = _NDIS_ERROR_TYPEDEF_(0xC0350006L);
static const int ERROR_HV_INVALID_PARTITION_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350007L);
static const int ERROR_HV_OPERATION_DENIED = _NDIS_ERROR_TYPEDEF_(0xC0350008L);
static const int ERROR_HV_UNKNOWN_PROPERTY = _NDIS_ERROR_TYPEDEF_(0xC0350009L);
static const int ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = _NDIS_ERROR_TYPEDEF_(0xC035000AL);
static const int ERROR_HV_INSUFFICIENT_MEMORY = _NDIS_ERROR_TYPEDEF_(0xC035000BL);
static const int ERROR_HV_PARTITION_TOO_DEEP = _NDIS_ERROR_TYPEDEF_(0xC035000CL);
static const int ERROR_HV_INVALID_PARTITION_ID = _NDIS_ERROR_TYPEDEF_(0xC035000DL);
static const int ERROR_HV_INVALID_VP_INDEX = _NDIS_ERROR_TYPEDEF_(0xC035000EL);
static const int ERROR_HV_INVALID_PORT_ID = _NDIS_ERROR_TYPEDEF_(0xC0350011L);
static const int ERROR_HV_INVALID_CONNECTION_ID = _NDIS_ERROR_TYPEDEF_(0xC0350012L);
static const int ERROR_HV_INSUFFICIENT_BUFFERS = _NDIS_ERROR_TYPEDEF_(0xC0350013L);
static const int ERROR_HV_NOT_ACKNOWLEDGED = _NDIS_ERROR_TYPEDEF_(0xC0350014L);
static const int ERROR_HV_ACKNOWLEDGED = _NDIS_ERROR_TYPEDEF_(0xC0350016L);
static const int ERROR_HV_INVALID_SAVE_RESTORE_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350017L);
static const int ERROR_HV_INVALID_SYNIC_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350018L);
static const int ERROR_HV_OBJECT_IN_USE = _NDIS_ERROR_TYPEDEF_(0xC0350019L);
static const int ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = _NDIS_ERROR_TYPEDEF_(0xC035001AL);
static const int ERROR_HV_NO_DATA = _NDIS_ERROR_TYPEDEF_(0xC035001BL);
static const int ERROR_HV_INACTIVE = _NDIS_ERROR_TYPEDEF_(0xC035001CL);
static const int ERROR_HV_NO_RESOURCES = _NDIS_ERROR_TYPEDEF_(0xC035001DL);
static const int ERROR_HV_FEATURE_UNAVAILABLE = _NDIS_ERROR_TYPEDEF_(0xC035001EL);
static const int ERROR_HV_NOT_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0351000L);
static const int ERROR_VID_DUPLICATE_HANDLER = _NDIS_ERROR_TYPEDEF_(0xC0370001L);
static const int ERROR_VID_TOO_MANY_HANDLERS = _NDIS_ERROR_TYPEDEF_(0xC0370002L);
static const int ERROR_VID_QUEUE_FULL = _NDIS_ERROR_TYPEDEF_(0xC0370003L);
static const int ERROR_VID_HANDLER_NOT_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0370004L);
static const int ERROR_VID_INVALID_OBJECT_NAME = _NDIS_ERROR_TYPEDEF_(0xC0370005L);
static const int ERROR_VID_PARTITION_NAME_TOO_LONG = _NDIS_ERROR_TYPEDEF_(0xC0370006L);
static const int ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = _NDIS_ERROR_TYPEDEF_(0xC0370007L);
static const int ERROR_VID_PARTITION_ALREADY_EXISTS = _NDIS_ERROR_TYPEDEF_(0xC0370008L);
static const int ERROR_VID_PARTITION_DOES_NOT_EXIST = _NDIS_ERROR_TYPEDEF_(0xC0370009L);
static const int ERROR_VID_PARTITION_NAME_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC037000AL);
static const int ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = _NDIS_ERROR_TYPEDEF_(0xC037000BL);
static const int ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC037000CL);
static const int ERROR_VID_MB_STILL_REFERENCED = _NDIS_ERROR_TYPEDEF_(0xC037000DL);
static const int ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = _NDIS_ERROR_TYPEDEF_(0xC037000EL);
static const int ERROR_VID_INVALID_NUMA_SETTINGS = _NDIS_ERROR_TYPEDEF_(0xC037000FL);
static const int ERROR_VID_INVALID_NUMA_NODE_INDEX = _NDIS_ERROR_TYPEDEF_(0xC0370010L);
static const int ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = _NDIS_ERROR_TYPEDEF_(0xC0370011L);
static const int ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370012L);
static const int ERROR_VID_PAGE_RANGE_OVERFLOW = _NDIS_ERROR_TYPEDEF_(0xC0370013L);
static const int ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370014L);
static const int ERROR_VID_INVALID_GPA_RANGE_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370015L);
static const int ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = _NDIS_ERROR_TYPEDEF_(0xC0370016L);
static const int ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = _NDIS_ERROR_TYPEDEF_(0xC0370017L);
static const int ERROR_VID_INVALID_PPM_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370018L);
static const int ERROR_VID_MBPS_ARE_LOCKED = _NDIS_ERROR_TYPEDEF_(0xC0370019L);
static const int ERROR_VID_MESSAGE_QUEUE_CLOSED = _NDIS_ERROR_TYPEDEF_(0xC037001AL);
static const int ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = _NDIS_ERROR_TYPEDEF_(0xC037001BL);
static const int ERROR_VID_STOP_PENDING = _NDIS_ERROR_TYPEDEF_(0xC037001CL);
static const int ERROR_VID_INVALID_PROCESSOR_STATE = _NDIS_ERROR_TYPEDEF_(0xC037001DL);
static const int ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC037001EL);
static const int ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = _NDIS_ERROR_TYPEDEF_(0xC037001FL);
static const int ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = _NDIS_ERROR_TYPEDEF_(0xC0370020L);
static const int ERROR_VID_MMIO_RANGE_DESTROYED = _NDIS_ERROR_TYPEDEF_(0xC0370021L);
static const int ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = _NDIS_ERROR_TYPEDEF_(0xC0370022L);
static const int ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = _NDIS_ERROR_TYPEDEF_(0xC0370023L);
static const int ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = _NDIS_ERROR_TYPEDEF_(0xC0370024L);
static const int ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = _NDIS_ERROR_TYPEDEF_(0xC0370025L);
static const int ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC0370026L);
static const int ERROR_VID_SAVED_STATE_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC0370027L);
static const int ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = _NDIS_ERROR_TYPEDEF_(0xC0370028L);
static const int ERROR_VID_SAVED_STATE_INCOMPATIBLE = _NDIS_ERROR_TYPEDEF_(0xC0370029L);
static const int ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = _NDIS_ERROR_TYPEDEF_(0x80370001L);
static const int ERROR_VOLMGR_INCOMPLETE_REGENERATION = _NDIS_ERROR_TYPEDEF_(0x80380001L);
static const int ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = _NDIS_ERROR_TYPEDEF_(0x80380002L);
static const int ERROR_VOLMGR_DATABASE_FULL = _NDIS_ERROR_TYPEDEF_(0xC0380001L);
static const int ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = _NDIS_ERROR_TYPEDEF_(0xC0380002L);
static const int ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380003L);
static const int ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380004L);
static const int ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = _NDIS_ERROR_TYPEDEF_(0xC0380005L);
static const int ERROR_VOLMGR_DISK_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380006L);
static const int ERROR_VOLMGR_DISK_DYNAMIC = _NDIS_ERROR_TYPEDEF_(0xC0380007L);
static const int ERROR_VOLMGR_DISK_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380008L);
static const int ERROR_VOLMGR_DISK_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380009L);
static const int ERROR_VOLMGR_DISK_LAST_VOTER = _NDIS_ERROR_TYPEDEF_(0xC038000AL);
static const int ERROR_VOLMGR_DISK_LAYOUT_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038000BL);
static const int ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC038000CL);
static const int ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = _NDIS_ERROR_TYPEDEF_(0xC038000DL);
static const int ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = _NDIS_ERROR_TYPEDEF_(0xC038000EL);
static const int ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC038000FL);
static const int ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC0380010L);
static const int ERROR_VOLMGR_DISK_MISSING = _NDIS_ERROR_TYPEDEF_(0xC0380011L);
static const int ERROR_VOLMGR_DISK_NOT_EMPTY = _NDIS_ERROR_TYPEDEF_(0xC0380012L);
static const int ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = _NDIS_ERROR_TYPEDEF_(0xC0380013L);
static const int ERROR_VOLMGR_DISK_REVECTORING_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380014L);
static const int ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380015L);
static const int ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = _NDIS_ERROR_TYPEDEF_(0xC0380016L);
static const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = _NDIS_ERROR_TYPEDEF_(0xC0380017L);
static const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = _NDIS_ERROR_TYPEDEF_(0xC0380018L);
static const int ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC0380019L);
static const int ERROR_VOLMGR_EXTENT_ALREADY_USED = _NDIS_ERROR_TYPEDEF_(0xC038001AL);
static const int ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = _NDIS_ERROR_TYPEDEF_(0xC038001BL);
static const int ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = _NDIS_ERROR_TYPEDEF_(0xC038001CL);
static const int ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = _NDIS_ERROR_TYPEDEF_(0xC038001DL);
static const int ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = _NDIS_ERROR_TYPEDEF_(0xC038001EL);
static const int ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = _NDIS_ERROR_TYPEDEF_(0xC038001FL);
static const int ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC0380020L);
static const int ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380021L);
static const int ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = _NDIS_ERROR_TYPEDEF_(0xC0380022L);
static const int ERROR_VOLMGR_MEMBER_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380023L);
static const int ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380024L);
static const int ERROR_VOLMGR_MEMBER_INDEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380025L);
static const int ERROR_VOLMGR_MEMBER_MISSING = _NDIS_ERROR_TYPEDEF_(0xC0380026L);
static const int ERROR_VOLMGR_MEMBER_NOT_DETACHED = _NDIS_ERROR_TYPEDEF_(0xC0380027L);
static const int ERROR_VOLMGR_MEMBER_REGENERATING = _NDIS_ERROR_TYPEDEF_(0xC0380028L);
static const int ERROR_VOLMGR_ALL_DISKS_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380029L);
static const int ERROR_VOLMGR_NO_REGISTERED_USERS = _NDIS_ERROR_TYPEDEF_(0xC038002AL);
static const int ERROR_VOLMGR_NO_SUCH_USER = _NDIS_ERROR_TYPEDEF_(0xC038002BL);
static const int ERROR_VOLMGR_NOTIFICATION_RESET = _NDIS_ERROR_TYPEDEF_(0xC038002CL);
static const int ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038002DL);
static const int ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038002EL);
static const int ERROR_VOLMGR_PACK_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC038002FL);
static const int ERROR_VOLMGR_PACK_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380030L);
static const int ERROR_VOLMGR_PACK_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380031L);
static const int ERROR_VOLMGR_PACK_NAME_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380032L);
static const int ERROR_VOLMGR_PACK_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC0380033L);
static const int ERROR_VOLMGR_PACK_HAS_QUORUM = _NDIS_ERROR_TYPEDEF_(0xC0380034L);
static const int ERROR_VOLMGR_PACK_WITHOUT_QUORUM = _NDIS_ERROR_TYPEDEF_(0xC0380035L);
static const int ERROR_VOLMGR_PARTITION_STYLE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380036L);
static const int ERROR_VOLMGR_PARTITION_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380037L);
static const int ERROR_VOLMGR_PLEX_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380038L);
static const int ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380039L);
static const int ERROR_VOLMGR_PLEX_INDEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038003AL);
static const int ERROR_VOLMGR_PLEX_LAST_ACTIVE = _NDIS_ERROR_TYPEDEF_(0xC038003BL);
static const int ERROR_VOLMGR_PLEX_MISSING = _NDIS_ERROR_TYPEDEF_(0xC038003CL);
static const int ERROR_VOLMGR_PLEX_REGENERATING = _NDIS_ERROR_TYPEDEF_(0xC038003DL);
static const int ERROR_VOLMGR_PLEX_TYPE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038003EL);
static const int ERROR_VOLMGR_PLEX_NOT_RAID5 = _NDIS_ERROR_TYPEDEF_(0xC038003FL);
static const int ERROR_VOLMGR_PLEX_NOT_SIMPLE = _NDIS_ERROR_TYPEDEF_(0xC0380040L);
static const int ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380041L);
static const int ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = _NDIS_ERROR_TYPEDEF_(0xC0380042L);
static const int ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = _NDIS_ERROR_TYPEDEF_(0xC0380043L);
static const int ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = _NDIS_ERROR_TYPEDEF_(0xC0380044L);
static const int ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = _NDIS_ERROR_TYPEDEF_(0xC0380045L);
static const int ERROR_VOLMGR_VOLUME_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380046L);
static const int ERROR_VOLMGR_VOLUME_LENGTH_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380047L);
static const int ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = _NDIS_ERROR_TYPEDEF_(0xC0380048L);
static const int ERROR_VOLMGR_VOLUME_NOT_MIRRORED = _NDIS_ERROR_TYPEDEF_(0xC0380049L);
static const int ERROR_VOLMGR_VOLUME_NOT_RETAINED = _NDIS_ERROR_TYPEDEF_(0xC038004AL);
static const int ERROR_VOLMGR_VOLUME_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC038004BL);
static const int ERROR_VOLMGR_VOLUME_RETAINED = _NDIS_ERROR_TYPEDEF_(0xC038004CL);
static const int ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038004DL);
static const int ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = _NDIS_ERROR_TYPEDEF_(0xC038004EL);
static const int ERROR_VOLMGR_BAD_BOOT_DISK = _NDIS_ERROR_TYPEDEF_(0xC038004FL);
static const int ERROR_VOLMGR_PACK_CONFIG_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC0380050L);
static const int ERROR_VOLMGR_PACK_CONFIG_ONLINE = _NDIS_ERROR_TYPEDEF_(0xC0380051L);
static const int ERROR_VOLMGR_NOT_PRIMARY_PACK = _NDIS_ERROR_TYPEDEF_(0xC0380052L);
static const int ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380053L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380054L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380055L);
static const int ERROR_VOLMGR_VOLUME_MIRRORED = _NDIS_ERROR_TYPEDEF_(0xC0380056L);
static const int ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = _NDIS_ERROR_TYPEDEF_(0xC0380057L);
static const int ERROR_VOLMGR_NO_VALID_LOG_COPIES = _NDIS_ERROR_TYPEDEF_(0xC0380058L);
static const int ERROR_VOLMGR_PRIMARY_PACK_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0380059L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038005AL);
static const int ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC038005BL);
static const int ERROR_VOLMGR_RAID5_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC038005CL);
static const int ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = _NDIS_ERROR_TYPEDEF_(0x80390001L);
static const int ERROR_BCD_TOO_MANY_ELEMENTS = _NDIS_ERROR_TYPEDEF_(0xC0390002L);
static const int ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = _NDIS_ERROR_TYPEDEF_(0x80390003L);
static const int ERROR_VHD_DRIVE_FOOTER_MISSING = _NDIS_ERROR_TYPEDEF_(0xC03A0001L);
static const int ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0002L);
static const int ERROR_VHD_DRIVE_FOOTER_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A0003L);
static const int ERROR_VHD_FORMAT_UNKNOWN = _NDIS_ERROR_TYPEDEF_(0xC03A0004L);
static const int ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = _NDIS_ERROR_TYPEDEF_(0xC03A0005L);
static const int ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0006L);
static const int ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = _NDIS_ERROR_TYPEDEF_(0xC03A0007L);
static const int ERROR_VHD_SPARSE_HEADER_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A0008L);
static const int ERROR_VHD_BLOCK_ALLOCATION_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0009L);
static const int ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A000AL);
static const int ERROR_VHD_INVALID_BLOCK_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A000BL);
static const int ERROR_VHD_BITMAP_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000CL);
static const int ERROR_VHD_PARENT_VHD_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC03A000DL);
static const int ERROR_VHD_CHILD_PARENT_ID_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000EL);
static const int ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000FL);
static const int ERROR_VHD_METADATA_READ_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0010L);
static const int ERROR_VHD_METADATA_WRITE_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0011L);
static const int ERROR_VHD_INVALID_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A0012L);
static const int ERROR_VHD_INVALID_FILE_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A0013L);
static const int ERROR_VIRTDISK_PROVIDER_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC03A0014L);
static const int ERROR_VIRTDISK_NOT_VIRTUAL_DISK = _NDIS_ERROR_TYPEDEF_(0xC03A0015L);
static const int ERROR_VHD_PARENT_VHD_ACCESS_DENIED = _NDIS_ERROR_TYPEDEF_(0xC03A0016L);
static const int ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0017L);
static const int ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = _NDIS_ERROR_TYPEDEF_(0xC03A0018L);
static const int ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = _NDIS_ERROR_TYPEDEF_(0xC03A0019L);
static const int ERROR_VIRTUAL_DISK_LIMITATION = _NDIS_ERROR_TYPEDEF_(0xC03A001AL);
static const int ERROR_VHD_INVALID_TYPE = _NDIS_ERROR_TYPEDEF_(0xC03A001BL);
static const int ERROR_VHD_INVALID_STATE = _NDIS_ERROR_TYPEDEF_(0xC03A001CL);
static const int ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A001DL);
static const int ERROR_QUERY_STORAGE_ERROR = _NDIS_ERROR_TYPEDEF_(0x803A0001L);
static const int SDIAG_E_CANCELLED = _NDIS_ERROR_TYPEDEF_(0x803C0100L);
static const int SDIAG_E_SCRIPT = _NDIS_ERROR_TYPEDEF_(0x803C0101L);
static const int SDIAG_E_POWERSHELL = _NDIS_ERROR_TYPEDEF_(0x803C0102L);
static const int SDIAG_E_MANAGEDHOST = _NDIS_ERROR_TYPEDEF_(0x803C0103L);
static const int SDIAG_E_NOVERIFIER = _NDIS_ERROR_TYPEDEF_(0x803C0104L);
static const int SDIAG_S_CANNOTRUN = _NDIS_ERROR_TYPEDEF_(0x003C0105L);
static const int SDIAG_E_DISABLED = _NDIS_ERROR_TYPEDEF_(0x803C0106L);
static const int SDIAG_E_TRUST = _NDIS_ERROR_TYPEDEF_(0x803C0107L);
static const int SDIAG_E_CANNOTRUN = _NDIS_ERROR_TYPEDEF_(0x803C0108L);
static const int SDIAG_E_VERSION = _NDIS_ERROR_TYPEDEF_(0x803C0109L);
static const int SDIAG_E_RESOURCE = _NDIS_ERROR_TYPEDEF_(0x803C010AL);
static const int SDIAG_E_ROOTCAUSE = _NDIS_ERROR_TYPEDEF_(0x803C010BL);
static const int E_MBN_CONTEXT_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80548201L);
static const int E_MBN_BAD_SIM = _HRESULT_TYPEDEF_(0x80548202L);
static const int E_MBN_DATA_CLASS_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80548203L);
static const int E_MBN_INVALID_ACCESS_STRING = _HRESULT_TYPEDEF_(0x80548204L);
static const int E_MBN_MAX_ACTIVATED_CONTEXTS = _HRESULT_TYPEDEF_(0x80548205L);
static const int E_MBN_PACKET_SVC_DETACHED = _HRESULT_TYPEDEF_(0x80548206L);
static const int E_MBN_PROVIDER_NOT_VISIBLE = _HRESULT_TYPEDEF_(0x80548207L);
static const int E_MBN_RADIO_POWER_OFF = _HRESULT_TYPEDEF_(0x80548208L);
static const int E_MBN_SERVICE_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80548209L);
static const int E_MBN_SIM_NOT_INSERTED = _HRESULT_TYPEDEF_(0x8054820AL);
static const int E_MBN_VOICE_CALL_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8054820BL);
static const int E_MBN_INVALID_CACHE = _HRESULT_TYPEDEF_(0x8054820CL);
static const int E_MBN_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x8054820DL);
static const int E_MBN_PROVIDERS_NOT_FOUND = _HRESULT_TYPEDEF_(0x8054820EL);
static const int E_MBN_PIN_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8054820FL);
static const int E_MBN_PIN_REQUIRED = _HRESULT_TYPEDEF_(0x80548210L);
static const int E_MBN_PIN_DISABLED = _HRESULT_TYPEDEF_(0x80548211L);
static const int E_MBN_FAILURE = _HRESULT_TYPEDEF_(0x80548212L);
static const int E_MBN_INVALID_PROFILE = _HRESULT_TYPEDEF_(0x80548218L);
static const int E_MBN_DEFAULT_PROFILE_EXIST = _HRESULT_TYPEDEF_(0x80548219L);
static const int E_MBN_SMS_ENCODING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548220L);
static const int E_MBN_SMS_FILTER_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548221L);
static const int E_MBN_SMS_INVALID_MEMORY_INDEX = _HRESULT_TYPEDEF_(0x80548222L);
static const int E_MBN_SMS_LANG_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548223L);
static const int E_MBN_SMS_MEMORY_FAILURE = _HRESULT_TYPEDEF_(0x80548224L);
static const int E_MBN_SMS_NETWORK_TIMEOUT = _HRESULT_TYPEDEF_(0x80548225L);
static const int E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = _HRESULT_TYPEDEF_(0x80548226L);
static const int E_MBN_SMS_FORMAT_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548227L);
static const int E_MBN_SMS_OPERATION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80548228L);
static const int E_MBN_SMS_MEMORY_FULL = _HRESULT_TYPEDEF_(0x80548229L);
static const int UI_E_CREATE_FAILED = _HRESULT_TYPEDEF_(0x802A0001L);
static const int UI_E_SHUTDOWN_CALLED = _HRESULT_TYPEDEF_(0x802A0002L);
static const int UI_E_ILLEGAL_REENTRANCY = _HRESULT_TYPEDEF_(0x802A0003L);
static const int UI_E_OBJECT_SEALED = _HRESULT_TYPEDEF_(0x802A0004L);
static const int UI_E_VALUE_NOT_SET = _HRESULT_TYPEDEF_(0x802A0005L);
static const int UI_E_VALUE_NOT_DETERMINED = _HRESULT_TYPEDEF_(0x802A0006L);
static const int UI_E_INVALID_OUTPUT = _HRESULT_TYPEDEF_(0x802A0007L);
static const int UI_E_BOOLEAN_EXPECTED = _HRESULT_TYPEDEF_(0x802A0008L);
static const int UI_E_DIFFERENT_OWNER = _HRESULT_TYPEDEF_(0x802A0009L);
static const int UI_E_AMBIGUOUS_MATCH = _HRESULT_TYPEDEF_(0x802A000AL);
static const int UI_E_FP_OVERFLOW = _HRESULT_TYPEDEF_(0x802A000BL);
static const int UI_E_WRONG_THREAD = _HRESULT_TYPEDEF_(0x802A000CL);
static const int UI_E_STORYBOARD_ACTIVE = _HRESULT_TYPEDEF_(0x802A0101L);
static const int UI_E_STORYBOARD_NOT_PLAYING = _HRESULT_TYPEDEF_(0x802A0102L);
static const int UI_E_START_KEYFRAME_AFTER_END = _HRESULT_TYPEDEF_(0x802A0103L);
static const int UI_E_END_KEYFRAME_NOT_DETERMINED = _HRESULT_TYPEDEF_(0x802A0104L);
static const int UI_E_LOOPS_OVERLAP = _HRESULT_TYPEDEF_(0x802A0105L);
static const int UI_E_TRANSITION_ALREADY_USED = _HRESULT_TYPEDEF_(0x802A0106L);
static const int UI_E_TRANSITION_NOT_IN_STORYBOARD = _HRESULT_TYPEDEF_(0x802A0107L);
static const int UI_E_TRANSITION_ECLIPSED = _HRESULT_TYPEDEF_(0x802A0108L);
static const int UI_E_TIME_BEFORE_LAST_UPDATE = _HRESULT_TYPEDEF_(0x802A0109L);
static const int UI_E_TIMER_CLIENT_ALREADY_CONNECTED = _HRESULT_TYPEDEF_(0x802A010AL);
static const int TC_NORMAL = 0;
static const int TC_HARDERR = 1;
static const int TC_GP_TRAP = 2;
static const int TC_SIGNAL = 3;
static const int AC_LINE_OFFLINE = 0x00;
static const int AC_LINE_ONLINE = 0x01;
static const int AC_LINE_BACKUP_POWER = 0x02;
static const int AC_LINE_UNKNOWN = 0xFF;
static const int BATTERY_FLAG_HIGH = 0x01;
static const int BATTERY_FLAG_LOW = 0x02;
static const int BATTERY_FLAG_CRITICAL = 0x04;
static const int BATTERY_FLAG_CHARGING = 0x08;
static const int BATTERY_FLAG_NO_BATTERY = 0x80;
static const int BATTERY_FLAG_UNKNOWN = 0xFF;
static const int BATTERY_PERCENTAGE_UNKNOWN = 0xFF;
static const int BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF;
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;
BOOL
GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );
BOOL
SetSystemPowerState(
    BOOL fSuspend,
    BOOL fForce
    );
BOOL
AllocateUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
AllocateUserPhysicalPagesNuma(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
    DWORD nndPreferred
    );
BOOL
FreeUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
MapUserPhysicalPages(
    PVOID VirtualAddress,
    ULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
MapUserPhysicalPagesScatter(
    PVOID *VirtualAddresses,
    ULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
HANDLE
CreateJobObjectA(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCSTR lpName
    );
HANDLE
CreateJobObjectW(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCWSTR lpName
    );
static const int CreateJobObject = CreateJobObjectA;
HANDLE
OpenJobObjectA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenJobObjectW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenJobObject = OpenJobObjectA;
BOOL
AssignProcessToJobObject(
    HANDLE hJob,
    HANDLE hProcess
    );
BOOL
TerminateJobObject(
    HANDLE hJob,
    UINT uExitCode
    );
BOOL
QueryInformationJobObject(
    HANDLE hJob,
    JOBOBJECTINFOCLASS JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    DWORD cbJobObjectInformationLength,
    LPDWORD lpReturnLength
    );
BOOL
SetInformationJobObject(
    HANDLE hJob,
    JOBOBJECTINFOCLASS JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    DWORD cbJobObjectInformationLength
    );
BOOL
IsProcessInJob (
    HANDLE ProcessHandle,
    HANDLE JobHandle,
    PBOOL Result
    );
BOOL
CreateJobSet (
    ULONG NumJob,
    PJOB_SET_ARRAY UserJobSet,
    ULONG Flags);
PVOID
AddVectoredExceptionHandler (
    ULONG First,
    PVECTORED_EXCEPTION_HANDLER Handler
    );
ULONG
RemoveVectoredExceptionHandler (
    PVOID Handle
    );
PVOID
AddVectoredContinueHandler (
    ULONG First,
    PVECTORED_EXCEPTION_HANDLER Handler
    );
ULONG
RemoveVectoredContinueHandler (
    PVOID Handle
    );
HANDLE
FindFirstVolumeA(
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
HANDLE
FindFirstVolumeW(
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int FindFirstVolume = FindFirstVolumeA;
BOOL
FindNextVolumeA(
    HANDLE hFindVolume,
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
BOOL
FindNextVolumeW(
    HANDLE hFindVolume,
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int FindNextVolume = FindNextVolumeA;
BOOL
FindVolumeClose(
    HANDLE hFindVolume
    );
HANDLE
FindFirstVolumeMountPointA(
    LPCSTR lpszRootPathName,
    LPSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
HANDLE
FindFirstVolumeMountPointW(
    LPCWSTR lpszRootPathName,
    LPWSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
static const int FindFirstVolumeMountPoint = FindFirstVolumeMountPointA;
BOOL
FindNextVolumeMountPointA(
    HANDLE hFindVolumeMountPoint,
    LPSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
BOOL
FindNextVolumeMountPointW(
    HANDLE hFindVolumeMountPoint,
    LPWSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
static const int FindNextVolumeMountPoint = FindNextVolumeMountPointA;
BOOL
FindVolumeMountPointClose(
    HANDLE hFindVolumeMountPoint
    );
BOOL
SetVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPCSTR lpszVolumeName
    );
BOOL
SetVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPCWSTR lpszVolumeName
    );
static const int SetVolumeMountPoint = SetVolumeMountPointA;
BOOL
DeleteVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint
    );
BOOL
DeleteVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint
    );
static const int DeleteVolumeMountPoint = DeleteVolumeMountPointA;
BOOL
GetVolumeNameForVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
BOOL
GetVolumeNameForVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int GetVolumeNameForVolumeMountPoint = GetVolumeNameForVolumeMountPointA;
BOOL
GetVolumePathNameA(
    LPCSTR lpszFileName,
    LPSTR lpszVolumePathName,
    DWORD cchBufferLength
    );
BOOL
GetVolumePathNameW(
    LPCWSTR lpszFileName,
    LPWSTR lpszVolumePathName,
    DWORD cchBufferLength
    );
static const int GetVolumePathName = GetVolumePathNameA;
BOOL
GetVolumePathNamesForVolumeNameA(
    LPCSTR lpszVolumeName,
    LPCH lpszVolumePathNames,
    DWORD cchBufferLength,
    PDWORD lpcchReturnLength
    );
BOOL
GetVolumePathNamesForVolumeNameW(
    LPCWSTR lpszVolumeName,
    LPWCH lpszVolumePathNames,
    DWORD cchBufferLength,
    PDWORD lpcchReturnLength
    );
static const int GetVolumePathNamesForVolumeName = GetVolumePathNamesForVolumeNameA;
static const int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = (0x00000001);
static const int ACTCTX_FLAG_LANGID_VALID = (0x00000002);
static const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = (0x00000004);
static const int ACTCTX_FLAG_RESOURCE_NAME_VALID = (0x00000008);
static const int ACTCTX_FLAG_SET_PROCESS_DEFAULT = (0x00000010);
static const int ACTCTX_FLAG_APPLICATION_NAME_VALID = (0x00000020);
static const int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = (0x00000040);
static const int ACTCTX_FLAG_HMODULE_VALID = (0x00000080);
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;
typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;
typedef PCACTCTXA PCACTCTX;
HANDLE
CreateActCtxA(
    PCACTCTXA pActCtx
    );
HANDLE
CreateActCtxW(
    PCACTCTXW pActCtx
    );
static const int CreateActCtx = CreateActCtxA;
VOID
AddRefActCtx(
    HANDLE hActCtx
    );
VOID
ReleaseActCtx(
    HANDLE hActCtx
    );
BOOL
ZombifyActCtx(
    HANDLE hActCtx
    );
BOOL
ActivateActCtx(
    HANDLE hActCtx,
    ULONG_PTR *lpCookie
    );
static const int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = (0x00000001);
BOOL
DeactivateActCtx(
    DWORD dwFlags,
    ULONG_PTR ulCookie
    );
BOOL
GetCurrentActCtx(
    HANDLE *lphActCtx);
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
static const int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = (0x00000001);
static const int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = (0x00000002);
static const int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = (0x00000004);
BOOL
FindActCtxSectionStringA(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    LPCSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
BOOL
FindActCtxSectionStringW(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    LPCWSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
static const int FindActCtxSectionString = FindActCtxSectionStringA;
BOOL
FindActCtxSectionGuid(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    const GUID *lpGuidToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
static const int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;
static const int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = (0x00000004);
static const int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = (0x00000008);
static const int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = (0x00000010);
static const int QUERY_ACTCTX_FLAG_NO_ADDREF = (0x80000000);
BOOL
QueryActCtxW(
    DWORD dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    ULONG ulInfoClass,
    PVOID pvBuffer,
    SIZE_T cbBuffer,
    SIZE_T *pcbWrittenOrRequired
    );
typedef BOOL (* PQUERYACTCTXW_FUNC)(
    DWORD dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    ULONG ulInfoClass,
    PVOID pvBuffer,
    SIZE_T cbBuffer,
    SIZE_T *pcbWrittenOrRequired
    );
BOOL
ProcessIdToSessionId(
    DWORD dwProcessId,
    DWORD *pSessionId
    );
DWORD
WTSGetActiveConsoleSessionId(
    VOID
    );
BOOL
IsWow64Process(
    HANDLE hProcess,
    PBOOL Wow64Process
    );
BOOL
GetLogicalProcessorInformation(
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
    PDWORD ReturnedLength
    );
BOOL
GetLogicalProcessorInformationEx(
    LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
    PDWORD ReturnedLength
    );
WORD
GetActiveProcessorGroupCount(
    VOID
    );
WORD
GetMaximumProcessorGroupCount(
    VOID
    );
DWORD
GetActiveProcessorCount(
    WORD GroupNumber
    );
DWORD
GetMaximumProcessorCount(
    WORD GroupNumber
    );
BOOL
GetNumaHighestNodeNumber(
    PULONG HighestNodeNumber
    );
BOOL
GetNumaProcessorNode(
    UCHAR Processor,
    PUCHAR NodeNumber
    );
BOOL
GetNumaNodeNumberFromHandle(
    HANDLE hFile,
    PUSHORT NodeNumber
    );
BOOL
GetNumaProcessorNodeEx(
    PPROCESSOR_NUMBER Processor,
    PUSHORT NodeNumber
    );
BOOL
GetNumaNodeProcessorMask(
    UCHAR Node,
    PULONGLONG ProcessorMask
    );
BOOL
GetNumaNodeProcessorMaskEx(
    USHORT Node,
    PGROUP_AFFINITY ProcessorMask
    );
BOOL
GetNumaAvailableMemoryNode(
    UCHAR Node,
    PULONGLONG AvailableBytes
    );
BOOL
GetNumaAvailableMemoryNodeEx(
    USHORT Node,
    PULONGLONG AvailableBytes
    );
BOOL
GetNumaProximityNode(
    ULONG ProximityId,
    PUCHAR NodeNumber
    );
BOOL
GetNumaProximityNodeEx(
    ULONG ProximityId,
    PUSHORT NodeNumber
    );
typedef DWORD (*APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
static const int RESTART_MAX_CMD_LINE = 1024;
static const int RESTART_NO_CRASH = 1;
static const int RESTART_NO_HANG = 2;
static const int RESTART_NO_PATCH = 4;
static const int RESTART_NO_REBOOT = 8;
HRESULT
RegisterApplicationRecoveryCallback(
    APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
    PVOID pvParameter,
    DWORD dwPingInterval,
    DWORD dwFlags
    );
HRESULT
UnregisterApplicationRecoveryCallback(void);
HRESULT
RegisterApplicationRestart(
    PCWSTR pwzCommandline,
    DWORD dwFlags
    );
HRESULT
UnregisterApplicationRestart(void);
static const int RECOVERY_DEFAULT_PING_INTERVAL = 5000;
static const int RECOVERY_MAX_PING_INTERVAL = (5 * 60 * 1000);
HRESULT
GetApplicationRecoveryCallback(
    HANDLE hProcess,
    APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
    PVOID* ppvParameter,
    PDWORD pdwPingInterval,
    PDWORD pdwFlags
    );
HRESULT
GetApplicationRestartSettings(
    HANDLE hProcess,
    PWSTR pwzCommandline,
    PDWORD pcchSize,
    PDWORD pdwFlags
    );
HRESULT
ApplicationRecoveryInProgress(
    PBOOL pbCancelled
    );
VOID
ApplicationRecoveryFinished(
    BOOL bSuccess
    );
typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;
typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;
typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;
typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;
typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;
typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;
typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;
typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;
typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;
typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;
typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;
typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;
typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;
static const int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 0x00000001;
static const int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 0x00000002;
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    USHORT StructureVersion; // 1
    USHORT StructureSize; // sizeof(FILE_REMOTE_PROTOCOL_INFO)
    DWORD Protocol; // Protocol (WNNC_NET_*) defined in wnnc.h or ntifs.h.
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    DWORD Flags;
    struct {
        DWORD Reserved[8];
    } GenericReserved;
    struct {
        DWORD Reserved[16];
    } ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;
BOOL
SetFileInformationByHandle(
    HANDLE hFile,
    FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    LPVOID lpFileInformation,
    DWORD dwBufferSize
);
BOOL
GetFileInformationByHandleEx(
    HANDLE hFile,
    FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    LPVOID lpFileInformation,
    DWORD dwBufferSize
);
typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;
typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize; // Size of the struct
    FILE_ID_TYPE Type; // Describes the type of identifier passed in.
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;
    } DUMMYUNIONNAME;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;
HANDLE
OpenFileById (
    HANDLE hVolumeHint,
    LPFILE_ID_DESCRIPTOR lpFileId,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwFlagsAndAttributes
    );
static const int SYMBOLIC_LINK_FLAG_DIRECTORY = (0x1);
static const int VALID_SYMBOLIC_LINK_FLAGS = SYMBOLIC_LINK_FLAG_DIRECTORY;
BOOLEAN
APIENTRY
CreateSymbolicLinkA (
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    DWORD dwFlags
    );
BOOLEAN
APIENTRY
CreateSymbolicLinkW (
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    DWORD dwFlags
    );
static const int CreateSymbolicLink = CreateSymbolicLinkA;
BOOLEAN
APIENTRY
CreateSymbolicLinkTransactedA (
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOLEAN
APIENTRY
CreateSymbolicLinkTransactedW (
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    DWORD dwFlags,
    HANDLE hTransaction
    );
static const int CreateSymbolicLinkTransacted = CreateSymbolicLinkTransactedA;
DWORD
GetFinalPathNameByHandleA (
    HANDLE hFile,
    LPSTR lpszFilePath,
    DWORD cchFilePath,
    DWORD dwFlags
);
DWORD
GetFinalPathNameByHandleW (
    HANDLE hFile,
    LPWSTR lpszFilePath,
    DWORD cchFilePath,
    DWORD dwFlags
);
static const int GetFinalPathNameByHandle = GetFinalPathNameByHandleA;
BOOL
QueryActCtxSettingsW(
    DWORD dwFlags,
    HANDLE hActCtx,
    PCWSTR settingsNameSpace,
    PCWSTR settingName,
    PWSTR pvBuffer,
    SIZE_T dwBuffer,
    SIZE_T *pdwWrittenOrRequired
    );
BOOL
ReplacePartitionUnit (
    PWSTR TargetPartition,
    PWSTR SparePartition,
    ULONG Flags
    );
BOOL
AddSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
BOOL
RemoveSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
BOOL
CopyExtendedContext(
    PCONTEXT_EX Destination,
    DWORD ContextFlags,
    PCONTEXT_EX Source
    );
BOOL
InitializeExtendedContext(
    PVOID Context,
    DWORD ContextFlags,
    PCONTEXT_EX* ContextEx
    );
DWORD64
GetEnabledExtendedFeatures(
    DWORD64 FeatureMask
    );
BOOL
GetExtendedContextLength(
    DWORD ContextFlags,
    PDWORD ContextLength
    );
DWORD64
GetExtendedFeaturesMask(
    PCONTEXT_EX ContextEx
    );
PVOID
LocateExtendedFeature(
    PCONTEXT_EX ContextEx,
    DWORD FeatureId,
    PDWORD Length
    );
PCONTEXT
LocateLegacyContext(
    PCONTEXT_EX ContextEx,
    PDWORD Length
    );
VOID
SetExtendedFeaturesMask(
    PCONTEXT_EX ContextEx,
    DWORD64 FeatureMask
    );
DWORD
APIENTRY
EnableThreadProfiling(
    HANDLE ThreadHandle,
    DWORD Flags,
    DWORD64 HardwareCounters,
    HANDLE *PerformanceDataHandle
    );
DWORD
APIENTRY
DisableThreadProfiling(
    HANDLE PerformanceDataHandle
    );
DWORD
APIENTRY
QueryThreadProfiling(
    HANDLE ThreadHandle,
    PBOOLEAN Enabled
    );
DWORD
APIENTRY
ReadThreadProfilingData(
    HANDLE PerformanceDataHandle,
    DWORD Flags,
    PPERFORMANCE_DATA PerformanceData
    );
static const int MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = (_WIN32_WINNT >= 0x0502 || !defined(_WINBASE_));
static const int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int _USE_DECLSPECS_FOR_SAL = 0;
static const int _USE_ATTRIBUTES_FOR_SAL = 0;
static const int _In_ = _Pre1_impl_(_$notnull) _Deref_pre2_impl_(_$valid, _$readaccess);
static const int _In_opt_ = _Pre_opt_valid_ _Deref_pre_readonly_;
static const int _In_z_ = _Pre_z_ _Deref_pre_readonly_;
static const int _In_opt_z_ = _Pre_opt_z_ _Deref_pre_readonly_;
static const int _In_count_(size) = _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_count_(size) = _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_bytecount_(size) = _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_count_c_(size) = _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_count_c_(size) = _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_bytecount_c_(size) = _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_z_count_(size) = _Pre_z_ _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_(size) = _Pre_opt_z_ _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_(size) = _Pre_z_ _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_(size) = _Pre_opt_z_ _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_z_count_c_(size) = _Pre_z_ _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_c_(size) = _Pre_opt_z_ _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_c_(size) = _Pre_z_ _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_c_(size) = _Pre_opt_z_ _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_count_x_(size) = _Pre_count_x_(size) _Deref_pre_readonly_;
static const int _In_opt_count_x_(size) = _Pre_opt_count_x_(size) _Deref_pre_readonly_;
static const int _In_bytecount_x_(size) = _Pre_bytecount_x_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Deref_pre_readonly_;
static const int _Out_ = _Pre_cap_c_(1) _Pre_invalid_;
static const int _Out_opt_ = _Pre_opt_cap_c_(1) _Pre_invalid_;
static const int _Out_cap_(size) = _Pre_cap_(size) _Pre_invalid_;
static const int _Out_opt_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_;
static const int _Out_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_;
static const int _Out_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_;
static const int _Out_opt_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_;
static const int _Out_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_;
static const int _Out_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_opt_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_z_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_ptrdiff_cap_(size) = _Pre_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_opt_ptrdiff_cap_(size) = _Pre_opt_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_;
static const int _Out_opt_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_;
static const int _Out_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_;
static const int _Out_z_cap_(size) = _Pre_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_opt_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_opt_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_z_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_opt_z_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_z_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_opt_z_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_opt_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_opt_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_capcount_x_(capcount) = _Pre_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_opt_capcount_x_(capcount) = _Pre_opt_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_bytecapcount_x_(capcount) = _Pre_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_opt_bytecapcount_x_(capcount) = _Pre_opt_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_z_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_opt_z_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_z_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Out_opt_z_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Inout_ = _Prepost_valid_;
static const int _Inout_opt_ = _Prepost_opt_valid_;
static const int _Inout_z_ = _Prepost_z_;
static const int _Inout_opt_z_ = _Prepost_opt_z_;
static const int _Inout_count_(size) = _Prepost_count_(size);
static const int _Inout_opt_count_(size) = _Prepost_opt_count_(size);
static const int _Inout_bytecount_(size) = _Prepost_bytecount_(size);
static const int _Inout_opt_bytecount_(size) = _Prepost_opt_bytecount_(size);
static const int _Inout_count_c_(size) = _Prepost_count_c_(size);
static const int _Inout_opt_count_c_(size) = _Prepost_opt_count_c_(size);
static const int _Inout_bytecount_c_(size) = _Prepost_bytecount_c_(size);
static const int _Inout_opt_bytecount_c_(size) = _Prepost_opt_bytecount_c_(size);
static const int _Inout_z_count_(size) = _Prepost_z_ _Prepost_count_(size);
static const int _Inout_opt_z_count_(size) = _Prepost_z_ _Prepost_opt_count_(size);
static const int _Inout_z_bytecount_(size) = _Prepost_z_ _Prepost_bytecount_(size);
static const int _Inout_opt_z_bytecount_(size) = _Prepost_z_ _Prepost_opt_bytecount_(size);
static const int _Inout_z_count_c_(size) = _Prepost_z_ _Prepost_count_c_(size);
static const int _Inout_opt_z_count_c_(size) = _Prepost_z_ _Prepost_opt_count_c_(size);
static const int _Inout_z_bytecount_c_(size) = _Prepost_z_ _Prepost_bytecount_c_(size);
static const int _Inout_opt_z_bytecount_c_(size) = _Prepost_z_ _Prepost_opt_bytecount_c_(size);
static const int _Inout_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size);
static const int _Inout_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size);
static const int _Inout_count_x_(size) = _Prepost_count_x_(size);
static const int _Inout_opt_count_x_(size) = _Prepost_opt_count_x_(size);
static const int _Inout_bytecount_x_(size) = _Prepost_bytecount_x_(size);
static const int _Inout_opt_bytecount_x_(size) = _Prepost_opt_bytecount_x_(size);
static const int _Inout_cap_(size) = _Pre_valid_cap_(size) _Post_valid_;
static const int _Inout_opt_cap_(size) = _Pre_opt_valid_cap_(size) _Post_valid_;
static const int _Inout_bytecap_(size) = _Pre_valid_bytecap_(size) _Post_valid_;
static const int _Inout_opt_bytecap_(size) = _Pre_opt_valid_bytecap_(size) _Post_valid_;
static const int _Inout_cap_c_(size) = _Pre_valid_cap_c_(size) _Post_valid_;
static const int _Inout_opt_cap_c_(size) = _Pre_opt_valid_cap_c_(size) _Post_valid_;
static const int _Inout_bytecap_c_(size) = _Pre_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_opt_bytecap_c_(size) = _Pre_opt_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_cap_x_(size) = _Pre_valid_cap_x_(size) _Post_valid_;
static const int _Inout_opt_cap_x_(size) = _Pre_opt_valid_cap_x_(size) _Post_valid_;
static const int _Inout_bytecap_x_(size) = _Pre_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_opt_bytecap_x_(size) = _Pre_opt_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_z_cap_(size) = _Pre_z_cap_(size) _Post_z_;
static const int _Inout_opt_z_cap_(size) = _Pre_opt_z_cap_(size) _Post_z_;
static const int _Inout_z_bytecap_(size) = _Pre_z_bytecap_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_(size) = _Pre_opt_z_bytecap_(size) _Post_z_;
static const int _Inout_z_cap_c_(size) = _Pre_z_cap_c_(size) _Post_z_;
static const int _Inout_opt_z_cap_c_(size) = _Pre_opt_z_cap_c_(size) _Post_z_;
static const int _Inout_z_bytecap_c_(size) = _Pre_z_bytecap_c_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_c_(size) = _Pre_opt_z_bytecap_c_(size) _Post_z_;
static const int _Inout_z_cap_x_(size) = _Pre_z_cap_x_(size) _Post_z_;
static const int _Inout_opt_z_cap_x_(size) = _Pre_opt_z_cap_x_(size) _Post_z_;
static const int _Inout_z_bytecap_x_(size) = _Pre_z_bytecap_x_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_x_(size) = _Pre_opt_z_bytecap_x_(size) _Post_z_;
static const int _Ret_ = _Ret_valid_;
static const int _Ret_opt_ = _Ret_opt_valid_;
static const int _Deref_out_ = _Out_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_out_opt_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_opt_out_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_opt_out_opt_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_out_opt_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Deref_opt_out_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_opt_out_opt_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Check_return_ = _Check_return_impl_;
static const int _Printf_format_string_ = _Printf_format_string_impl_;
static const int _Scanf_format_string_ = _Scanf_format_string_impl_;
static const int _Scanf_s_format_string_ = _Scanf_s_format_string_impl_;
static const int _Success_(expr) = _Success_impl_(expr);
static const int _In_bound_ = _In_bound_impl_;
static const int _Out_bound_ = _Out_bound_impl_;
static const int _Ret_bound_ = _Ret_bound_impl_;
static const int _Deref_in_bound_ = _Deref_in_bound_impl_;
static const int _Deref_out_bound_ = _Deref_out_bound_impl_;
static const int _Deref_inout_bound_ = _Deref_in_bound_ _Deref_out_bound_;
static const int _Deref_ret_bound_ = _Deref_ret_bound_impl_;
static const int _In_range_(lb,ub) = _In_range_impl_(lb,ub);
static const int _Out_range_(lb,ub) = _Out_range_impl_(lb,ub);
static const int _Ret_range_(lb,ub) = _Ret_range_impl_(lb,ub);
static const int _Deref_in_range_(lb,ub) = _Deref_in_range_impl_(lb,ub);
static const int _Deref_out_range_(lb,ub) = _Deref_out_range_impl_(lb,ub);
static const int _Deref_ret_range_(lb,ub) = _Deref_ret_range_impl_(lb,ub);
static const int _Pre_z_ = _Pre2_impl_(_$notnull, _$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_ = _Pre2_impl_(_$maybenull,_$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size));
static const int _Pre_opt_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size));
static const int _Pre_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size));
static const int _Pre_opt_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Pre_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size));
static const int _Pre_opt_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Pre_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Pre_opt_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Pre_cap_m_(mult,size) = _Pre2_impl_(_$notnull, _$mult(mult,size));
static const int _Pre_opt_cap_m_(mult,size) = _Pre2_impl_(_$maybenull,_$mult(mult,size));
static const int _Pre_cap_for_(param) = _Pre2_impl_(_$notnull, _$cap_for(param));
static const int _Pre_opt_cap_for_(param) = _Pre2_impl_(_$maybenull,_$cap_for(param));
static const int _Pre_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size));
static const int _Pre_opt_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Pre_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Pre_opt_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Pre_ptrdiff_cap_(ptr) = _Pre2_impl_(_$notnull, _$cap_x(__ptrdiff(ptr)));
static const int _Pre_opt_ptrdiff_cap_(ptr) = _Pre2_impl_(_$maybenull,_$cap_x(__ptrdiff(ptr)));
static const int _Pre_z_cap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_(size) = _Pre2_impl_(_$notnull, _$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_(size) = _Pre2_impl_(_$maybenull,_$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_(size) = _Pre2_impl_(_$notnull, _$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_(size) = _Pre2_impl_(_$maybenull,_$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_c_(size) = _Pre2_impl_(_$notnull, _$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_c_(size) = _Pre2_impl_(_$maybenull,_$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_c_(size) = _Pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_c_(size) = _Pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_x_(size) = _Pre2_impl_(_$notnull, _$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_x_(size) = _Pre2_impl_(_$maybenull,_$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_x_(size) = _Pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_x_(size) = _Pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_ptrdiff_count_(ptr) = _Pre2_impl_(_$notnull, _$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_ptrdiff_count_(ptr) = _Pre2_impl_(_$maybenull,_$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_ = _Pre1_impl_(_$notnull) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_ = _Pre1_impl_(_$maybenull) _Deref_pre1_impl_(_$valid);
static const int _Pre_invalid_ = _Deref_pre1_impl_(_$notvalid);
static const int _Pre_notnull_ = _Pre1_impl_(_$notnull);
static const int _Pre_maybenull_ = _Pre1_impl_(_$maybenull);
static const int _Pre_null_ = _Pre1_impl_(_$null);
static const int _Pre_readonly_ = _Pre1_impl_(_$readaccess);
static const int _Pre_writeonly_ = _Pre1_impl_(_$writeaccess);
static const int _Post_z_ = _Post1_impl_(_$zterm) _Deref_post1_impl_(_$valid);
static const int _Post_maybez_ = _Post1_impl_(_$maybezterm);
static const int _Post_cap_(size) = _Post1_impl_(_$cap(size));
static const int _Post_bytecap_(size) = _Post1_impl_(_$bytecap(size));
static const int _Post_count_(size) = _Post1_impl_(_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_(size) = _Post1_impl_(_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_c_(size) = _Post1_impl_(_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_c_(size) = _Post1_impl_(_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_x_(size) = _Post1_impl_(_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_x_(size) = _Post1_impl_(_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_(size) = _Post2_impl_(_$zterm,_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_(size) = _Post2_impl_(_$zterm,_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_c_(size) = _Post2_impl_(_$zterm,_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_c_(size) = _Post2_impl_(_$zterm,_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_x_(size) = _Post2_impl_(_$zterm,_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_x_(size) = _Post2_impl_(_$zterm,_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_ptr_invalid_ = _Post1_impl_(_$notvalid);
static const int _Post_valid_ = _Deref_post1_impl_(_$valid);
static const int _Post_invalid_ = _Deref_post1_impl_(_$notvalid);
static const int _Post_notnull_ = _Post1_impl_(_$notnull);
static const int _Ret_z_ = _Ret2_impl_(_$notnull, _$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_ = _Ret2_impl_(_$maybenull,_$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_cap_(size) = _Ret2_impl_(_$notnull, _$cap(size));
static const int _Ret_opt_cap_(size) = _Ret2_impl_(_$maybenull,_$cap(size));
static const int _Ret_bytecap_(size) = _Ret2_impl_(_$notnull, _$bytecap(size));
static const int _Ret_opt_bytecap_(size) = _Ret2_impl_(_$maybenull,_$bytecap(size));
static const int _Ret_cap_c_(size) = _Ret2_impl_(_$notnull, _$cap_c(size));
static const int _Ret_opt_cap_c_(size) = _Ret2_impl_(_$maybenull,_$cap_c(size));
static const int _Ret_bytecap_c_(size) = _Ret2_impl_(_$notnull, _$bytecap_c(size));
static const int _Ret_opt_bytecap_c_(size) = _Ret2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Ret_cap_x_(size) = _Ret2_impl_(_$notnull, _$cap_x(size));
static const int _Ret_opt_cap_x_(size) = _Ret2_impl_(_$maybenull,_$cap_x(size));
static const int _Ret_bytecap_x_(size) = _Ret2_impl_(_$notnull, _$bytecap_x(size));
static const int _Ret_opt_bytecap_x_(size) = _Ret2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Ret_z_cap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_cap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_(size) = _Ret2_impl_(_$notnull, _$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_(size) = _Ret2_impl_(_$maybenull,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_(size) = _Ret2_impl_(_$notnull, _$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_(size) = _Ret2_impl_(_$maybenull,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_c_(size) = _Ret2_impl_(_$notnull, _$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_c_(size) = _Ret2_impl_(_$maybenull,_$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_c_(size) = _Ret2_impl_(_$notnull, _$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_c_(size) = _Ret2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_x_(size) = _Ret2_impl_(_$notnull, _$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_x_(size) = _Ret2_impl_(_$maybenull,_$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_x_(size) = _Ret2_impl_(_$notnull, _$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_x_(size) = _Ret2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_count_(size) = _Ret3_impl_(_$notnull, _$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_count_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecount_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecount_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_valid_ = _Ret1_impl_(_$notnull) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_valid_ = _Ret1_impl_(_$maybenull) _Deref_ret1_impl_(_$valid);
static const int _Ret_notnull_ = _Ret1_impl_(_$notnull);
static const int _Ret_maybenull_ = _Ret1_impl_(_$maybenull);
static const int _Ret_null_ = _Ret1_impl_(_$null);
static const int _Deref_pre_z_ = _Deref_pre2_impl_(_$notnull, _$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_ = _Deref_pre2_impl_(_$maybenull,_$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size));
static const int _Deref_pre_opt_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size));
static const int _Deref_pre_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_pre_opt_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_pre_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size));
static const int _Deref_pre_opt_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Deref_pre_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Deref_pre_opt_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Deref_pre_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_pre_opt_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_pre_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_pre_opt_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_pre_z_cap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_(size) = _Deref_pre2_impl_(_$notnull, _$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_(size) = _Deref_pre2_impl_(_$maybenull,_$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_c_(size) = _Deref_pre2_impl_(_$notnull, _$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_c_(size) = _Deref_pre2_impl_(_$maybenull,_$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_x_(size) = _Deref_pre2_impl_(_$notnull, _$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_x_(size) = _Deref_pre2_impl_(_$maybenull,_$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_ = _Deref_pre1_impl_(_$notnull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_ = _Deref_pre1_impl_(_$maybenull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_invalid_ = _Deref2_pre1_impl_(_$notvalid);
static const int _Deref_pre_notnull_ = _Deref_pre1_impl_(_$notnull);
static const int _Deref_pre_maybenull_ = _Deref_pre1_impl_(_$maybenull);
static const int _Deref_pre_null_ = _Deref_pre1_impl_(_$null);
static const int _Deref_pre_readonly_ = _Deref_pre1_impl_(_$readaccess);
static const int _Deref_pre_writeonly_ = _Deref_pre1_impl_(_$writeaccess);
static const int _Deref_post_z_ = _Deref_post2_impl_(_$notnull, _$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_ = _Deref_post2_impl_(_$maybenull,_$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size));
static const int _Deref_post_opt_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size));
static const int _Deref_post_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_post_opt_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_post_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_z(size));
static const int _Deref_post_opt_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_z(size));
static const int _Deref_post_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_z(size));
static const int _Deref_post_opt_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_z(size));
static const int _Deref_post_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_post_opt_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_post_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_post_opt_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_post_z_cap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_(size) = _Deref_post2_impl_(_$notnull, _$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_(size) = _Deref_post2_impl_(_$maybenull,_$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_(size) = _Deref_post2_impl_(_$notnull, _$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_c_(size) = _Deref_post2_impl_(_$notnull, _$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_c_(size) = _Deref_post2_impl_(_$maybenull,_$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_x_(size) = _Deref_post2_impl_(_$notnull, _$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_x_(size) = _Deref_post2_impl_(_$maybenull,_$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_ = _Deref_post1_impl_(_$notnull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_ = _Deref_post1_impl_(_$maybenull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_notnull_ = _Deref_post1_impl_(_$notnull);
static const int _Deref_post_maybenull_ = _Deref_post1_impl_(_$maybenull);
static const int _Deref_post_null_ = _Deref_post1_impl_(_$null);
static const int _Deref_ret_z_ = _Deref_ret2_impl_(_$notnull, _$zterm);
static const int _Deref_ret_opt_z_ = _Deref_ret2_impl_(_$maybenull,_$zterm);
static const int _Deref2_pre_readonly_ = _Deref2_pre1_impl_(_$readaccess);
static const int _Prepost_z_ = _Pre_z_ _Post_z_;
static const int _Prepost_opt_z_ = _Pre_opt_z_ _Post_z_;
static const int _Prepost_count_(size) = _Pre_count_(size) _Post_count_(size);
static const int _Prepost_opt_count_(size) = _Pre_opt_count_(size) _Post_count_(size);
static const int _Prepost_bytecount_(size) = _Pre_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_count_c_(size) = _Pre_count_c_(size) _Post_count_c_(size);
static const int _Prepost_opt_count_c_(size) = _Pre_opt_count_c_(size) _Post_count_c_(size);
static const int _Prepost_bytecount_c_(size) = _Pre_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_count_x_(size) = _Pre_count_x_(size) _Post_count_x_(size);
static const int _Prepost_opt_count_x_(size) = _Pre_opt_count_x_(size) _Post_count_x_(size);
static const int _Prepost_bytecount_x_(size) = _Pre_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_valid_ = _Pre_valid_ _Post_valid_;
static const int _Prepost_opt_valid_ = _Pre_opt_valid_ _Post_valid_;
static const int _Deref_prepost_z_ = _Deref_pre_z_ _Deref_post_z_;
static const int _Deref_prepost_opt_z_ = _Deref_pre_opt_z_ _Deref_post_opt_z_;
static const int _Deref_prepost_cap_(size) = _Deref_pre_cap_(size) _Deref_post_cap_(size);
static const int _Deref_prepost_opt_cap_(size) = _Deref_pre_opt_cap_(size) _Deref_post_opt_cap_(size);
static const int _Deref_prepost_bytecap_(size) = _Deref_pre_bytecap_(size) _Deref_post_bytecap_(size);
static const int _Deref_prepost_opt_bytecap_(size) = _Deref_pre_opt_bytecap_(size) _Deref_post_opt_bytecap_(size);
static const int _Deref_prepost_cap_x_(size) = _Deref_pre_cap_x_(size) _Deref_post_cap_x_(size);
static const int _Deref_prepost_opt_cap_x_(size) = _Deref_pre_opt_cap_x_(size) _Deref_post_opt_cap_x_(size);
static const int _Deref_prepost_bytecap_x_(size) = _Deref_pre_bytecap_x_(size) _Deref_post_bytecap_x_(size);
static const int _Deref_prepost_opt_bytecap_x_(size) = _Deref_pre_opt_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size);
static const int _Deref_prepost_z_cap_(size) = _Deref_pre_z_cap_(size) _Deref_post_z_cap_(size);
static const int _Deref_prepost_opt_z_cap_(size) = _Deref_pre_opt_z_cap_(size) _Deref_post_opt_z_cap_(size);
static const int _Deref_prepost_z_bytecap_(size) = _Deref_pre_z_bytecap_(size) _Deref_post_z_bytecap_(size);
static const int _Deref_prepost_opt_z_bytecap_(size) = _Deref_pre_opt_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size);
static const int _Deref_prepost_valid_cap_(size) = _Deref_pre_valid_cap_(size) _Deref_post_valid_cap_(size);
static const int _Deref_prepost_opt_valid_cap_(size) = _Deref_pre_opt_valid_cap_(size) _Deref_post_opt_valid_cap_(size);
static const int _Deref_prepost_valid_bytecap_(size) = _Deref_pre_valid_bytecap_(size) _Deref_post_valid_bytecap_(size);
static const int _Deref_prepost_opt_valid_bytecap_(size) = _Deref_pre_opt_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size);
static const int _Deref_prepost_valid_cap_x_(size) = _Deref_pre_valid_cap_x_(size) _Deref_post_valid_cap_x_(size);
static const int _Deref_prepost_opt_valid_cap_x_(size) = _Deref_pre_opt_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size);
static const int _Deref_prepost_valid_bytecap_x_(size) = _Deref_pre_valid_bytecap_x_(size) _Deref_post_valid_bytecap_x_(size);
static const int _Deref_prepost_opt_valid_bytecap_x_(size) = _Deref_pre_opt_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size);
static const int _Deref_prepost_count_(size) = _Deref_pre_count_(size) _Deref_post_count_(size);
static const int _Deref_prepost_opt_count_(size) = _Deref_pre_opt_count_(size) _Deref_post_opt_count_(size);
static const int _Deref_prepost_bytecount_(size) = _Deref_pre_bytecount_(size) _Deref_post_bytecount_(size);
static const int _Deref_prepost_opt_bytecount_(size) = _Deref_pre_opt_bytecount_(size) _Deref_post_opt_bytecount_(size);
static const int _Deref_prepost_count_x_(size) = _Deref_pre_count_x_(size) _Deref_post_count_x_(size);
static const int _Deref_prepost_opt_count_x_(size) = _Deref_pre_opt_count_x_(size) _Deref_post_opt_count_x_(size);
static const int _Deref_prepost_bytecount_x_(size) = _Deref_pre_bytecount_x_(size) _Deref_post_bytecount_x_(size);
static const int _Deref_prepost_opt_bytecount_x_(size) = _Deref_pre_opt_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size);
static const int _Deref_prepost_valid_ = _Deref_pre_valid_ _Deref_post_valid_;
static const int _Deref_prepost_opt_valid_ = _Deref_pre_opt_valid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_cap_c_(size) = _Deref_pre_cap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_cap_c_(size) = _Deref_pre_z_cap_c_(size) _Deref_post_z_;
static const int _Deref_out_z_bytecap_c_(size) = _Deref_pre_bytecap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_bytecap_c_(size) = _Deref_pre_z_bytecap_c_(size) _Deref_post_z_;
static const int _Deref_inout_z_ = _Deref_prepost_z_;
static const int _= __notnull __elem_writableTo(size);
static const int _= __notnull __byte_writableTo(size);
static const int = __pre __valid __pre __readonly;
static const int = __pre __elem_readableTo(size);
static const int = __pre __byte_readableTo(size);
static const int __in_z = __pre __nullterminated;
static const int __in_ecount_z(size) = __pre __nullterminated;
static const int __in_bcount_z(size) = __pre __nullterminated;
static const int __in_nz = __in;
static const int __in_ecount_nz(size) = ;
static const int __in_bcount_nz(size) = ;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int = ;
static const int = ;
static const int __out_z = __valid __refparam __nullterminated;
static const int __out_z_opt = __valid __refparam __nullterminated __exceptthat __maybenull;
static const int __out_ecount_z(size) = ___valid __refparam __nullterminated;
static const int __out_bcount_z(size) = ___valid __refparam __nullterminated;
static const int __out_ecount_part_z(size,length) = __nullterminated;
static const int __out_bcount_part_z(size,length) = __nullterminated;
static const int __out_ecount_full_z(size) = __nullterminated;
static const int __out_bcount_full_z(size) = __nullterminated;
static const int __out_nz = __valid __refparam ;
static const int __out_nz_opt = __valid __refparam __exceptthat __maybenull;
static const int __out_ecount_nz(size) = ___valid __refparam;
static const int __out_bcount_nz(size) = ___valid __refparam;
static const int = __pre __valid __valid __refparam;
static const int = __pre __valid;
static const int = __pre __valid;
static const int = __pre __valid __pre __elem_readableTo(length);
static const int = __pre __valid __pre __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = ___exceptthat __maybenull;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __in_z_opt = __pre __nullterminated;
static const int __in_ecount_z_opt(size) = __pre __nullterminated;
static const int __in_bcount_z_opt(size) = __pre __nullterminated;
static const int __in_nz_opt = ;
static const int __in_ecount_nz_opt(size) = ;
static const int __in_bcount_nz_opt(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_ecount_full_opt(size) = __exceptthat __maybenull;
static const int __out_bcount_full_opt(size) = __exceptthat __maybenull;
static const int __out_ecount_z_opt(size) = __nullterminated;
static const int __out_bcount_z_opt(size) = __nullterminated;
static const int __out_ecount_part_z_opt(size,length) = __nullterminated;
static const int __out_bcount_part_z_opt(size,length) = __nullterminated;
static const int __out_ecount_full_z_opt(size) = __out_ecount_full_opt(size) __nullterminated;
static const int __out_bcount_full_z_opt(size) = __out_bcount_full_opt(size) __nullterminated;
static const int __out_ecount_nz_opt(size) = __nullterminated;
static const int __out_bcount_nz_opt(size) = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = ;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int = ___elem_readableTo(1) __notnull __elem_writableTo(size);
static const int = ___elem_readableTo(1) __notnull __byte_writableTo(size);
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __valid __refparam __nullterminated;
static const int _ecount_z(size) = __nullterminated;
static const int _bcount_z(size) = __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __notnull __elem_readableTo(1) __pre __valid __valid __refparam;
static const int _z = __pre __nullterminated __nullterminated;
static const int = __pre __elem_writableTo(size) __elem_writableTo(size);
static const int = __pre __byte_writableTo(size) __byte_writableTo(size);
static const int = __pre __elem_readableTo(length) __elem_readableTo(length);
static const int = __pre __byte_readableTo(length) __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _opt = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __execeptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _z_opt = _opt __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _z = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _ecount_full(size) __exceptthat __maybenull;
static const int = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout = __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout_z = _opt_inout __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz = _opt_inout;
static const int _opt_inout_ecount_nz(size) = _opt_inout;
static const int _opt_inout_bcount_nz(size) = _opt_inout;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = _opt __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __exceptthat __maybenull __pre __exceptthat __maybenull __exceptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt_inout_opt = _opt __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_z_opt = _opt_inout_opt __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz_opt = _opt_inout_opt;
static const int _opt_inout_ecount_nz_opt(size) = _opt_inout;
static const int _opt_inout_bcount_nz_opt(size) = _opt_inout;
static const int = __inner_success(expr);
static const int __nullterminated = __readableTo(sentinel(0));
static const int = __pre __null;
static const int = __inner_checkReturn;
static const int __typefix(ctype) = __inner_typefix(ctype);
static const int __override = __inner_override;
static const int = __inner_callback;
static const int __blocksOn(resource) = __inner_blocksOn(resource);
static const int __control_entrypoint(category) = __inner_control_entrypoint(category);
static const int __data_entrypoint(category) = __inner_data_entrypoint(category);
static const int __fallthrough = __inner_fallthrough;
static const int _CRT_PACKING = 8;
static const int _CRT_PACKING = 8;
typedef unsigned __int64 uintptr_t;
typedef char * va_list;
static const int _ADDRESSOF(v) = ( &(v) );
static const int _SLOTSIZEOF(t) = (sizeof(t));
static const int _APALIGN(t,ap) = (__alignof(t));
static const int _INTSIZEOF(n) = ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) );
static const int _crt_va_start(ap,v) = ( ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v) );
static const int _crt_va_arg(ap,t) = ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) );
static const int _crt_va_end(ap) = ( ap = (va_list)0 );
static const int __CRT_STRINGIZE(_Value) = #_Value;
static const int _CRT_STRINGIZE(_Value) = __CRT_STRINGIZE(_Value);
static const int __CRT_WIDE(_String) = L ## _String;
static const int _CRT_WIDE(_String) = __CRT_WIDE(_String);
static const int __CRT_APPEND(_Value1,_Value2) = _Value1 ## _Value2;
static const int _CRT_APPEND(_Value1,_Value2) = __CRT_APPEND(_Value1, _Value2);
static const int _NOIA64 = ;
static const int _MRTIMP = ;
static const int __CLRCALL_OR_CDECL = ;
static const int _PURE = ;
static const long __STDC_SECURE_LIB__ = 200411L;
static const int __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
static const int __STDC_WANT_SECURE_LIB__ = 1;
static const int _CRT_DEPRECATE_TEXT(_Text) = ;
static const int _CRT_INSECURE_DEPRECATE(_Replacement) = _CRT_DEPRECATE_TEXT("This function or variable may be unsafe. Consider using " #_Replacement " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.");
static const int _CRT_INSECURE_DEPRECATE_GLOBALS(_Replacement) = _CRT_INSECURE_DEPRECATE(_Replacement);
static const int _SECURECRT_FILL_BUFFER_PATTERN = 0xFE;
static const int _CRT_OBSOLETE(_NewItem) = _CRT_DEPRECATE_TEXT("This function or variable has been superceded by newer library or operating system functionality. Consider using " #_NewItem " instead. See online help for details.");
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_NOTHROW = throw();
static const int _CRT_NONSTDC_DEPRECATE(_NewName) = _CRT_DEPRECATE_TEXT("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " #_NewName ". See online help for details.");
typedef unsigned __int64 size_t;
typedef size_t rsize_t;
typedef __int64 intptr_t;
typedef __int64 ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t; /* 32-bit time value */
typedef __int64 __time64_t; /* 64-bit time value */
typedef __time64_t time_t; /* time value */
static const int _CRT_ALIGN(x) = );
static const int _CRTNOALIAS = ;
static const int _CRTRESTRICT = ;
static const int __CRTDECL = ;
static const int __STR2WSTR(str) = L ##str;
static const int _STR2WSTR(str) = __STR2WSTR(str);
static const int __FILEW__ = _STR2WSTR(__FILE__);
static const int __FUNCTIONW__ = _STR2WSTR(__FUNCTION__);
 void _invalid_parameter_noinfo(void);
 void _invalid_parameter_noinfo_noreturn(void);
void _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
static const int _CRT_SECURE_INVALID_PARAMETER(expr) = ::_invalid_parameter_noinfo_noreturn();
static const int _ARGMAX = 100;
static const int _TRUNCATE = ((size_t)-1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _VFuncName, _VFuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_CGETS(_ReturnType,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureVFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_GETS(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;
typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;
typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; /* LCID */
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;
static const int _CRT_UNUSED(x) = (void)x;
static const int CHAR_BIT = 8;
static const int SCHAR_MIN = (-128);
static const int SCHAR_MAX = 127;
static const int UCHAR_MAX = 0xff;
static const int CHAR_MIN = SCHAR_MIN;
static const int CHAR_MAX = SCHAR_MAX;
static const int MB_LEN_MAX = 5;
static const int SHRT_MIN = (-32768);
static const int SHRT_MAX = 32767;
static const int USHRT_MAX = 0xffff;
static const int INT_MIN = (-2147483647 - 1);
static const int INT_MAX = 2147483647;
static const int UINT_MAX = 0xffffffff;
static const int LONG_MIN = (-2147483647L - 1);
static const long LONG_MAX = 2147483647L;
static const int ULONG_MAX = 0xffffffffUL;
static const int LLONG_MAX = 9223372036854775807i64;
static const int LLONG_MIN = (-9223372036854775807i64 - 1);
static const int ULLONG_MAX = 0xffffffffffffffffui64;
static const int _I8_MIN = (-127i8 - 1);
static const int _I8_MAX = 127i8;
static const int _UI8_MAX = 0xffui8;
static const int _I16_MIN = (-32767i16 - 1);
static const int _I16_MAX = 32767i16;
static const int _UI16_MAX = 0xffffui16;
static const int _I32_MIN = (-2147483647i32 - 1);
static const int _I32_MAX = 2147483647i32;
static const int _UI32_MAX = 0xffffffffui32;
static const int _I64_MIN = (-9223372036854775807i64 - 1);
static const int _I64_MAX = 9223372036854775807i64;
static const int _UI64_MAX = 0xffffffffffffffffui64;
static const int SIZE_MAX = _UI64_MAX;
static const int RSIZE_MAX = SIZE_MAX;
static const int NULL = ((void *)0);
static const int EXIT_SUCCESS = 0;
static const int EXIT_FAILURE = 1;
typedef int (* _onexit_t)(void);
typedef struct _div_t {
        int quot;
        int rem;
} div_t;
typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;
typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
static const int _PTR_LD(x) = ((unsigned char *)(&(x)->ld));
typedef struct {
        double x;
} _CRT_DOUBLE;
typedef struct {
    float f;
} _CRT_FLOAT;
typedef struct {
        long double x;
} _LONGDOUBLE;
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
static const int RAND_MAX = 0x7fff;
static const int MB_CUR_MAX = ___mb_cur_max_func();
 int __mb_cur_max;
 int ___mb_cur_max_func(void);
 int ___mb_cur_max_l_func(_locale_t);
static const int __max(a,b) = (((a) > (b)) ? (a) : (b));
static const int __min(a,b) = (((a) < (b)) ? (a) : (b));
static const int _MAX_PATH = 260;
static const int _MAX_DRIVE = 3;
static const int _MAX_DIR = 256;
static const int _MAX_FNAME = 256;
static const int _MAX_EXT = 256;
static const int _OUT_TO_DEFAULT = 0;
static const int _OUT_TO_STDERR = 1;
static const int _OUT_TO_MSGBOX = 2;
static const int _REPORT_ERRMODE = 3;
static const int _WRITE_ABORT_MSG = 0x1;
static const int _CALL_REPORTFAULT = 0x2;
static const int _MAX_ENV = 32767;
typedef void (*_purecall_handler)(void);
 _purecall_handler _set_purecall_handler( _purecall_handler _Handler);
 _purecall_handler _get_purecall_handler(void);
typedef void (*_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
 _invalid_parameter_handler _set_invalid_parameter_handler( _invalid_parameter_handler _Handler);
 _invalid_parameter_handler _get_invalid_parameter_handler(void);
 int * _errno(void);
static const int errno = (*_errno());
errno_t _set_errno( int _Value);
errno_t _get_errno( int * _Value);
 unsigned long * __doserrno(void);
static const int _doserrno = (*__doserrno());
errno_t _set_doserrno( unsigned long _Value);
errno_t _get_doserrno( unsigned long * _Value);
 char ** __sys_errlist(void);
static const int _sys_errlist = (__sys_errlist());
 int * __sys_nerr(void);
static const int _sys_nerr = (*__sys_nerr());
 int __argc; /* count of cmd line args */
 char ** __argv; /* pointer to table of cmd line args */
 wchar_t ** __wargv; /* pointer to table of wide cmd line args */
 char ** _environ; /* pointer to environment table */
 wchar_t ** _wenviron; /* pointer to wide environment table */
char * _pgmptr; /* points to the module (EXE) name */
wchar_t * _wpgmptr; /* points to the module (EXE) wide name */
errno_t _get_pgmptr( char ** _Value);
errno_t _get_wpgmptr( wchar_t ** _Value);
int _fmode; /* default file translation mode */
 errno_t _set_fmode( int _Mode);
 errno_t _get_fmode( int * _PMode);
static const int _countof(_Array) = (sizeof(_Array) / sizeof(_Array[0]));
 void exit( int _Code);
 void _exit( int _Code);
 void abort(void);
 unsigned int _set_abort_behavior( unsigned int _Flags, unsigned int _Mask);
        int abs( int _X);
        long labs( long _X);
        long long llabs( long long _X);
        __int64 _abs64(__int64);
        int atexit(void (*)(void));
 double atof( const char *_String);
 double _atof_l( const char *_String, _locale_t _Locale);
 int atoi( const char *_Str);
 int _atoi_l( const char *_Str, _locale_t _Locale);
 long atol( const char *_Str);
 long _atol_l( const char *_Str, _locale_t _Locale);
 void * bsearch_s( const void * _Key, const void * _Base,
        rsize_t _NumOfElements, rsize_t _SizeOfElements,
        int (* _PtFuncCompare)(void *, const void *, const void *), void * _Context);
 void * bsearch( const void * _Key, const void * _Base,
        size_t _NumOfElements, size_t _SizeOfElements,
        int (* _PtFuncCompare)(const void *, const void *));
 void qsort_s( void * _Base,
        rsize_t _NumOfElements, rsize_t _SizeOfElements,
        int (* _PtFuncCompare)(void *, const void *, const void *), void *_Context);
 void qsort( void * _Base,
 size_t _NumOfElements, size_t _SizeOfElements,
        int (* _PtFuncCompare)(const void *, const void *));
        unsigned short _byteswap_ushort( unsigned short _Short);
        unsigned long _byteswap_ulong ( unsigned long _Long);
        unsigned __int64 _byteswap_uint64( unsigned __int64 _Int64);
 div_t div( int _Numerator, int _Denominator);
 char * getenv( const char * _VarName);
 errno_t getenv_s( size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName);
 errno_t _dupenv_s( char **_PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName);
 errno_t _itoa_s( int _Value, char * _DstBuf, size_t _Size, int _Radix);
char * _itoa(int _Value, char *_Dest, int _Radix);
 errno_t _i64toa_s( __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
 char * _i64toa( __int64 _Val, char * _DstBuf, int _Radix);
 errno_t _ui64toa_s( unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
 char * _ui64toa( unsigned __int64 _Val, char * _DstBuf, int _Radix);
 __int64 _atoi64( const char * _String);
 __int64 _atoi64_l( const char * _String, _locale_t _Locale);
 __int64 _strtoi64( const char * _String, char ** _EndPtr, int _Radix);
 __int64 _strtoi64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
 unsigned __int64 _strtoui64( const char * _String, char ** _EndPtr, int _Radix);
 unsigned __int64 _strtoui64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
 ldiv_t ldiv( long _Numerator, long _Denominator);
 lldiv_t lldiv( long long _Numerator, long long _Denominator);
 errno_t _ltoa_s( long _Val, char * _DstBuf, size_t _Size, int _Radix);
char * _ltoa(long _Value, char *_Dest, int _Radix);
 int mblen( const char * _Ch, size_t _MaxCount);
 int _mblen_l( const char * _Ch, size_t _MaxCount, _locale_t _Locale);
 size_t _mbstrlen( const char * _Str);
 size_t _mbstrlen_l( const char *_Str, _locale_t _Locale);
 size_t _mbstrnlen( const char *_Str, size_t _MaxCount);
 size_t _mbstrnlen_l( const char *_Str, size_t _MaxCount, _locale_t _Locale);
 int mbtowc( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes);
 int _mbtowc_l( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
 errno_t mbstowcs_s( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount );
size_t mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);
 errno_t _mbstowcs_s_l( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale);
size_t _mbstowcs_l( wchar_t *_Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale);
 int rand(void);
 int _set_error_mode( int _Mode);
 void srand( unsigned int _Seed);
 double strtod( const char * _Str, char ** _EndPtr);
 double _strtod_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
 long strtol( const char * _Str, char ** _EndPtr, int _Radix );
 long _strtol_l( const char *_Str, char **_EndPtr, int _Radix, _locale_t _Locale);
 unsigned long strtoul( const char * _Str, char ** _EndPtr, int _Radix);
 unsigned long _strtoul_l(const char * _Str, char **_EndPtr, int _Radix, _locale_t _Locale);
 int system( const char * _Command);
 errno_t _ultoa_s( unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix);
char * _ultoa(unsigned long _Value, char *_Dest, int _Radix);
 int wctomb( char * _MbCh, wchar_t _WCh);
 int _wctomb_l( char * _MbCh, wchar_t _WCh, _locale_t _Locale);
 errno_t wctomb_s( int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);
 errno_t _wctomb_s_l( int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
 errno_t wcstombs_s( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes);
size_t wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
 errno_t _wcstombs_s_l( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale);
size_t _wcstombs_l( char *_Dest, const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale);
 void * calloc( size_t _Count, size_t _Size);
 void free( void * _Memory);
 void * malloc( size_t _Size);
 void * realloc( void * _Memory, size_t _NewSize);
 void * _recalloc( void * _Memory, size_t _Count, size_t _Size);
 void _aligned_free( void * _Memory);
 void * _aligned_malloc( size_t _Size, size_t _Alignment);
 void * _aligned_offset_malloc( size_t _Size, size_t _Alignment, size_t _Offset);
 void * _aligned_realloc( void * _Memory, size_t _NewSize, size_t _Alignment);
 void * _aligned_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment);
 void * _aligned_offset_realloc( void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset);
 void * _aligned_offset_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
 size_t _aligned_msize( void * _Memory, size_t _Alignment, size_t _Offset);
 errno_t _itow_s ( int _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
wchar_t * _itow(int _Value, wchar_t *_Dest, int _Radix);
 errno_t _ltow_s ( long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
wchar_t * _ltow(long _Value, wchar_t *_Dest, int _Radix);
 errno_t _ultow_s ( unsigned long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
wchar_t * _ultow(unsigned long _Value, wchar_t *_Dest, int _Radix);
 double wcstod( const wchar_t * _Str, wchar_t ** _EndPtr);
 double _wcstod_l( const wchar_t *_Str, wchar_t ** _EndPtr, _locale_t _Locale);
 long wcstol( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
 long _wcstol_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
 unsigned long wcstoul( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
 unsigned long _wcstoul_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
 wchar_t * _wgetenv( const wchar_t * _VarName);
 errno_t _wgetenv_s( size_t * _ReturnSize, wchar_t * _DstBuf, size_t _DstSizeInWords, const wchar_t * _VarName);
 errno_t _wdupenv_s( wchar_t **_Buffer, size_t *_BufferSizeInWords, const wchar_t *_VarName);
 int _wsystem( const wchar_t * _Command);
 double _wtof( const wchar_t *_Str);
 double _wtof_l( const wchar_t *_Str, _locale_t _Locale);
 int _wtoi( const wchar_t *_Str);
 int _wtoi_l( const wchar_t *_Str, _locale_t _Locale);
 long _wtol( const wchar_t *_Str);
 long _wtol_l( const wchar_t *_Str, _locale_t _Locale);
 errno_t _i64tow_s( __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
 wchar_t * _i64tow( __int64 _Val, wchar_t * _DstBuf, int _Radix);
 errno_t _ui64tow_s( unsigned __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
 wchar_t * _ui64tow( unsigned __int64 _Val, wchar_t * _DstBuf, int _Radix);
 __int64 _wtoi64( const wchar_t *_Str);
 __int64 _wtoi64_l( const wchar_t *_Str, _locale_t _Locale);
 __int64 _wcstoi64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
 __int64 _wcstoi64_l( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
 unsigned __int64 _wcstoui64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
 unsigned __int64 _wcstoui64_l( const wchar_t *_Str , wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
static const int _CVTBUFSIZE = (309+40);
 char * _fullpath( char * _FullPath, const char * _Path, size_t _SizeInBytes);
 errno_t _ecvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign);
 char * _ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
 errno_t _fcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
 char * _fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
 errno_t _gcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
 char * _gcvt( double _Val, int _NumOfDigits, char * _DstBuf);
 int _atodbl( _CRT_DOUBLE * _Result, char * _Str);
 int _atoldbl( _LDOUBLE * _Result, char * _Str);
 int _atoflt( _CRT_FLOAT * _Result, char * _Str);
 int _atodbl_l( _CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale);
 int _atoldbl_l( _LDOUBLE * _Result, char * _Str, _locale_t _Locale);
 int _atoflt_l( _CRT_FLOAT * _Result, char * _Str, _locale_t _Locale);
        unsigned long _lrotl( unsigned long _Val, int _Shift);
        unsigned long _lrotr( unsigned long _Val, int _Shift);
 errno_t _makepath_s( char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename,
        const char * _Ext);
void _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
        _onexit_t _onexit( _onexit_t _Func);
 void perror( const char * _ErrMsg);
 int _putenv( const char * _EnvString);
 errno_t _putenv_s( const char * _Name, const char * _Value);
        unsigned int _rotl( unsigned int _Val, int _Shift);
        unsigned __int64 _rotl64( unsigned __int64 _Val, int _Shift);
        unsigned int _rotr( unsigned int _Val, int _Shift);
        unsigned __int64 _rotr64( unsigned __int64 _Val, int _Shift);
 errno_t _searchenv_s( const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes);
void _searchenv(const char * _Filename, const char * _EnvVar, char *_ResultPath);
void _splitpath( const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext);
 errno_t _splitpath_s( const char * _FullPath,
  char * _Drive, size_t _DriveSize,
  char * _Dir, size_t _DirSize,
  char * _Filename, size_t _FilenameSize,
  char * _Ext, size_t _ExtSize);
 void _swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
 wchar_t * _wfullpath( wchar_t * _FullPath, const wchar_t * _Path, size_t _SizeInWords);
 errno_t _wmakepath_s( wchar_t * _PathResult, size_t _SIZE, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename,
        const wchar_t * _Ext);
void _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);
 void _wperror( const wchar_t * _ErrMsg);
 int _wputenv( const wchar_t * _EnvString);
 errno_t _wputenv_s( const wchar_t * _Name, const wchar_t * _Value);
 errno_t _wsearchenv_s( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t * _ResultPath, size_t _SizeInWords);
void _wsearchenv(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t *_ResultPath);
void _wsplitpath( const wchar_t * _FullPath, wchar_t * _Drive, wchar_t * _Dir, wchar_t * _Filename, wchar_t * _Ext);
 errno_t _wsplitpath_s( const wchar_t * _FullPath,
  wchar_t * _Drive, size_t _DriveSize,
  wchar_t * _Dir, size_t _DirSize,
  wchar_t * _Filename, size_t _FilenameSize,
  wchar_t * _Ext, size_t _ExtSize);
void _seterrormode( int _Mode);
void _beep( unsigned _Frequency, unsigned _Duration);
void _sleep( unsigned long _Duration);
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int _USE_DECLSPECS_FOR_SAL = 0;
static const int _USE_ATTRIBUTES_FOR_SAL = 0;
static const int _In_ = _Pre1_impl_(_$notnull) _Deref_pre2_impl_(_$valid, _$readaccess);
static const int _In_opt_ = _Pre_opt_valid_ _Deref_pre_readonly_;
static const int _In_z_ = _Pre_z_ _Deref_pre_readonly_;
static const int _In_opt_z_ = _Pre_opt_z_ _Deref_pre_readonly_;
static const int _In_count_(size) = _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_count_(size) = _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_bytecount_(size) = _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_count_c_(size) = _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_count_c_(size) = _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_bytecount_c_(size) = _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_z_count_(size) = _Pre_z_ _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_(size) = _Pre_opt_z_ _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_(size) = _Pre_z_ _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_(size) = _Pre_opt_z_ _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_z_count_c_(size) = _Pre_z_ _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_c_(size) = _Pre_opt_z_ _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_c_(size) = _Pre_z_ _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_c_(size) = _Pre_opt_z_ _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_count_x_(size) = _Pre_count_x_(size) _Deref_pre_readonly_;
static const int _In_opt_count_x_(size) = _Pre_opt_count_x_(size) _Deref_pre_readonly_;
static const int _In_bytecount_x_(size) = _Pre_bytecount_x_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Deref_pre_readonly_;
static const int _Out_ = _Pre_cap_c_(1) _Pre_invalid_;
static const int _Out_opt_ = _Pre_opt_cap_c_(1) _Pre_invalid_;
static const int _Out_cap_(size) = _Pre_cap_(size) _Pre_invalid_;
static const int _Out_opt_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_;
static const int _Out_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_;
static const int _Out_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_;
static const int _Out_opt_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_;
static const int _Out_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_;
static const int _Out_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_opt_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_z_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_ptrdiff_cap_(size) = _Pre_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_opt_ptrdiff_cap_(size) = _Pre_opt_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_;
static const int _Out_opt_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_;
static const int _Out_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_;
static const int _Out_z_cap_(size) = _Pre_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_opt_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_opt_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_z_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_opt_z_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_z_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_opt_z_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_opt_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_opt_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_capcount_x_(capcount) = _Pre_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_opt_capcount_x_(capcount) = _Pre_opt_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_bytecapcount_x_(capcount) = _Pre_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_opt_bytecapcount_x_(capcount) = _Pre_opt_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_z_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_opt_z_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_z_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Out_opt_z_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Inout_ = _Prepost_valid_;
static const int _Inout_opt_ = _Prepost_opt_valid_;
static const int _Inout_z_ = _Prepost_z_;
static const int _Inout_opt_z_ = _Prepost_opt_z_;
static const int _Inout_count_(size) = _Prepost_count_(size);
static const int _Inout_opt_count_(size) = _Prepost_opt_count_(size);
static const int _Inout_bytecount_(size) = _Prepost_bytecount_(size);
static const int _Inout_opt_bytecount_(size) = _Prepost_opt_bytecount_(size);
static const int _Inout_count_c_(size) = _Prepost_count_c_(size);
static const int _Inout_opt_count_c_(size) = _Prepost_opt_count_c_(size);
static const int _Inout_bytecount_c_(size) = _Prepost_bytecount_c_(size);
static const int _Inout_opt_bytecount_c_(size) = _Prepost_opt_bytecount_c_(size);
static const int _Inout_z_count_(size) = _Prepost_z_ _Prepost_count_(size);
static const int _Inout_opt_z_count_(size) = _Prepost_z_ _Prepost_opt_count_(size);
static const int _Inout_z_bytecount_(size) = _Prepost_z_ _Prepost_bytecount_(size);
static const int _Inout_opt_z_bytecount_(size) = _Prepost_z_ _Prepost_opt_bytecount_(size);
static const int _Inout_z_count_c_(size) = _Prepost_z_ _Prepost_count_c_(size);
static const int _Inout_opt_z_count_c_(size) = _Prepost_z_ _Prepost_opt_count_c_(size);
static const int _Inout_z_bytecount_c_(size) = _Prepost_z_ _Prepost_bytecount_c_(size);
static const int _Inout_opt_z_bytecount_c_(size) = _Prepost_z_ _Prepost_opt_bytecount_c_(size);
static const int _Inout_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size);
static const int _Inout_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size);
static const int _Inout_count_x_(size) = _Prepost_count_x_(size);
static const int _Inout_opt_count_x_(size) = _Prepost_opt_count_x_(size);
static const int _Inout_bytecount_x_(size) = _Prepost_bytecount_x_(size);
static const int _Inout_opt_bytecount_x_(size) = _Prepost_opt_bytecount_x_(size);
static const int _Inout_cap_(size) = _Pre_valid_cap_(size) _Post_valid_;
static const int _Inout_opt_cap_(size) = _Pre_opt_valid_cap_(size) _Post_valid_;
static const int _Inout_bytecap_(size) = _Pre_valid_bytecap_(size) _Post_valid_;
static const int _Inout_opt_bytecap_(size) = _Pre_opt_valid_bytecap_(size) _Post_valid_;
static const int _Inout_cap_c_(size) = _Pre_valid_cap_c_(size) _Post_valid_;
static const int _Inout_opt_cap_c_(size) = _Pre_opt_valid_cap_c_(size) _Post_valid_;
static const int _Inout_bytecap_c_(size) = _Pre_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_opt_bytecap_c_(size) = _Pre_opt_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_cap_x_(size) = _Pre_valid_cap_x_(size) _Post_valid_;
static const int _Inout_opt_cap_x_(size) = _Pre_opt_valid_cap_x_(size) _Post_valid_;
static const int _Inout_bytecap_x_(size) = _Pre_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_opt_bytecap_x_(size) = _Pre_opt_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_z_cap_(size) = _Pre_z_cap_(size) _Post_z_;
static const int _Inout_opt_z_cap_(size) = _Pre_opt_z_cap_(size) _Post_z_;
static const int _Inout_z_bytecap_(size) = _Pre_z_bytecap_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_(size) = _Pre_opt_z_bytecap_(size) _Post_z_;
static const int _Inout_z_cap_c_(size) = _Pre_z_cap_c_(size) _Post_z_;
static const int _Inout_opt_z_cap_c_(size) = _Pre_opt_z_cap_c_(size) _Post_z_;
static const int _Inout_z_bytecap_c_(size) = _Pre_z_bytecap_c_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_c_(size) = _Pre_opt_z_bytecap_c_(size) _Post_z_;
static const int _Inout_z_cap_x_(size) = _Pre_z_cap_x_(size) _Post_z_;
static const int _Inout_opt_z_cap_x_(size) = _Pre_opt_z_cap_x_(size) _Post_z_;
static const int _Inout_z_bytecap_x_(size) = _Pre_z_bytecap_x_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_x_(size) = _Pre_opt_z_bytecap_x_(size) _Post_z_;
static const int _Ret_ = _Ret_valid_;
static const int _Ret_opt_ = _Ret_opt_valid_;
static const int _Deref_out_ = _Out_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_out_opt_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_opt_out_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_opt_out_opt_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_out_opt_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Deref_opt_out_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_opt_out_opt_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Check_return_ = _Check_return_impl_;
static const int _Printf_format_string_ = _Printf_format_string_impl_;
static const int _Scanf_format_string_ = _Scanf_format_string_impl_;
static const int _Scanf_s_format_string_ = _Scanf_s_format_string_impl_;
static const int _Success_(expr) = _Success_impl_(expr);
static const int _In_bound_ = _In_bound_impl_;
static const int _Out_bound_ = _Out_bound_impl_;
static const int _Ret_bound_ = _Ret_bound_impl_;
static const int _Deref_in_bound_ = _Deref_in_bound_impl_;
static const int _Deref_out_bound_ = _Deref_out_bound_impl_;
static const int _Deref_inout_bound_ = _Deref_in_bound_ _Deref_out_bound_;
static const int _Deref_ret_bound_ = _Deref_ret_bound_impl_;
static const int _In_range_(lb,ub) = _In_range_impl_(lb,ub);
static const int _Out_range_(lb,ub) = _Out_range_impl_(lb,ub);
static const int _Ret_range_(lb,ub) = _Ret_range_impl_(lb,ub);
static const int _Deref_in_range_(lb,ub) = _Deref_in_range_impl_(lb,ub);
static const int _Deref_out_range_(lb,ub) = _Deref_out_range_impl_(lb,ub);
static const int _Deref_ret_range_(lb,ub) = _Deref_ret_range_impl_(lb,ub);
static const int _Pre_z_ = _Pre2_impl_(_$notnull, _$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_ = _Pre2_impl_(_$maybenull,_$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size));
static const int _Pre_opt_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size));
static const int _Pre_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size));
static const int _Pre_opt_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Pre_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size));
static const int _Pre_opt_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Pre_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Pre_opt_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Pre_cap_m_(mult,size) = _Pre2_impl_(_$notnull, _$mult(mult,size));
static const int _Pre_opt_cap_m_(mult,size) = _Pre2_impl_(_$maybenull,_$mult(mult,size));
static const int _Pre_cap_for_(param) = _Pre2_impl_(_$notnull, _$cap_for(param));
static const int _Pre_opt_cap_for_(param) = _Pre2_impl_(_$maybenull,_$cap_for(param));
static const int _Pre_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size));
static const int _Pre_opt_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Pre_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Pre_opt_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Pre_ptrdiff_cap_(ptr) = _Pre2_impl_(_$notnull, _$cap_x(__ptrdiff(ptr)));
static const int _Pre_opt_ptrdiff_cap_(ptr) = _Pre2_impl_(_$maybenull,_$cap_x(__ptrdiff(ptr)));
static const int _Pre_z_cap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_(size) = _Pre2_impl_(_$notnull, _$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_(size) = _Pre2_impl_(_$maybenull,_$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_(size) = _Pre2_impl_(_$notnull, _$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_(size) = _Pre2_impl_(_$maybenull,_$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_c_(size) = _Pre2_impl_(_$notnull, _$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_c_(size) = _Pre2_impl_(_$maybenull,_$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_c_(size) = _Pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_c_(size) = _Pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_x_(size) = _Pre2_impl_(_$notnull, _$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_x_(size) = _Pre2_impl_(_$maybenull,_$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_x_(size) = _Pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_x_(size) = _Pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_ptrdiff_count_(ptr) = _Pre2_impl_(_$notnull, _$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_ptrdiff_count_(ptr) = _Pre2_impl_(_$maybenull,_$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_ = _Pre1_impl_(_$notnull) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_ = _Pre1_impl_(_$maybenull) _Deref_pre1_impl_(_$valid);
static const int _Pre_invalid_ = _Deref_pre1_impl_(_$notvalid);
static const int _Pre_notnull_ = _Pre1_impl_(_$notnull);
static const int _Pre_maybenull_ = _Pre1_impl_(_$maybenull);
static const int _Pre_null_ = _Pre1_impl_(_$null);
static const int _Pre_readonly_ = _Pre1_impl_(_$readaccess);
static const int _Pre_writeonly_ = _Pre1_impl_(_$writeaccess);
static const int _Post_z_ = _Post1_impl_(_$zterm) _Deref_post1_impl_(_$valid);
static const int _Post_maybez_ = _Post1_impl_(_$maybezterm);
static const int _Post_cap_(size) = _Post1_impl_(_$cap(size));
static const int _Post_bytecap_(size) = _Post1_impl_(_$bytecap(size));
static const int _Post_count_(size) = _Post1_impl_(_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_(size) = _Post1_impl_(_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_c_(size) = _Post1_impl_(_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_c_(size) = _Post1_impl_(_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_x_(size) = _Post1_impl_(_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_x_(size) = _Post1_impl_(_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_(size) = _Post2_impl_(_$zterm,_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_(size) = _Post2_impl_(_$zterm,_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_c_(size) = _Post2_impl_(_$zterm,_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_c_(size) = _Post2_impl_(_$zterm,_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_x_(size) = _Post2_impl_(_$zterm,_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_x_(size) = _Post2_impl_(_$zterm,_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_ptr_invalid_ = _Post1_impl_(_$notvalid);
static const int _Post_valid_ = _Deref_post1_impl_(_$valid);
static const int _Post_invalid_ = _Deref_post1_impl_(_$notvalid);
static const int _Post_notnull_ = _Post1_impl_(_$notnull);
static const int _Ret_z_ = _Ret2_impl_(_$notnull, _$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_ = _Ret2_impl_(_$maybenull,_$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_cap_(size) = _Ret2_impl_(_$notnull, _$cap(size));
static const int _Ret_opt_cap_(size) = _Ret2_impl_(_$maybenull,_$cap(size));
static const int _Ret_bytecap_(size) = _Ret2_impl_(_$notnull, _$bytecap(size));
static const int _Ret_opt_bytecap_(size) = _Ret2_impl_(_$maybenull,_$bytecap(size));
static const int _Ret_cap_c_(size) = _Ret2_impl_(_$notnull, _$cap_c(size));
static const int _Ret_opt_cap_c_(size) = _Ret2_impl_(_$maybenull,_$cap_c(size));
static const int _Ret_bytecap_c_(size) = _Ret2_impl_(_$notnull, _$bytecap_c(size));
static const int _Ret_opt_bytecap_c_(size) = _Ret2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Ret_cap_x_(size) = _Ret2_impl_(_$notnull, _$cap_x(size));
static const int _Ret_opt_cap_x_(size) = _Ret2_impl_(_$maybenull,_$cap_x(size));
static const int _Ret_bytecap_x_(size) = _Ret2_impl_(_$notnull, _$bytecap_x(size));
static const int _Ret_opt_bytecap_x_(size) = _Ret2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Ret_z_cap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_cap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_(size) = _Ret2_impl_(_$notnull, _$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_(size) = _Ret2_impl_(_$maybenull,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_(size) = _Ret2_impl_(_$notnull, _$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_(size) = _Ret2_impl_(_$maybenull,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_c_(size) = _Ret2_impl_(_$notnull, _$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_c_(size) = _Ret2_impl_(_$maybenull,_$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_c_(size) = _Ret2_impl_(_$notnull, _$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_c_(size) = _Ret2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_x_(size) = _Ret2_impl_(_$notnull, _$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_x_(size) = _Ret2_impl_(_$maybenull,_$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_x_(size) = _Ret2_impl_(_$notnull, _$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_x_(size) = _Ret2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_count_(size) = _Ret3_impl_(_$notnull, _$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_count_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecount_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecount_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_valid_ = _Ret1_impl_(_$notnull) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_valid_ = _Ret1_impl_(_$maybenull) _Deref_ret1_impl_(_$valid);
static const int _Ret_notnull_ = _Ret1_impl_(_$notnull);
static const int _Ret_maybenull_ = _Ret1_impl_(_$maybenull);
static const int _Ret_null_ = _Ret1_impl_(_$null);
static const int _Deref_pre_z_ = _Deref_pre2_impl_(_$notnull, _$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_ = _Deref_pre2_impl_(_$maybenull,_$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size));
static const int _Deref_pre_opt_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size));
static const int _Deref_pre_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_pre_opt_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_pre_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size));
static const int _Deref_pre_opt_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Deref_pre_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Deref_pre_opt_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Deref_pre_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_pre_opt_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_pre_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_pre_opt_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_pre_z_cap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_(size) = _Deref_pre2_impl_(_$notnull, _$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_(size) = _Deref_pre2_impl_(_$maybenull,_$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_c_(size) = _Deref_pre2_impl_(_$notnull, _$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_c_(size) = _Deref_pre2_impl_(_$maybenull,_$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_x_(size) = _Deref_pre2_impl_(_$notnull, _$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_x_(size) = _Deref_pre2_impl_(_$maybenull,_$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_ = _Deref_pre1_impl_(_$notnull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_ = _Deref_pre1_impl_(_$maybenull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_invalid_ = _Deref2_pre1_impl_(_$notvalid);
static const int _Deref_pre_notnull_ = _Deref_pre1_impl_(_$notnull);
static const int _Deref_pre_maybenull_ = _Deref_pre1_impl_(_$maybenull);
static const int _Deref_pre_null_ = _Deref_pre1_impl_(_$null);
static const int _Deref_pre_readonly_ = _Deref_pre1_impl_(_$readaccess);
static const int _Deref_pre_writeonly_ = _Deref_pre1_impl_(_$writeaccess);
static const int _Deref_post_z_ = _Deref_post2_impl_(_$notnull, _$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_ = _Deref_post2_impl_(_$maybenull,_$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size));
static const int _Deref_post_opt_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size));
static const int _Deref_post_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_post_opt_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_post_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_z(size));
static const int _Deref_post_opt_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_z(size));
static const int _Deref_post_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_z(size));
static const int _Deref_post_opt_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_z(size));
static const int _Deref_post_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_post_opt_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_post_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_post_opt_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_post_z_cap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_(size) = _Deref_post2_impl_(_$notnull, _$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_(size) = _Deref_post2_impl_(_$maybenull,_$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_(size) = _Deref_post2_impl_(_$notnull, _$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_c_(size) = _Deref_post2_impl_(_$notnull, _$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_c_(size) = _Deref_post2_impl_(_$maybenull,_$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_x_(size) = _Deref_post2_impl_(_$notnull, _$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_x_(size) = _Deref_post2_impl_(_$maybenull,_$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_ = _Deref_post1_impl_(_$notnull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_ = _Deref_post1_impl_(_$maybenull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_notnull_ = _Deref_post1_impl_(_$notnull);
static const int _Deref_post_maybenull_ = _Deref_post1_impl_(_$maybenull);
static const int _Deref_post_null_ = _Deref_post1_impl_(_$null);
static const int _Deref_ret_z_ = _Deref_ret2_impl_(_$notnull, _$zterm);
static const int _Deref_ret_opt_z_ = _Deref_ret2_impl_(_$maybenull,_$zterm);
static const int _Deref2_pre_readonly_ = _Deref2_pre1_impl_(_$readaccess);
static const int _Prepost_z_ = _Pre_z_ _Post_z_;
static const int _Prepost_opt_z_ = _Pre_opt_z_ _Post_z_;
static const int _Prepost_count_(size) = _Pre_count_(size) _Post_count_(size);
static const int _Prepost_opt_count_(size) = _Pre_opt_count_(size) _Post_count_(size);
static const int _Prepost_bytecount_(size) = _Pre_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_count_c_(size) = _Pre_count_c_(size) _Post_count_c_(size);
static const int _Prepost_opt_count_c_(size) = _Pre_opt_count_c_(size) _Post_count_c_(size);
static const int _Prepost_bytecount_c_(size) = _Pre_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_count_x_(size) = _Pre_count_x_(size) _Post_count_x_(size);
static const int _Prepost_opt_count_x_(size) = _Pre_opt_count_x_(size) _Post_count_x_(size);
static const int _Prepost_bytecount_x_(size) = _Pre_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_valid_ = _Pre_valid_ _Post_valid_;
static const int _Prepost_opt_valid_ = _Pre_opt_valid_ _Post_valid_;
static const int _Deref_prepost_z_ = _Deref_pre_z_ _Deref_post_z_;
static const int _Deref_prepost_opt_z_ = _Deref_pre_opt_z_ _Deref_post_opt_z_;
static const int _Deref_prepost_cap_(size) = _Deref_pre_cap_(size) _Deref_post_cap_(size);
static const int _Deref_prepost_opt_cap_(size) = _Deref_pre_opt_cap_(size) _Deref_post_opt_cap_(size);
static const int _Deref_prepost_bytecap_(size) = _Deref_pre_bytecap_(size) _Deref_post_bytecap_(size);
static const int _Deref_prepost_opt_bytecap_(size) = _Deref_pre_opt_bytecap_(size) _Deref_post_opt_bytecap_(size);
static const int _Deref_prepost_cap_x_(size) = _Deref_pre_cap_x_(size) _Deref_post_cap_x_(size);
static const int _Deref_prepost_opt_cap_x_(size) = _Deref_pre_opt_cap_x_(size) _Deref_post_opt_cap_x_(size);
static const int _Deref_prepost_bytecap_x_(size) = _Deref_pre_bytecap_x_(size) _Deref_post_bytecap_x_(size);
static const int _Deref_prepost_opt_bytecap_x_(size) = _Deref_pre_opt_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size);
static const int _Deref_prepost_z_cap_(size) = _Deref_pre_z_cap_(size) _Deref_post_z_cap_(size);
static const int _Deref_prepost_opt_z_cap_(size) = _Deref_pre_opt_z_cap_(size) _Deref_post_opt_z_cap_(size);
static const int _Deref_prepost_z_bytecap_(size) = _Deref_pre_z_bytecap_(size) _Deref_post_z_bytecap_(size);
static const int _Deref_prepost_opt_z_bytecap_(size) = _Deref_pre_opt_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size);
static const int _Deref_prepost_valid_cap_(size) = _Deref_pre_valid_cap_(size) _Deref_post_valid_cap_(size);
static const int _Deref_prepost_opt_valid_cap_(size) = _Deref_pre_opt_valid_cap_(size) _Deref_post_opt_valid_cap_(size);
static const int _Deref_prepost_valid_bytecap_(size) = _Deref_pre_valid_bytecap_(size) _Deref_post_valid_bytecap_(size);
static const int _Deref_prepost_opt_valid_bytecap_(size) = _Deref_pre_opt_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size);
static const int _Deref_prepost_valid_cap_x_(size) = _Deref_pre_valid_cap_x_(size) _Deref_post_valid_cap_x_(size);
static const int _Deref_prepost_opt_valid_cap_x_(size) = _Deref_pre_opt_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size);
static const int _Deref_prepost_valid_bytecap_x_(size) = _Deref_pre_valid_bytecap_x_(size) _Deref_post_valid_bytecap_x_(size);
static const int _Deref_prepost_opt_valid_bytecap_x_(size) = _Deref_pre_opt_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size);
static const int _Deref_prepost_count_(size) = _Deref_pre_count_(size) _Deref_post_count_(size);
static const int _Deref_prepost_opt_count_(size) = _Deref_pre_opt_count_(size) _Deref_post_opt_count_(size);
static const int _Deref_prepost_bytecount_(size) = _Deref_pre_bytecount_(size) _Deref_post_bytecount_(size);
static const int _Deref_prepost_opt_bytecount_(size) = _Deref_pre_opt_bytecount_(size) _Deref_post_opt_bytecount_(size);
static const int _Deref_prepost_count_x_(size) = _Deref_pre_count_x_(size) _Deref_post_count_x_(size);
static const int _Deref_prepost_opt_count_x_(size) = _Deref_pre_opt_count_x_(size) _Deref_post_opt_count_x_(size);
static const int _Deref_prepost_bytecount_x_(size) = _Deref_pre_bytecount_x_(size) _Deref_post_bytecount_x_(size);
static const int _Deref_prepost_opt_bytecount_x_(size) = _Deref_pre_opt_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size);
static const int _Deref_prepost_valid_ = _Deref_pre_valid_ _Deref_post_valid_;
static const int _Deref_prepost_opt_valid_ = _Deref_pre_opt_valid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_cap_c_(size) = _Deref_pre_cap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_cap_c_(size) = _Deref_pre_z_cap_c_(size) _Deref_post_z_;
static const int _Deref_out_z_bytecap_c_(size) = _Deref_pre_bytecap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_bytecap_c_(size) = _Deref_pre_z_bytecap_c_(size) _Deref_post_z_;
static const int _Deref_inout_z_ = _Deref_prepost_z_;
static const int _= __notnull __elem_writableTo(size);
static const int _= __notnull __byte_writableTo(size);
static const int = __pre __valid __pre __readonly;
static const int = __pre __elem_readableTo(size);
static const int = __pre __byte_readableTo(size);
static const int __in_z = __pre __nullterminated;
static const int __in_ecount_z(size) = __pre __nullterminated;
static const int __in_bcount_z(size) = __pre __nullterminated;
static const int __in_nz = __in;
static const int __in_ecount_nz(size) = ;
static const int __in_bcount_nz(size) = ;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int = ;
static const int = ;
static const int __out_z = __valid __refparam __nullterminated;
static const int __out_z_opt = __valid __refparam __nullterminated __exceptthat __maybenull;
static const int __out_ecount_z(size) = ___valid __refparam __nullterminated;
static const int __out_bcount_z(size) = ___valid __refparam __nullterminated;
static const int __out_ecount_part_z(size,length) = __nullterminated;
static const int __out_bcount_part_z(size,length) = __nullterminated;
static const int __out_ecount_full_z(size) = __nullterminated;
static const int __out_bcount_full_z(size) = __nullterminated;
static const int __out_nz = __valid __refparam ;
static const int __out_nz_opt = __valid __refparam __exceptthat __maybenull;
static const int __out_ecount_nz(size) = ___valid __refparam;
static const int __out_bcount_nz(size) = ___valid __refparam;
static const int = __pre __valid __valid __refparam;
static const int = __pre __valid;
static const int = __pre __valid;
static const int = __pre __valid __pre __elem_readableTo(length);
static const int = __pre __valid __pre __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = ___exceptthat __maybenull;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __in_z_opt = __pre __nullterminated;
static const int __in_ecount_z_opt(size) = __pre __nullterminated;
static const int __in_bcount_z_opt(size) = __pre __nullterminated;
static const int __in_nz_opt = ;
static const int __in_ecount_nz_opt(size) = ;
static const int __in_bcount_nz_opt(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_ecount_full_opt(size) = __exceptthat __maybenull;
static const int __out_bcount_full_opt(size) = __exceptthat __maybenull;
static const int __out_ecount_z_opt(size) = __nullterminated;
static const int __out_bcount_z_opt(size) = __nullterminated;
static const int __out_ecount_part_z_opt(size,length) = __nullterminated;
static const int __out_bcount_part_z_opt(size,length) = __nullterminated;
static const int __out_ecount_full_z_opt(size) = __out_ecount_full_opt(size) __nullterminated;
static const int __out_bcount_full_z_opt(size) = __out_bcount_full_opt(size) __nullterminated;
static const int __out_ecount_nz_opt(size) = __nullterminated;
static const int __out_bcount_nz_opt(size) = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = ;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int = ___elem_readableTo(1) __notnull __elem_writableTo(size);
static const int = ___elem_readableTo(1) __notnull __byte_writableTo(size);
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __valid __refparam __nullterminated;
static const int _ecount_z(size) = __nullterminated;
static const int _bcount_z(size) = __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __notnull __elem_readableTo(1) __pre __valid __valid __refparam;
static const int _z = __pre __nullterminated __nullterminated;
static const int = __pre __elem_writableTo(size) __elem_writableTo(size);
static const int = __pre __byte_writableTo(size) __byte_writableTo(size);
static const int = __pre __elem_readableTo(length) __elem_readableTo(length);
static const int = __pre __byte_readableTo(length) __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _opt = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __execeptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _z_opt = _opt __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _z = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _ecount_full(size) __exceptthat __maybenull;
static const int = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout = __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout_z = _opt_inout __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz = _opt_inout;
static const int _opt_inout_ecount_nz(size) = _opt_inout;
static const int _opt_inout_bcount_nz(size) = _opt_inout;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = _opt __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __exceptthat __maybenull __pre __exceptthat __maybenull __exceptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt_inout_opt = _opt __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_z_opt = _opt_inout_opt __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz_opt = _opt_inout_opt;
static const int _opt_inout_ecount_nz_opt(size) = _opt_inout;
static const int _opt_inout_bcount_nz_opt(size) = _opt_inout;
static const int = __inner_success(expr);
static const int __nullterminated = __readableTo(sentinel(0));
static const int = __pre __null;
static const int = __inner_checkReturn;
static const int __typefix(ctype) = __inner_typefix(ctype);
static const int __override = __inner_override;
static const int = __inner_callback;
static const int __blocksOn(resource) = __inner_blocksOn(resource);
static const int __control_entrypoint(category) = __inner_control_entrypoint(category);
static const int __data_entrypoint(category) = __inner_data_entrypoint(category);
static const int __fallthrough = __inner_fallthrough;
static const int _CRT_PACKING = 8;
static const int _CRT_PACKING = 8;
typedef unsigned __int64 uintptr_t;
typedef char * va_list;
static const int _ADDRESSOF(v) = ( &(v) );
static const int _SLOTSIZEOF(t) = (sizeof(t));
static const int _APALIGN(t,ap) = (__alignof(t));
static const int _INTSIZEOF(n) = ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) );
static const int _crt_va_start(ap,v) = ( ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v) );
static const int _crt_va_arg(ap,t) = ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) );
static const int _crt_va_end(ap) = ( ap = (va_list)0 );
static const int __CRT_STRINGIZE(_Value) = #_Value;
static const int _CRT_STRINGIZE(_Value) = __CRT_STRINGIZE(_Value);
static const int __CRT_WIDE(_String) = L ## _String;
static const int _CRT_WIDE(_String) = __CRT_WIDE(_String);
static const int __CRT_APPEND(_Value1,_Value2) = _Value1 ## _Value2;
static const int _CRT_APPEND(_Value1,_Value2) = __CRT_APPEND(_Value1, _Value2);
static const int _NOIA64 = ;
static const int _MRTIMP = ;
static const int __CLRCALL_OR_CDECL = ;
static const int _PURE = ;
static const long __STDC_SECURE_LIB__ = 200411L;
static const int __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
static const int __STDC_WANT_SECURE_LIB__ = 1;
static const int _CRT_DEPRECATE_TEXT(_Text) = ;
static const int _CRT_INSECURE_DEPRECATE(_Replacement) = _CRT_DEPRECATE_TEXT("This function or variable may be unsafe. Consider using " #_Replacement " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.");
static const int _CRT_INSECURE_DEPRECATE_GLOBALS(_Replacement) = _CRT_INSECURE_DEPRECATE(_Replacement);
static const int _SECURECRT_FILL_BUFFER_PATTERN = 0xFE;
static const int _CRT_OBSOLETE(_NewItem) = _CRT_DEPRECATE_TEXT("This function or variable has been superceded by newer library or operating system functionality. Consider using " #_NewItem " instead. See online help for details.");
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_NOTHROW = throw();
static const int _CRT_NONSTDC_DEPRECATE(_NewName) = _CRT_DEPRECATE_TEXT("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " #_NewName ". See online help for details.");
typedef unsigned __int64 size_t;
typedef size_t rsize_t;
typedef __int64 intptr_t;
typedef __int64 ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t; /* 32-bit time value */
typedef __int64 __time64_t; /* 64-bit time value */
typedef __time64_t time_t; /* time value */
static const int _CRT_ALIGN(x) = );
static const int _CRTNOALIAS = ;
static const int _CRTRESTRICT = ;
static const int __CRTDECL = ;
static const int __STR2WSTR(str) = L ##str;
static const int _STR2WSTR(str) = __STR2WSTR(str);
static const int __FILEW__ = _STR2WSTR(__FILE__);
static const int __FUNCTIONW__ = _STR2WSTR(__FUNCTION__);
 void _invalid_parameter_noinfo(void);
 void _invalid_parameter_noinfo_noreturn(void);
void _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
static const int _CRT_SECURE_INVALID_PARAMETER(expr) = ::_invalid_parameter_noinfo_noreturn();
static const int _ARGMAX = 100;
static const int _TRUNCATE = ((size_t)-1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _VFuncName, _VFuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_CGETS(_ReturnType,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureVFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_GETS(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;
typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;
typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; /* LCID */
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;
static const int _CRT_UNUSED(x) = (void)x;
static const int BUFSIZ = 512;
static const int _NFILE = _NSTREAM_;
static const int _NSTREAM_ = 512;
static const int _IOB_ENTRIES = 20;
static const int EOF = (-1);
struct _iobuf {
        char *_ptr;
        int _cnt;
        char *_base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;
static const char _P_tmpdir = "\\";
static const char _wP_tmpdir = L"\\";
static const int L_tmpnam = (sizeof(_P_tmpdir) + 12);
static const int L_tmpnam_s = (sizeof(_P_tmpdir) + 16);
static const int SEEK_CUR = 1;
static const int SEEK_END = 2;
static const int SEEK_SET = 0;
static const int FILENAME_MAX = 260;
static const int FOPEN_MAX = 20;
static const int _SYS_OPEN = 20;
static const int TMP_MAX = 32767;
static const int TMP_MAX_S = _TMP_MAX_S;
static const int _TMP_MAX_S = 2147483647;
static const int NULL = ((void *)0);
 FILE * __iob_func(void);
typedef long long fpos_t;
static const int _FPOSOFF(fp) = ((long)(fp));
static const int stdin = (&__iob_func()[0]);
static const int stdout = (&__iob_func()[1]);
static const int stderr = (&__iob_func()[2]);
static const int _IOREAD = 0x0001;
static const int _IOWRT = 0x0002;
static const int _IOFBF = 0x0000;
static const int _IOLBF = 0x0040;
static const int _IONBF = 0x0004;
static const int _IOMYBUF = 0x0008;
static const int _IOEOF = 0x0010;
static const int _IOERR = 0x0020;
static const int _IOSTRG = 0x0040;
static const int _IORW = 0x0080;
static const int _TWO_DIGIT_EXPONENT = 0x1;
 int _filbuf( FILE * _File );
 int _flsbuf( int _Ch, FILE * _File);
 FILE * _fsopen( const char * _Filename, const char * _Mode, int _ShFlag);
 void clearerr( FILE * _File);
 errno_t clearerr_s( FILE * _File );
 int fclose( FILE * _File);
 int _fcloseall(void);
 FILE * _fdopen( int _FileHandle, const char * _Mode);
 int feof( FILE * _File);
 int ferror( FILE * _File);
 int fflush( FILE * _File);
 int fgetc( FILE * _File);
 int _fgetchar(void);
 int fgetpos( FILE * _File , fpos_t * _Pos);
 char * fgets( char * _Buf, int _MaxCount, FILE * _File);
 int _fileno( FILE * _File);
 char * _tempnam( const char * _DirName, const char * _FilePrefix);
 int _flushall(void);
 FILE * fopen( const char * _Filename, const char * _Mode);
 errno_t fopen_s( FILE ** _File, const char * _Filename, const char * _Mode);
 int fprintf( FILE * _File, const char * _Format, ...);
 int fprintf_s( FILE * _File, const char * _Format, ...);
 int fputc( int _Ch, FILE * _File);
 int _fputchar( int _Ch);
 int fputs( const char * _Str, FILE * _File);
 size_t fread( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);
 size_t fread_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);
 FILE * freopen( const char * _Filename, const char * _Mode, FILE * _File);
 errno_t freopen_s( FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile);
 int fscanf( FILE * _File, const char * _Format, ...);
 int _fscanf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
 int fscanf_s( FILE * _File, const char * _Format, ...);
 int _fscanf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
 int fsetpos( FILE * _File, const fpos_t * _Pos);
 int fseek( FILE * _File, long _Offset, int _Origin);
 long ftell( FILE * _File);
 int _fseeki64( FILE * _File, __int64 _Offset, int _Origin);
 __int64 _ftelli64( FILE * _File);
 size_t fwrite( const void * _Str, size_t _Size, size_t _Count, FILE * _File);
 int getc( FILE * _File);
 int getchar(void);
 int _getmaxstdio(void);
 char * gets_s( char * _Buf, rsize_t _Size);
char * gets( char *_Buffer);
 int _getw( FILE * _File);
 void perror( const char * _ErrMsg);
 int _pclose( FILE * _File);
 FILE * _popen( const char * _Command, const char * _Mode);
 int printf( const char * _Format, ...);
 int printf_s( const char * _Format, ...);
 int putc( int _Ch, FILE * _File);
 int putchar( int _Ch);
 int puts( const char * _Str);
 int _putw( int _Word, FILE * _File);
 int remove( const char * _Filename);
 int rename( const char * _OldFilename, const char * _NewFilename);
 int _unlink( const char * _Filename);
 void rewind( FILE * _File);
 int _rmtmp(void);
 int scanf( const char * _Format, ...);
 int _scanf_l( const char * _Format, _locale_t _Locale, ...);
 int scanf_s( const char * _Format, ...);
 int _scanf_s_l( const char * _Format, _locale_t _Locale, ...);
void setbuf( FILE * _File, char * _Buffer);
 int _setmaxstdio( int _Max);
 unsigned int _set_output_format( unsigned int _Format);
 unsigned int _get_output_format(void);
 int setvbuf( FILE * _File, char * _Buf, int _Mode, size_t _Size);
 int _snprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...);
 int sprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...);
 int _scprintf( const char * _Format, ...);
 int sscanf( const char * _Src, const char * _Format, ...);
 int _sscanf_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
 int sscanf_s( const char * _Src, const char * _Format, ...);
 int _sscanf_s_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
 int _snscanf( const char * _Src, size_t _MaxCount, const char * _Format, ...);
 int _snscanf_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 int _snscanf_s( const char * _Src, size_t _MaxCount, const char * _Format, ...);
 int _snscanf_s_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 FILE * tmpfile(void);
 errno_t tmpfile_s( FILE ** _File);
 errno_t tmpnam_s( char * _Buf, rsize_t _Size);
char * tmpnam( char *_Buffer);
 int ungetc( int _Ch, FILE * _File);
 int vfprintf( FILE * _File, const char * _Format, va_list _ArgList);
 int vfprintf_s( FILE * _File, const char * _Format, va_list _ArgList);
 int vprintf( const char * _Format, va_list _ArgList);
 int vprintf_s( const char * _Format, va_list _ArgList);
 int vsnprintf( char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);
 int vsnprintf_s( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList);
 int _vsnprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList);
int _snprintf( char *_Dest, size_t _Count, const char * _Format, ...); int _vsnprintf( char *_Dest, size_t _Count, const char * _Format, va_list _Args);
 int vsprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList);
int sprintf( char *_Dest, const char * _Format, ...); int vsprintf( char *_Dest, const char * _Format, va_list _Args);
 int _vscprintf( const char * _Format, va_list _ArgList);
 int _snprintf_c( char * _DstBuf, size_t _MaxCount, const char * _Format, ...);
 int _vsnprintf_c( char *_DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);
 int _fprintf_p( FILE * _File, const char * _Format, ...);
 int _printf_p( const char * _Format, ...);
 int _sprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, ...);
 int _vfprintf_p( FILE * _File, const char * _Format, va_list _ArgList);
 int _vprintf_p( const char * _Format, va_list _ArgList);
 int _vsprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList);
 int _scprintf_p( const char * _Format, ...);
 int _vscprintf_p( const char * _Format, va_list _ArgList);
 int _set_printf_count_output( int _Value);
 int _get_printf_count_output(void);
 int _printf_l( const char * _Format, _locale_t _Locale, ...);
 int _printf_p_l( const char * _Format, _locale_t _Locale, ...);
 int _printf_s_l( const char * _Format, _locale_t _Locale, ...);
 int _vprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vprintf_s_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _fprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
 int _fprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
 int _fprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
 int _vfprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vfprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vfprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _sprintf_l( char * _DstBuf, const char * _Format, _locale_t _Locale, ...);
 int _sprintf_p_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 int _sprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...);
 int _vsprintf_l( char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList);
 int _vsprintf_p_l( char * _DstBuf, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
 int _vsprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _scprintf_l( const char * _Format, _locale_t _Locale, ...);
 int _scprintf_p_l( const char * _Format, _locale_t _Locale, ...);
 int _vscprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vscprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _snprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 int _snprintf_c_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 int _snprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
 int _vsnprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList);
 int _vsnprintf_c_l( char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList);
 int _vsnprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
static const int WEOF = (wint_t)(0xFFFF);
 FILE * _wfsopen( const wchar_t * _Filename, const wchar_t * _Mode, int _ShFlag);
 wint_t fgetwc( FILE * _File);
 wint_t _fgetwchar(void);
 wint_t fputwc( wchar_t _Ch, FILE * _File);
 wint_t _fputwchar( wchar_t _Ch);
 wint_t getwc( FILE * _File);
 wint_t getwchar(void);
 wint_t putwc( wchar_t _Ch, FILE * _File);
 wint_t putwchar( wchar_t _Ch);
 wint_t ungetwc( wint_t _Ch, FILE * _File);
 wchar_t * fgetws( wchar_t * _Dst, int _SizeInWords, FILE * _File);
 int fputws( const wchar_t * _Str, FILE * _File);
 wchar_t * _getws_s( wchar_t * _Str, size_t _SizeInWords);
wchar_t * _getws( wchar_t *_String);
 int _putws( const wchar_t * _Str);
 int fwprintf( FILE * _File, const wchar_t * _Format, ...);
 int fwprintf_s( FILE * _File, const wchar_t * _Format, ...);
 int wprintf( const wchar_t * _Format, ...);
 int wprintf_s( const wchar_t * _Format, ...);
 int _scwprintf( const wchar_t * _Format, ...);
 int vfwprintf( FILE * _File, const wchar_t * _Format, va_list _ArgList);
 int vfwprintf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);
 int vwprintf( const wchar_t * _Format, va_list _ArgList);
 int vwprintf_s( const wchar_t * _Format, va_list _ArgList);
 int swprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, ...);
 int vswprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);
 int _swprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, ...);
 int _vswprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);
 int _snwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, ...);
 int _vsnwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
int _snwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, ...); int _vsnwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, va_list _Args);
 int _fwprintf_p( FILE * _File, const wchar_t * _Format, ...);
 int _wprintf_p( const wchar_t * _Format, ...);
 int _vfwprintf_p( FILE * _File, const wchar_t * _Format, va_list _ArgList);
 int _vwprintf_p( const wchar_t * _Format, va_list _ArgList);
 int _swprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, ...);
 int _vswprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
 int _scwprintf_p( const wchar_t * _Format, ...);
 int _vscwprintf_p( const wchar_t * _Format, va_list _ArgList);
 int _wprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int _wprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int _wprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int _vwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _fwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
 int _fwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
 int _fwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
 int _vfwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vfwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vfwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _swprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int _swprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int _swprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, ...);
 int _vswprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vswprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vswprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _scwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int _scwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int _vscwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _snwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int _snwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int _vsnwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int _vsnwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
static const int _SWPRINTFS_DEPRECATED = _CRT_DEPRECATE_TEXT("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.");
int _swprintf( wchar_t *_Dest, const wchar_t * _Format, ...); int _vswprintf( wchar_t *_Dest, const wchar_t * _Format, va_list _Args);
int __swprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, ...); int __vswprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
static int swprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, ((void *)0), _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
static int vswprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, ((void *)0), _Ap);
}
static int _swprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
static int _vswprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
 wchar_t * _wtempnam( const wchar_t * _Directory, const wchar_t * _FilePrefix);
 int _vscwprintf( const wchar_t * _Format, va_list _ArgList);
 int _vscwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
 int fwscanf( FILE * _File, const wchar_t * _Format, ...);
 int _fwscanf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
 int fwscanf_s( FILE * _File, const wchar_t * _Format, ...);
 int _fwscanf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
 int swscanf( const wchar_t * _Src, const wchar_t * _Format, ...);
 int _swscanf_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);
 int swscanf_s( const wchar_t *_Src, const wchar_t * _Format, ...);
 int _swscanf_s_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);
 int _snwscanf( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
 int _snwscanf_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int _snwscanf_s( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
 int _snwscanf_s_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
 int wscanf( const wchar_t * _Format, ...);
 int _wscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);
 int wscanf_s( const wchar_t * _Format, ...);
 int _wscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
 FILE * _wfdopen( int _FileHandle , const wchar_t * _Mode);
 FILE * _wfopen( const wchar_t * _Filename, const wchar_t * _Mode);
 errno_t _wfopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode);
 FILE * _wfreopen( const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);
 errno_t _wfreopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);
 void _wperror( const wchar_t * _ErrMsg);
 FILE * _wpopen( const wchar_t *_Command, const wchar_t * _Mode);
 int _wremove( const wchar_t * _Filename);
 errno_t _wtmpnam_s( wchar_t * _DstBuf, size_t _SizeInWords);
wchar_t * _wtmpnam( wchar_t *_Buffer);
 wint_t _fgetwc_nolock( FILE * _File);
 wint_t _fputwc_nolock( wchar_t _Ch, FILE * _File);
 wint_t _ungetwc_nolock( wint_t _Ch, FILE * _File);
static const int getwchar() = fgetwc(stdin);
static const int putwchar(_c) = fputwc((_c),stdout);
static const int getwc(_stm) = fgetwc(_stm);
static const int putwc(_c,_stm) = fputwc(_c,_stm);
static const int _putwc_nolock(_c,_stm) = _fputwc_nolock(_c,_stm);
static const int _getwc_nolock(_stm) = _fgetwc_nolock(_stm);
static const int _fgetc_nolock(_stream) = (--(_stream)->_cnt >= 0 ? 0xff & *(_stream)->_ptr++ : _filbuf(_stream));
static const int _fputc_nolock(_c,_stream) = (--(_stream)->_cnt >= 0 ? 0xff & (*(_stream)->_ptr++ = (char)(_c)) : _flsbuf((_c),(_stream)));
static const int _getc_nolock(_stream) = _fgetc_nolock(_stream);
static const int _putc_nolock(_c,_stream) = _fputc_nolock(_c, _stream);
static const int _getchar_nolock() = _getc_nolock(stdin);
static const int _putchar_nolock(_c) = _putc_nolock((_c),stdout);
static const int _getwchar_nolock() = _getwc_nolock(stdin);
static const int _putwchar_nolock(_c) = _putwc_nolock((_c),stdout);
 void _lock_file( FILE * _File);
 void _unlock_file( FILE * _File);
 int _fclose_nolock( FILE * _File);
 int _fflush_nolock( FILE * _File);
 size_t _fread_nolock( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);
 size_t _fread_nolock_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);
 int _fseek_nolock( FILE * _File, long _Offset, int _Origin);
 long _ftell_nolock( FILE * _File);
 int _fseeki64_nolock( FILE * _File, __int64 _Offset, int _Origin);
 __int64 _ftelli64_nolock( FILE * _File);
 size_t _fwrite_nolock( const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File);
 int _ungetc_nolock( int _Ch, FILE * _File);
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int WINGDIAPI = ;
static const int WINSPOOLAPI = ;
static const int R2_BLACK = 1;
static const int R2_NOTMERGEPEN = 2;
static const int R2_MASKNOTPEN = 3;
static const int R2_NOTCOPYPEN = 4;
static const int R2_MASKPENNOT = 5;
static const int R2_NOT = 6;
static const int R2_XORPEN = 7;
static const int R2_NOTMASKPEN = 8;
static const int R2_MASKPEN = 9;
static const int R2_NOTXORPEN = 10;
static const int R2_NOP = 11;
static const int R2_MERGENOTPEN = 12;
static const int R2_COPYPEN = 13;
static const int R2_MERGEPENNOT = 14;
static const int R2_MERGEPEN = 15;
static const int R2_WHITE = 16;
static const int R2_LAST = 16;
static const int SRCCOPY = (DWORD)0x00CC0020;
static const int SRCPAINT = (DWORD)0x00EE0086;
static const int SRCAND = (DWORD)0x008800C6;
static const int SRCINVERT = (DWORD)0x00660046;
static const int SRCERASE = (DWORD)0x00440328;
static const int NOTSRCCOPY = (DWORD)0x00330008;
static const int NOTSRCERASE = (DWORD)0x001100A6;
static const int MERGECOPY = (DWORD)0x00C000CA;
static const int MERGEPAINT = (DWORD)0x00BB0226;
static const int PATCOPY = (DWORD)0x00F00021;
static const int PATPAINT = (DWORD)0x00FB0A09;
static const int PATINVERT = (DWORD)0x005A0049;
static const int DSTINVERT = (DWORD)0x00550009;
static const int BLACKNESS = (DWORD)0x00000042;
static const int WHITENESS = (DWORD)0x00FF0062;
static const int NOMIRRORBITMAP = (DWORD)0x80000000;
static const int CAPTUREBLT = (DWORD)0x40000000;
static const int MAKEROP4(fore,back) = (DWORD)((((back) << 8) & 0xFF000000) | (fore));
static const int GDI_ERROR = (0xFFFFFFFFL);
static const int HGDI_ERROR = (LongToHandle(0xFFFFFFFFL));
static const int ERROR = 0;
static const int NULLREGION = 1;
static const int SIMPLEREGION = 2;
static const int COMPLEXREGION = 3;
static const int RGN_ERROR = ERROR;
static const int RGN_AND = 1;
static const int RGN_OR = 2;
static const int RGN_XOR = 3;
static const int RGN_DIFF = 4;
static const int RGN_COPY = 5;
static const int RGN_MIN = RGN_AND;
static const int RGN_MAX = RGN_COPY;
static const int BLACKONWHITE = 1;
static const int WHITEONBLACK = 2;
static const int COLORONCOLOR = 3;
static const int HALFTONE = 4;
static const int MAXSTRETCHBLTMODE = 4;
static const int STRETCH_ANDSCANS = BLACKONWHITE;
static const int STRETCH_ORSCANS = WHITEONBLACK;
static const int STRETCH_DELETESCANS = COLORONCOLOR;
static const int STRETCH_HALFTONE = HALFTONE;
static const int ALTERNATE = 1;
static const int WINDING = 2;
static const int POLYFILL_LAST = 2;
static const int LAYOUT_RTL = 0x00000001;
static const int LAYOUT_BTT = 0x00000002;
static const int LAYOUT_VBH = 0x00000004;
static const int LAYOUT_ORIENTATIONMASK = (LAYOUT_RTL | LAYOUT_BTT | LAYOUT_VBH);
static const int LAYOUT_BITMAPORIENTATIONPRESERVED = 0x00000008;
static const int TA_NOUPDATECP = 0;
static const int TA_UPDATECP = 1;
static const int TA_LEFT = 0;
static const int TA_RIGHT = 2;
static const int TA_CENTER = 6;
static const int TA_TOP = 0;
static const int TA_BOTTOM = 8;
static const int TA_BASELINE = 24;
static const int TA_RTLREADING = 256;
static const int TA_MASK = (TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING);
static const int VTA_BASELINE = TA_BASELINE;
static const int VTA_LEFT = TA_BOTTOM;
static const int VTA_RIGHT = TA_TOP;
static const int VTA_CENTER = TA_CENTER;
static const int VTA_BOTTOM = TA_RIGHT;
static const int VTA_TOP = TA_LEFT;
static const int ETO_OPAQUE = 0x0002;
static const int ETO_CLIPPED = 0x0004;
static const int ETO_GLYPH_INDEX = 0x0010;
static const int ETO_RTLREADING = 0x0080;
static const int ETO_NUMERICSLOCAL = 0x0400;
static const int ETO_NUMERICSLATIN = 0x0800;
static const int ETO_IGNORELANGUAGE = 0x1000;
static const int ETO_PDY = 0x2000;
static const int ETO_REVERSE_INDEX_MAP = 0x10000;
static const int ASPECT_FILTERING = 0x0001;
static const int DCB_RESET = 0x0001;
static const int DCB_ACCUMULATE = 0x0002;
static const int DCB_DIRTY = DCB_ACCUMULATE;
static const int DCB_SET = (DCB_RESET | DCB_ACCUMULATE);
static const int DCB_ENABLE = 0x0004;
static const int DCB_DISABLE = 0x0008;
static const int META_SETBKCOLOR = 0x0201;
static const int META_SETBKMODE = 0x0102;
static const int META_SETMAPMODE = 0x0103;
static const int META_SETROP2 = 0x0104;
static const int META_SETRELABS = 0x0105;
static const int META_SETPOLYFILLMODE = 0x0106;
static const int META_SETSTRETCHBLTMODE = 0x0107;
static const int META_SETTEXTCHAREXTRA = 0x0108;
static const int META_SETTEXTCOLOR = 0x0209;
static const int META_SETTEXTJUSTIFICATION = 0x020A;
static const int META_SETWINDOWORG = 0x020B;
static const int META_SETWINDOWEXT = 0x020C;
static const int META_SETVIEWPORTORG = 0x020D;
static const int META_SETVIEWPORTEXT = 0x020E;
static const double META_OFFSETWINDOWORG = 0x020F;
static const int META_SCALEWINDOWEXT = 0x0410;
static const int META_OFFSETVIEWPORTORG = 0x0211;
static const int META_SCALEVIEWPORTEXT = 0x0412;
static const int META_LINETO = 0x0213;
static const int META_MOVETO = 0x0214;
static const int META_EXCLUDECLIPRECT = 0x0415;
static const int META_INTERSECTCLIPRECT = 0x0416;
static const int META_ARC = 0x0817;
static const int META_ELLIPSE = 0x0418;
static const int META_FLOODFILL = 0x0419;
static const int META_PIE = 0x081A;
static const int META_RECTANGLE = 0x041B;
static const int META_ROUNDRECT = 0x061C;
static const int META_PATBLT = 0x061D;
static const int META_SAVEDC = 0x001E;
static const double META_SETPIXEL = 0x041F;
static const int META_OFFSETCLIPRGN = 0x0220;
static const int META_TEXTOUT = 0x0521;
static const int META_BITBLT = 0x0922;
static const int META_STRETCHBLT = 0x0B23;
static const int META_POLYGON = 0x0324;
static const int META_POLYLINE = 0x0325;
static const int META_ESCAPE = 0x0626;
static const int META_RESTOREDC = 0x0127;
static const int META_FILLREGION = 0x0228;
static const int META_FRAMEREGION = 0x0429;
static const int META_INVERTREGION = 0x012A;
static const int META_PAINTREGION = 0x012B;
static const int META_SELECTCLIPREGION = 0x012C;
static const int META_SELECTOBJECT = 0x012D;
static const int META_SETTEXTALIGN = 0x012E;
static const int META_CHORD = 0x0830;
static const int META_SETMAPPERFLAGS = 0x0231;
static const int META_EXTTEXTOUT = 0x0a32;
static const int META_SETDIBTODEV = 0x0d33;
static const int META_SELECTPALETTE = 0x0234;
static const int META_REALIZEPALETTE = 0x0035;
static const int META_ANIMATEPALETTE = 0x0436;
static const int META_SETPALENTRIES = 0x0037;
static const int META_POLYPOLYGON = 0x0538;
static const int META_RESIZEPALETTE = 0x0139;
static const int META_DIBBITBLT = 0x0940;
static const int META_DIBSTRETCHBLT = 0x0b41;
static const int META_DIBCREATEPATTERNBRUSH = 0x0142;
static const int META_STRETCHDIB = 0x0f43;
static const int META_EXTFLOODFILL = 0x0548;
static const int META_SETLAYOUT = 0x0149;
static const int META_DELETEOBJECT = 0x01f0;
static const int META_CREATEPALETTE = 0x00f7;
static const int META_CREATEPATTERNBRUSH = 0x01F9;
static const int META_CREATEPENINDIRECT = 0x02FA;
static const int META_CREATEFONTINDIRECT = 0x02FB;
static const int META_CREATEBRUSHINDIRECT = 0x02FC;
static const int META_CREATEREGION = 0x06FF;
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
static const int NEWFRAME = 1;
static const int ABORTDOC = 2;
static const int NEXTBAND = 3;
static const int SETCOLORTABLE = 4;
static const int GETCOLORTABLE = 5;
static const int FLUSHOUTPUT = 6;
static const int DRAFTMODE = 7;
static const int QUERYESCSUPPORT = 8;
static const int SETABORTPROC = 9;
static const int STARTDOC = 10;
static const int ENDDOC = 11;
static const int GETPHYSPAGESIZE = 12;
static const int GETPRINTINGOFFSET = 13;
static const int GETSCALINGFACTOR = 14;
static const int MFCOMMENT = 15;
static const int GETPENWIDTH = 16;
static const int SETCOPYCOUNT = 17;
static const int SELECTPAPERSOURCE = 18;
static const int DEVICEDATA = 19;
static const int PASSTHROUGH = 19;
static const int GETTECHNOLGY = 20;
static const int GETTECHNOLOGY = 20;
static const int SETLINECAP = 21;
static const int SETLINEJOIN = 22;
static const int SETMITERLIMIT = 23;
static const int BANDINFO = 24;
static const int DRAWPATTERNRECT = 25;
static const int GETVECTORPENSIZE = 26;
static const int GETVECTORBRUSHSIZE = 27;
static const int ENABLEDUPLEX = 28;
static const int GETSETPAPERBINS = 29;
static const int GETSETPRINTORIENT = 30;
static const int ENUMPAPERBINS = 31;
static const int SETDIBSCALING = 32;
static const int EPSPRINTING = 33;
static const int ENUMPAPERMETRICS = 34;
static const int GETSETPAPERMETRICS = 35;
static const int POSTSCRIPT_DATA = 37;
static const int POSTSCRIPT_IGNORE = 38;
static const int MOUSETRAILS = 39;
static const int GETDEVICEUNITS = 42;
static const int GETEXTENDEDTEXTMETRICS = 256;
static const int GETEXTENTTABLE = 257;
static const int GETPAIRKERNTABLE = 258;
static const int GETTRACKKERNTABLE = 259;
static const int EXTTEXTOUT = 512;
static const int GETFACENAME = 513;
static const int DOWNLOADFACE = 514;
static const int ENABLERELATIVEWIDTHS = 768;
static const int ENABLEPAIRKERNING = 769;
static const int SETKERNTRACK = 770;
static const int SETALLJUSTVALUES = 771;
static const int SETCHARSET = 772;
static const int STRETCHBLT = 2048;
static const int METAFILE_DRIVER = 2049;
static const int GETSETSCREENPARAMS = 3072;
static const int QUERYDIBSUPPORT = 3073;
static const int BEGIN_PATH = 4096;
static const int CLIP_TO_PATH = 4097;
static const int END_PATH = 4098;
static const int EXT_DEVICE_CAPS = 4099;
static const int RESTORE_CTM = 4100;
static const int SAVE_CTM = 4101;
static const int SET_ARC_DIRECTION = 4102;
static const int SET_BACKGROUND_COLOR = 4103;
static const int SET_POLY_MODE = 4104;
static const int SET_SCREEN_ANGLE = 4105;
static const int SET_SPREAD = 4106;
static const int TRANSFORM_CTM = 4107;
static const int SET_CLIP_BOX = 4108;
static const int SET_BOUNDS = 4109;
static const int SET_MIRROR_MODE = 4110;
static const int OPENCHANNEL = 4110;
static const int DOWNLOADHEADER = 4111;
static const int CLOSECHANNEL = 4112;
static const int POSTSCRIPT_PASSTHROUGH = 4115;
static const int ENCAPSULATED_POSTSCRIPT = 4116;
static const int POSTSCRIPT_IDENTIFY = 4117;
static const int POSTSCRIPT_INJECTION = 4118;
static const int CHECKJPEGFORMAT = 4119;
static const int CHECKPNGFORMAT = 4120;
static const int GET_PS_FEATURESETTING = 4121;
static const int GDIPLUS_TS_QUERYVER = 4122;
static const int GDIPLUS_TS_RECORD = 4123;
static const int MILCORE_TS_QUERYVER_RESULT_FALSE = 0x0;
static const int MILCORE_TS_QUERYVER_RESULT_TRUE = 0x7FFFFFFF;
static const int SPCLPASSTHROUGH2 = 4568;
static const int PSIDENT_GDICENTRIC = 0;
static const int PSIDENT_PSCENTRIC = 1;
typedef struct _PSINJECTDATA {
    DWORD DataBytes; /* number of raw data bytes (NOT including this header) */
    WORD InjectionPoint; /* injection point */
    WORD PageNumber; /* page number to apply the injection */
} PSINJECTDATA, *PPSINJECTDATA;
static const int PSINJECT_BEGINSTREAM = 1;
static const int PSINJECT_PSADOBE = 2;
static const int PSINJECT_PAGESATEND = 3;
static const int PSINJECT_PAGES = 4;
static const int PSINJECT_DOCNEEDEDRES = 5;
static const int PSINJECT_DOCSUPPLIEDRES = 6;
static const int PSINJECT_PAGEORDER = 7;
static const int PSINJECT_ORIENTATION = 8;
static const int PSINJECT_BOUNDINGBOX = 9;
static const int PSINJECT_DOCUMENTPROCESSCOLORS = 10;
static const int PSINJECT_COMMENTS = 11;
static const int PSINJECT_BEGINDEFAULTS = 12;
static const int PSINJECT_ENDDEFAULTS = 13;
static const int PSINJECT_BEGINPROLOG = 14;
static const int PSINJECT_ENDPROLOG = 15;
static const int PSINJECT_BEGINSETUP = 16;
static const int PSINJECT_ENDSETUP = 17;
static const int PSINJECT_TRAILER = 18;
static const int PSINJECT_EOF = 19;
static const int PSINJECT_ENDSTREAM = 20;
static const int PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;
static const int PSINJECT_PAGENUMBER = 100;
static const int PSINJECT_BEGINPAGESETUP = 101;
static const int PSINJECT_ENDPAGESETUP = 102;
static const int PSINJECT_PAGETRAILER = 103;
static const int PSINJECT_PLATECOLOR = 104;
static const int PSINJECT_SHOWPAGE = 105;
static const int PSINJECT_PAGEBBOX = 106;
static const int PSINJECT_ENDPAGECOMMENTS = 107;
static const int PSINJECT_VMSAVE = 200;
static const int PSINJECT_VMRESTORE = 201;
static const int PSINJECT_DLFONT = 0xdddddddd;
static const int FEATURESETTING_NUP = 0;
static const int FEATURESETTING_OUTPUT = 1;
static const int FEATURESETTING_PSLEVEL = 2;
static const int FEATURESETTING_CUSTPAPER = 3;
static const int FEATURESETTING_MIRROR = 4;
static const int FEATURESETTING_NEGATIVE = 5;
static const int FEATURESETTING_PROTOCOL = 6;
static const int FEATURESETTING_PRIVATE_BEGIN = 0x1000;
static const int FEATURESETTING_PRIVATE_END = 0x1FFF;
typedef struct _PSFEATURE_OUTPUT {
    BOOL bPageIndependent;
    BOOL bSetPageDevice;
} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;
typedef struct _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
static const int PSPROTOCOL_ASCII = 0;
static const int PSPROTOCOL_BCP = 1;
static const int PSPROTOCOL_TBCP = 2;
static const int PSPROTOCOL_BINARY = 3;
static const int QDI_SETDIBITS = 1;
static const int QDI_GETDIBITS = 2;
static const int QDI_DIBTOSCREEN = 4;
static const int QDI_STRETCHDIB = 8;
static const int SP_NOTREPORTED = 0x4000;
static const int SP_ERROR = (-1);
static const int SP_APPABORT = (-2);
static const int SP_USERABORT = (-3);
static const int SP_OUTOFDISK = (-4);
static const int SP_OUTOFMEMORY = (-5);
static const int PR_JOBSTATUS = 0x0000;
static const int OBJ_PEN = 1;
static const int OBJ_BRUSH = 2;
static const int OBJ_DC = 3;
static const int OBJ_METADC = 4;
static const int OBJ_PAL = 5;
static const int OBJ_FONT = 6;
static const int OBJ_BITMAP = 7;
static const int OBJ_REGION = 8;
static const int OBJ_METAFILE = 9;
static const int OBJ_MEMDC = 10;
static const int OBJ_EXTPEN = 11;
static const int OBJ_ENHMETADC = 12;
static const int OBJ_ENHMETAFILE = 13;
static const int OBJ_COLORSPACE = 14;
static const int GDI_OBJ_LAST = OBJ_COLORSPACE;
static const int MWT_IDENTITY = 1;
static const int MWT_LEFTMULTIPLY = 2;
static const int MWT_RIGHTMULTIPLY = 3;
static const int MWT_MIN = MWT_IDENTITY;
static const int MWT_MAX = MWT_RIGHTMULTIPLY;
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, FAR *LPXFORM;
typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, NEAR *NPBITMAP, FAR *LPBITMAP;
typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, NEAR *NPRGBTRIPLE, FAR *LPRGBTRIPLE;
typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;
typedef RGBQUAD FAR* LPRGBQUAD;
static const long CS_ENABLE = 0x00000001L;
static const long CS_DISABLE = 0x00000002L;
static const long CS_DELETE_TRANSFORM = 0x00000003L;
static const int LCS_SIGNATURE = 'PSOC';
static const int LCS_sRGB = 'sRGB';
static const int LCS_WINDOWS_COLOR_SPACE = 'Win ';
typedef LONG LCSCSTYPE;
static const long LCS_CALIBRATED_RGB = 0x00000000L;
typedef LONG LCSGAMUTMATCH;
static const long LCS_GM_BUSINESS = 0x00000001L;
static const long LCS_GM_GRAPHICS = 0x00000002L;
static const long LCS_GM_IMAGES = 0x00000004L;
static const long LCS_GM_ABS_COLORIMETRIC = 0x00000008L;
static const int CM_OUT_OF_GAMUT = 255;
static const int CM_IN_GAMUT = 0;
static const int ICM_ADDPROFILE = 1;
static const int ICM_DELETEPROFILE = 2;
static const int ICM_QUERYPROFILE = 3;
static const int ICM_SETDEFAULTPROFILE = 4;
static const int ICM_REGISTERICMATCHER = 5;
static const int ICM_UNREGISTERICMATCHER = 6;
static const int ICM_QUERYMATCH = 7;
static const int GetKValue(cmyk) = ((BYTE)(cmyk));
static const int GetYValue(cmyk) = ((BYTE)((cmyk)>> 8));
static const int GetMValue(cmyk) = ((BYTE)((cmyk)>>16));
static const int GetCValue(cmyk) = ((BYTE)((cmyk)>>24));
static const int CMYK(c,m,y,k) = ((COLORREF)((((BYTE)(k)|((WORD)((BYTE)(y))<<8))|(((DWORD)(BYTE)(m))<<16))|(((DWORD)(BYTE)(c))<<24)));
typedef long FXPT16DOT16, FAR *LPFXPT16DOT16;
typedef long FXPT2DOT30, FAR *LPFXPT2DOT30;
typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ FAR *LPCIEXYZ;
typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE FAR *LPCIEXYZTRIPLE;
typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[MAX_PATH];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[MAX_PATH];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize; /* used to get to color table */
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, FAR *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;
typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, FAR *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, FAR *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, FAR *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
static const int PROFILE_LINKED = 'LINK';
static const int PROFILE_EMBEDDED = 'MBED';
static const long BI_RGB = 0L;
static const long BI_RLE8 = 1L;
static const long BI_RLE4 = 2L;
static const long BI_BITFIELDS = 3L;
static const long BI_JPEG = 4L;
static const long BI_PNG = 5L;
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, FAR *LPBITMAPINFO, *PBITMAPINFO;
typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, FAR *LPBITMAPCOREINFO, *PBITMAPCOREINFO;
typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, FAR *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
static const int MAKEPOINTS(l) = (*((POINTS FAR *)&(l)));
typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE,FAR *LPFONTSIGNATURE;
typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, NEAR *NPCHARSETINFO, FAR *LPCHARSETINFO;
static const int TCI_SRCCHARSET = 1;
static const int TCI_SRCCODEPAGE = 2;
static const int TCI_SRCFONTSIG = 3;
static const int TCI_SRCLOCALE = 0x1000;
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE,FAR *LPLOCALESIGNATURE;
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, FAR *LPHANDLETABLE;
typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD UNALIGNED *PMETARECORD;
typedef struct tagMETARECORD UNALIGNED FAR *LPMETARECORD;
typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, FAR *LPMETAFILEPICT;
typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER UNALIGNED *PMETAHEADER;
typedef struct tagMETAHEADER UNALIGNED FAR *LPMETAHEADER;
typedef struct tagENHMETARECORD
{
    DWORD iType; // Record type EMR_XXX
    DWORD nSize; // Record size in bytes
    DWORD dParm[1]; // Parameters
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;
typedef struct tagENHMETAHEADER
{
    DWORD iType; // Record typeEMR_HEADER
    DWORD nSize; // Record size in bytes.  This may be greater
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    RECTL rclFrame; // Inclusive-inclusive Picture Frame of metafile in .01 mm units
    DWORD dSignature; // Signature.  Must be ENHMETA_SIGNATURE.
    DWORD nVersion; // Version number
    DWORD nBytes; // Size of the metafile in bytes
    DWORD nRecords; // Number of records in the metafile
    WORD nHandles; // Number of handles in the handle table
    WORD sReserved; // Reserved.  Must be zero.
    DWORD nDescription; // Number of chars in the unicode description string
    DWORD offDescription; // Offset to the metafile description record.
    DWORD nPalEntries; // Number of entries in the metafile palette.
    SIZEL szlDevice; // Size of the reference device in pels
    SIZEL szlMillimeters; // Size of the reference device in millimeters
    DWORD cbPixelFormat; // Size of PIXELFORMATDESCRIPTOR information
    DWORD offPixelFormat; // Offset to PIXELFORMATDESCRIPTOR
    DWORD bOpenGL; // TRUE if OpenGL commands are present in
    SIZEL szlMicrometers; // Size of the reference device in micrometers
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
static const int TMPF_FIXED_PITCH = 0x01;
static const int TMPF_VECTOR = 0x02;
static const int TMPF_DEVICE = 0x08;
static const int TMPF_TRUETYPE = 0x04;
    typedef BYTE BCHAR;
typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, NEAR *NPTEXTMETRICA, FAR *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, NEAR *NPTEXTMETRICW, FAR *LPTEXTMETRICW;
typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
static const long NTM_REGULAR = 0x00000040L;
static const long NTM_BOLD = 0x00000020L;
static const long NTM_ITALIC = 0x00000001L;
static const int NTM_NONNEGATIVE_AC = 0x00010000;
static const int NTM_PS_OPENTYPE = 0x00020000;
static const int NTM_TT_OPENTYPE = 0x00040000;
static const int NTM_MULTIPLEMASTER = 0x00080000;
static const int NTM_TYPE1 = 0x00100000;
static const int NTM_DSIG = 0x00200000;
typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, NEAR *NPNEWTEXTMETRICA, FAR *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, NEAR *NPNEWTEXTMETRICW, FAR *LPNEWTEXTMETRICW;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, NEAR *NPPELARRAY, FAR *LPPELARRAY;
typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, NEAR *NPLOGBRUSH, FAR *LPLOGBRUSH;
typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, NEAR *NPLOGBRUSH32, FAR *LPLOGBRUSH32;
typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN NEAR *NPPATTERN;
typedef PATTERN FAR *LPPATTERN;
typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, NEAR *NPLOGPEN, FAR *LPLOGPEN;
typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, NEAR *NPEXTLOGPEN, FAR *LPEXTLOGPEN;
typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, NEAR *NPEXTLOGPEN32, FAR *LPEXTLOGPEN32;
typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, FAR *LPPALETTEENTRY;
typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    __fieldPALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, NEAR *NPLOGPALETTE, FAR *LPLOGPALETTE;
static const int LF_FACESIZE = 32;
typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, NEAR *NPLOGFONTA, FAR *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, NEAR *NPLOGFONTW, FAR *LPLOGFONTW;
typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
static const int LF_FULLFACESIZE = 64;
typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, FAR* LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, FAR* LPENUMLOGFONTW;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, FAR *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, FAR *LPENUMLOGFONTEXW;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
static const int OUT_DEFAULT_PRECIS = 0;
static const int OUT_STRING_PRECIS = 1;
static const int OUT_CHARACTER_PRECIS = 2;
static const int OUT_STROKE_PRECIS = 3;
static const int OUT_TT_PRECIS = 4;
static const int OUT_DEVICE_PRECIS = 5;
static const int OUT_RASTER_PRECIS = 6;
static const int OUT_TT_ONLY_PRECIS = 7;
static const int OUT_OUTLINE_PRECIS = 8;
static const int OUT_SCREEN_OUTLINE_PRECIS = 9;
static const int OUT_PS_ONLY_PRECIS = 10;
static const int CLIP_DEFAULT_PRECIS = 0;
static const int CLIP_CHARACTER_PRECIS = 1;
static const int CLIP_STROKE_PRECIS = 2;
static const int CLIP_MASK = 0xf;
static const int CLIP_LH_ANGLES = (1<<4);
static const int CLIP_TT_ALWAYS = (2<<4);
static const int CLIP_DFA_DISABLE = (4<<4);
static const int CLIP_EMBEDDED = (8<<4);
static const int DEFAULT_QUALITY = 0;
static const int DRAFT_QUALITY = 1;
static const int PROOF_QUALITY = 2;
static const int NONANTIALIASED_QUALITY = 3;
static const int ANTIALIASED_QUALITY = 4;
static const int CLEARTYPE_QUALITY = 5;
static const int CLEARTYPE_NATURAL_QUALITY = 6;
static const int DEFAULT_PITCH = 0;
static const int FIXED_PITCH = 1;
static const int VARIABLE_PITCH = 2;
static const int MONO_FONT = 8;
static const int ANSI_CHARSET = 0;
static const int DEFAULT_CHARSET = 1;
static const int SYMBOL_CHARSET = 2;
static const int SHIFTJIS_CHARSET = 128;
static const int HANGEUL_CHARSET = 129;
static const int HANGUL_CHARSET = 129;
static const int GB2312_CHARSET = 134;
static const int CHINESEBIG5_CHARSET = 136;
static const int OEM_CHARSET = 255;
static const int JOHAB_CHARSET = 130;
static const int HEBREW_CHARSET = 177;
static const int ARABIC_CHARSET = 178;
static const int GREEK_CHARSET = 161;
static const int TURKISH_CHARSET = 162;
static const int VIETNAMESE_CHARSET = 163;
static const int THAI_CHARSET = 222;
static const int EASTEUROPE_CHARSET = 238;
static const int RUSSIAN_CHARSET = 204;
static const int MAC_CHARSET = 77;
static const int BALTIC_CHARSET = 186;
static const long FS_LATIN1 = 0x00000001L;
static const long FS_LATIN2 = 0x00000002L;
static const long FS_CYRILLIC = 0x00000004L;
static const long FS_GREEK = 0x00000008L;
static const long FS_TURKISH = 0x00000010L;
static const long FS_HEBREW = 0x00000020L;
static const long FS_ARABIC = 0x00000040L;
static const long FS_BALTIC = 0x00000080L;
static const long FS_VIETNAMESE = 0x00000100L;
static const long FS_THAI = 0x00010000L;
static const long FS_JISJAPAN = 0x00020000L;
static const long FS_CHINESESIMP = 0x00040000L;
static const long FS_WANSUNG = 0x00080000L;
static const long FS_CHINESETRAD = 0x00100000L;
static const long FS_JOHAB = 0x00200000L;
static const long FS_SYMBOL = 0x80000000L;
static const int FF_DONTCARE = (0<<4);
static const int FF_ROMAN = (1<<4);
static const int FF_SWISS = (2<<4);
static const int FF_MODERN = (3<<4);
static const int FF_SCRIPT = (4<<4);
static const int FF_DECORATIVE = (5<<4);
static const int FW_DONTCARE = 0;
static const int FW_THIN = 100;
static const int FW_EXTRALIGHT = 200;
static const int FW_LIGHT = 300;
static const int FW_NORMAL = 400;
static const int FW_MEDIUM = 500;
static const int FW_SEMIBOLD = 600;
static const int FW_BOLD = 700;
static const int FW_EXTRABOLD = 800;
static const int FW_HEAVY = 900;
static const int FW_ULTRALIGHT = FW_EXTRALIGHT;
static const int FW_REGULAR = FW_NORMAL;
static const int FW_DEMIBOLD = FW_SEMIBOLD;
static const int FW_ULTRABOLD = FW_EXTRABOLD;
static const int FW_BLACK = FW_HEAVY;
static const int PANOSE_COUNT = 10;
static const int PAN_FAMILYTYPE_INDEX = 0;
static const int PAN_SERIFSTYLE_INDEX = 1;
static const int PAN_WEIGHT_INDEX = 2;
static const int PAN_PROPORTION_INDEX = 3;
static const int PAN_CONTRAST_INDEX = 4;
static const int PAN_STROKEVARIATION_INDEX = 5;
static const int PAN_ARMSTYLE_INDEX = 6;
static const int PAN_LETTERFORM_INDEX = 7;
static const int PAN_MIDLINE_INDEX = 8;
static const int PAN_XHEIGHT_INDEX = 9;
static const int PAN_CULTURE_LATIN = 0;
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
static const int PAN_ANY = 0;
static const int PAN_NO_FIT = 1;
static const int PAN_FAMILY_TEXT_DISPLAY = 2;
static const int PAN_FAMILY_SCRIPT = 3;
static const int PAN_FAMILY_DECORATIVE = 4;
static const int PAN_FAMILY_PICTORIAL = 5;
static const int PAN_SERIF_COVE = 2;
static const int PAN_SERIF_OBTUSE_COVE = 3;
static const int PAN_SERIF_SQUARE_COVE = 4;
static const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
static const int PAN_SERIF_SQUARE = 6;
static const int PAN_SERIF_THIN = 7;
static const int PAN_SERIF_BONE = 8;
static const int PAN_SERIF_EXAGGERATED = 9;
static const int PAN_SERIF_TRIANGLE = 10;
static const int PAN_SERIF_NORMAL_SANS = 11;
static const int PAN_SERIF_OBTUSE_SANS = 12;
static const int PAN_SERIF_PERP_SANS = 13;
static const int PAN_SERIF_FLARED = 14;
static const int PAN_SERIF_ROUNDED = 15;
static const int PAN_WEIGHT_VERY_LIGHT = 2;
static const int PAN_WEIGHT_LIGHT = 3;
static const int PAN_WEIGHT_THIN = 4;
static const int PAN_WEIGHT_BOOK = 5;
static const int PAN_WEIGHT_MEDIUM = 6;
static const int PAN_WEIGHT_DEMI = 7;
static const int PAN_WEIGHT_BOLD = 8;
static const int PAN_WEIGHT_HEAVY = 9;
static const int PAN_WEIGHT_BLACK = 10;
static const int PAN_WEIGHT_NORD = 11;
static const int PAN_PROP_OLD_STYLE = 2;
static const int PAN_PROP_MODERN = 3;
static const int PAN_PROP_EVEN_WIDTH = 4;
static const int PAN_PROP_EXPANDED = 5;
static const int PAN_PROP_CONDENSED = 6;
static const int PAN_PROP_VERY_EXPANDED = 7;
static const int PAN_PROP_VERY_CONDENSED = 8;
static const int PAN_PROP_MONOSPACED = 9;
static const int PAN_CONTRAST_NONE = 2;
static const int PAN_CONTRAST_VERY_LOW = 3;
static const int PAN_CONTRAST_LOW = 4;
static const int PAN_CONTRAST_MEDIUM_LOW = 5;
static const int PAN_CONTRAST_MEDIUM = 6;
static const int PAN_CONTRAST_MEDIUM_HIGH = 7;
static const int PAN_CONTRAST_HIGH = 8;
static const int PAN_CONTRAST_VERY_HIGH = 9;
static const int PAN_STROKE_GRADUAL_DIAG = 2;
static const int PAN_STROKE_GRADUAL_TRAN = 3;
static const int PAN_STROKE_GRADUAL_VERT = 4;
static const int PAN_STROKE_GRADUAL_HORZ = 5;
static const int PAN_STROKE_RAPID_VERT = 6;
static const int PAN_STROKE_RAPID_HORZ = 7;
static const int PAN_STROKE_INSTANT_VERT = 8;
static const int PAN_STRAIGHT_ARMS_HORZ = 2;
static const int PAN_STRAIGHT_ARMS_WEDGE = 3;
static const int PAN_STRAIGHT_ARMS_VERT = 4;
static const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
static const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
static const int PAN_BENT_ARMS_HORZ = 7;
static const int PAN_BENT_ARMS_WEDGE = 8;
static const int PAN_BENT_ARMS_VERT = 9;
static const int PAN_BENT_ARMS_SINGLE_SERIF = 10;
static const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;
static const int PAN_LETT_NORMAL_CONTACT = 2;
static const int PAN_LETT_NORMAL_WEIGHTED = 3;
static const int PAN_LETT_NORMAL_BOXED = 4;
static const int PAN_LETT_NORMAL_FLATTENED = 5;
static const int PAN_LETT_NORMAL_ROUNDED = 6;
static const int PAN_LETT_NORMAL_OFF_CENTER = 7;
static const int PAN_LETT_NORMAL_SQUARE = 8;
static const int PAN_LETT_OBLIQUE_CONTACT = 9;
static const int PAN_LETT_OBLIQUE_WEIGHTED = 10;
static const int PAN_LETT_OBLIQUE_BOXED = 11;
static const int PAN_LETT_OBLIQUE_FLATTENED = 12;
static const int PAN_LETT_OBLIQUE_ROUNDED = 13;
static const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;
static const int PAN_LETT_OBLIQUE_SQUARE = 15;
static const int PAN_MIDLINE_STANDARD_TRIMMED = 2;
static const int PAN_MIDLINE_STANDARD_POINTED = 3;
static const int PAN_MIDLINE_STANDARD_SERIFED = 4;
static const int PAN_MIDLINE_HIGH_TRIMMED = 5;
static const int PAN_MIDLINE_HIGH_POINTED = 6;
static const int PAN_MIDLINE_HIGH_SERIFED = 7;
static const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;
static const int PAN_MIDLINE_CONSTANT_POINTED = 9;
static const int PAN_MIDLINE_CONSTANT_SERIFED = 10;
static const int PAN_MIDLINE_LOW_TRIMMED = 11;
static const int PAN_MIDLINE_LOW_POINTED = 12;
static const int PAN_MIDLINE_LOW_SERIFED = 13;
static const int PAN_XHEIGHT_CONSTANT_SMALL = 2;
static const int PAN_XHEIGHT_CONSTANT_STD = 3;
static const int PAN_XHEIGHT_CONSTANT_LARGE = 4;
static const int PAN_XHEIGHT_DUCKING_SMALL = 5;
static const int PAN_XHEIGHT_DUCKING_STD = 6;
static const int PAN_XHEIGHT_DUCKING_LARGE = 7;
static const int ELF_VENDOR_SIZE = 4;
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion; /* 0 for the first release of NT */
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture; /* 0 for Latin                   */
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, NEAR *NPEXTLOGFONTA, FAR *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion; /* 0 for the first release of NT */
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture; /* 0 for Latin                   */
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, NEAR *NPEXTLOGFONTW, FAR *LPEXTLOGFONTW;
typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
static const int ELF_VERSION = 0;
static const int ELF_CULTURE_LATIN = 0;
static const int RASTER_FONTTYPE = 0x0001;
static const int DEVICE_FONTTYPE = 0x0002;
static const int TRUETYPE_FONTTYPE = 0x0004;
static const int RGB(r,g,b) = ((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))<<8))|(((DWORD)(BYTE)(b))<<16)));
static const int PALETTERGB(r,g,b) = (0x02000000 | RGB(r,g,b));
static const int PALETTEINDEX(i) = ((COLORREF)(0x01000000 | (DWORD)(WORD)(i)));
static const int PC_RESERVED = 0x01;
static const int PC_EXPLICIT = 0x02;
static const int PC_NOCOLLAPSE = 0x04;
static const int GetRValue(rgb) = (LOBYTE(rgb));
static const int GetGValue(rgb) = (LOBYTE(((WORD)(rgb)) >> 8));
static const int GetBValue(rgb) = (LOBYTE((rgb)>>16));
static const int TRANSPARENT = 1;
static const int OPAQUE = 2;
static const int BKMODE_LAST = 2;
static const int GM_COMPATIBLE = 1;
static const int GM_ADVANCED = 2;
static const int GM_LAST = 2;
static const int PT_CLOSEFIGURE = 0x01;
static const int PT_LINETO = 0x02;
static const int PT_BEZIERTO = 0x04;
static const int PT_MOVETO = 0x06;
static const int MM_TEXT = 1;
static const int MM_LOMETRIC = 2;
static const int MM_HIMETRIC = 3;
static const int MM_LOENGLISH = 4;
static const int MM_HIENGLISH = 5;
static const int MM_TWIPS = 6;
static const int MM_ISOTROPIC = 7;
static const int MM_ANISOTROPIC = 8;
static const int MM_MIN = MM_TEXT;
static const int MM_MAX = MM_ANISOTROPIC;
static const int MM_MAX_FIXEDSCALE = MM_TWIPS;
static const int ABSOLUTE = 1;
static const int RELATIVE = 2;
static const int WHITE_BRUSH = 0;
static const int LTGRAY_BRUSH = 1;
static const int GRAY_BRUSH = 2;
static const int DKGRAY_BRUSH = 3;
static const int BLACK_BRUSH = 4;
static const int NULL_BRUSH = 5;
static const int HOLLOW_BRUSH = NULL_BRUSH;
static const int WHITE_PEN = 6;
static const int BLACK_PEN = 7;
static const int NULL_PEN = 8;
static const int OEM_FIXED_FONT = 10;
static const int ANSI_FIXED_FONT = 11;
static const int ANSI_VAR_FONT = 12;
static const int SYSTEM_FONT = 13;
static const int DEVICE_DEFAULT_FONT = 14;
static const int DEFAULT_PALETTE = 15;
static const int SYSTEM_FIXED_FONT = 16;
static const int DEFAULT_GUI_FONT = 17;
static const int DC_BRUSH = 18;
static const int DC_PEN = 19;
static const int STOCK_LAST = 19;
static const int CLR_INVALID = 0xFFFFFFFF;
static const int BS_SOLID = 0;
static const int BS_NULL = 1;
static const int BS_HOLLOW = BS_NULL;
static const int BS_HATCHED = 2;
static const int BS_PATTERN = 3;
static const int BS_INDEXED = 4;
static const int BS_DIBPATTERN = 5;
static const int BS_DIBPATTERNPT = 6;
static const int BS_PATTERN8X8 = 7;
static const int BS_DIBPATTERN8X8 = 8;
static const int BS_MONOPATTERN = 9;
static const int HS_HORIZONTAL = 0;
static const int HS_VERTICAL = 1;
static const int HS_FDIAGONAL = 2;
static const int HS_BDIAGONAL = 3;
static const int HS_CROSS = 4;
static const int HS_DIAGCROSS = 5;
static const int HS_API_MAX = 12;
static const int PS_SOLID = 0;
static const int PS_DASH = 1;
static const int PS_DOT = 2;
static const int PS_DASHDOT = 3;
static const int PS_DASHDOTDOT = 4;
static const int PS_NULL = 5;
static const int PS_INSIDEFRAME = 6;
static const int PS_USERSTYLE = 7;
static const int PS_ALTERNATE = 8;
static const double PS_STYLE_MASK = 0x0000000F;
static const int PS_ENDCAP_ROUND = 0x00000000;
static const int PS_ENDCAP_SQUARE = 0x00000100;
static const int PS_ENDCAP_FLAT = 0x00000200;
static const int PS_ENDCAP_MASK = 0x00000F00;
static const int PS_JOIN_ROUND = 0x00000000;
static const int PS_JOIN_BEVEL = 0x00001000;
static const int PS_JOIN_MITER = 0x00002000;
static const int PS_JOIN_MASK = 0x0000F000;
static const int PS_COSMETIC = 0x00000000;
static const int PS_GEOMETRIC = 0x00010000;
static const int PS_TYPE_MASK = 0x000F0000;
static const int AD_COUNTERCLOCKWISE = 1;
static const int AD_CLOCKWISE = 2;
static const int DRIVERVERSION = 0;
static const int TECHNOLOGY = 2;
static const int HORZSIZE = 4;
static const int VERTSIZE = 6;
static const int HORZRES = 8;
static const int VERTRES = 10;
static const int BITSPIXEL = 12;
static const int PLANES = 14;
static const int NUMBRUSHES = 16;
static const int NUMPENS = 18;
static const int NUMMARKERS = 20;
static const int NUMFONTS = 22;
static const int NUMCOLORS = 24;
static const int PDEVICESIZE = 26;
static const int CURVECAPS = 28;
static const int LINECAPS = 30;
static const int POLYGONALCAPS = 32;
static const int TEXTCAPS = 34;
static const int CLIPCAPS = 36;
static const int RASTERCAPS = 38;
static const int ASPECTX = 40;
static const int ASPECTY = 42;
static const int ASPECTXY = 44;
static const int LOGPIXELSX = 88;
static const int LOGPIXELSY = 90;
static const int SIZEPALETTE = 104;
static const int NUMRESERVED = 106;
static const int COLORRES = 108;
static const int PHYSICALWIDTH = 110;
static const int PHYSICALHEIGHT = 111;
static const int PHYSICALOFFSETX = 112;
static const int PHYSICALOFFSETY = 113;
static const int SCALINGFACTORX = 114;
static const int SCALINGFACTORY = 115;
static const int VREFRESH = 116;
static const int DESKTOPVERTRES = 117;
static const int DESKTOPHORZRES = 118;
static const int BLTALIGNMENT = 119;
static const int SHADEBLENDCAPS = 120;
static const int COLORMGMTCAPS = 121;
static const int DT_PLOTTER = 0;
static const int DT_RASDISPLAY = 1;
static const int DT_RASPRINTER = 2;
static const int DT_RASCAMERA = 3;
static const int DT_CHARSTREAM = 4;
static const int DT_METAFILE = 5;
static const int DT_DISPFILE = 6;
static const int CC_NONE = 0;
static const int CC_CIRCLES = 1;
static const int CC_PIE = 2;
static const int CC_CHORD = 4;
static const int CC_ELLIPSES = 8;
static const int CC_WIDE = 16;
static const int CC_STYLED = 32;
static const int CC_WIDESTYLED = 64;
static const int CC_INTERIORS = 128;
static const int CC_ROUNDRECT = 256;
static const int LC_NONE = 0;
static const int LC_POLYLINE = 2;
static const int LC_MARKER = 4;
static const int LC_POLYMARKER = 8;
static const int LC_WIDE = 16;
static const int LC_STYLED = 32;
static const int LC_WIDESTYLED = 64;
static const int LC_INTERIORS = 128;
static const int PC_NONE = 0;
static const int PC_POLYGON = 1;
static const int PC_RECTANGLE = 2;
static const int PC_WINDPOLYGON = 4;
static const int PC_TRAPEZOID = 4;
static const int PC_SCANLINE = 8;
static const int PC_WIDE = 16;
static const int PC_STYLED = 32;
static const int PC_WIDESTYLED = 64;
static const int PC_INTERIORS = 128;
static const int PC_POLYPOLYGON = 256;
static const int PC_PATHS = 512;
static const int CP_NONE = 0;
static const int CP_RECTANGLE = 1;
static const int CP_REGION = 2;
static const int TC_OP_CHARACTER = 0x00000001;
static const int TC_OP_STROKE = 0x00000002;
static const int TC_CP_STROKE = 0x00000004;
static const int TC_CR_90 = 0x00000008;
static const int TC_CR_ANY = 0x00000010;
static const int TC_SF_X_YINDEP = 0x00000020;
static const int TC_SA_DOUBLE = 0x00000040;
static const int TC_SA_INTEGER = 0x00000080;
static const int TC_SA_CONTIN = 0x00000100;
static const int TC_EA_DOUBLE = 0x00000200;
static const int TC_IA_ABLE = 0x00000400;
static const int TC_UA_ABLE = 0x00000800;
static const int TC_SO_ABLE = 0x00001000;
static const int TC_RA_ABLE = 0x00002000;
static const int TC_VA_ABLE = 0x00004000;
static const int TC_RESERVED = 0x00008000;
static const int TC_SCROLLBLT = 0x00010000;
static const int RC_BITBLT = 1;
static const int RC_BANDING = 2;
static const int RC_SCALING = 4;
static const int RC_BITMAP64 = 8;
static const int RC_GDI20_OUTPUT = 0x0010;
static const int RC_GDI20_STATE = 0x0020;
static const int RC_SAVEBITMAP = 0x0040;
static const int RC_DI_BITMAP = 0x0080;
static const int RC_PALETTE = 0x0100;
static const int RC_DIBTODEV = 0x0200;
static const int RC_BIGFONT = 0x0400;
static const int RC_STRETCHBLT = 0x0800;
static const int RC_FLOODFILL = 0x1000;
static const int RC_STRETCHDIB = 0x2000;
static const int RC_OP_DX_OUTPUT = 0x4000;
static const int RC_DEVBITS = 0x8000;
static const int SB_NONE = 0x00000000;
static const int SB_CONST_ALPHA = 0x00000001;
static const int SB_PIXEL_ALPHA = 0x00000002;
static const int SB_PREMULT_ALPHA = 0x00000004;
static const int SB_GRAD_RECT = 0x00000010;
static const int SB_GRAD_TRI = 0x00000020;
static const int CM_NONE = 0x00000000;
static const int CM_DEVICE_ICM = 0x00000001;
static const int CM_GAMMA_RAMP = 0x00000002;
static const int CM_CMYK_COLOR = 0x00000004;
static const int DIB_RGB_COLORS = 0;
static const int DIB_PAL_COLORS = 1;
static const int SYSPAL_ERROR = 0;
static const int SYSPAL_STATIC = 1;
static const int SYSPAL_NOSTATIC = 2;
static const int SYSPAL_NOSTATIC256 = 3;
static const long CBM_INIT = 0x04L;
static const int FLOODFILLBORDER = 0;
static const int FLOODFILLSURFACE = 1;
static const int CCHDEVICENAME = 32;
static const int CCHFORMNAME = 32;
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;
typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
static const int DM_SPECVERSION = 0x0401;
static const long DM_ORIENTATION = 0x00000001L;
static const long DM_PAPERSIZE = 0x00000002L;
static const long DM_PAPERLENGTH = 0x00000004L;
static const long DM_PAPERWIDTH = 0x00000008L;
static const long DM_SCALE = 0x00000010L;
static const long DM_POSITION = 0x00000020L;
static const long DM_NUP = 0x00000040L;
static const long DM_DISPLAYORIENTATION = 0x00000080L;
static const long DM_COPIES = 0x00000100L;
static const long DM_DEFAULTSOURCE = 0x00000200L;
static const long DM_PRINTQUALITY = 0x00000400L;
static const long DM_COLOR = 0x00000800L;
static const long DM_DUPLEX = 0x00001000L;
static const long DM_YRESOLUTION = 0x00002000L;
static const long DM_TTOPTION = 0x00004000L;
static const long DM_COLLATE = 0x00008000L;
static const long DM_FORMNAME = 0x00010000L;
static const long DM_LOGPIXELS = 0x00020000L;
static const long DM_BITSPERPEL = 0x00040000L;
static const long DM_PELSWIDTH = 0x00080000L;
static const long DM_PELSHEIGHT = 0x00100000L;
static const long DM_DISPLAYFLAGS = 0x00200000L;
static const long DM_DISPLAYFREQUENCY = 0x00400000L;
static const long DM_ICMMETHOD = 0x00800000L;
static const long DM_ICMINTENT = 0x01000000L;
static const long DM_MEDIATYPE = 0x02000000L;
static const long DM_DITHERTYPE = 0x04000000L;
static const long DM_PANNINGWIDTH = 0x08000000L;
static const long DM_PANNINGHEIGHT = 0x10000000L;
static const long DM_DISPLAYFIXEDOUTPUT = 0x20000000L;
static const int DMORIENT_PORTRAIT = 1;
static const int DMORIENT_LANDSCAPE = 2;
static const int DMPAPER_FIRST = DMPAPER_LETTER;
static const int DMPAPER_LETTER = 1;
static const int DMPAPER_LETTERSMALL = 2;
static const int DMPAPER_TABLOID = 3;
static const int DMPAPER_LEDGER = 4;
static const int DMPAPER_LEGAL = 5;
static const int DMPAPER_STATEMENT = 6;
static const int DMPAPER_EXECUTIVE = 7;
static const int DMPAPER_A3 = 8;
static const int DMPAPER_A4 = 9;
static const int DMPAPER_A4SMALL = 10;
static const int DMPAPER_A5 = 11;
static const int DMPAPER_B4 = 12;
static const int DMPAPER_B5 = 13;
static const int DMPAPER_FOLIO = 14;
static const int DMPAPER_QUARTO = 15;
static const int DMPAPER_10X14 = 16;
static const int DMPAPER_11X17 = 17;
static const int DMPAPER_NOTE = 18;
static const int DMPAPER_ENV_9 = 19;
static const int DMPAPER_ENV_10 = 20;
static const int DMPAPER_ENV_11 = 21;
static const int DMPAPER_ENV_12 = 22;
static const int DMPAPER_ENV_14 = 23;
static const int DMPAPER_CSHEET = 24;
static const int DMPAPER_DSHEET = 25;
static const int DMPAPER_ESHEET = 26;
static const int DMPAPER_ENV_DL = 27;
static const int DMPAPER_ENV_C5 = 28;
static const int DMPAPER_ENV_C3 = 29;
static const int DMPAPER_ENV_C4 = 30;
static const int DMPAPER_ENV_C6 = 31;
static const int DMPAPER_ENV_C65 = 32;
static const int DMPAPER_ENV_B4 = 33;
static const int DMPAPER_ENV_B5 = 34;
static const int DMPAPER_ENV_B6 = 35;
static const int DMPAPER_ENV_ITALY = 36;
static const int DMPAPER_ENV_MONARCH = 37;
static const int DMPAPER_ENV_PERSONAL = 38;
static const int DMPAPER_FANFOLD_US = 39;
static const int DMPAPER_FANFOLD_STD_GERMAN = 40;
static const int DMPAPER_FANFOLD_LGL_GERMAN = 41;
static const int DMPAPER_ISO_B4 = 42;
static const int DMPAPER_JAPANESE_POSTCARD = 43;
static const int DMPAPER_9X11 = 44;
static const int DMPAPER_10X11 = 45;
static const int DMPAPER_15X11 = 46;
static const int DMPAPER_ENV_INVITE = 47;
static const int DMPAPER_RESERVED_48 = 48;
static const int DMPAPER_RESERVED_49 = 49;
static const int DMPAPER_LETTER_EXTRA = 50;
static const int DMPAPER_LEGAL_EXTRA = 51;
static const int DMPAPER_TABLOID_EXTRA = 52;
static const int DMPAPER_A4_EXTRA = 53;
static const int DMPAPER_LETTER_TRANSVERSE = 54;
static const int DMPAPER_A4_TRANSVERSE = 55;
static const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;
static const int DMPAPER_A_PLUS = 57;
static const int DMPAPER_B_PLUS = 58;
static const int DMPAPER_LETTER_PLUS = 59;
static const int DMPAPER_A4_PLUS = 60;
static const int DMPAPER_A5_TRANSVERSE = 61;
static const int DMPAPER_B5_TRANSVERSE = 62;
static const int DMPAPER_A3_EXTRA = 63;
static const int DMPAPER_A5_EXTRA = 64;
static const int DMPAPER_B5_EXTRA = 65;
static const int DMPAPER_A2 = 66;
static const int DMPAPER_A3_TRANSVERSE = 67;
static const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;
static const int DMPAPER_DBL_JAPANESE_POSTCARD = 69;
static const int DMPAPER_A6 = 70;
static const int DMPAPER_JENV_KAKU2 = 71;
static const int DMPAPER_JENV_KAKU3 = 72;
static const int DMPAPER_JENV_CHOU3 = 73;
static const int DMPAPER_JENV_CHOU4 = 74;
static const int DMPAPER_LETTER_ROTATED = 75;
static const int DMPAPER_A3_ROTATED = 76;
static const int DMPAPER_A4_ROTATED = 77;
static const int DMPAPER_A5_ROTATED = 78;
static const int DMPAPER_B4_JIS_ROTATED = 79;
static const int DMPAPER_B5_JIS_ROTATED = 80;
static const int DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;
static const int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;
static const int DMPAPER_A6_ROTATED = 83;
static const int DMPAPER_JENV_KAKU2_ROTATED = 84;
static const int DMPAPER_JENV_KAKU3_ROTATED = 85;
static const int DMPAPER_JENV_CHOU3_ROTATED = 86;
static const int DMPAPER_JENV_CHOU4_ROTATED = 87;
static const int DMPAPER_B6_JIS = 88;
static const int DMPAPER_B6_JIS_ROTATED = 89;
static const int DMPAPER_12X11 = 90;
static const int DMPAPER_JENV_YOU4 = 91;
static const int DMPAPER_JENV_YOU4_ROTATED = 92;
static const int DMPAPER_P16K = 93;
static const int DMPAPER_P32K = 94;
static const int DMPAPER_P32KBIG = 95;
static const int DMPAPER_PENV_1 = 96;
static const int DMPAPER_PENV_2 = 97;
static const int DMPAPER_PENV_3 = 98;
static const int DMPAPER_PENV_4 = 99;
static const int DMPAPER_PENV_5 = 100;
static const int DMPAPER_PENV_6 = 101;
static const int DMPAPER_PENV_7 = 102;
static const int DMPAPER_PENV_8 = 103;
static const int DMPAPER_PENV_9 = 104;
static const int DMPAPER_PENV_10 = 105;
static const int DMPAPER_P16K_ROTATED = 106;
static const int DMPAPER_P32K_ROTATED = 107;
static const int DMPAPER_P32KBIG_ROTATED = 108;
static const int DMPAPER_PENV_1_ROTATED = 109;
static const int DMPAPER_PENV_2_ROTATED = 110;
static const int DMPAPER_PENV_3_ROTATED = 111;
static const int DMPAPER_PENV_4_ROTATED = 112;
static const int DMPAPER_PENV_5_ROTATED = 113;
static const int DMPAPER_PENV_6_ROTATED = 114;
static const int DMPAPER_PENV_7_ROTATED = 115;
static const int DMPAPER_PENV_8_ROTATED = 116;
static const int DMPAPER_PENV_9_ROTATED = 117;
static const int DMPAPER_PENV_10_ROTATED = 118;
static const int DMPAPER_LAST = DMPAPER_PENV_10_ROTATED;
static const int DMPAPER_USER = 256;
static const int DMBIN_FIRST = DMBIN_UPPER;
static const int DMBIN_UPPER = 1;
static const int DMBIN_ONLYONE = 1;
static const int DMBIN_LOWER = 2;
static const int DMBIN_MIDDLE = 3;
static const int DMBIN_MANUAL = 4;
static const int DMBIN_ENVELOPE = 5;
static const int DMBIN_ENVMANUAL = 6;
static const int DMBIN_AUTO = 7;
static const int DMBIN_TRACTOR = 8;
static const int DMBIN_SMALLFMT = 9;
static const int DMBIN_LARGEFMT = 10;
static const int DMBIN_LARGECAPACITY = 11;
static const int DMBIN_CASSETTE = 14;
static const int DMBIN_FORMSOURCE = 15;
static const int DMBIN_LAST = DMBIN_FORMSOURCE;
static const int DMBIN_USER = 256;
static const int DMRES_DRAFT = (-1);
static const int DMRES_LOW = (-2);
static const int DMRES_MEDIUM = (-3);
static const int DMRES_HIGH = (-4);
static const int DMCOLOR_MONOCHROME = 1;
static const int DMCOLOR_COLOR = 2;
static const int DMDUP_SIMPLEX = 1;
static const int DMDUP_VERTICAL = 2;
static const int DMDUP_HORIZONTAL = 3;
static const int DMTT_BITMAP = 1;
static const int DMTT_DOWNLOAD = 2;
static const int DMTT_SUBDEV = 3;
static const int DMTT_DOWNLOAD_OUTLINE = 4;
static const int DMCOLLATE_FALSE = 0;
static const int DMCOLLATE_TRUE = 1;
static const int DMDO_DEFAULT = 0;
static const int DMDO_90 = 1;
static const int DMDO_180 = 2;
static const int DMDO_270 = 3;
static const int DMDFO_DEFAULT = 0;
static const int DMDFO_STRETCH = 1;
static const int DMDFO_CENTER = 2;
static const int DM_INTERLACED = 0x00000002;
static const int DMDISPLAYFLAGS_TEXTMODE = 0x00000004;
static const int DMNUP_SYSTEM = 1;
static const int DMNUP_ONEUP = 2;
static const int DMICMMETHOD_NONE = 1;
static const int DMICMMETHOD_SYSTEM = 2;
static const int DMICMMETHOD_DRIVER = 3;
static const int DMICMMETHOD_DEVICE = 4;
static const int DMICMMETHOD_USER = 256;
static const int DMICM_SATURATE = 1;
static const int DMICM_CONTRAST = 2;
static const int DMICM_COLORIMETRIC = 3;
static const int DMICM_ABS_COLORIMETRIC = 4;
static const int DMICM_USER = 256;
static const int DMMEDIA_STANDARD = 1;
static const int DMMEDIA_TRANSPARENCY = 2;
static const int DMMEDIA_GLOSSY = 3;
static const int DMMEDIA_USER = 256;
static const int DMDITHER_NONE = 1;
static const int DMDITHER_COARSE = 2;
static const int DMDITHER_FINE = 3;
static const int DMDITHER_LINEART = 4;
static const int DMDITHER_ERRORDIFFUSION = 5;
static const int DMDITHER_RESERVED6 = 6;
static const int DMDITHER_RESERVED7 = 7;
static const int DMDITHER_RESERVED8 = 8;
static const int DMDITHER_RESERVED9 = 9;
static const int DMDITHER_GRAYSCALE = 10;
static const int DMDITHER_USER = 256;
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
static const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x00000001;
static const int DISPLAY_DEVICE_MULTI_DRIVER = 0x00000002;
static const int DISPLAY_DEVICE_PRIMARY_DEVICE = 0x00000004;
static const int DISPLAY_DEVICE_MIRRORING_DRIVER = 0x00000008;
static const int DISPLAY_DEVICE_VGA_COMPATIBLE = 0x00000010;
static const int DISPLAY_DEVICE_REMOVABLE = 0x00000020;
static const int DISPLAY_DEVICE_MODESPRUNED = 0x08000000;
static const int DISPLAY_DEVICE_REMOTE = 0x04000000;
static const int DISPLAY_DEVICE_DISCONNECT = 0x02000000;
static const int DISPLAY_DEVICE_TS_COMPATIBLE = 0x00200000;
static const int DISPLAY_DEVICE_UNSAFE_MODES_ON = 0x00080000;
static const int DISPLAY_DEVICE_ACTIVE = 0x00000001;
static const int DISPLAY_DEVICE_ATTACHED = 0x00000002;
static const int DISPLAYCONFIG_MAXPATH = 1024;
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;
typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;
typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;
typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;
    UINT32 videoStandard;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;
typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;
typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;
typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;
typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;
typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;
typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;
static const int DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 0xffffffff;
typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;
static const int DISPLAYCONFIG_SOURCE_IN_USE = 0x00000001;
typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
static const int DISPLAYCONFIG_TARGET_IN_USE = 0x00000001;
static const int DISPLAYCONFIG_TARGET_FORCIBLE = 0x00000002;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 0x00000004;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 0x00000008;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 0x00000010;
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;
static const int DISPLAYCONFIG_PATH_ACTIVE = 0x00000001;
typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;
typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;
typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;
typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;
typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
static const int QDC_ALL_PATHS = 0x00000001;
static const int QDC_ONLY_ACTIVE_PATHS = 0x00000002;
static const int QDC_DATABASE_CURRENT = 0x00000004;
static const int SDC_TOPOLOGY_INTERNAL = 0x00000001;
static const int SDC_TOPOLOGY_CLONE = 0x00000002;
static const int SDC_TOPOLOGY_EXTEND = 0x00000004;
static const int SDC_TOPOLOGY_EXTERNAL = 0x00000008;
static const int SDC_TOPOLOGY_SUPPLIED = 0x00000010;
static const int SDC_USE_DATABASE_CURRENT = (SDC_TOPOLOGY_INTERNAL | SDC_TOPOLOGY_CLONE | SDC_TOPOLOGY_EXTEND | SDC_TOPOLOGY_EXTERNAL);
static const int SDC_USE_SUPPLIED_DISPLAY_CONFIG = 0x00000020;
static const int SDC_VALIDATE = 0x00000040;
static const int SDC_APPLY = 0x00000080;
static const int SDC_NO_OPTIMIZATION = 0x00000100;
static const int SDC_SAVE_TO_DATABASE = 0x00000200;
static const int SDC_ALLOW_CHANGES = 0x00000400;
static const int SDC_PATH_PERSIST_IF_REQUIRED = 0x00000800;
static const int SDC_FORCE_MODE_ENUMERATION = 0x00001000;
static const int SDC_ALLOW_PATH_ORDER_CHANGES = 0x00002000;
static const int RDH_RECTANGLES = 1;
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;
typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, NEAR *NPRGNDATA, FAR *LPRGNDATA;
static const int SYSRGN = 4;
typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, NEAR *NPABC, FAR *LPABC;
typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, NEAR *NPABCFLOAT, FAR *LPABCFLOAT;
typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, NEAR *NPOUTLINETEXTMETRICA, FAR *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, NEAR *NPOUTLINETEXTMETRICW, FAR *LPOUTLINETEXTMETRICW;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, NEAR *NPPOLYTEXTA, FAR *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, NEAR *NPPOLYTEXTW, FAR *LPPOLYTEXTW;
typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef struct _FIXED {
    WORD fract;
    short value;
} FIXED;
typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, FAR *LPMAT2;
typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, FAR *LPGLYPHMETRICS;
static const int GGO_METRICS = 0;
static const int GGO_BITMAP = 1;
static const int GGO_NATIVE = 2;
static const int GGO_BEZIER = 3;
static const int GGO_GRAY2_BITMAP = 4;
static const int GGO_GRAY4_BITMAP = 5;
static const int GGO_GRAY8_BITMAP = 6;
static const int GGO_GLYPH_INDEX = 0x0080;
static const int GGO_UNHINTED = 0x0100;
static const int TT_POLYGON_TYPE = 24;
static const int TT_PRIM_LINE = 1;
static const int TT_PRIM_QSPLINE = 2;
static const int TT_PRIM_CSPLINE = 3;
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, FAR* LPPOINTFX;
typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, FAR* LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, FAR* LPTTPOLYGONHEADER;
static const int GCP_DBCS = 0x0001;
static const int GCP_REORDER = 0x0002;
static const int GCP_USEKERNING = 0x0008;
static const int GCP_GLYPHSHAPE = 0x0010;
static const int GCP_LIGATE = 0x0020;
static const int GCP_DIACRITIC = 0x0100;
static const int GCP_KASHIDA = 0x0400;
static const int GCP_ERROR = 0x8000;
static const int FLI_MASK = 0x103B;
static const long GCP_JUSTIFY = 0x00010000L;
static const long FLI_GLYPHS = 0x00040000L;
static const long GCP_CLASSIN = 0x00080000L;
static const long GCP_MAXEXTENT = 0x00100000L;
static const long GCP_JUSTIFYIN = 0x00200000L;
static const long GCP_DISPLAYZWG = 0x00400000L;
static const long GCP_SYMSWAPOFF = 0x00800000L;
static const long GCP_NUMERICOVERRIDE = 0x01000000L;
static const long GCP_NEUTRALOVERRIDE = 0x02000000L;
static const long GCP_NUMERICSLATIN = 0x04000000L;
static const long GCP_NUMERICSLOCAL = 0x08000000L;
static const int GCPCLASS_LATIN = 1;
static const int GCPCLASS_HEBREW = 2;
static const int GCPCLASS_ARABIC = 2;
static const int GCPCLASS_NEUTRAL = 3;
static const int GCPCLASS_LOCALNUMBER = 4;
static const int GCPCLASS_LATINNUMBER = 5;
static const int GCPCLASS_LATINNUMERICTERMINATOR = 6;
static const int GCPCLASS_LATINNUMERICSEPARATOR = 7;
static const int GCPCLASS_NUMERICSEPARATOR = 8;
static const int GCPCLASS_PREBOUNDLTR = 0x80;
static const int GCPCLASS_PREBOUNDRTL = 0x40;
static const int GCPCLASS_POSTBOUNDLTR = 0x20;
static const int GCPCLASS_POSTBOUNDRTL = 0x10;
static const int GCPGLYPH_LINKBEFORE = 0x8000;
static const int GCPGLYPH_LINKAFTER = 0x4000;
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT FAR *lpOrder;
    int FAR *lpDx;
    int FAR *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, FAR* LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT FAR *lpOrder;
    int FAR *lpDx;
    int FAR *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, FAR* LPGCP_RESULTSW;
typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, FAR *LPRASTERIZER_STATUS;
static const int TT_AVAILABLE = 0x0001;
static const int TT_ENABLED = 0x0002;
typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, FAR *LPPIXELFORMATDESCRIPTOR;
static const int PFD_TYPE_RGBA = 0;
static const int PFD_TYPE_COLORINDEX = 1;
static const int PFD_MAIN_PLANE = 0;
static const int PFD_OVERLAY_PLANE = 1;
static const int PFD_UNDERLAY_PLANE = (-1);
static const int PFD_DOUBLEBUFFER = 0x00000001;
static const int PFD_STEREO = 0x00000002;
static const int PFD_DRAW_TO_WINDOW = 0x00000004;
static const int PFD_DRAW_TO_BITMAP = 0x00000008;
static const int PFD_SUPPORT_GDI = 0x00000010;
static const int PFD_SUPPORT_OPENGL = 0x00000020;
static const int PFD_GENERIC_FORMAT = 0x00000040;
static const int PFD_NEED_PALETTE = 0x00000080;
static const int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
static const int PFD_SWAP_EXCHANGE = 0x00000200;
static const int PFD_SWAP_COPY = 0x00000400;
static const int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
static const int PFD_GENERIC_ACCELERATED = 0x00001000;
static const int PFD_SUPPORT_DIRECTDRAW = 0x00002000;
static const int PFD_DIRECT3D_ACCELERATED = 0x00004000;
static const int PFD_SUPPORT_COMPOSITION = 0x00008000;
static const int PFD_DEPTH_DONTCARE = 0x20000000;
static const int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
static const int PFD_STEREO_DONTCARE = 0x80000000;
typedef OLDFONTENUMPROC;
typedef FONTENUMPROCA;
typedef FONTENUMPROCW;
typedef FONTENUMPROCA FONTENUMPROC;
typedef GOBJENUMPROC;
typedef LINEDDAPROC;
int AddFontResourceA(LPCSTR);
int AddFontResourceW(LPCWSTR);
static const int AddFontResource = AddFontResourceA;
__gdi_entry BOOL AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, PALETTEENTRY * ppe);
__gdi_entry BOOL Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
__gdi_entry BOOL BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
BOOL CancelDC( HDC hdc);
__gdi_entry BOOL Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
int ChoosePixelFormat( HDC hdc, PIXELFORMATDESCRIPTOR *ppfd);
HMETAFILE CloseMetaFile( HDC hdc);
int CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
HMETAFILE CopyMetaFileA( HMETAFILE, LPCSTR);
HMETAFILE CopyMetaFileW( HMETAFILE, LPCWSTR);
static const int CopyMetaFile = CopyMetaFileA;
__gdi_entry HBITMAP CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, VOID *lpBits);
__gdi_entry HBITMAP CreateBitmapIndirect( BITMAP *pbm);
__gdi_entry HBRUSH CreateBrushIndirect( LOGBRUSH *plbrush);
HBITMAP CreateCompatibleBitmap( HDC hdc, int cx, int cy);
HBITMAP CreateDiscardableBitmap( HDC hdc, int cx, int cy);
HDC CreateCompatibleDC( HDC hdc);
HDC CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, DEVMODEA * pdm);
HDC CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, DEVMODEW * pdm);
static const int CreateDC = CreateDCA;
HBITMAP CreateDIBitmap( HDC hdc, BITMAPINFOHEADER *pbmih, DWORD flInit, VOID *pjBits, BITMAPINFO *pbmi, UINT iUsage);
HBRUSH CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
__gdi_entry HBRUSH CreateDIBPatternBrushPt( VOID *lpPackedDIB, UINT iUsage);
HRGN CreateEllipticRgn( int x1, int y1, int x2, int y2);
HRGN CreateEllipticRgnIndirect( RECT *lprect);
__gdi_entry HFONT CreateFontIndirectA( LOGFONTA *lplf);
__gdi_entry HFONT CreateFontIndirectW( LOGFONTW *lplf);
static const int CreateFontIndirect = CreateFontIndirectA;
HFONT CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                             DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                             DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
HFONT CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                             DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                             DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
static const int CreateFont = CreateFontA;
HBRUSH CreateHatchBrush( int iHatch, COLORREF color);
HDC CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, DEVMODEA * pdm);
HDC CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, DEVMODEW * pdm);
static const int CreateIC = CreateICA;
HDC CreateMetaFileA( LPCSTR pszFile);
HDC CreateMetaFileW( LPCWSTR pszFile);
static const int CreateMetaFile = CreateMetaFileA;
__gdi_entry HPALETTE CreatePalette( + plpal->palNumEntries * sizeof(PALETTEENTRY)) LOGPALETTE * plpal);
HPEN CreatePen( int iStyle, int cWidth, COLORREF color);
__gdi_entry HPEN CreatePenIndirect( LOGPEN *plpen);
HRGN CreatePolyPolygonRgn( POINT *pptl,
                                                INT *pc,
                                                int cPoly,
                                                int iMode);
__gdi_entry HBRUSH CreatePatternBrush( HBITMAP hbm);
HRGN CreateRectRgn( int x1, int y1, int x2, int y2);
HRGN CreateRectRgnIndirect( RECT *lprect);
HRGN CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
BOOL CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
BOOL CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
static const int CreateScalableFontResource = CreateScalableFontResourceA;
HBRUSH CreateSolidBrush( COLORREF color);
BOOL DeleteDC( HDC hdc);
BOOL DeleteMetaFile( HMETAFILE hmf);
__gdi_entry BOOL DeleteObject( HGDIOBJ ho);
int DescribePixelFormat( HDC hdc,
                                            int iPixelFormat,
                                            UINT nBytes,
                                            LPPIXELFORMATDESCRIPTOR ppfd);
typedef UINT (CALLBACK* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef DWORD (CALLBACK* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
static const int DM_UPDATE = 1;
static const int DM_COPY = 2;
static const int DM_PROMPT = 4;
static const int DM_MODIFY = 8;
static const int DM_IN_BUFFER = DM_MODIFY;
static const int DM_IN_PROMPT = DM_PROMPT;
static const int DM_OUT_BUFFER = DM_COPY;
static const int DM_OUT_DEFAULT = DM_UPDATE;
static const int DC_FIELDS = 1;
static const int DC_PAPERS = 2;
static const int DC_PAPERSIZE = 3;
static const int DC_MINEXTENT = 4;
static const int DC_MAXEXTENT = 5;
static const int DC_BINS = 6;
static const int DC_DUPLEX = 7;
static const int DC_SIZE = 8;
static const int DC_EXTRA = 9;
static const int DC_VERSION = 10;
static const int DC_DRIVER = 11;
static const int DC_BINNAMES = 12;
static const int DC_ENUMRESOLUTIONS = 13;
static const int DC_FILEDEPENDENCIES = 14;
static const int DC_TRUETYPE = 15;
static const int DC_PAPERNAMES = 16;
static const int DC_ORIENTATION = 17;
static const int DC_COPIES = 18;
static const int DC_BINADJUST = 19;
static const int DC_EMF_COMPLIANT = 20;
static const int DC_DATATYPE_PRODUCED = 21;
static const int DC_COLLATE = 22;
static const int DC_MANUFACTURER = 23;
static const int DC_MODEL = 24;
static const int DC_PERSONALITY = 25;
static const int DC_PRINTRATE = 26;
static const int DC_PRINTRATEUNIT = 27;
static const int PRINTRATEUNIT_PPM = 1;
static const int PRINTRATEUNIT_CPS = 2;
static const int PRINTRATEUNIT_LPM = 3;
static const int PRINTRATEUNIT_IPM = 4;
static const int DC_PRINTERMEM = 28;
static const int DC_MEDIAREADY = 29;
static const int DC_STAPLE = 30;
static const int DC_PRINTRATEPPM = 31;
static const int DC_COLORDEVICE = 32;
static const int DC_NUP = 33;
static const int DC_MEDIATYPENAMES = 34;
static const int DC_MEDIATYPES = 35;
static const long DCTT_BITMAP = 0x0000001L;
static const long DCTT_DOWNLOAD = 0x0000002L;
static const long DCTT_SUBDEV = 0x0000004L;
static const long DCTT_DOWNLOAD_OUTLINE = 0x0000008L;
static const int DCBA_FACEUPNONE = 0x0000;
static const int DCBA_FACEUPCENTER = 0x0001;
static const int DCBA_FACEUPLEFT = 0x0002;
static const int DCBA_FACEUPRIGHT = 0x0003;
static const int DCBA_FACEDOWNNONE = 0x0100;
static const int DCBA_FACEDOWNCENTER = 0x0101;
static const int DCBA_FACEDOWNLEFT = 0x0102;
static const int DCBA_FACEDOWNRIGHT = 0x0103;
int
DeviceCapabilitiesA(
    LPCSTR pDevice,
    LPCSTR pPort,
    WORD fwCapability,
    LPSTR pOutput,
    DEVMODEA *pDevMode
    );
int
DeviceCapabilitiesW(
    LPCWSTR pDevice,
    LPCWSTR pPort,
    WORD fwCapability,
    LPWSTR pOutput,
    DEVMODEW *pDevMode
    );
static const int DeviceCapabilities = DeviceCapabilitiesA;
int DrawEscape( HDC hdc,
                                    int iEscape,
                                    int cjIn,
                                    LPCSTR lpIn);
__gdi_entry BOOL Ellipse( HDC hdc, int left, int top, int right, int bottom);
int EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
int EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
static const int EnumFontFamiliesEx = EnumFontFamiliesExA;
int EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
static const int EnumFontFamilies = EnumFontFamiliesA;
int EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
static const int EnumFonts = EnumFontsA;
int EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPVOID lParam);
BOOL EqualRgn( HRGN hrgn1, HRGN hrgn2);
__gdi_entry int Escape( HDC hdc,
                                int iEscape,
                                int cjIn,
                                LPCSTR pvIn,
                                LPVOID pvOut);
int ExtEscape( HDC hdc,
                                    int iEscape,
                                    int cjInput,
                                    LPCSTR lpInData,
                                    int cjOutput,
                                    LPSTR lpOutData);
__gdi_entry int ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
__gdi_entry HRGN ExtCreateRegion( XFORM * lpx, DWORD nCount, RGNDATA * lpData);
__gdi_entry BOOL ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
__gdi_entry BOOL FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
__gdi_entry BOOL FloodFill( HDC hdc, int x, int y, COLORREF color);
__gdi_entry BOOL FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
int GetROP2( HDC hdc);
BOOL GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
COLORREF GetBkColor( HDC hdc);
COLORREF GetDCBrushColor( HDC hdc);
COLORREF GetDCPenColor( HDC hdc);
int
GetBkMode(
    HDC hdc
    );
LONG
GetBitmapBits(
    HBITMAP hbit,
    LONG cb,
    LPVOID lpvBits
    );
BOOL GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
UINT GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);
BOOL GetBrushOrgEx( HDC hdc, LPPOINT lppt);
BOOL GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
static const int GetCharWidth = GetCharWidthA;
BOOL GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
static const int GetCharWidth32 = GetCharWidth32A;
BOOL APIENTRY GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
BOOL APIENTRY GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
static const int GetCharWidthFloat = GetCharWidthFloatA;
BOOL APIENTRY GetCharABCWidthsA( HDC hdc,
                                            UINT wFirst,
                                            UINT wLast,
                                            LPABC lpABC);
BOOL APIENTRY GetCharABCWidthsW( HDC hdc,
                                            UINT wFirst,
                                            UINT wLast,
                                            LPABC lpABC);
static const int GetCharABCWidths = GetCharABCWidthsA;
BOOL APIENTRY GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
BOOL APIENTRY GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
static const int GetCharABCWidthsFloat = GetCharABCWidthsFloatA;
int GetClipBox( HDC hdc, LPRECT lprect);
int GetClipRgn( HDC hdc, HRGN hrgn);
int GetMetaRgn( HDC hdc, HRGN hrgn);
HGDIOBJ GetCurrentObject( HDC hdc, UINT type);
BOOL GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
int GetDeviceCaps( HDC hdc, int index);
int GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, ) LPBITMAPINFO lpbmi, UINT usage); // SAL actual size of lpbmi is computed from structure elements
)
DWORD GetFontData ( HDC hdc,
                                        DWORD dwTable,
                                        DWORD dwOffset,
                                        PVOID pvBuffer,
                                        DWORD cjBuffer
                                        );
DWORD GetGlyphOutlineA( HDC hdc,
                                            UINT uChar,
                                            UINT fuFormat,
                                            LPGLYPHMETRICS lpgm,
                                            DWORD cjBuffer,
                                            LPVOID pvBuffer,
                                            MAT2 *lpmat2
                                        );
DWORD GetGlyphOutlineW( HDC hdc,
                                            UINT uChar,
                                            UINT fuFormat,
                                            LPGLYPHMETRICS lpgm,
                                            DWORD cjBuffer,
                                            LPVOID pvBuffer,
                                            MAT2 *lpmat2
                                        );
static const int GetGlyphOutline = GetGlyphOutlineA;
int GetGraphicsMode( HDC hdc);
int GetMapMode( HDC hdc);
UINT GetMetaFileBitsEx(HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
HMETAFILE GetMetaFileA( LPCSTR lpName);
HMETAFILE GetMetaFileW( LPCWSTR lpName);
static const int GetMetaFile = GetMetaFileA;
COLORREF GetNearestColor( HDC hdc, COLORREF color);
UINT GetNearestPaletteIndex( HPALETTE h, COLORREF color);
DWORD GetObjectType( HGDIOBJ h);
UINT APIENTRY GetOutlineTextMetricsA( HDC hdc,
                                                UINT cjCopy,
                                                LPOUTLINETEXTMETRICA potm);
UINT APIENTRY GetOutlineTextMetricsW( HDC hdc,
                                                UINT cjCopy,
                                                LPOUTLINETEXTMETRICW potm);
static const int GetOutlineTextMetrics = GetOutlineTextMetricsA;
__range(0,cEntries)
UINT GetPaletteEntries( HPALETTE hpal,
                                            UINT iStart,
                                            UINT cEntries,
                                            LPPALETTEENTRY pPalEntries);
COLORREF GetPixel( HDC hdc, int x, int y);
int GetPixelFormat( HDC hdc);
int GetPolyFillMode( HDC hdc);
BOOL GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                            UINT cjBytes);
int GetRandomRgn (HDC hdc, HRGN hrgn, INT i);
DWORD GetRegionData( HRGN hrgn,
                                        DWORD nCount,
                                        LPRGNDATA lpRgnData);
int GetRgnBox( HRGN hrgn, LPRECT lprc);
HGDIOBJ GetStockObject( int i);
int GetStretchBltMode(HDC hdc);
UINT
GetSystemPaletteEntries(
    HDC hdc,
    UINT iStart,
    UINT cEntries,
    LPPALETTEENTRY pPalEntries
    );
UINT GetSystemPaletteUse(HDC hdc);
int GetTextCharacterExtra(HDC hdc);
UINT GetTextAlign(HDC hdc);
COLORREF GetTextColor(HDC hdc);
BOOL
APIENTRY
GetTextExtentPointA(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE lpsz
    );
BOOL
APIENTRY
GetTextExtentPointW(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE lpsz
    );
static const int GetTextExtentPoint = GetTextExtentPointA;
BOOL
APIENTRY
GetTextExtentPoint32A(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE psizl
    );
BOOL
APIENTRY
GetTextExtentPoint32W(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE psizl
    );
static const int GetTextExtentPoint32 = GetTextExtentPoint32A;
BOOL
APIENTRY
GetTextExtentExPointA(
    HDC hdc,
    LPCSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize
    );
BOOL
APIENTRY
GetTextExtentExPointW(
    HDC hdc,
    LPCWSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize
    );
static const int GetTextExtentExPoint = GetTextExtentExPointA;
int GetTextCharset( HDC hdc);
int GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
BOOL TranslateCharsetInfo( DWORD FAR *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
DWORD GetFontLanguageInfo( HDC hdc);
DWORD GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
DWORD GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
static const int GetCharacterPlacement = GetCharacterPlacementA;
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE,FAR *LPWCRANGE;
typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, FAR *LPGLYPHSET;
static const int GS_8BIT_INDICES = 0x00000001;
static const int GGI_MARK_NONEXISTING_GLYPHS = 0X0001;
DWORD GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
DWORD GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
DWORD GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
static const int GetGlyphIndices = GetGlyphIndicesA;
BOOL GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
BOOL GetTextExtentExPointI ( HDC hdc,
                                                LPWORD lpwszString,
                                                int cwchString,
                                                int nMaxExtent,
                                                LPINT lpnFit,
                                                LPINT lpnDx,
                                                LPSIZE lpSize
                                                );
BOOL GetCharWidthI( HDC hdc,
                                        UINT giFirst,
                                        UINT cgi,
                                        LPWORD pgi,
                                        LPINT piWidths
                                        );
BOOL GetCharABCWidthsI( HDC hdc,
                                            UINT giFirst,
                                            UINT cgi,
                                            LPWORD pgi,
                                            LPABC pabc
                                        );
static const int STAMP_DESIGNVECTOR = (0x8000000 + 'd' + ('v' << 8));
static const int STAMP_AXESLIST = (0x8000000 + 'a' + ('l' << 8));
static const int MM_MAX_NUMAXES = 16;
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, FAR *LPDESIGNVECTOR;
int AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
int AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);
static const int AddFontResourceEx = AddFontResourceExA;
BOOL RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
BOOL RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);
static const int RemoveFontResourceEx = RemoveFontResourceExA;
HANDLE AddFontMemResourceEx( PVOID pFileView,
                                                DWORD cjSize,
                                                PVOID pvResrved,
                                                DWORD* pNumFonts);
BOOL RemoveFontMemResourceEx( HANDLE h);
static const int FR_PRIVATE = 0x10;
static const int FR_NOT_ENUM = 0x20;
static const int MM_MAX_AXES_NAMELEN = 16;
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, FAR *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, FAR *LPAXISINFOW;
typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, FAR *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, FAR *LPAXESLISTW;
typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, FAR *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, FAR *LPENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
HFONT CreateFontIndirectExA( ENUMLOGFONTEXDVA *);
HFONT CreateFontIndirectExW( ENUMLOGFONTEXDVW *);
static const int CreateFontIndirectEx = CreateFontIndirectExA;
typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, FAR *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, FAR *LPENUMTEXTMETRICW;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
BOOL GetViewportExtEx( HDC hdc, LPSIZE lpsize);
BOOL GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
BOOL GetWindowExtEx( HDC hdc, LPSIZE lpsize);
BOOL GetWindowOrgEx( HDC hdc, LPPOINT lppoint);
__gdi_entry int IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
__gdi_entry BOOL InvertRgn( HDC hdc, HRGN hrgn);
BOOL LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
__gdi_entry BOOL LineTo( HDC hdc, int x, int y);
BOOL MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
              HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
BOOL PlgBlt( HDC hdcDest, POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                     int height, HBITMAP hbmMask, int xMask, int yMask);
__gdi_entry int OffsetClipRgn(HDC hdc, int x, int y);
int OffsetRgn(HRGN hrgn, int x, int y);
__gdi_entry BOOL PatBlt(HDC hdc, int x, int y, int w, int h, DWORD rop);
__gdi_entry BOOL Pie(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
BOOL PlayMetaFile(HDC hdc, HMETAFILE hmf);
__gdi_entry BOOL PaintRgn(HDC hdc, HRGN hrgn);
__gdi_entry BOOL PolyPolygon(HDC hdc, POINT *apt, INT *asz, int csz);
BOOL PtInRegion(HRGN hrgn, int x, int y);
BOOL PtVisible(HDC hdc, int x, int y);
BOOL RectInRegion(HRGN hrgn, RECT * lprect);
BOOL RectVisible(HDC hdc, RECT * lprect);
__gdi_entry BOOL Rectangle(HDC hdc, int left, int top, int right, int bottom);
__gdi_entry BOOL RestoreDC(HDC hdc, int nSavedDC);
__gdi_entry HDC ResetDCA(HDC hdc, DEVMODEA * lpdm);
__gdi_entry HDC ResetDCW(HDC hdc, DEVMODEW * lpdm);
static const int ResetDC = ResetDCA;
__gdi_entry UINT RealizePalette(HDC hdc);
BOOL RemoveFontResourceA(LPCSTR lpFileName);
BOOL RemoveFontResourceW(LPCWSTR lpFileName);
static const int RemoveFontResource = RemoveFontResourceA;
__gdi_entry BOOL RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height);
__gdi_entry BOOL ResizePalette(HPALETTE hpal, UINT n);
__gdi_entry int SaveDC(HDC hdc);
__gdi_entry int SelectClipRgn(HDC hdc, HRGN hrgn);
int ExtSelectClipRgn(HDC hdc, HRGN hrgn, int mode);
int SetMetaRgn(HDC hdc);
__gdi_entry HGDIOBJ SelectObject(HDC hdc, HGDIOBJ h);
__gdi_entry HPALETTE SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
__gdi_entry COLORREF SetBkColor(HDC hdc, COLORREF color);
COLORREF SetDCBrushColor(HDC hdc, COLORREF color);
COLORREF SetDCPenColor(HDC hdc, COLORREF color);
__gdi_entry int SetBkMode(HDC hdc, int mode);
LONG 
SetBitmapBits(
    HBITMAP hbm,
    DWORD cb,
    VOID *pvBits);
UINT SetBoundsRect(HDC hdc, RECT * lprect, UINT flags);
int SetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, VOID *lpBits, BITMAPINFO * lpbmi, UINT ColorUse);
__gdi_entry int SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
        int ySrc, UINT StartScan, UINT cLines, VOID * lpvBits, BITMAPINFO * lpbmi, UINT ColorUse);
__gdi_entry DWORD SetMapperFlags(HDC hdc, DWORD flags);
int SetGraphicsMode(HDC hdc, int iMode);
__gdi_entry int SetMapMode(HDC hdc, int iMode);
__gdi_entry DWORD SetLayout(HDC hdc, DWORD l);
DWORD GetLayout(HDC hdc);
HMETAFILE SetMetaFileBitsEx(UINT cbBuffer, BYTE *lpData);
__gdi_entry UINT SetPaletteEntries( HPALETTE hpal,
                                            UINT iStart,
                                            UINT cEntries,
                                            PALETTEENTRY *pPalEntries);
__gdi_entry COLORREF SetPixel(HDC hdc, int x, int y, COLORREF color);
BOOL SetPixelV(HDC hdc, int x, int y, COLORREF color);
BOOL SetPixelFormat(HDC hdc, int format, PIXELFORMATDESCRIPTOR * ppfd);
__gdi_entry int SetPolyFillMode(HDC hdc, int mode);
__gdi_entry BOOL StretchBlt(HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
BOOL SetRectRgn(HRGN hrgn, int left, int top, int right, int bottom);
__gdi_entry int StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
        VOID * lpBits, BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
__gdi_entry int SetROP2(HDC hdc, int rop2);
__gdi_entry int SetStretchBltMode(HDC hdc, int mode);
UINT SetSystemPaletteUse(HDC hdc, UINT use);
__gdi_entry int SetTextCharacterExtra(HDC hdc, int extra);
__gdi_entry COLORREF SetTextColor(HDC hdc, COLORREF color);
__gdi_entry UINT SetTextAlign(HDC hdc, UINT align);
__gdi_entry BOOL SetTextJustification(HDC hdc, int extra, int count);
BOOL UpdateColors(HDC hdc);
typedef USHORT COLOR16;
typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;
typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;
typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;
typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
static const int AC_SRC_OVER = 0x00;
static const int AC_SRC_ALPHA = 0x01;
BOOL AlphaBlend(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    BLENDFUNCTION ftn);
BOOL TransparentBlt(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    UINT crTransparent);
static const int GRADIENT_FILL_RECT_H = 0x00000000;
static const int GRADIENT_FILL_RECT_V = 0x00000001;
static const int GRADIENT_FILL_TRIANGLE = 0x00000002;
static const int GRADIENT_FILL_OP_FLAG = 0x000000ff;
BOOL
GradientFill(
    HDC hdc,
    PTRIVERTEX pVertex,
    ULONG nVertex,
    PVOID pMesh,
    ULONG nMesh,
    ULONG ulMode
    );
BOOL GdiAlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
BOOL GdiTransparentBlt(HDC hdcDest,int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                           int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
BOOL GdiGradientFill( HDC hdc,
                                        PTRIVERTEX pVertex,
                                        ULONG nVertex,
                                        PVOID pMesh,
                                        ULONG nCount,
                                        ULONG ulMode);
BOOL PlayMetaFileRecord( HDC hdc,
                                            LPHANDLETABLE lpHandleTable,
                                            LPMETARECORD lpMR,
                                            UINT noObjs);
typedef int (CALLBACK* MFENUMPROC)( HDC hdc, HANDLETABLE FAR* lpht, METARECORD FAR* lpMR, int nObj, LPARAM param);
BOOL EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);
typedef int (CALLBACK* ENHMFENUMPROC)(HDC hdc, HANDLETABLE FAR* lpht, ENHMETARECORD * lpmr, int nHandles, LPARAM data);
HENHMETAFILE CloseEnhMetaFile( HDC hdc);
HENHMETAFILE CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
HENHMETAFILE CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);
static const int CopyEnhMetaFile = CopyEnhMetaFileA;
HDC CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, RECT *lprc, LPCSTR lpDesc);
HDC CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, RECT *lprc, LPCWSTR lpDesc);
static const int CreateEnhMetaFile = CreateEnhMetaFileA;
BOOL DeleteEnhMetaFile( HENHMETAFILE hmf);
BOOL EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                        LPVOID param, RECT * lpRect);
HENHMETAFILE GetEnhMetaFileA( LPCSTR lpName);
HENHMETAFILE GetEnhMetaFileW( LPCWSTR lpName);
static const int GetEnhMetaFile = GetEnhMetaFileA;
UINT GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                            UINT nSize,
                                            LPBYTE lpData);
UINT GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                    UINT cchBuffer,
                                                    LPSTR lpDescription);
UINT GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                    UINT cchBuffer,
                                                    LPWSTR lpDescription);
static const int GetEnhMetaFileDescription = GetEnhMetaFileDescriptionA;
UINT GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                UINT nSize,
                                                LPENHMETAHEADER lpEnhMetaHeader);
UINT GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,
                                                    UINT nNumEntries,
                                                    LPPALETTEENTRY lpPaletteEntries);
UINT GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                    UINT cbBuffer,
                                                    PIXELFORMATDESCRIPTOR *ppfd);
UINT GetWinMetaFileBits( HENHMETAFILE hemf,
                                            UINT cbData16,
                                            LPBYTE pData16,
                                            INT iMapMode,
                                            HDC hdcRef);
BOOL PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, RECT * lprect);
BOOL PlayEnhMetaFileRecord( HDC hdc,
                                                LPHANDLETABLE pht,
                                                ENHMETARECORD *pmr,
                                                UINT cht);
HENHMETAFILE SetEnhMetaFileBits( UINT nSize,
                                                    BYTE * pb);
HENHMETAFILE SetWinMetaFileBits( UINT nSize,
                                                    BYTE *lpMeta16Data,
                                                    HDC hdcRef,
                                                    METAFILEPICT *lpMFP);
BOOL GdiComment(HDC hdc, UINT nSize, BYTE *lpData);
BOOL GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
BOOL GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
static const int GetTextMetrics = GetTextMetricsA;
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, FAR *LPDIBSECTION, *PDIBSECTION;
BOOL AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
BOOL PolyPolyline(HDC hdc, POINT *apt, DWORD *asz, DWORD csz);
BOOL GetWorldTransform( HDC hdc, LPXFORM lpxf);
BOOL SetWorldTransform( HDC hdc, XFORM * lpxf);
BOOL ModifyWorldTransform( HDC hdc, XFORM * lpxf, DWORD mode);
BOOL CombineTransform( LPXFORM lpxfOut, XFORM *lpxf1, XFORM *lpxf2);
HBITMAP CreateDIBSection(HDC hdc, BITMAPINFO *lpbmi, UINT usage, VOID **ppvBits, HANDLE hSection, DWORD offset);
__range(0,cEntries)
UINT GetDIBColorTable( HDC hdc,
                                        UINT iStart,
                                        UINT cEntries,
                                        RGBQUAD *prgbq);
UINT SetDIBColorTable( HDC hdc,
                                        UINT iStart,
                                        UINT cEntries,
                                        RGBQUAD *prgbq);
static const int CA_NEGATIVE = 0x0001;
static const int CA_LOG_FILTER = 0x0002;
static const int ILLUMINANT_DEVICE_DEFAULT = 0;
static const int ILLUMINANT_A = 1;
static const int ILLUMINANT_B = 2;
static const int ILLUMINANT_C = 3;
static const int ILLUMINANT_D50 = 4;
static const int ILLUMINANT_D55 = 5;
static const int ILLUMINANT_D65 = 6;
static const int ILLUMINANT_D75 = 7;
static const int ILLUMINANT_F2 = 8;
static const int ILLUMINANT_MAX_INDEX = ILLUMINANT_F2;
static const int ILLUMINANT_TUNGSTEN = ILLUMINANT_A;
static const int ILLUMINANT_DAYLIGHT = ILLUMINANT_C;
static const int ILLUMINANT_FLUORESCENT = ILLUMINANT_F2;
static const int ILLUMINANT_NTSC = ILLUMINANT_C;
static const int RGB_GAMMA_MIN = (WORD)02500;
static const int RGB_GAMMA_MAX = (WORD)65000;
static const int REFERENCE_WHITE_MIN = (WORD)6000;
static const int REFERENCE_WHITE_MAX = (WORD)10000;
static const int REFERENCE_BLACK_MIN = (WORD)0;
static const int REFERENCE_BLACK_MAX = (WORD)4000;
static const int COLOR_ADJ_MIN = (SHORT)-100;
static const int COLOR_ADJ_MAX = (SHORT)100;
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, FAR *LPCOLORADJUSTMENT;
BOOL SetColorAdjustment( HDC hdc, COLORADJUSTMENT *lpca);
BOOL GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
HPALETTE CreateHalftonePalette( HDC hdc);
typedef ABORTPROC;
typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
} DOCINFOW, *LPDOCINFOW;
typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
static const int DI_APPBANDING = 0x00000001;
static const int DI_ROPS_READ_DESTINATION = 0x00000002;
__gdi_entry int StartDocA(HDC hdc, DOCINFOA *lpdi);
__gdi_entry int StartDocW(HDC hdc, DOCINFOW *lpdi);
static const int StartDoc = StartDocA;
__gdi_entry int EndDoc(HDC hdc);
__gdi_entry int StartPage(HDC hdc);
__gdi_entry int EndPage(HDC hdc);
__gdi_entry int AbortDoc(HDC hdc);
int SetAbortProc(HDC hdc, ABORTPROC proc);
BOOL AbortPath(HDC hdc);
BOOL ArcTo(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
BOOL BeginPath(HDC hdc);
BOOL CloseFigure(HDC hdc);
BOOL EndPath(HDC hdc);
BOOL FillPath(HDC hdc);
BOOL FlattenPath(HDC hdc);
int GetPath(HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
HRGN PathToRegion(HDC hdc);
BOOL PolyDraw(HDC hdc, POINT * apt, BYTE * aj, int cpt);
BOOL SelectClipPath(HDC hdc, int mode);
int SetArcDirection(HDC hdc, int dir);
BOOL SetMiterLimit(HDC hdc, FLOAT limit, PFLOAT old);
BOOL StrokeAndFillPath(HDC hdc);
BOOL StrokePath(HDC hdc);
BOOL WidenPath(HDC hdc);
HPEN ExtCreatePen( DWORD iPenStyle,
                                    DWORD cWidth,
                                    LOGBRUSH *plbrush,
                                    DWORD cStyle,
                                    DWORD *pstyle);
BOOL GetMiterLimit(HDC hdc, PFLOAT plimit);
int GetArcDirection(HDC hdc);
int GetObjectA(HANDLE h, int c, LPVOID pv);
int GetObjectW(HANDLE h, int c, LPVOID pv);
static const int GetObject = GetObjectA;
__gdi_entry BOOL MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
__gdi_entry BOOL TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
__gdi_entry BOOL TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);
static const int TextOut = TextOutA;
__gdi_entry BOOL ExtTextOutA( HDC hdc, int x, int y, UINT options, RECT * lprect, LPCSTR lpString, UINT c, INT * lpDx);
__gdi_entry BOOL ExtTextOutW( HDC hdc, int x, int y, UINT options, RECT * lprect, LPCWSTR lpString, UINT c, INT * lpDx);
static const int ExtTextOut = ExtTextOutA;
BOOL PolyTextOutA(HDC hdc, POLYTEXTA * ppt, int nstrings);
BOOL PolyTextOutW(HDC hdc, POLYTEXTW * ppt, int nstrings);
static const int PolyTextOut = PolyTextOutA;
HRGN CreatePolygonRgn( POINT *pptl,
                                            int cPoint,
                                            int iMode);
BOOL DPtoLP( HDC hdc, LPPOINT lppt, int c);
BOOL LPtoDP( HDC hdc, LPPOINT lppt, int c);
__gdi_entry BOOL Polygon(HDC hdc, POINT *apt, int cpt);
__gdi_entry BOOL Polyline(HDC hdc, POINT *apt, int cpt);
BOOL PolyBezier(HDC hdc, POINT * apt, DWORD cpt);
BOOL PolyBezierTo(HDC hdc, POINT * apt, DWORD cpt);
BOOL PolylineTo(HDC hdc, POINT * apt, DWORD cpt);
__gdi_entry BOOL SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
__gdi_entry BOOL SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
__gdi_entry BOOL SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
__gdi_entry BOOL SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
__gdi_entry BOOL OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
__gdi_entry BOOL OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
__gdi_entry BOOL ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
__gdi_entry BOOL ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
BOOL SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
BOOL SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
int GetTextFaceA( HDC hdc, int c, LPSTR lpName);
int GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
static const int GetTextFace = GetTextFaceA;
static const int FONTMAPPER_MAX = 10;
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;
DWORD GetKerningPairsA( HDC hdc,
                                            DWORD nPairs,
                                            LPKERNINGPAIR lpKernPair);
DWORD GetKerningPairsW( HDC hdc,
                                            DWORD nPairs,
                                            LPKERNINGPAIR lpKernPair);
static const int GetKerningPairs = GetKerningPairsA;
BOOL GetDCOrgEx( HDC hdc, LPPOINT lppt);
BOOL FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
BOOL UnrealizeObject( HGDIOBJ h);
BOOL GdiFlush(void);
DWORD GdiSetBatchLimit( DWORD dw);
DWORD GdiGetBatchLimit(void);
static const int ICM_OFF = 1;
static const int ICM_ON = 2;
static const int ICM_QUERY = 3;
static const int ICM_DONE_OUTSIDEDC = 4;
typedef int (CALLBACK* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (CALLBACK* ICMENUMPROCW)(LPWSTR, LPARAM);
static const int ICMENUMPROC = ICMENUMPROCA;
int SetICMMode( HDC hdc, int mode);
BOOL CheckColorsInGamut( HDC hdc,
                                                    LPRGBTRIPLE lpRGBTriple,
                                                    LPVOID dlpBuffer,
                                                    DWORD nCount);
HCOLORSPACE GetColorSpace( HDC hdc);
BOOL GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                LPLOGCOLORSPACEA lpBuffer,
                                                DWORD nSize);
BOOL GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                LPLOGCOLORSPACEW lpBuffer,
                                                DWORD nSize);
static const int GetLogColorSpace = GetLogColorSpaceA;
HCOLORSPACE CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
HCOLORSPACE CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);
static const int CreateColorSpace = CreateColorSpaceA;
HCOLORSPACE SetColorSpace( HDC hdc, HCOLORSPACE hcs);
BOOL DeleteColorSpace( HCOLORSPACE hcs);
BOOL GetICMProfileA( HDC hdc,
                                                LPDWORD pBufSize,
                                                LPSTR pszFilename);
BOOL GetICMProfileW( HDC hdc,
                                                LPDWORD pBufSize,
                                                LPWSTR pszFilename);
static const int GetICMProfile = GetICMProfileA;
BOOL SetICMProfileA( HDC hdc, LPSTR lpFileName);
BOOL SetICMProfileW( HDC hdc, LPWSTR lpFileName);
static const int SetICMProfile = SetICMProfileA;
BOOL GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
BOOL SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
BOOL ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
int EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
int EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);
static const int EnumICMProfiles = EnumICMProfilesA;
BOOL UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
BOOL UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
static const int UpdateICMRegKey = UpdateICMRegKeyA;
BOOL ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
static const int ENHMETA_SIGNATURE = 0x464D4520;
static const int ENHMETA_STOCK_OBJECT = 0x80000000;
static const int EMR_HEADER = 1;
static const int EMR_POLYBEZIER = 2;
static const int EMR_POLYGON = 3;
static const int EMR_POLYLINE = 4;
static const int EMR_POLYBEZIERTO = 5;
static const int EMR_POLYLINETO = 6;
static const int EMR_POLYPOLYLINE = 7;
static const int EMR_POLYPOLYGON = 8;
static const int EMR_SETWINDOWEXTEX = 9;
static const int EMR_SETWINDOWORGEX = 10;
static const int EMR_SETVIEWPORTEXTEX = 11;
static const int EMR_SETVIEWPORTORGEX = 12;
static const int EMR_SETBRUSHORGEX = 13;
static const int EMR_EOF = 14;
static const int EMR_SETPIXELV = 15;
static const int EMR_SETMAPPERFLAGS = 16;
static const int EMR_SETMAPMODE = 17;
static const int EMR_SETBKMODE = 18;
static const int EMR_SETPOLYFILLMODE = 19;
static const int EMR_SETROP2 = 20;
static const int EMR_SETSTRETCHBLTMODE = 21;
static const int EMR_SETTEXTALIGN = 22;
static const int EMR_SETCOLORADJUSTMENT = 23;
static const int EMR_SETTEXTCOLOR = 24;
static const int EMR_SETBKCOLOR = 25;
static const int EMR_OFFSETCLIPRGN = 26;
static const int EMR_MOVETOEX = 27;
static const int EMR_SETMETARGN = 28;
static const int EMR_EXCLUDECLIPRECT = 29;
static const int EMR_INTERSECTCLIPRECT = 30;
static const int EMR_SCALEVIEWPORTEXTEX = 31;
static const int EMR_SCALEWINDOWEXTEX = 32;
static const int EMR_SAVEDC = 33;
static const int EMR_RESTOREDC = 34;
static const int EMR_SETWORLDTRANSFORM = 35;
static const int EMR_MODIFYWORLDTRANSFORM = 36;
static const int EMR_SELECTOBJECT = 37;
static const int EMR_CREATEPEN = 38;
static const int EMR_CREATEBRUSHINDIRECT = 39;
static const int EMR_DELETEOBJECT = 40;
static const int EMR_ANGLEARC = 41;
static const int EMR_ELLIPSE = 42;
static const int EMR_RECTANGLE = 43;
static const int EMR_ROUNDRECT = 44;
static const int EMR_ARC = 45;
static const int EMR_CHORD = 46;
static const int EMR_PIE = 47;
static const int EMR_SELECTPALETTE = 48;
static const int EMR_CREATEPALETTE = 49;
static const int EMR_SETPALETTEENTRIES = 50;
static const int EMR_RESIZEPALETTE = 51;
static const int EMR_REALIZEPALETTE = 52;
static const int EMR_EXTFLOODFILL = 53;
static const int EMR_LINETO = 54;
static const int EMR_ARCTO = 55;
static const int EMR_POLYDRAW = 56;
static const int EMR_SETARCDIRECTION = 57;
static const int EMR_SETMITERLIMIT = 58;
static const int EMR_BEGINPATH = 59;
static const int EMR_ENDPATH = 60;
static const int EMR_CLOSEFIGURE = 61;
static const int EMR_FILLPATH = 62;
static const int EMR_STROKEANDFILLPATH = 63;
static const int EMR_STROKEPATH = 64;
static const int EMR_FLATTENPATH = 65;
static const int EMR_WIDENPATH = 66;
static const int EMR_SELECTCLIPPATH = 67;
static const int EMR_ABORTPATH = 68;
static const int EMR_GDICOMMENT = 70;
static const int EMR_FILLRGN = 71;
static const int EMR_FRAMERGN = 72;
static const int EMR_INVERTRGN = 73;
static const int EMR_PAINTRGN = 74;
static const int EMR_EXTSELECTCLIPRGN = 75;
static const int EMR_BITBLT = 76;
static const int EMR_STRETCHBLT = 77;
static const int EMR_MASKBLT = 78;
static const int EMR_PLGBLT = 79;
static const int EMR_SETDIBITSTODEVICE = 80;
static const int EMR_STRETCHDIBITS = 81;
static const int EMR_EXTCREATEFONTINDIRECTW = 82;
static const int EMR_EXTTEXTOUTA = 83;
static const int EMR_EXTTEXTOUTW = 84;
static const int EMR_POLYBEZIER16 = 85;
static const int EMR_POLYGON16 = 86;
static const int EMR_POLYLINE16 = 87;
static const int EMR_POLYBEZIERTO16 = 88;
static const int EMR_POLYLINETO16 = 89;
static const int EMR_POLYPOLYLINE16 = 90;
static const int EMR_POLYPOLYGON16 = 91;
static const int EMR_POLYDRAW16 = 92;
static const int EMR_CREATEMONOBRUSH = 93;
static const int EMR_CREATEDIBPATTERNBRUSHPT = 94;
static const int EMR_EXTCREATEPEN = 95;
static const int EMR_POLYTEXTOUTA = 96;
static const int EMR_POLYTEXTOUTW = 97;
static const int EMR_SETICMMODE = 98;
static const int EMR_CREATECOLORSPACE = 99;
static const int EMR_SETCOLORSPACE = 100;
static const int EMR_DELETECOLORSPACE = 101;
static const int EMR_GLSRECORD = 102;
static const int EMR_GLSBOUNDEDRECORD = 103;
static const int EMR_PIXELFORMAT = 104;
static const int EMR_RESERVED_105 = 105;
static const int EMR_RESERVED_106 = 106;
static const int EMR_RESERVED_107 = 107;
static const int EMR_RESERVED_108 = 108;
static const int EMR_RESERVED_109 = 109;
static const int EMR_RESERVED_110 = 110;
static const int EMR_COLORCORRECTPALETTE = 111;
static const int EMR_SETICMPROFILEA = 112;
static const int EMR_SETICMPROFILEW = 113;
static const int EMR_ALPHABLEND = 114;
static const int EMR_SETLAYOUT = 115;
static const int EMR_TRANSPARENTBLT = 116;
static const int EMR_RESERVED_117 = 117;
static const int EMR_GRADIENTFILL = 118;
static const int EMR_RESERVED_119 = 119;
static const int EMR_RESERVED_120 = 120;
static const int EMR_COLORMATCHTOTARGETW = 121;
static const int EMR_CREATECOLORSPACEW = 122;
static const int EMR_MIN = 1;
static const int EMR_MAX = 122;
typedef struct tagEMR
{
    DWORD iType; // Enhanced metafile record type
    DWORD nSize; // Length of the record in bytes.
} EMR, *PEMR;
typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString; // Offset to the string
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx; // Offset to the inter-character spacing array.
} EMRTEXT, *PEMRTEXT;
typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,
  EMRSETLAYOUT, *PEMRSETLAYOUT,
  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;
typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;
typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative; // Specifies a relative instance
} EMRRESTOREDC, *PEMRRESTOREDC;
typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection; // Specifies the arc direction in the
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;
typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;
typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject; // Object handle index
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;
typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index, background mode only
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;
typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;
typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];// The peFlags fields do not contain any flags
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;
typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;
typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries; // Number of palette entries
    DWORD offPalEntries; // Offset to the palette entries
    DWORD nSizeLast; // Same as nSize and must be the last DWORD
} EMREOF, *PEMREOF;
typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;
typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;
typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;
typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;
typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;
typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;
typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;
typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;
typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;
typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;
typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;
typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cptl; // Number of points
    POINTL aptl[1]; // Array of points
    BYTE abTypes[1]; // Array of point types
} EMRPOLYDRAW, *PEMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cpts; // Number of points
    POINTS apts[1]; // Array of points
    BYTE abTypes[1]; // Array of point types
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nPolys; // Number of polys
    DWORD cptl; // Total number of points in all polys
    DWORD aPolyCounts[1]; // Array of point counts for each poly
    POINTL aptl[1]; // Array of points
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nPolys; // Number of polys
    DWORD cpts; // Total number of points in all polys
    DWORD aPolyCounts[1]; // Array of point counts for each poly
    POINTS apts[1]; // Array of points
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;
typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;
typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    DWORD ihBrush; // Brush handle index
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;
typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    DWORD ihBrush; // Brush handle index
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;
typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData; // Size of region data in bytes
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;
typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD iGraphicsMode; // Current graphics mode
    FLOAT exScale; // X and Y scales from Page units to .01mm units
    FLOAT eyScale; //   if graphics mode is GM_COMPATIBLE.
    EMRTEXT emrtext; // This is followed by the string and spacing
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;
typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD iGraphicsMode; // Current graphics mode
    FLOAT exScale; // X and Y scales from Page units to .01mm units
    FLOAT eyScale; //   if graphics mode is GM_COMPATIBLE.
    LONG cStrings;
    EMRTEXT aemrtext[1]; // Array of EMRTEXT structures.  This is
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;
typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
} EMRBITBLT, *PEMRBITBLT;
typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;
typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask; // Mask bitmap info color table usage
    DWORD offBmiMask; // Offset to the mask BITMAPINFO structure if any
    DWORD cbBmiMask; // Size of the mask BITMAPINFO structure if any
    DWORD offBitsMask; // Offset to the mask bitmap bits if any
    DWORD cbBitsMask; // Size of the mask bitmap bits if any
} EMRMASKBLT, *PEMRMASKBLT;
typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask; // Mask bitmap info color table usage
    DWORD offBmiMask; // Offset to the mask BITMAPINFO structure if any
    DWORD cbBmiMask; // Size of the mask BITMAPINFO structure if any
    DWORD offBitsMask; // Offset to the mask bitmap bits if any
    DWORD cbBitsMask; // Size of the mask bitmap bits if any
} EMRPLGBLT, *PEMRPLGBLT;
typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;
typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont; // Font handle index
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;
typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    LOGPALETTE lgpl; // The peFlags fields in the palette entries
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;
typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen; // Pen handle index
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;
typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen; // Pen handle index
    DWORD offBmi; // Offset to the BITMAPINFO structure if any
    DWORD cbBmi; // Size of the BITMAPINFO structure if any
    DWORD offBits; // Offset to the brush bitmap bits if any
    DWORD cbBits; // Size of the brush bitmap bits if any
    EXTLOGPEN32 elp; // The extended pen with the style array.
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;
typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    LOGBRUSH32 lb; // The style must be BS_SOLID, BS_HOLLOW,
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;
typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    DWORD iUsage; // Bitmap info color table usage
    DWORD offBmi; // Offset to the BITMAPINFO structure
    DWORD cbBmi; // Size of the BITMAPINFO structure
    DWORD offBits; // Offset to the bitmap bits
    DWORD cbBits; // Size of the bitmap bits
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    DWORD iUsage; // Bitmap info color table usage
    DWORD offBmi; // Offset to the BITMAPINFO structure
    DWORD cbBmi; // Size of the BITMAPINFO structure
    DWORD offBits; // Offset to the bitmap bits
    DWORD cbBits; // Size of the bitmap bits
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRFORMAT
{
    DWORD dSignature; // Format signature, e.g. ENHMETA_SIGNATURE.
    DWORD nVersion; // Format version number.
    DWORD cbData; // Size of data in bytes.
    DWORD offData; // Offset to data from GDICOMMENT_IDENTIFIER.
} EMRFORMAT, *PEMRFORMAT;
typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;
typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds; // Bounds in recording coordinates
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;
typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
    LOGCOLORSPACEA lcs; // Ansi version of LOGCOLORSPACE
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape; // Escape code
    INT cbEscData; // Size of escape data
    BYTE EscData[1]; // Escape data
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;
typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape; // Escape code
    INT cbDriver; // Size of driver name
    INT cbEscData; // Size of escape data
    BYTE EscData[1]; // Driver name and Escape data
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;
static const int SETICMPROFILE_EMBEDED = 0x00000001;
typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags; // flags
    DWORD cbName; // Size of desired profile name
    DWORD cbData; // Size of raw profile data if attached
    BYTE Data[1]; // Array size is cbName + cbData
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;
static const int CREATECOLORSPACE_EMBEDED = 0x00000001;
typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
    LOGCOLORSPACEW lcs; // Unicode version of logical color space structure
    DWORD dwFlags; // flags
    DWORD cbData; // size of raw source profile data if attached
    BYTE Data[1]; // Array size is cbData
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;
static const int COLORMATCHTOTARGET_EMBEDED = 0x00000001;
typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction; // CS_ENABLE, CS_DISABLE or CS_DELETE_TRANSFORM
    DWORD dwFlags; // flags
    DWORD cbName; // Size of desired target profile name
    DWORD cbData; // Size of raw target profile data if attached
    BYTE Data[1]; // Array size is cbName + cbData
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;
typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette; // Palette handle index
    DWORD nFirstEntry; // Index of first entry to correct
    DWORD nPalEntries; // Number of palette entries to correct
    DWORD nReserved; // Reserved
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;
typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;
typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
static const int GDICOMMENT_IDENTIFIER = 0x43494447;
static const int GDICOMMENT_WINDOWS_METAFILE = 0x80000001;
static const int GDICOMMENT_BEGINGROUP = 0x00000002;
static const int GDICOMMENT_ENDGROUP = 0x00000003;
static const int GDICOMMENT_MULTIFORMATS = 0x40000004;
static const int EPS_SIGNATURE = 0x46535045;
static const int GDICOMMENT_UNICODE_STRING = 0x00000040;
static const int GDICOMMENT_UNICODE_END = 0x00000080;
BOOL wglCopyContext(HGLRC, HGLRC, UINT);
HGLRC wglCreateContext(HDC);
HGLRC wglCreateLayerContext(HDC, int);
BOOL wglDeleteContext(HGLRC);
HGLRC wglGetCurrentContext(VOID);
HDC wglGetCurrentDC(VOID);
PROC wglGetProcAddress(LPCSTR);
BOOL wglMakeCurrent(HDC, HGLRC);
BOOL wglShareLists(HGLRC, HGLRC);
BOOL wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
BOOL wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
static const int wglUseFontBitmaps = wglUseFontBitmapsA;
BOOL SwapBuffers(HDC);
typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;
typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, FAR *LPGLYPHMETRICSFLOAT;
static const int WGL_FONT_LINES = 0;
static const int WGL_FONT_POLYGONS = 1;
BOOL wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
BOOL wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
static const int wglUseFontOutlines = wglUseFontOutlinesA;
typedef struct tagLAYERPLANEDESCRIPTOR { // lpd
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, FAR *LPLAYERPLANEDESCRIPTOR;
static const int LPD_DOUBLEBUFFER = 0x00000001;
static const int LPD_STEREO = 0x00000002;
static const int LPD_SUPPORT_GDI = 0x00000010;
static const int LPD_SUPPORT_OPENGL = 0x00000020;
static const int LPD_SHARE_DEPTH = 0x00000040;
static const int LPD_SHARE_STENCIL = 0x00000080;
static const int LPD_SHARE_ACCUM = 0x00000100;
static const int LPD_SWAP_EXCHANGE = 0x00000200;
static const int LPD_SWAP_COPY = 0x00000400;
static const int LPD_TRANSPARENT = 0x00001000;
static const int LPD_TYPE_RGBA = 0;
static const int LPD_TYPE_COLORINDEX = 1;
static const int WGL_SWAP_MAIN_PLANE = 0x00000001;
static const int WGL_SWAP_OVERLAY1 = 0x00000002;
static const int WGL_SWAP_OVERLAY2 = 0x00000004;
static const int WGL_SWAP_OVERLAY3 = 0x00000008;
static const int WGL_SWAP_OVERLAY4 = 0x00000010;
static const int WGL_SWAP_OVERLAY5 = 0x00000020;
static const int WGL_SWAP_OVERLAY6 = 0x00000040;
static const int WGL_SWAP_OVERLAY7 = 0x00000080;
static const int WGL_SWAP_OVERLAY8 = 0x00000100;
static const int WGL_SWAP_OVERLAY9 = 0x00000200;
static const int WGL_SWAP_OVERLAY10 = 0x00000400;
static const int WGL_SWAP_OVERLAY11 = 0x00000800;
static const int WGL_SWAP_OVERLAY12 = 0x00001000;
static const int WGL_SWAP_OVERLAY13 = 0x00002000;
static const int WGL_SWAP_OVERLAY14 = 0x00004000;
static const int WGL_SWAP_OVERLAY15 = 0x00008000;
static const int WGL_SWAP_UNDERLAY1 = 0x00010000;
static const int WGL_SWAP_UNDERLAY2 = 0x00020000;
static const int WGL_SWAP_UNDERLAY3 = 0x00040000;
static const int WGL_SWAP_UNDERLAY4 = 0x00080000;
static const int WGL_SWAP_UNDERLAY5 = 0x00100000;
static const int WGL_SWAP_UNDERLAY6 = 0x00200000;
static const int WGL_SWAP_UNDERLAY7 = 0x00400000;
static const int WGL_SWAP_UNDERLAY8 = 0x00800000;
static const int WGL_SWAP_UNDERLAY9 = 0x01000000;
static const int WGL_SWAP_UNDERLAY10 = 0x02000000;
static const int WGL_SWAP_UNDERLAY11 = 0x04000000;
static const int WGL_SWAP_UNDERLAY12 = 0x08000000;
static const int WGL_SWAP_UNDERLAY13 = 0x10000000;
static const int WGL_SWAP_UNDERLAY14 = 0x20000000;
static const int WGL_SWAP_UNDERLAY15 = 0x40000000;
BOOL wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
int wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
int wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
BOOL wglRealizeLayerPalette(HDC, int, BOOL);
BOOL wglSwapLayerBuffers(HDC, UINT);
typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, FAR *LPWGLSWAP;
static const int WGL_SWAPMULTIPLE_MAX = 16;
DWORD wglSwapMultipleBuffers(UINT, WGLSWAP *);
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;
typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;
typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
static const int RIGHT_ALT_PRESSED = 0x0001;
static const int LEFT_ALT_PRESSED = 0x0002;
static const int RIGHT_CTRL_PRESSED = 0x0004;
static const int LEFT_CTRL_PRESSED = 0x0008;
static const int SHIFT_PRESSED = 0x0010;
static const int NUMLOCK_ON = 0x0020;
static const int SCROLLLOCK_ON = 0x0040;
static const int CAPSLOCK_ON = 0x0080;
static const int ENHANCED_KEY = 0x0100;
static const int NLS_DBCSCHAR = 0x00010000;
static const int NLS_ALPHANUMERIC = 0x00000000;
static const int NLS_KATAKANA = 0x00020000;
static const int NLS_HIRAGANA = 0x00040000;
static const int NLS_ROMAN = 0x00400000;
static const int NLS_IME_CONVERSION = 0x00800000;
static const int NLS_IME_DISABLE = 0x20000000;
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
static const int FROM_LEFT_1ST_BUTTON_PRESSED = 0x0001;
static const int RIGHTMOST_BUTTON_PRESSED = 0x0002;
static const int FROM_LEFT_2ND_BUTTON_PRESSED = 0x0004;
static const int FROM_LEFT_3RD_BUTTON_PRESSED = 0x0008;
static const int FROM_LEFT_4TH_BUTTON_PRESSED = 0x0010;
static const int MOUSE_MOVED = 0x0001;
static const int DOUBLE_CLICK = 0x0002;
static const int MOUSE_WHEELED = 0x0004;
static const int MOUSE_HWHEELED = 0x0008;
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;
typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;
typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
static const int KEY_EVENT = 0x0001;
static const int MOUSE_EVENT = 0x0002;
static const int WINDOW_BUFFER_SIZE_EVENT = 0x0004;
static const int MENU_EVENT = 0x0008;
static const int FOCUS_EVENT = 0x0010;
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
static const int FOREGROUND_BLUE = 0x0001;
static const int FOREGROUND_GREEN = 0x0002;
static const int FOREGROUND_RED = 0x0004;
static const int FOREGROUND_INTENSITY = 0x0008;
static const int BACKGROUND_BLUE = 0x0010;
static const int BACKGROUND_GREEN = 0x0020;
static const int BACKGROUND_RED = 0x0040;
static const int BACKGROUND_INTENSITY = 0x0080;
static const int COMMON_LVB_LEADING_BYTE = 0x0100;
static const int COMMON_LVB_TRAILING_BYTE = 0x0200;
static const int COMMON_LVB_GRID_HORIZONTAL = 0x0400;
static const int COMMON_LVB_GRID_LVERTICAL = 0x0800;
static const int COMMON_LVB_GRID_RVERTICAL = 0x1000;
static const int COMMON_LVB_REVERSE_VIDEO = 0x4000;
static const int COMMON_LVB_UNDERSCORE = 0x8000;
static const int COMMON_LVB_SBCSDBCS = 0x0300;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;
typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;
typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;
typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
static const int HISTORY_NO_DUP_FLAG = 0x1;
typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
static const int CONSOLE_NO_SELECTION = 0x0000;
static const int CONSOLE_SELECTION_IN_PROGRESS = 0x0001;
static const int CONSOLE_SELECTION_NOT_EMPTY = 0x0002;
static const int CONSOLE_MOUSE_SELECTION = 0x0004;
static const int CONSOLE_MOUSE_DOWN = 0x0008;
typedef
BOOL
(*PHANDLER_ROUTINE)(
    DWORD CtrlType
    );
static const int CTRL_C_EVENT = 0;
static const int CTRL_BREAK_EVENT = 1;
static const int CTRL_CLOSE_EVENT = 2;
static const int CTRL_LOGOFF_EVENT = 5;
static const int CTRL_SHUTDOWN_EVENT = 6;
static const int ENABLE_PROCESSED_INPUT = 0x0001;
static const int ENABLE_LINE_INPUT = 0x0002;
static const int ENABLE_ECHO_INPUT = 0x0004;
static const int ENABLE_WINDOW_INPUT = 0x0008;
static const int ENABLE_MOUSE_INPUT = 0x0010;
static const int ENABLE_INSERT_MODE = 0x0020;
static const int ENABLE_QUICK_EDIT_MODE = 0x0040;
static const int ENABLE_EXTENDED_FLAGS = 0x0080;
static const int ENABLE_AUTO_POSITION = 0x0100;
static const int ENABLE_PROCESSED_OUTPUT = 0x0001;
static const int ENABLE_WRAP_AT_EOL_OUTPUT = 0x0002;
WINBASEAPI
BOOL
PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
WINBASEAPI
BOOL
PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
static const int PeekConsoleInput = PeekConsoleInputA;
WINBASEAPI
BOOL
ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
WINBASEAPI
BOOL
ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
static const int ReadConsoleInput = ReadConsoleInputA;
WINBASEAPI
BOOL
WriteConsoleInputA(
    HANDLE hConsoleInput,
    INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
WINBASEAPI
BOOL
WriteConsoleInputW(
    HANDLE hConsoleInput,
    INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
static const int WriteConsoleInput = WriteConsoleInputA;
WINBASEAPI
BOOL
ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
WINBASEAPI
BOOL
ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
static const int ReadConsoleOutput = ReadConsoleOutputA;
WINBASEAPI
BOOL
WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
WINBASEAPI
BOOL
WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
static const int WriteConsoleOutput = WriteConsoleOutputA;
WINBASEAPI
BOOL
ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
WINBASEAPI
BOOL
ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
static const int ReadConsoleOutputCharacter = ReadConsoleOutputCharacterA;
WINBASEAPI
BOOL
ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead
    );
WINBASEAPI
BOOL
WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
WINBASEAPI
BOOL
WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
static const int WriteConsoleOutputCharacter = WriteConsoleOutputCharacterA;
WINBASEAPI
BOOL
WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD *lpAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );
WINBASEAPI
BOOL
FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    CHAR cCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
WINBASEAPI
BOOL
FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    WCHAR cCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
static const int FillConsoleOutputCharacter = FillConsoleOutputCharacterA;
WINBASEAPI
BOOL
FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD wAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );
WINBASEAPI
BOOL
GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode
    );
WINBASEAPI
BOOL
GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents
    );
static const int CONSOLE_REAL_OUTPUT_HANDLE = (LongToHandle(-2));
static const int CONSOLE_REAL_INPUT_HANDLE = (LongToHandle(-3));
WINBASEAPI
BOOL
GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );
WINBASEAPI
BOOL
GetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    , sizeof(CONSOLE_SCREEN_BUFFER_INFOEX) - sizeof(ULONG)) PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
WINBASEAPI
BOOL
SetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
WINBASEAPI
COORD
GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    );
WINBASEAPI
BOOL
GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );
WINBASEAPI
BOOL
GetCurrentConsoleFont(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );
WINBASEAPI
BOOL
GetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
WINBASEAPI
BOOL
SetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
WINBASEAPI
BOOL
GetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
WINBASEAPI
BOOL
SetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
WINBASEAPI
COORD
GetConsoleFontSize(
    HANDLE hConsoleOutput,
    DWORD nFont
    );
WINBASEAPI
BOOL
GetConsoleSelectionInfo(
    PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );
WINBASEAPI
BOOL
GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    );
WINBASEAPI
BOOL
SetConsoleMode(
    HANDLE hConsoleHandle,
    DWORD dwMode
    );
WINBASEAPI
BOOL
SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    );
WINBASEAPI
BOOL
FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    );
WINBASEAPI
BOOL
SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize
    );
WINBASEAPI
BOOL
SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition
    );
WINBASEAPI
BOOL
SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );
WINBASEAPI
BOOL
ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    SMALL_RECT *lpScrollRectangle,
    SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    CHAR_INFO *lpFill
    );
WINBASEAPI
BOOL
ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    SMALL_RECT *lpScrollRectangle,
    SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    CHAR_INFO *lpFill
    );
static const int ScrollConsoleScreenBuffer = ScrollConsoleScreenBufferA;
WINBASEAPI
BOOL
SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    BOOL bAbsolute,
    SMALL_RECT *lpConsoleWindow
    );
WINBASEAPI
BOOL
SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    WORD wAttributes
    );
WINBASEAPI
BOOL
SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    BOOL Add);
WINBASEAPI
BOOL
GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    DWORD dwProcessGroupId);
WINBASEAPI
BOOL
AllocConsole(
    VOID);
WINBASEAPI
BOOL
FreeConsole(
    VOID);
WINBASEAPI
BOOL
AttachConsole(
    DWORD dwProcessId);
static const int ATTACH_PARENT_PROCESS = ((DWORD)-1);
WINBASEAPI
DWORD
GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize
    );
WINBASEAPI
DWORD
GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize
    );
static const int GetConsoleTitle = GetConsoleTitleA;
WINBASEAPI
DWORD
GetConsoleOriginalTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize);
WINBASEAPI
DWORD
GetConsoleOriginalTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize);
static const int GetConsoleOriginalTitle = GetConsoleOriginalTitleA;
WINBASEAPI
BOOL
SetConsoleTitleA(
    LPCSTR lpConsoleTitle
    );
WINBASEAPI
BOOL
SetConsoleTitleW(
    LPCWSTR lpConsoleTitle
    );
static const int SetConsoleTitle = SetConsoleTitleA;
typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;
WINBASEAPI
BOOL
ReadConsoleA(
    HANDLE hConsoleInput,
    
       LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
WINBASEAPI
BOOL
ReadConsoleW(
    HANDLE hConsoleInput,
    
       LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
static const int ReadConsole = ReadConsoleA;
WINBASEAPI
BOOL
WriteConsoleA(
    HANDLE hConsoleOutput,
    VOID *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved);
WINBASEAPI
BOOL
WriteConsoleW(
    HANDLE hConsoleOutput,
    VOID *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved);
static const int WriteConsole = WriteConsoleA;
static const int CONSOLE_TEXTMODE_BUFFER = 1;
__allocator
WINBASEAPI
HANDLE
CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    SECURITY_ATTRIBUTES *lpSecurityAttributes,
    DWORD dwFlags,
    LPVOID lpScreenBufferData
    );
WINBASEAPI
UINT
GetConsoleCP(
    VOID);
WINBASEAPI
BOOL
SetConsoleCP(
    UINT wCodePageID
    );
WINBASEAPI
UINT
GetConsoleOutputCP(
    VOID);
WINBASEAPI
BOOL
SetConsoleOutputCP(
    UINT wCodePageID
    );
static const int CONSOLE_FULLSCREEN = 1;
static const int CONSOLE_FULLSCREEN_HARDWARE = 2;
WINBASEAPI
BOOL
APIENTRY
GetConsoleDisplayMode(
    LPDWORD lpModeFlags);
static const int CONSOLE_FULLSCREEN_MODE = 1;
static const int CONSOLE_WINDOWED_MODE = 2;
BOOL
APIENTRY
SetConsoleDisplayMode(
    HANDLE hConsoleOutput,
    DWORD dwFlags,
    PCOORD lpNewScreenBufferDimensions);
WINBASEAPI
HWND
APIENTRY
GetConsoleWindow(
    VOID
    );
WINBASEAPI
DWORD
APIENTRY
GetConsoleProcessList(
    LPDWORD lpdwProcessList,
    DWORD dwProcessCount);
WINBASEAPI
BOOL
APIENTRY
AddConsoleAliasA(
    LPSTR Source,
    LPSTR Target,
    LPSTR ExeName);
WINBASEAPI
BOOL
APIENTRY
AddConsoleAliasW(
    LPWSTR Source,
    LPWSTR Target,
    LPWSTR ExeName);
static const int AddConsoleAlias = AddConsoleAliasA;
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasA(
    LPSTR Source,
    LPSTR TargetBuffer,
    DWORD TargetBufferLength,
    LPSTR ExeName);
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasW(
    LPWSTR Source,
    LPWSTR TargetBuffer,
    DWORD TargetBufferLength,
    LPWSTR ExeName);
static const int GetConsoleAlias = GetConsoleAliasA;
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesLengthA(
    LPSTR ExeName);
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesLengthW(
    LPWSTR ExeName);
static const int GetConsoleAliasesLength = GetConsoleAliasesLengthA;
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesLengthA(
    VOID);
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesLengthW(
    VOID);
static const int GetConsoleAliasExesLength = GetConsoleAliasExesLengthA;
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesA(
    LPSTR AliasBuffer,
    DWORD AliasBufferLength,
    LPSTR ExeName);
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesW(
    LPWSTR AliasBuffer,
    DWORD AliasBufferLength,
    LPWSTR ExeName);
static const int GetConsoleAliases = GetConsoleAliasesA;
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesA(
    LPSTR ExeNameBuffer,
    DWORD ExeNameBufferLength);
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesW(
    LPWSTR ExeNameBuffer,
    DWORD ExeNameBufferLength);
static const int GetConsoleAliasExes = GetConsoleAliasExesA;
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
typedef long __time32_t; /* 32-bit time value */
typedef __int64 __time64_t; /* 64-bit time value */
typedef __time64_t time_t; /* time value */
typedef unsigned short _ino_t; /* i-node number (not used on DOS) */
typedef unsigned int _dev_t; /* device code */
typedef long _off_t; /* file offset value */
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int _USE_DECLSPECS_FOR_SAL = 0;
static const int _USE_ATTRIBUTES_FOR_SAL = 0;
static const int _In_ = _Pre1_impl_(_$notnull) _Deref_pre2_impl_(_$valid, _$readaccess);
static const int _In_opt_ = _Pre_opt_valid_ _Deref_pre_readonly_;
static const int _In_z_ = _Pre_z_ _Deref_pre_readonly_;
static const int _In_opt_z_ = _Pre_opt_z_ _Deref_pre_readonly_;
static const int _In_count_(size) = _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_count_(size) = _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_bytecount_(size) = _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_count_c_(size) = _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_count_c_(size) = _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_bytecount_c_(size) = _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_z_count_(size) = _Pre_z_ _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_(size) = _Pre_opt_z_ _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_(size) = _Pre_z_ _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_(size) = _Pre_opt_z_ _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_z_count_c_(size) = _Pre_z_ _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_c_(size) = _Pre_opt_z_ _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_c_(size) = _Pre_z_ _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_c_(size) = _Pre_opt_z_ _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_count_x_(size) = _Pre_count_x_(size) _Deref_pre_readonly_;
static const int _In_opt_count_x_(size) = _Pre_opt_count_x_(size) _Deref_pre_readonly_;
static const int _In_bytecount_x_(size) = _Pre_bytecount_x_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Deref_pre_readonly_;
static const int _Out_ = _Pre_cap_c_(1) _Pre_invalid_;
static const int _Out_opt_ = _Pre_opt_cap_c_(1) _Pre_invalid_;
static const int _Out_cap_(size) = _Pre_cap_(size) _Pre_invalid_;
static const int _Out_opt_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_;
static const int _Out_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_;
static const int _Out_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_;
static const int _Out_opt_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_;
static const int _Out_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_;
static const int _Out_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_opt_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_z_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_ptrdiff_cap_(size) = _Pre_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_opt_ptrdiff_cap_(size) = _Pre_opt_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_;
static const int _Out_opt_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_;
static const int _Out_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_;
static const int _Out_z_cap_(size) = _Pre_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_opt_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_opt_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_z_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_opt_z_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_z_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_opt_z_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_opt_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_opt_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_capcount_x_(capcount) = _Pre_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_opt_capcount_x_(capcount) = _Pre_opt_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_bytecapcount_x_(capcount) = _Pre_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_opt_bytecapcount_x_(capcount) = _Pre_opt_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_z_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_opt_z_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_z_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Out_opt_z_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Inout_ = _Prepost_valid_;
static const int _Inout_opt_ = _Prepost_opt_valid_;
static const int _Inout_z_ = _Prepost_z_;
static const int _Inout_opt_z_ = _Prepost_opt_z_;
static const int _Inout_count_(size) = _Prepost_count_(size);
static const int _Inout_opt_count_(size) = _Prepost_opt_count_(size);
static const int _Inout_bytecount_(size) = _Prepost_bytecount_(size);
static const int _Inout_opt_bytecount_(size) = _Prepost_opt_bytecount_(size);
static const int _Inout_count_c_(size) = _Prepost_count_c_(size);
static const int _Inout_opt_count_c_(size) = _Prepost_opt_count_c_(size);
static const int _Inout_bytecount_c_(size) = _Prepost_bytecount_c_(size);
static const int _Inout_opt_bytecount_c_(size) = _Prepost_opt_bytecount_c_(size);
static const int _Inout_z_count_(size) = _Prepost_z_ _Prepost_count_(size);
static const int _Inout_opt_z_count_(size) = _Prepost_z_ _Prepost_opt_count_(size);
static const int _Inout_z_bytecount_(size) = _Prepost_z_ _Prepost_bytecount_(size);
static const int _Inout_opt_z_bytecount_(size) = _Prepost_z_ _Prepost_opt_bytecount_(size);
static const int _Inout_z_count_c_(size) = _Prepost_z_ _Prepost_count_c_(size);
static const int _Inout_opt_z_count_c_(size) = _Prepost_z_ _Prepost_opt_count_c_(size);
static const int _Inout_z_bytecount_c_(size) = _Prepost_z_ _Prepost_bytecount_c_(size);
static const int _Inout_opt_z_bytecount_c_(size) = _Prepost_z_ _Prepost_opt_bytecount_c_(size);
static const int _Inout_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size);
static const int _Inout_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size);
static const int _Inout_count_x_(size) = _Prepost_count_x_(size);
static const int _Inout_opt_count_x_(size) = _Prepost_opt_count_x_(size);
static const int _Inout_bytecount_x_(size) = _Prepost_bytecount_x_(size);
static const int _Inout_opt_bytecount_x_(size) = _Prepost_opt_bytecount_x_(size);
static const int _Inout_cap_(size) = _Pre_valid_cap_(size) _Post_valid_;
static const int _Inout_opt_cap_(size) = _Pre_opt_valid_cap_(size) _Post_valid_;
static const int _Inout_bytecap_(size) = _Pre_valid_bytecap_(size) _Post_valid_;
static const int _Inout_opt_bytecap_(size) = _Pre_opt_valid_bytecap_(size) _Post_valid_;
static const int _Inout_cap_c_(size) = _Pre_valid_cap_c_(size) _Post_valid_;
static const int _Inout_opt_cap_c_(size) = _Pre_opt_valid_cap_c_(size) _Post_valid_;
static const int _Inout_bytecap_c_(size) = _Pre_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_opt_bytecap_c_(size) = _Pre_opt_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_cap_x_(size) = _Pre_valid_cap_x_(size) _Post_valid_;
static const int _Inout_opt_cap_x_(size) = _Pre_opt_valid_cap_x_(size) _Post_valid_;
static const int _Inout_bytecap_x_(size) = _Pre_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_opt_bytecap_x_(size) = _Pre_opt_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_z_cap_(size) = _Pre_z_cap_(size) _Post_z_;
static const int _Inout_opt_z_cap_(size) = _Pre_opt_z_cap_(size) _Post_z_;
static const int _Inout_z_bytecap_(size) = _Pre_z_bytecap_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_(size) = _Pre_opt_z_bytecap_(size) _Post_z_;
static const int _Inout_z_cap_c_(size) = _Pre_z_cap_c_(size) _Post_z_;
static const int _Inout_opt_z_cap_c_(size) = _Pre_opt_z_cap_c_(size) _Post_z_;
static const int _Inout_z_bytecap_c_(size) = _Pre_z_bytecap_c_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_c_(size) = _Pre_opt_z_bytecap_c_(size) _Post_z_;
static const int _Inout_z_cap_x_(size) = _Pre_z_cap_x_(size) _Post_z_;
static const int _Inout_opt_z_cap_x_(size) = _Pre_opt_z_cap_x_(size) _Post_z_;
static const int _Inout_z_bytecap_x_(size) = _Pre_z_bytecap_x_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_x_(size) = _Pre_opt_z_bytecap_x_(size) _Post_z_;
static const int _Ret_ = _Ret_valid_;
static const int _Ret_opt_ = _Ret_opt_valid_;
static const int _Deref_out_ = _Out_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_out_opt_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_opt_out_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_opt_out_opt_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_out_opt_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Deref_opt_out_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_opt_out_opt_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Check_return_ = _Check_return_impl_;
static const int _Printf_format_string_ = _Printf_format_string_impl_;
static const int _Scanf_format_string_ = _Scanf_format_string_impl_;
static const int _Scanf_s_format_string_ = _Scanf_s_format_string_impl_;
static const int _Success_(expr) = _Success_impl_(expr);
static const int _In_bound_ = _In_bound_impl_;
static const int _Out_bound_ = _Out_bound_impl_;
static const int _Ret_bound_ = _Ret_bound_impl_;
static const int _Deref_in_bound_ = _Deref_in_bound_impl_;
static const int _Deref_out_bound_ = _Deref_out_bound_impl_;
static const int _Deref_inout_bound_ = _Deref_in_bound_ _Deref_out_bound_;
static const int _Deref_ret_bound_ = _Deref_ret_bound_impl_;
static const int _In_range_(lb,ub) = _In_range_impl_(lb,ub);
static const int _Out_range_(lb,ub) = _Out_range_impl_(lb,ub);
static const int _Ret_range_(lb,ub) = _Ret_range_impl_(lb,ub);
static const int _Deref_in_range_(lb,ub) = _Deref_in_range_impl_(lb,ub);
static const int _Deref_out_range_(lb,ub) = _Deref_out_range_impl_(lb,ub);
static const int _Deref_ret_range_(lb,ub) = _Deref_ret_range_impl_(lb,ub);
static const int _Pre_z_ = _Pre2_impl_(_$notnull, _$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_ = _Pre2_impl_(_$maybenull,_$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size));
static const int _Pre_opt_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size));
static const int _Pre_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size));
static const int _Pre_opt_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Pre_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size));
static const int _Pre_opt_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Pre_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Pre_opt_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Pre_cap_m_(mult,size) = _Pre2_impl_(_$notnull, _$mult(mult,size));
static const int _Pre_opt_cap_m_(mult,size) = _Pre2_impl_(_$maybenull,_$mult(mult,size));
static const int _Pre_cap_for_(param) = _Pre2_impl_(_$notnull, _$cap_for(param));
static const int _Pre_opt_cap_for_(param) = _Pre2_impl_(_$maybenull,_$cap_for(param));
static const int _Pre_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size));
static const int _Pre_opt_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Pre_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Pre_opt_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Pre_ptrdiff_cap_(ptr) = _Pre2_impl_(_$notnull, _$cap_x(__ptrdiff(ptr)));
static const int _Pre_opt_ptrdiff_cap_(ptr) = _Pre2_impl_(_$maybenull,_$cap_x(__ptrdiff(ptr)));
static const int _Pre_z_cap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_(size) = _Pre2_impl_(_$notnull, _$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_(size) = _Pre2_impl_(_$maybenull,_$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_(size) = _Pre2_impl_(_$notnull, _$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_(size) = _Pre2_impl_(_$maybenull,_$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_c_(size) = _Pre2_impl_(_$notnull, _$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_c_(size) = _Pre2_impl_(_$maybenull,_$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_c_(size) = _Pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_c_(size) = _Pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_x_(size) = _Pre2_impl_(_$notnull, _$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_x_(size) = _Pre2_impl_(_$maybenull,_$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_x_(size) = _Pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_x_(size) = _Pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_ptrdiff_count_(ptr) = _Pre2_impl_(_$notnull, _$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_ptrdiff_count_(ptr) = _Pre2_impl_(_$maybenull,_$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_ = _Pre1_impl_(_$notnull) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_ = _Pre1_impl_(_$maybenull) _Deref_pre1_impl_(_$valid);
static const int _Pre_invalid_ = _Deref_pre1_impl_(_$notvalid);
static const int _Pre_notnull_ = _Pre1_impl_(_$notnull);
static const int _Pre_maybenull_ = _Pre1_impl_(_$maybenull);
static const int _Pre_null_ = _Pre1_impl_(_$null);
static const int _Pre_readonly_ = _Pre1_impl_(_$readaccess);
static const int _Pre_writeonly_ = _Pre1_impl_(_$writeaccess);
static const int _Post_z_ = _Post1_impl_(_$zterm) _Deref_post1_impl_(_$valid);
static const int _Post_maybez_ = _Post1_impl_(_$maybezterm);
static const int _Post_cap_(size) = _Post1_impl_(_$cap(size));
static const int _Post_bytecap_(size) = _Post1_impl_(_$bytecap(size));
static const int _Post_count_(size) = _Post1_impl_(_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_(size) = _Post1_impl_(_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_c_(size) = _Post1_impl_(_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_c_(size) = _Post1_impl_(_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_x_(size) = _Post1_impl_(_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_x_(size) = _Post1_impl_(_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_(size) = _Post2_impl_(_$zterm,_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_(size) = _Post2_impl_(_$zterm,_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_c_(size) = _Post2_impl_(_$zterm,_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_c_(size) = _Post2_impl_(_$zterm,_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_x_(size) = _Post2_impl_(_$zterm,_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_x_(size) = _Post2_impl_(_$zterm,_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_ptr_invalid_ = _Post1_impl_(_$notvalid);
static const int _Post_valid_ = _Deref_post1_impl_(_$valid);
static const int _Post_invalid_ = _Deref_post1_impl_(_$notvalid);
static const int _Post_notnull_ = _Post1_impl_(_$notnull);
static const int _Ret_z_ = _Ret2_impl_(_$notnull, _$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_ = _Ret2_impl_(_$maybenull,_$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_cap_(size) = _Ret2_impl_(_$notnull, _$cap(size));
static const int _Ret_opt_cap_(size) = _Ret2_impl_(_$maybenull,_$cap(size));
static const int _Ret_bytecap_(size) = _Ret2_impl_(_$notnull, _$bytecap(size));
static const int _Ret_opt_bytecap_(size) = _Ret2_impl_(_$maybenull,_$bytecap(size));
static const int _Ret_cap_c_(size) = _Ret2_impl_(_$notnull, _$cap_c(size));
static const int _Ret_opt_cap_c_(size) = _Ret2_impl_(_$maybenull,_$cap_c(size));
static const int _Ret_bytecap_c_(size) = _Ret2_impl_(_$notnull, _$bytecap_c(size));
static const int _Ret_opt_bytecap_c_(size) = _Ret2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Ret_cap_x_(size) = _Ret2_impl_(_$notnull, _$cap_x(size));
static const int _Ret_opt_cap_x_(size) = _Ret2_impl_(_$maybenull,_$cap_x(size));
static const int _Ret_bytecap_x_(size) = _Ret2_impl_(_$notnull, _$bytecap_x(size));
static const int _Ret_opt_bytecap_x_(size) = _Ret2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Ret_z_cap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_cap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_(size) = _Ret2_impl_(_$notnull, _$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_(size) = _Ret2_impl_(_$maybenull,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_(size) = _Ret2_impl_(_$notnull, _$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_(size) = _Ret2_impl_(_$maybenull,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_c_(size) = _Ret2_impl_(_$notnull, _$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_c_(size) = _Ret2_impl_(_$maybenull,_$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_c_(size) = _Ret2_impl_(_$notnull, _$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_c_(size) = _Ret2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_x_(size) = _Ret2_impl_(_$notnull, _$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_x_(size) = _Ret2_impl_(_$maybenull,_$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_x_(size) = _Ret2_impl_(_$notnull, _$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_x_(size) = _Ret2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_count_(size) = _Ret3_impl_(_$notnull, _$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_count_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecount_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecount_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_valid_ = _Ret1_impl_(_$notnull) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_valid_ = _Ret1_impl_(_$maybenull) _Deref_ret1_impl_(_$valid);
static const int _Ret_notnull_ = _Ret1_impl_(_$notnull);
static const int _Ret_maybenull_ = _Ret1_impl_(_$maybenull);
static const int _Ret_null_ = _Ret1_impl_(_$null);
static const int _Deref_pre_z_ = _Deref_pre2_impl_(_$notnull, _$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_ = _Deref_pre2_impl_(_$maybenull,_$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size));
static const int _Deref_pre_opt_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size));
static const int _Deref_pre_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_pre_opt_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_pre_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size));
static const int _Deref_pre_opt_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Deref_pre_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Deref_pre_opt_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Deref_pre_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_pre_opt_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_pre_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_pre_opt_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_pre_z_cap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_(size) = _Deref_pre2_impl_(_$notnull, _$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_(size) = _Deref_pre2_impl_(_$maybenull,_$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_c_(size) = _Deref_pre2_impl_(_$notnull, _$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_c_(size) = _Deref_pre2_impl_(_$maybenull,_$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_x_(size) = _Deref_pre2_impl_(_$notnull, _$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_x_(size) = _Deref_pre2_impl_(_$maybenull,_$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_ = _Deref_pre1_impl_(_$notnull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_ = _Deref_pre1_impl_(_$maybenull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_invalid_ = _Deref2_pre1_impl_(_$notvalid);
static const int _Deref_pre_notnull_ = _Deref_pre1_impl_(_$notnull);
static const int _Deref_pre_maybenull_ = _Deref_pre1_impl_(_$maybenull);
static const int _Deref_pre_null_ = _Deref_pre1_impl_(_$null);
static const int _Deref_pre_readonly_ = _Deref_pre1_impl_(_$readaccess);
static const int _Deref_pre_writeonly_ = _Deref_pre1_impl_(_$writeaccess);
static const int _Deref_post_z_ = _Deref_post2_impl_(_$notnull, _$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_ = _Deref_post2_impl_(_$maybenull,_$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size));
static const int _Deref_post_opt_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size));
static const int _Deref_post_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_post_opt_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_post_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_z(size));
static const int _Deref_post_opt_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_z(size));
static const int _Deref_post_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_z(size));
static const int _Deref_post_opt_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_z(size));
static const int _Deref_post_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_post_opt_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_post_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_post_opt_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_post_z_cap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_(size) = _Deref_post2_impl_(_$notnull, _$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_(size) = _Deref_post2_impl_(_$maybenull,_$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_(size) = _Deref_post2_impl_(_$notnull, _$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_c_(size) = _Deref_post2_impl_(_$notnull, _$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_c_(size) = _Deref_post2_impl_(_$maybenull,_$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_x_(size) = _Deref_post2_impl_(_$notnull, _$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_x_(size) = _Deref_post2_impl_(_$maybenull,_$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_ = _Deref_post1_impl_(_$notnull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_ = _Deref_post1_impl_(_$maybenull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_notnull_ = _Deref_post1_impl_(_$notnull);
static const int _Deref_post_maybenull_ = _Deref_post1_impl_(_$maybenull);
static const int _Deref_post_null_ = _Deref_post1_impl_(_$null);
static const int _Deref_ret_z_ = _Deref_ret2_impl_(_$notnull, _$zterm);
static const int _Deref_ret_opt_z_ = _Deref_ret2_impl_(_$maybenull,_$zterm);
static const int _Deref2_pre_readonly_ = _Deref2_pre1_impl_(_$readaccess);
static const int _Prepost_z_ = _Pre_z_ _Post_z_;
static const int _Prepost_opt_z_ = _Pre_opt_z_ _Post_z_;
static const int _Prepost_count_(size) = _Pre_count_(size) _Post_count_(size);
static const int _Prepost_opt_count_(size) = _Pre_opt_count_(size) _Post_count_(size);
static const int _Prepost_bytecount_(size) = _Pre_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_count_c_(size) = _Pre_count_c_(size) _Post_count_c_(size);
static const int _Prepost_opt_count_c_(size) = _Pre_opt_count_c_(size) _Post_count_c_(size);
static const int _Prepost_bytecount_c_(size) = _Pre_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_count_x_(size) = _Pre_count_x_(size) _Post_count_x_(size);
static const int _Prepost_opt_count_x_(size) = _Pre_opt_count_x_(size) _Post_count_x_(size);
static const int _Prepost_bytecount_x_(size) = _Pre_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_valid_ = _Pre_valid_ _Post_valid_;
static const int _Prepost_opt_valid_ = _Pre_opt_valid_ _Post_valid_;
static const int _Deref_prepost_z_ = _Deref_pre_z_ _Deref_post_z_;
static const int _Deref_prepost_opt_z_ = _Deref_pre_opt_z_ _Deref_post_opt_z_;
static const int _Deref_prepost_cap_(size) = _Deref_pre_cap_(size) _Deref_post_cap_(size);
static const int _Deref_prepost_opt_cap_(size) = _Deref_pre_opt_cap_(size) _Deref_post_opt_cap_(size);
static const int _Deref_prepost_bytecap_(size) = _Deref_pre_bytecap_(size) _Deref_post_bytecap_(size);
static const int _Deref_prepost_opt_bytecap_(size) = _Deref_pre_opt_bytecap_(size) _Deref_post_opt_bytecap_(size);
static const int _Deref_prepost_cap_x_(size) = _Deref_pre_cap_x_(size) _Deref_post_cap_x_(size);
static const int _Deref_prepost_opt_cap_x_(size) = _Deref_pre_opt_cap_x_(size) _Deref_post_opt_cap_x_(size);
static const int _Deref_prepost_bytecap_x_(size) = _Deref_pre_bytecap_x_(size) _Deref_post_bytecap_x_(size);
static const int _Deref_prepost_opt_bytecap_x_(size) = _Deref_pre_opt_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size);
static const int _Deref_prepost_z_cap_(size) = _Deref_pre_z_cap_(size) _Deref_post_z_cap_(size);
static const int _Deref_prepost_opt_z_cap_(size) = _Deref_pre_opt_z_cap_(size) _Deref_post_opt_z_cap_(size);
static const int _Deref_prepost_z_bytecap_(size) = _Deref_pre_z_bytecap_(size) _Deref_post_z_bytecap_(size);
static const int _Deref_prepost_opt_z_bytecap_(size) = _Deref_pre_opt_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size);
static const int _Deref_prepost_valid_cap_(size) = _Deref_pre_valid_cap_(size) _Deref_post_valid_cap_(size);
static const int _Deref_prepost_opt_valid_cap_(size) = _Deref_pre_opt_valid_cap_(size) _Deref_post_opt_valid_cap_(size);
static const int _Deref_prepost_valid_bytecap_(size) = _Deref_pre_valid_bytecap_(size) _Deref_post_valid_bytecap_(size);
static const int _Deref_prepost_opt_valid_bytecap_(size) = _Deref_pre_opt_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size);
static const int _Deref_prepost_valid_cap_x_(size) = _Deref_pre_valid_cap_x_(size) _Deref_post_valid_cap_x_(size);
static const int _Deref_prepost_opt_valid_cap_x_(size) = _Deref_pre_opt_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size);
static const int _Deref_prepost_valid_bytecap_x_(size) = _Deref_pre_valid_bytecap_x_(size) _Deref_post_valid_bytecap_x_(size);
static const int _Deref_prepost_opt_valid_bytecap_x_(size) = _Deref_pre_opt_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size);
static const int _Deref_prepost_count_(size) = _Deref_pre_count_(size) _Deref_post_count_(size);
static const int _Deref_prepost_opt_count_(size) = _Deref_pre_opt_count_(size) _Deref_post_opt_count_(size);
static const int _Deref_prepost_bytecount_(size) = _Deref_pre_bytecount_(size) _Deref_post_bytecount_(size);
static const int _Deref_prepost_opt_bytecount_(size) = _Deref_pre_opt_bytecount_(size) _Deref_post_opt_bytecount_(size);
static const int _Deref_prepost_count_x_(size) = _Deref_pre_count_x_(size) _Deref_post_count_x_(size);
static const int _Deref_prepost_opt_count_x_(size) = _Deref_pre_opt_count_x_(size) _Deref_post_opt_count_x_(size);
static const int _Deref_prepost_bytecount_x_(size) = _Deref_pre_bytecount_x_(size) _Deref_post_bytecount_x_(size);
static const int _Deref_prepost_opt_bytecount_x_(size) = _Deref_pre_opt_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size);
static const int _Deref_prepost_valid_ = _Deref_pre_valid_ _Deref_post_valid_;
static const int _Deref_prepost_opt_valid_ = _Deref_pre_opt_valid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_cap_c_(size) = _Deref_pre_cap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_cap_c_(size) = _Deref_pre_z_cap_c_(size) _Deref_post_z_;
static const int _Deref_out_z_bytecap_c_(size) = _Deref_pre_bytecap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_bytecap_c_(size) = _Deref_pre_z_bytecap_c_(size) _Deref_post_z_;
static const int _Deref_inout_z_ = _Deref_prepost_z_;
static const int _= __notnull __elem_writableTo(size);
static const int _= __notnull __byte_writableTo(size);
static const int = __pre __valid __pre __readonly;
static const int = __pre __elem_readableTo(size);
static const int = __pre __byte_readableTo(size);
static const int __in_z = __pre __nullterminated;
static const int __in_ecount_z(size) = __pre __nullterminated;
static const int __in_bcount_z(size) = __pre __nullterminated;
static const int __in_nz = __in;
static const int __in_ecount_nz(size) = ;
static const int __in_bcount_nz(size) = ;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int = ;
static const int = ;
static const int __out_z = __valid __refparam __nullterminated;
static const int __out_z_opt = __valid __refparam __nullterminated __exceptthat __maybenull;
static const int __out_ecount_z(size) = ___valid __refparam __nullterminated;
static const int __out_bcount_z(size) = ___valid __refparam __nullterminated;
static const int __out_ecount_part_z(size,length) = __nullterminated;
static const int __out_bcount_part_z(size,length) = __nullterminated;
static const int __out_ecount_full_z(size) = __nullterminated;
static const int __out_bcount_full_z(size) = __nullterminated;
static const int __out_nz = __valid __refparam ;
static const int __out_nz_opt = __valid __refparam __exceptthat __maybenull;
static const int __out_ecount_nz(size) = ___valid __refparam;
static const int __out_bcount_nz(size) = ___valid __refparam;
static const int = __pre __valid __valid __refparam;
static const int = __pre __valid;
static const int = __pre __valid;
static const int = __pre __valid __pre __elem_readableTo(length);
static const int = __pre __valid __pre __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = ___exceptthat __maybenull;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __in_z_opt = __pre __nullterminated;
static const int __in_ecount_z_opt(size) = __pre __nullterminated;
static const int __in_bcount_z_opt(size) = __pre __nullterminated;
static const int __in_nz_opt = ;
static const int __in_ecount_nz_opt(size) = ;
static const int __in_bcount_nz_opt(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_ecount_full_opt(size) = __exceptthat __maybenull;
static const int __out_bcount_full_opt(size) = __exceptthat __maybenull;
static const int __out_ecount_z_opt(size) = __nullterminated;
static const int __out_bcount_z_opt(size) = __nullterminated;
static const int __out_ecount_part_z_opt(size,length) = __nullterminated;
static const int __out_bcount_part_z_opt(size,length) = __nullterminated;
static const int __out_ecount_full_z_opt(size) = __out_ecount_full_opt(size) __nullterminated;
static const int __out_bcount_full_z_opt(size) = __out_bcount_full_opt(size) __nullterminated;
static const int __out_ecount_nz_opt(size) = __nullterminated;
static const int __out_bcount_nz_opt(size) = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = ;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int = ___elem_readableTo(1) __notnull __elem_writableTo(size);
static const int = ___elem_readableTo(1) __notnull __byte_writableTo(size);
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __valid __refparam __nullterminated;
static const int _ecount_z(size) = __nullterminated;
static const int _bcount_z(size) = __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __notnull __elem_readableTo(1) __pre __valid __valid __refparam;
static const int _z = __pre __nullterminated __nullterminated;
static const int = __pre __elem_writableTo(size) __elem_writableTo(size);
static const int = __pre __byte_writableTo(size) __byte_writableTo(size);
static const int = __pre __elem_readableTo(length) __elem_readableTo(length);
static const int = __pre __byte_readableTo(length) __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _opt = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __execeptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _z_opt = _opt __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _z = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _ecount_full(size) __exceptthat __maybenull;
static const int = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout = __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout_z = _opt_inout __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz = _opt_inout;
static const int _opt_inout_ecount_nz(size) = _opt_inout;
static const int _opt_inout_bcount_nz(size) = _opt_inout;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = _opt __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __exceptthat __maybenull __pre __exceptthat __maybenull __exceptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt_inout_opt = _opt __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_z_opt = _opt_inout_opt __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz_opt = _opt_inout_opt;
static const int _opt_inout_ecount_nz_opt(size) = _opt_inout;
static const int _opt_inout_bcount_nz_opt(size) = _opt_inout;
static const int = __inner_success(expr);
static const int __nullterminated = __readableTo(sentinel(0));
static const int = __pre __null;
static const int = __inner_checkReturn;
static const int __typefix(ctype) = __inner_typefix(ctype);
static const int __override = __inner_override;
static const int = __inner_callback;
static const int __blocksOn(resource) = __inner_blocksOn(resource);
static const int __control_entrypoint(category) = __inner_control_entrypoint(category);
static const int __data_entrypoint(category) = __inner_data_entrypoint(category);
static const int __fallthrough = __inner_fallthrough;
static const int _CRT_PACKING = 8;
static const int _CRT_PACKING = 8;
typedef unsigned __int64 uintptr_t;
typedef char * va_list;
static const int _ADDRESSOF(v) = ( &(v) );
static const int _SLOTSIZEOF(t) = (sizeof(t));
static const int _APALIGN(t,ap) = (__alignof(t));
static const int _INTSIZEOF(n) = ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) );
static const int _crt_va_start(ap,v) = ( ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v) );
static const int _crt_va_arg(ap,t) = ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) );
static const int _crt_va_end(ap) = ( ap = (va_list)0 );
static const int __CRT_STRINGIZE(_Value) = #_Value;
static const int _CRT_STRINGIZE(_Value) = __CRT_STRINGIZE(_Value);
static const int __CRT_WIDE(_String) = L ## _String;
static const int _CRT_WIDE(_String) = __CRT_WIDE(_String);
static const int __CRT_APPEND(_Value1,_Value2) = _Value1 ## _Value2;
static const int _CRT_APPEND(_Value1,_Value2) = __CRT_APPEND(_Value1, _Value2);
static const int _NOIA64 = ;
static const int _MRTIMP = ;
static const int __CLRCALL_OR_CDECL = ;
static const int _PURE = ;
static const long __STDC_SECURE_LIB__ = 200411L;
static const int __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
static const int __STDC_WANT_SECURE_LIB__ = 1;
static const int _CRT_DEPRECATE_TEXT(_Text) = ;
static const int _CRT_INSECURE_DEPRECATE(_Replacement) = _CRT_DEPRECATE_TEXT("This function or variable may be unsafe. Consider using " #_Replacement " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.");
static const int _CRT_INSECURE_DEPRECATE_GLOBALS(_Replacement) = _CRT_INSECURE_DEPRECATE(_Replacement);
static const int _SECURECRT_FILL_BUFFER_PATTERN = 0xFE;
static const int _CRT_OBSOLETE(_NewItem) = _CRT_DEPRECATE_TEXT("This function or variable has been superceded by newer library or operating system functionality. Consider using " #_NewItem " instead. See online help for details.");
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_NOTHROW = throw();
static const int _CRT_NONSTDC_DEPRECATE(_NewName) = _CRT_DEPRECATE_TEXT("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " #_NewName ". See online help for details.");
typedef unsigned __int64 size_t;
typedef size_t rsize_t;
typedef __int64 intptr_t;
typedef __int64 ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t; /* 32-bit time value */
typedef __int64 __time64_t; /* 64-bit time value */
typedef __time64_t time_t; /* time value */
static const int _CRT_ALIGN(x) = );
static const int _CRTNOALIAS = ;
static const int _CRTRESTRICT = ;
static const int __CRTDECL = ;
static const int __STR2WSTR(str) = L ##str;
static const int _STR2WSTR(str) = __STR2WSTR(str);
static const int __FILEW__ = _STR2WSTR(__FILE__);
static const int __FUNCTIONW__ = _STR2WSTR(__FUNCTION__);
 void _invalid_parameter_noinfo(void);
 void _invalid_parameter_noinfo_noreturn(void);
void _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
static const int _CRT_SECURE_INVALID_PARAMETER(expr) = ::_invalid_parameter_noinfo_noreturn();
static const int _ARGMAX = 100;
static const int _TRUNCATE = ((size_t)-1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _VFuncName, _VFuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_CGETS(_ReturnType,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureVFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_GETS(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;
typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;
typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; /* LCID */
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;
static const int _CRT_UNUSED(x) = (void)x;
typedef long clock_t;
static const int NULL = ((void *)0);
struct tm {
        int tm_sec; /* seconds after the minute - [0,59] */
        int tm_min; /* minutes after the hour - [0,59] */
        int tm_hour; /* hours since midnight - [0,23] */
        int tm_mday; /* day of the month - [1,31] */
        int tm_mon; /* months since January - [0,11] */
        int tm_year; /* years since 1900 */
        int tm_wday; /* days since Sunday - [0,6] */
        int tm_yday; /* days since January 1 - [0,365] */
        int tm_isdst; /* daylight savings time flag */
        };
static const int CLOCKS_PER_SEC = 1000;
 int* __daylight(void);
static const int _daylight = (*__daylight());
 long* __dstbias(void);
static const int _dstbias = (*__dstbias());
 long* __timezone(void);
static const int _timezone = (*__timezone());
 char ** __tzname(void);
static const int _tzname = (__tzname());
 errno_t _get_daylight( int * _Daylight);
 errno_t _get_dstbias( long * _Daylight_savings_bias);
 errno_t _get_timezone( long * _Timezone);
 errno_t _get_tzname( size_t *_ReturnValue, char *_Buffer, size_t _SizeInBytes, int _Index);
 char * asctime( const struct tm * _Tm);
 errno_t asctime_s( char *_Buf, size_t _SizeInBytes, const struct tm * _Tm);
char * _ctime32( const __time32_t * _Time);
 errno_t _ctime32_s( char *_Buf, size_t _SizeInBytes, const __time32_t *_Time);
 clock_t clock(void);
 double _difftime32( __time32_t _Time1, __time32_t _Time2);
 struct tm * _gmtime32( const __time32_t * _Time);
 errno_t _gmtime32_s( struct tm *_Tm, const __time32_t * _Time);
struct tm * _localtime32( const __time32_t * _Time);
 errno_t _localtime32_s( struct tm *_Tm, const __time32_t * _Time);
 size_t strftime( char * _Buf, size_t _SizeInBytes, const char * _Format, const struct tm * _Tm);
 size_t _strftime_l( char *_Buf, size_t _Max_size, const char * _Format, const struct tm *_Tm, _locale_t _Locale);
 errno_t _strdate_s( char *_Buf, size_t _SizeInBytes);
char * _strdate( char *_Buffer);
 errno_t _strtime_s( char *_Buf , size_t _SizeInBytes);
char * _strtime( char *_Buffer);
 __time32_t _time32( __time32_t * _Time);
 __time32_t _mktime32( struct tm * _Tm);
 __time32_t _mkgmtime32( struct tm * _Tm);
 void _tzset(void);
 double _difftime64( __time64_t _Time1, __time64_t _Time2);
char * _ctime64( const __time64_t * _Time);
 errno_t _ctime64_s( char *_Buf, size_t _SizeInBytes, const __time64_t * _Time);
struct tm * _gmtime64( const __time64_t * _Time);
 errno_t _gmtime64_s( struct tm *_Tm, const __time64_t *_Time);
struct tm * _localtime64( const __time64_t * _Time);
 errno_t _localtime64_s( struct tm *_Tm, const __time64_t *_Time);
 __time64_t _mktime64( struct tm * _Tm);
 __time64_t _mkgmtime64( struct tm * _Tm);
 __time64_t _time64( __time64_t * _Time);
unsigned _getsystime( struct tm * _Tm);
unsigned _setsystime( struct tm * _Tm, unsigned _MilliSec);
wchar_t * _wasctime( const struct tm * _Tm);
 errno_t _wasctime_s( wchar_t *_Buf, size_t _SizeInWords, const struct tm * _Tm);
wchar_t * _wctime32( const __time32_t *_Time);
 errno_t _wctime32_s( wchar_t* _Buf, size_t _SizeInWords, const __time32_t * _Time);
 size_t wcsftime( wchar_t * _Buf, size_t _SizeInWords, const wchar_t * _Format, const struct tm * _Tm);
 size_t _wcsftime_l( wchar_t * _Buf, size_t _SizeInWords, const wchar_t *_Format, const struct tm *_Tm, _locale_t _Locale);
 errno_t _wstrdate_s( wchar_t * _Buf, size_t _SizeInWords);
wchar_t * _wstrdate( wchar_t *_Buffer);
 errno_t _wstrtime_s( wchar_t * _Buf, size_t _SizeInWords);
wchar_t * _wstrtime( wchar_t *_Buffer);
wchar_t * _wctime64( const __time64_t * _Time);
 errno_t _wctime64_s( wchar_t* _Buf, size_t _SizeInWords, const __time64_t *_Time);
static wchar_t * _wctime(const time_t * _Time)
{
    return _wctime64(_Time);
}
static errno_t _wctime_s(wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}
static double difftime(time_t _Time1, time_t _Time2)
{
    return _difftime64(_Time1,_Time2);
}
static char * ctime(const time_t * _Time)
{
    return _ctime64(_Time);
}
static errno_t ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t * _Time)
{
    return _ctime64_s(_Buffer, _SizeInBytes, _Time);
}
static struct tm * gmtime(const time_t * _Time)
{
    return _gmtime64(_Time);
}
static errno_t gmtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _gmtime64_s(_Tm, _Time);
}
static struct tm * localtime(const time_t * _Time)
{
    return _localtime64(_Time);
}
static errno_t localtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _localtime64_s(_Tm, _Time);
}
static time_t mktime(struct tm * _Tm)
{
    return _mktime64(_Tm);
}
static time_t _mkgmtime(struct tm * _Tm)
{
    return _mkgmtime64(_Tm);
}
static time_t time(time_t * _Time)
{
    return _time64(_Time);
}
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int INCL_WINSOCK_API_PROTOTYPES = 1;
static const int INCL_WINSOCK_API_TYPEDEFS = 0;
static const int _WIN32_WINNT_NT4 = 0x0400;
static const int _WIN32_WINNT_WIN2K = 0x0500;
static const int _WIN32_WINNT_WINXP = 0x0501;
static const int _WIN32_WINNT_WS03 = 0x0502;
static const int _WIN32_WINNT_WIN6 = 0x0600;
static const int _WIN32_WINNT_VISTA = 0x0600;
static const int _WIN32_WINNT_WS08 = 0x0600;
static const int _WIN32_WINNT_LONGHORN = 0x0600;
static const int _WIN32_WINNT_WIN7 = 0x0601;
static const int _WIN32_IE_IE20 = 0x0200;
static const int _WIN32_IE_IE30 = 0x0300;
static const int _WIN32_IE_IE302 = 0x0302;
static const int _WIN32_IE_IE40 = 0x0400;
static const int _WIN32_IE_IE401 = 0x0401;
static const int _WIN32_IE_IE50 = 0x0500;
static const int _WIN32_IE_IE501 = 0x0501;
static const int _WIN32_IE_IE55 = 0x0550;
static const int _WIN32_IE_IE60 = 0x0600;
static const int _WIN32_IE_IE60SP1 = 0x0601;
static const int _WIN32_IE_IE60SP2 = 0x0603;
static const int _WIN32_IE_IE70 = 0x0700;
static const int _WIN32_IE_IE80 = 0x0800;
static const int _WIN32_IE_NT4 = _WIN32_IE_IE20;
static const int _WIN32_IE_NT4SP1 = _WIN32_IE_IE20;
static const int _WIN32_IE_NT4SP2 = _WIN32_IE_IE20;
static const int _WIN32_IE_NT4SP3 = _WIN32_IE_IE302;
static const int _WIN32_IE_NT4SP4 = _WIN32_IE_IE401;
static const int _WIN32_IE_NT4SP5 = _WIN32_IE_IE401;
static const int _WIN32_IE_NT4SP6 = _WIN32_IE_IE50;
static const int _WIN32_IE_WIN98 = _WIN32_IE_IE401;
static const int _WIN32_IE_WIN98SE = _WIN32_IE_IE50;
static const int _WIN32_IE_WINME = _WIN32_IE_IE55;
static const int _WIN32_IE_WIN2K = _WIN32_IE_IE501;
static const int _WIN32_IE_WIN2KSP1 = _WIN32_IE_IE501;
static const int _WIN32_IE_WIN2KSP2 = _WIN32_IE_IE501;
static const int _WIN32_IE_WIN2KSP3 = _WIN32_IE_IE501;
static const int _WIN32_IE_WIN2KSP4 = _WIN32_IE_IE501;
static const int _WIN32_IE_XP = _WIN32_IE_IE60;
static const int _WIN32_IE_XPSP1 = _WIN32_IE_IE60SP1;
static const int _WIN32_IE_XPSP2 = _WIN32_IE_IE60SP2;
static const int _WIN32_IE_WS03 = 0x0602;
static const int _WIN32_IE_WS03SP1 = _WIN32_IE_IE60SP2;
static const int _WIN32_IE_WIN6 = _WIN32_IE_IE70;
static const int _WIN32_IE_LONGHORN = _WIN32_IE_IE70;
static const int _WIN32_IE_WIN7 = _WIN32_IE_IE80;
static const int NTDDI_WIN2K = 0x05000000;
static const int NTDDI_WIN2KSP1 = 0x05000100;
static const int NTDDI_WIN2KSP2 = 0x05000200;
static const int NTDDI_WIN2KSP3 = 0x05000300;
static const int NTDDI_WIN2KSP4 = 0x05000400;
static const int NTDDI_WINXP = 0x05010000;
static const int NTDDI_WINXPSP1 = 0x05010100;
static const int NTDDI_WINXPSP2 = 0x05010200;
static const int NTDDI_WINXPSP3 = 0x05010300;
static const int NTDDI_WINXPSP4 = 0x05010400;
static const int NTDDI_WS03 = 0x05020000;
static const int NTDDI_WS03SP1 = 0x05020100;
static const int NTDDI_WS03SP2 = 0x05020200;
static const int NTDDI_WS03SP3 = 0x05020300;
static const int NTDDI_WS03SP4 = 0x05020400;
static const int NTDDI_WIN6 = 0x06000000;
static const int NTDDI_WIN6SP1 = 0x06000100;
static const int NTDDI_WIN6SP2 = 0x06000200;
static const int NTDDI_WIN6SP3 = 0x06000300;
static const int NTDDI_WIN6SP4 = 0x06000400;
static const int NTDDI_VISTA = NTDDI_WIN6;
static const int NTDDI_VISTASP1 = NTDDI_WIN6SP1;
static const int NTDDI_VISTASP2 = NTDDI_WIN6SP2;
static const int NTDDI_VISTASP3 = NTDDI_WIN6SP3;
static const int NTDDI_VISTASP4 = NTDDI_WIN6SP4;
static const int NTDDI_LONGHORN = NTDDI_VISTA;
static const int NTDDI_WS08 = NTDDI_WIN6SP1;
static const int NTDDI_WS08SP2 = NTDDI_WIN6SP2;
static const int NTDDI_WS08SP3 = NTDDI_WIN6SP3;
static const int NTDDI_WS08SP4 = NTDDI_WIN6SP4;
static const int NTDDI_WIN7 = 0x06010000;
static const int OSVERSION_MASK = 0xFFFF0000;
static const int SPVERSION_MASK = 0x0000FF00;
static const int SUBVERSION_MASK = 0x000000FF;
static const int OSVER(Version) = ((Version) & OSVERSION_MASK);
static const int SPVER(Version) = (((Version) & SPVERSION_MASK) >> 8);
static const int SUBVER(Version) = (((Version) & SUBVERSION_MASK) );
static const int NTDDI_VERSION_FROM_WIN32_WINNT2(ver) = ver ##0000;
static const int NTDDI_VERSION_FROM_WIN32_WINNT(ver) = NTDDI_VERSION_FROM_WIN32_WINNT2(ver);
static const int NTDDI_VERSION = NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT);
static const int _WIN32_IE = 0x0800;
static const int _USE_DECLSPECS_FOR_SAL = 0;
static const int _USE_ATTRIBUTES_FOR_SAL = 0;
static const int _In_ = _Pre1_impl_(_$notnull) _Deref_pre2_impl_(_$valid, _$readaccess);
static const int _In_opt_ = _Pre_opt_valid_ _Deref_pre_readonly_;
static const int _In_z_ = _Pre_z_ _Deref_pre_readonly_;
static const int _In_opt_z_ = _Pre_opt_z_ _Deref_pre_readonly_;
static const int _In_count_(size) = _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_count_(size) = _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_bytecount_(size) = _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_count_c_(size) = _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_count_c_(size) = _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_bytecount_c_(size) = _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_z_count_(size) = _Pre_z_ _Pre_count_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_(size) = _Pre_opt_z_ _Pre_opt_count_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_(size) = _Pre_z_ _Pre_bytecount_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_(size) = _Pre_opt_z_ _Pre_opt_bytecount_(size) _Deref_pre_readonly_;
static const int _In_z_count_c_(size) = _Pre_z_ _Pre_count_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_count_c_(size) = _Pre_opt_z_ _Pre_opt_count_c_(size) _Deref_pre_readonly_;
static const int _In_z_bytecount_c_(size) = _Pre_z_ _Pre_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_opt_z_bytecount_c_(size) = _Pre_opt_z_ _Pre_opt_bytecount_c_(size) _Deref_pre_readonly_;
static const int _In_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size) _Deref_pre_readonly_;
static const int _In_count_x_(size) = _Pre_count_x_(size) _Deref_pre_readonly_;
static const int _In_opt_count_x_(size) = _Pre_opt_count_x_(size) _Deref_pre_readonly_;
static const int _In_bytecount_x_(size) = _Pre_bytecount_x_(size) _Deref_pre_readonly_;
static const int _In_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Deref_pre_readonly_;
static const int _Out_ = _Pre_cap_c_(1) _Pre_invalid_;
static const int _Out_opt_ = _Pre_opt_cap_c_(1) _Pre_invalid_;
static const int _Out_cap_(size) = _Pre_cap_(size) _Pre_invalid_;
static const int _Out_opt_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_;
static const int _Out_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_;
static const int _Out_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_;
static const int _Out_opt_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_;
static const int _Out_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_;
static const int _Out_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_opt_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_;
static const int _Out_z_cap_m_(mult,size) = _Pre_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_m_(mult,size) = _Pre_opt_cap_m_(mult,size) _Pre_invalid_ _Post_z_;
static const int _Out_ptrdiff_cap_(size) = _Pre_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_opt_ptrdiff_cap_(size) = _Pre_opt_ptrdiff_cap_(size) _Pre_invalid_;
static const int _Out_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_;
static const int _Out_opt_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_;
static const int _Out_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_;
static const int _Out_opt_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_;
static const int _Out_z_cap_(size) = _Pre_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_(size) = _Pre_opt_cap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_(size) = _Pre_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_(size) = _Pre_opt_bytecap_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_c_(size) = _Pre_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_c_(size) = _Pre_opt_cap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_c_(size) = _Pre_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_c_(size) = _Pre_opt_bytecap_c_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_cap_x_(size) = _Pre_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_cap_x_(size) = _Pre_opt_cap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_z_bytecap_x_(size) = _Pre_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_opt_z_bytecap_x_(size) = _Pre_opt_bytecap_x_(size) _Pre_invalid_ _Post_z_;
static const int _Out_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_opt_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_count_(count);
static const int _Out_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_opt_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_bytecount_(count);
static const int _Out_z_cap_post_count_(cap,count) = _Pre_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_opt_z_cap_post_count_(cap,count) = _Pre_opt_cap_(cap) _Pre_invalid_ _Post_z_count_(count);
static const int _Out_z_bytecap_post_bytecount_(cap,count) = _Pre_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_opt_z_bytecap_post_bytecount_(cap,count) = _Pre_opt_bytecap_(cap) _Pre_invalid_ _Post_z_bytecount_(count);
static const int _Out_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_opt_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_count_(capcount);
static const int _Out_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_opt_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_bytecount_(capcount);
static const int _Out_capcount_x_(capcount) = _Pre_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_opt_capcount_x_(capcount) = _Pre_opt_cap_x_(capcount) _Pre_invalid_ _Post_count_x_(capcount);
static const int _Out_bytecapcount_x_(capcount) = _Pre_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_opt_bytecapcount_x_(capcount) = _Pre_opt_bytecap_x_(capcount) _Pre_invalid_ _Post_bytecount_x_(capcount);
static const int _Out_z_capcount_(capcount) = _Pre_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_opt_z_capcount_(capcount) = _Pre_opt_cap_(capcount) _Pre_invalid_ _Post_z_count_(capcount);
static const int _Out_z_bytecapcount_(capcount) = _Pre_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Out_opt_z_bytecapcount_(capcount) = _Pre_opt_bytecap_(capcount) _Pre_invalid_ _Post_z_bytecount_(capcount);
static const int _Inout_ = _Prepost_valid_;
static const int _Inout_opt_ = _Prepost_opt_valid_;
static const int _Inout_z_ = _Prepost_z_;
static const int _Inout_opt_z_ = _Prepost_opt_z_;
static const int _Inout_count_(size) = _Prepost_count_(size);
static const int _Inout_opt_count_(size) = _Prepost_opt_count_(size);
static const int _Inout_bytecount_(size) = _Prepost_bytecount_(size);
static const int _Inout_opt_bytecount_(size) = _Prepost_opt_bytecount_(size);
static const int _Inout_count_c_(size) = _Prepost_count_c_(size);
static const int _Inout_opt_count_c_(size) = _Prepost_opt_count_c_(size);
static const int _Inout_bytecount_c_(size) = _Prepost_bytecount_c_(size);
static const int _Inout_opt_bytecount_c_(size) = _Prepost_opt_bytecount_c_(size);
static const int _Inout_z_count_(size) = _Prepost_z_ _Prepost_count_(size);
static const int _Inout_opt_z_count_(size) = _Prepost_z_ _Prepost_opt_count_(size);
static const int _Inout_z_bytecount_(size) = _Prepost_z_ _Prepost_bytecount_(size);
static const int _Inout_opt_z_bytecount_(size) = _Prepost_z_ _Prepost_opt_bytecount_(size);
static const int _Inout_z_count_c_(size) = _Prepost_z_ _Prepost_count_c_(size);
static const int _Inout_opt_z_count_c_(size) = _Prepost_z_ _Prepost_opt_count_c_(size);
static const int _Inout_z_bytecount_c_(size) = _Prepost_z_ _Prepost_bytecount_c_(size);
static const int _Inout_opt_z_bytecount_c_(size) = _Prepost_z_ _Prepost_opt_bytecount_c_(size);
static const int _Inout_ptrdiff_count_(size) = _Pre_ptrdiff_count_(size);
static const int _Inout_opt_ptrdiff_count_(size) = _Pre_opt_ptrdiff_count_(size);
static const int _Inout_count_x_(size) = _Prepost_count_x_(size);
static const int _Inout_opt_count_x_(size) = _Prepost_opt_count_x_(size);
static const int _Inout_bytecount_x_(size) = _Prepost_bytecount_x_(size);
static const int _Inout_opt_bytecount_x_(size) = _Prepost_opt_bytecount_x_(size);
static const int _Inout_cap_(size) = _Pre_valid_cap_(size) _Post_valid_;
static const int _Inout_opt_cap_(size) = _Pre_opt_valid_cap_(size) _Post_valid_;
static const int _Inout_bytecap_(size) = _Pre_valid_bytecap_(size) _Post_valid_;
static const int _Inout_opt_bytecap_(size) = _Pre_opt_valid_bytecap_(size) _Post_valid_;
static const int _Inout_cap_c_(size) = _Pre_valid_cap_c_(size) _Post_valid_;
static const int _Inout_opt_cap_c_(size) = _Pre_opt_valid_cap_c_(size) _Post_valid_;
static const int _Inout_bytecap_c_(size) = _Pre_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_opt_bytecap_c_(size) = _Pre_opt_valid_bytecap_c_(size) _Post_valid_;
static const int _Inout_cap_x_(size) = _Pre_valid_cap_x_(size) _Post_valid_;
static const int _Inout_opt_cap_x_(size) = _Pre_opt_valid_cap_x_(size) _Post_valid_;
static const int _Inout_bytecap_x_(size) = _Pre_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_opt_bytecap_x_(size) = _Pre_opt_valid_bytecap_x_(size) _Post_valid_;
static const int _Inout_z_cap_(size) = _Pre_z_cap_(size) _Post_z_;
static const int _Inout_opt_z_cap_(size) = _Pre_opt_z_cap_(size) _Post_z_;
static const int _Inout_z_bytecap_(size) = _Pre_z_bytecap_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_(size) = _Pre_opt_z_bytecap_(size) _Post_z_;
static const int _Inout_z_cap_c_(size) = _Pre_z_cap_c_(size) _Post_z_;
static const int _Inout_opt_z_cap_c_(size) = _Pre_opt_z_cap_c_(size) _Post_z_;
static const int _Inout_z_bytecap_c_(size) = _Pre_z_bytecap_c_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_c_(size) = _Pre_opt_z_bytecap_c_(size) _Post_z_;
static const int _Inout_z_cap_x_(size) = _Pre_z_cap_x_(size) _Post_z_;
static const int _Inout_opt_z_cap_x_(size) = _Pre_opt_z_cap_x_(size) _Post_z_;
static const int _Inout_z_bytecap_x_(size) = _Pre_z_bytecap_x_(size) _Post_z_;
static const int _Inout_opt_z_bytecap_x_(size) = _Pre_opt_z_bytecap_x_(size) _Post_z_;
static const int _Ret_ = _Ret_valid_;
static const int _Ret_opt_ = _Ret_opt_valid_;
static const int _Deref_out_ = _Out_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_out_opt_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_opt_out_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_valid_;
static const int _Deref_opt_out_opt_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_out_opt_z_ = _Out_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Deref_opt_out_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_opt_out_opt_z_ = _Out_opt_ _Deref_pre_invalid_ _Deref_post_opt_z_;
static const int _Check_return_ = _Check_return_impl_;
static const int _Printf_format_string_ = _Printf_format_string_impl_;
static const int _Scanf_format_string_ = _Scanf_format_string_impl_;
static const int _Scanf_s_format_string_ = _Scanf_s_format_string_impl_;
static const int _Success_(expr) = _Success_impl_(expr);
static const int _In_bound_ = _In_bound_impl_;
static const int _Out_bound_ = _Out_bound_impl_;
static const int _Ret_bound_ = _Ret_bound_impl_;
static const int _Deref_in_bound_ = _Deref_in_bound_impl_;
static const int _Deref_out_bound_ = _Deref_out_bound_impl_;
static const int _Deref_inout_bound_ = _Deref_in_bound_ _Deref_out_bound_;
static const int _Deref_ret_bound_ = _Deref_ret_bound_impl_;
static const int _In_range_(lb,ub) = _In_range_impl_(lb,ub);
static const int _Out_range_(lb,ub) = _Out_range_impl_(lb,ub);
static const int _Ret_range_(lb,ub) = _Ret_range_impl_(lb,ub);
static const int _Deref_in_range_(lb,ub) = _Deref_in_range_impl_(lb,ub);
static const int _Deref_out_range_(lb,ub) = _Deref_out_range_impl_(lb,ub);
static const int _Deref_ret_range_(lb,ub) = _Deref_ret_range_impl_(lb,ub);
static const int _Pre_z_ = _Pre2_impl_(_$notnull, _$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_ = _Pre2_impl_(_$maybenull,_$zterm) _Deref_pre1_impl_(_$valid);
static const int _Pre_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size));
static const int _Pre_opt_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size));
static const int _Pre_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size));
static const int _Pre_opt_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Pre_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size));
static const int _Pre_opt_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Pre_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Pre_opt_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Pre_cap_m_(mult,size) = _Pre2_impl_(_$notnull, _$mult(mult,size));
static const int _Pre_opt_cap_m_(mult,size) = _Pre2_impl_(_$maybenull,_$mult(mult,size));
static const int _Pre_cap_for_(param) = _Pre2_impl_(_$notnull, _$cap_for(param));
static const int _Pre_opt_cap_for_(param) = _Pre2_impl_(_$maybenull,_$cap_for(param));
static const int _Pre_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size));
static const int _Pre_opt_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Pre_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Pre_opt_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Pre_ptrdiff_cap_(ptr) = _Pre2_impl_(_$notnull, _$cap_x(__ptrdiff(ptr)));
static const int _Pre_opt_ptrdiff_cap_(ptr) = _Pre2_impl_(_$maybenull,_$cap_x(__ptrdiff(ptr)));
static const int _Pre_z_cap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_c_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_c_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_cap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_cap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_z_bytecap_x_(size) = _Pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_z_bytecap_x_(size) = _Pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_(size) = _Pre2_impl_(_$notnull, _$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_(size) = _Pre2_impl_(_$maybenull,_$cap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_(size) = _Pre2_impl_(_$notnull, _$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_(size) = _Pre2_impl_(_$maybenull,_$bytecap(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_c_(size) = _Pre2_impl_(_$notnull, _$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_c_(size) = _Pre2_impl_(_$maybenull,_$cap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_c_(size) = _Pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_c_(size) = _Pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_cap_x_(size) = _Pre2_impl_(_$notnull, _$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_cap_x_(size) = _Pre2_impl_(_$maybenull,_$cap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_bytecap_x_(size) = _Pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_bytecap_x_(size) = _Pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_(size) = _Pre2_impl_(_$notnull, _$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_(size) = _Pre2_impl_(_$maybenull,_$count(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_(size) = _Pre2_impl_(_$notnull, _$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_(size) = _Pre2_impl_(_$maybenull,_$bytecount(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_c_(size) = _Pre2_impl_(_$notnull, _$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_c_(size) = _Pre2_impl_(_$maybenull,_$count_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_c_(size) = _Pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_c_(size) = _Pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_count_x_(size) = _Pre2_impl_(_$notnull, _$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_count_x_(size) = _Pre2_impl_(_$maybenull,_$count_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_bytecount_x_(size) = _Pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_bytecount_x_(size) = _Pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_pre1_impl_(_$valid);
static const int _Pre_ptrdiff_count_(ptr) = _Pre2_impl_(_$notnull, _$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_ptrdiff_count_(ptr) = _Pre2_impl_(_$maybenull,_$count_x(__ptrdiff(ptr))) _Deref_pre1_impl_(_$valid);
static const int _Pre_valid_ = _Pre1_impl_(_$notnull) _Deref_pre1_impl_(_$valid);
static const int _Pre_opt_valid_ = _Pre1_impl_(_$maybenull) _Deref_pre1_impl_(_$valid);
static const int _Pre_invalid_ = _Deref_pre1_impl_(_$notvalid);
static const int _Pre_notnull_ = _Pre1_impl_(_$notnull);
static const int _Pre_maybenull_ = _Pre1_impl_(_$maybenull);
static const int _Pre_null_ = _Pre1_impl_(_$null);
static const int _Pre_readonly_ = _Pre1_impl_(_$readaccess);
static const int _Pre_writeonly_ = _Pre1_impl_(_$writeaccess);
static const int _Post_z_ = _Post1_impl_(_$zterm) _Deref_post1_impl_(_$valid);
static const int _Post_maybez_ = _Post1_impl_(_$maybezterm);
static const int _Post_cap_(size) = _Post1_impl_(_$cap(size));
static const int _Post_bytecap_(size) = _Post1_impl_(_$bytecap(size));
static const int _Post_count_(size) = _Post1_impl_(_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_(size) = _Post1_impl_(_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_c_(size) = _Post1_impl_(_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_c_(size) = _Post1_impl_(_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_count_x_(size) = _Post1_impl_(_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_bytecount_x_(size) = _Post1_impl_(_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_(size) = _Post2_impl_(_$zterm,_$count(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_(size) = _Post2_impl_(_$zterm,_$bytecount(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_c_(size) = _Post2_impl_(_$zterm,_$count_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_c_(size) = _Post2_impl_(_$zterm,_$bytecount_c(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_count_x_(size) = _Post2_impl_(_$zterm,_$count_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_z_bytecount_x_(size) = _Post2_impl_(_$zterm,_$bytecount_x(size)) _Deref_post1_impl_(_$valid);
static const int _Post_ptr_invalid_ = _Post1_impl_(_$notvalid);
static const int _Post_valid_ = _Deref_post1_impl_(_$valid);
static const int _Post_invalid_ = _Deref_post1_impl_(_$notvalid);
static const int _Post_notnull_ = _Post1_impl_(_$notnull);
static const int _Ret_z_ = _Ret2_impl_(_$notnull, _$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_ = _Ret2_impl_(_$maybenull,_$zterm) _Deref_ret1_impl_(_$valid);
static const int _Ret_cap_(size) = _Ret2_impl_(_$notnull, _$cap(size));
static const int _Ret_opt_cap_(size) = _Ret2_impl_(_$maybenull,_$cap(size));
static const int _Ret_bytecap_(size) = _Ret2_impl_(_$notnull, _$bytecap(size));
static const int _Ret_opt_bytecap_(size) = _Ret2_impl_(_$maybenull,_$bytecap(size));
static const int _Ret_cap_c_(size) = _Ret2_impl_(_$notnull, _$cap_c(size));
static const int _Ret_opt_cap_c_(size) = _Ret2_impl_(_$maybenull,_$cap_c(size));
static const int _Ret_bytecap_c_(size) = _Ret2_impl_(_$notnull, _$bytecap_c(size));
static const int _Ret_opt_bytecap_c_(size) = _Ret2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Ret_cap_x_(size) = _Ret2_impl_(_$notnull, _$cap_x(size));
static const int _Ret_opt_cap_x_(size) = _Ret2_impl_(_$maybenull,_$cap_x(size));
static const int _Ret_bytecap_x_(size) = _Ret2_impl_(_$notnull, _$bytecap_x(size));
static const int _Ret_opt_bytecap_x_(size) = _Ret2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Ret_z_cap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_cap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecap_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecap_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_(size) = _Ret2_impl_(_$notnull, _$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_(size) = _Ret2_impl_(_$maybenull,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_(size) = _Ret2_impl_(_$notnull, _$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_(size) = _Ret2_impl_(_$maybenull,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_c_(size) = _Ret2_impl_(_$notnull, _$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_c_(size) = _Ret2_impl_(_$maybenull,_$count_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_c_(size) = _Ret2_impl_(_$notnull, _$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_c_(size) = _Ret2_impl_(_$maybenull,_$bytecount_c(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_count_x_(size) = _Ret2_impl_(_$notnull, _$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_count_x_(size) = _Ret2_impl_(_$maybenull,_$count_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_bytecount_x_(size) = _Ret2_impl_(_$notnull, _$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_bytecount_x_(size) = _Ret2_impl_(_$maybenull,_$bytecount_x(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_count_(size) = _Ret3_impl_(_$notnull, _$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_count_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$count(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_z_bytecount_(size) = _Ret3_impl_(_$notnull, _$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_z_bytecount_(size) = _Ret3_impl_(_$maybenull,_$zterm,_$bytecount(size)) _Deref_ret1_impl_(_$valid);
static const int _Ret_valid_ = _Ret1_impl_(_$notnull) _Deref_ret1_impl_(_$valid);
static const int _Ret_opt_valid_ = _Ret1_impl_(_$maybenull) _Deref_ret1_impl_(_$valid);
static const int _Ret_notnull_ = _Ret1_impl_(_$notnull);
static const int _Ret_maybenull_ = _Ret1_impl_(_$maybenull);
static const int _Ret_null_ = _Ret1_impl_(_$null);
static const int _Deref_pre_z_ = _Deref_pre2_impl_(_$notnull, _$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_ = _Deref_pre2_impl_(_$maybenull,_$zterm) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size));
static const int _Deref_pre_opt_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size));
static const int _Deref_pre_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_pre_opt_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_pre_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size));
static const int _Deref_pre_opt_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size));
static const int _Deref_pre_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size));
static const int _Deref_pre_opt_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size));
static const int _Deref_pre_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_pre_opt_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_pre_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_pre_opt_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_pre_z_cap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_c_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_c_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_cap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_cap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_z_bytecap_x_(size) = _Deref_pre3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_z_bytecap_x_(size) = _Deref_pre3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_(size) = _Deref_pre2_impl_(_$notnull, _$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_(size) = _Deref_pre2_impl_(_$maybenull,_$cap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_c_(size) = _Deref_pre2_impl_(_$notnull, _$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_cap_x_(size) = _Deref_pre2_impl_(_$notnull, _$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_cap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$cap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_bytecap_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_(size) = _Deref_pre2_impl_(_$notnull, _$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_(size) = _Deref_pre2_impl_(_$maybenull,_$count(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_c_(size) = _Deref_pre2_impl_(_$notnull, _$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_c_(size) = _Deref_pre2_impl_(_$maybenull,_$count_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_c_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_c_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_count_x_(size) = _Deref_pre2_impl_(_$notnull, _$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_count_x_(size) = _Deref_pre2_impl_(_$maybenull,_$count_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_bytecount_x_(size) = _Deref_pre2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_bytecount_x_(size) = _Deref_pre2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_valid_ = _Deref_pre1_impl_(_$notnull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_opt_valid_ = _Deref_pre1_impl_(_$maybenull) _Deref2_pre1_impl_(_$valid);
static const int _Deref_pre_invalid_ = _Deref2_pre1_impl_(_$notvalid);
static const int _Deref_pre_notnull_ = _Deref_pre1_impl_(_$notnull);
static const int _Deref_pre_maybenull_ = _Deref_pre1_impl_(_$maybenull);
static const int _Deref_pre_null_ = _Deref_pre1_impl_(_$null);
static const int _Deref_pre_readonly_ = _Deref_pre1_impl_(_$readaccess);
static const int _Deref_pre_writeonly_ = _Deref_pre1_impl_(_$writeaccess);
static const int _Deref_post_z_ = _Deref_post2_impl_(_$notnull, _$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_ = _Deref_post2_impl_(_$maybenull,_$zterm) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size));
static const int _Deref_post_opt_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size));
static const int _Deref_post_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size));
static const int _Deref_post_opt_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size));
static const int _Deref_post_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_z(size));
static const int _Deref_post_opt_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_z(size));
static const int _Deref_post_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_z(size));
static const int _Deref_post_opt_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_z(size));
static const int _Deref_post_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size));
static const int _Deref_post_opt_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size));
static const int _Deref_post_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size));
static const int _Deref_post_opt_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size));
static const int _Deref_post_z_cap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_c_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_c_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_cap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_cap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_z_bytecap_x_(size) = _Deref_post3_impl_(_$notnull, _$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_z_bytecap_x_(size) = _Deref_post3_impl_(_$maybenull,_$zterm,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_(size) = _Deref_post2_impl_(_$notnull, _$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_(size) = _Deref_post2_impl_(_$maybenull,_$cap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_(size) = _Deref_post2_impl_(_$notnull, _$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_c_(size) = _Deref_post2_impl_(_$notnull, _$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_c_(size) = _Deref_post2_impl_(_$maybenull,_$cap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_cap_x_(size) = _Deref_post2_impl_(_$notnull, _$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_cap_x_(size) = _Deref_post2_impl_(_$maybenull,_$cap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_bytecap_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_bytecap_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecap_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_(size) = _Deref_post2_impl_(_$notnull, _$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_(size) = _Deref_post2_impl_(_$maybenull,_$count(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_(size) = _Deref_post2_impl_(_$notnull, _$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_c_(size) = _Deref_post2_impl_(_$notnull, _$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_c_(size) = _Deref_post2_impl_(_$maybenull,_$count_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_c_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_c_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_c(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_count_x_(size) = _Deref_post2_impl_(_$notnull, _$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_count_x_(size) = _Deref_post2_impl_(_$maybenull,_$count_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_bytecount_x_(size) = _Deref_post2_impl_(_$notnull, _$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_bytecount_x_(size) = _Deref_post2_impl_(_$maybenull,_$bytecount_x(size)) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_valid_ = _Deref_post1_impl_(_$notnull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_opt_valid_ = _Deref_post1_impl_(_$maybenull) _Deref2_post1_impl_(_$valid);
static const int _Deref_post_notnull_ = _Deref_post1_impl_(_$notnull);
static const int _Deref_post_maybenull_ = _Deref_post1_impl_(_$maybenull);
static const int _Deref_post_null_ = _Deref_post1_impl_(_$null);
static const int _Deref_ret_z_ = _Deref_ret2_impl_(_$notnull, _$zterm);
static const int _Deref_ret_opt_z_ = _Deref_ret2_impl_(_$maybenull,_$zterm);
static const int _Deref2_pre_readonly_ = _Deref2_pre1_impl_(_$readaccess);
static const int _Prepost_z_ = _Pre_z_ _Post_z_;
static const int _Prepost_opt_z_ = _Pre_opt_z_ _Post_z_;
static const int _Prepost_count_(size) = _Pre_count_(size) _Post_count_(size);
static const int _Prepost_opt_count_(size) = _Pre_opt_count_(size) _Post_count_(size);
static const int _Prepost_bytecount_(size) = _Pre_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_opt_bytecount_(size) = _Pre_opt_bytecount_(size) _Post_bytecount_(size);
static const int _Prepost_count_c_(size) = _Pre_count_c_(size) _Post_count_c_(size);
static const int _Prepost_opt_count_c_(size) = _Pre_opt_count_c_(size) _Post_count_c_(size);
static const int _Prepost_bytecount_c_(size) = _Pre_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_opt_bytecount_c_(size) = _Pre_opt_bytecount_c_(size) _Post_bytecount_c_(size);
static const int _Prepost_count_x_(size) = _Pre_count_x_(size) _Post_count_x_(size);
static const int _Prepost_opt_count_x_(size) = _Pre_opt_count_x_(size) _Post_count_x_(size);
static const int _Prepost_bytecount_x_(size) = _Pre_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_opt_bytecount_x_(size) = _Pre_opt_bytecount_x_(size) _Post_bytecount_x_(size);
static const int _Prepost_valid_ = _Pre_valid_ _Post_valid_;
static const int _Prepost_opt_valid_ = _Pre_opt_valid_ _Post_valid_;
static const int _Deref_prepost_z_ = _Deref_pre_z_ _Deref_post_z_;
static const int _Deref_prepost_opt_z_ = _Deref_pre_opt_z_ _Deref_post_opt_z_;
static const int _Deref_prepost_cap_(size) = _Deref_pre_cap_(size) _Deref_post_cap_(size);
static const int _Deref_prepost_opt_cap_(size) = _Deref_pre_opt_cap_(size) _Deref_post_opt_cap_(size);
static const int _Deref_prepost_bytecap_(size) = _Deref_pre_bytecap_(size) _Deref_post_bytecap_(size);
static const int _Deref_prepost_opt_bytecap_(size) = _Deref_pre_opt_bytecap_(size) _Deref_post_opt_bytecap_(size);
static const int _Deref_prepost_cap_x_(size) = _Deref_pre_cap_x_(size) _Deref_post_cap_x_(size);
static const int _Deref_prepost_opt_cap_x_(size) = _Deref_pre_opt_cap_x_(size) _Deref_post_opt_cap_x_(size);
static const int _Deref_prepost_bytecap_x_(size) = _Deref_pre_bytecap_x_(size) _Deref_post_bytecap_x_(size);
static const int _Deref_prepost_opt_bytecap_x_(size) = _Deref_pre_opt_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size);
static const int _Deref_prepost_z_cap_(size) = _Deref_pre_z_cap_(size) _Deref_post_z_cap_(size);
static const int _Deref_prepost_opt_z_cap_(size) = _Deref_pre_opt_z_cap_(size) _Deref_post_opt_z_cap_(size);
static const int _Deref_prepost_z_bytecap_(size) = _Deref_pre_z_bytecap_(size) _Deref_post_z_bytecap_(size);
static const int _Deref_prepost_opt_z_bytecap_(size) = _Deref_pre_opt_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size);
static const int _Deref_prepost_valid_cap_(size) = _Deref_pre_valid_cap_(size) _Deref_post_valid_cap_(size);
static const int _Deref_prepost_opt_valid_cap_(size) = _Deref_pre_opt_valid_cap_(size) _Deref_post_opt_valid_cap_(size);
static const int _Deref_prepost_valid_bytecap_(size) = _Deref_pre_valid_bytecap_(size) _Deref_post_valid_bytecap_(size);
static const int _Deref_prepost_opt_valid_bytecap_(size) = _Deref_pre_opt_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size);
static const int _Deref_prepost_valid_cap_x_(size) = _Deref_pre_valid_cap_x_(size) _Deref_post_valid_cap_x_(size);
static const int _Deref_prepost_opt_valid_cap_x_(size) = _Deref_pre_opt_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size);
static const int _Deref_prepost_valid_bytecap_x_(size) = _Deref_pre_valid_bytecap_x_(size) _Deref_post_valid_bytecap_x_(size);
static const int _Deref_prepost_opt_valid_bytecap_x_(size) = _Deref_pre_opt_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size);
static const int _Deref_prepost_count_(size) = _Deref_pre_count_(size) _Deref_post_count_(size);
static const int _Deref_prepost_opt_count_(size) = _Deref_pre_opt_count_(size) _Deref_post_opt_count_(size);
static const int _Deref_prepost_bytecount_(size) = _Deref_pre_bytecount_(size) _Deref_post_bytecount_(size);
static const int _Deref_prepost_opt_bytecount_(size) = _Deref_pre_opt_bytecount_(size) _Deref_post_opt_bytecount_(size);
static const int _Deref_prepost_count_x_(size) = _Deref_pre_count_x_(size) _Deref_post_count_x_(size);
static const int _Deref_prepost_opt_count_x_(size) = _Deref_pre_opt_count_x_(size) _Deref_post_opt_count_x_(size);
static const int _Deref_prepost_bytecount_x_(size) = _Deref_pre_bytecount_x_(size) _Deref_post_bytecount_x_(size);
static const int _Deref_prepost_opt_bytecount_x_(size) = _Deref_pre_opt_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size);
static const int _Deref_prepost_valid_ = _Deref_pre_valid_ _Deref_post_valid_;
static const int _Deref_prepost_opt_valid_ = _Deref_pre_opt_valid_ _Deref_post_opt_valid_;
static const int _Deref_out_z_cap_c_(size) = _Deref_pre_cap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_cap_c_(size) = _Deref_pre_z_cap_c_(size) _Deref_post_z_;
static const int _Deref_out_z_bytecap_c_(size) = _Deref_pre_bytecap_c_(size) _Deref_pre_invalid_ _Deref_post_z_;
static const int _Deref_inout_z_bytecap_c_(size) = _Deref_pre_z_bytecap_c_(size) _Deref_post_z_;
static const int _Deref_inout_z_ = _Deref_prepost_z_;
static const int _= __notnull __elem_writableTo(size);
static const int _= __notnull __byte_writableTo(size);
static const int = __pre __valid __pre __readonly;
static const int = __pre __elem_readableTo(size);
static const int = __pre __byte_readableTo(size);
static const int __in_z = __pre __nullterminated;
static const int __in_ecount_z(size) = __pre __nullterminated;
static const int __in_bcount_z(size) = __pre __nullterminated;
static const int __in_nz = __in;
static const int __in_ecount_nz(size) = ;
static const int __in_bcount_nz(size) = ;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = ___valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int = ;
static const int = ;
static const int __out_z = __valid __refparam __nullterminated;
static const int __out_z_opt = __valid __refparam __nullterminated __exceptthat __maybenull;
static const int __out_ecount_z(size) = ___valid __refparam __nullterminated;
static const int __out_bcount_z(size) = ___valid __refparam __nullterminated;
static const int __out_ecount_part_z(size,length) = __nullterminated;
static const int __out_bcount_part_z(size,length) = __nullterminated;
static const int __out_ecount_full_z(size) = __nullterminated;
static const int __out_bcount_full_z(size) = __nullterminated;
static const int __out_nz = __valid __refparam ;
static const int __out_nz_opt = __valid __refparam __exceptthat __maybenull;
static const int __out_ecount_nz(size) = ___valid __refparam;
static const int __out_bcount_nz(size) = ___valid __refparam;
static const int = __pre __valid __valid __refparam;
static const int = __pre __valid;
static const int = __pre __valid;
static const int = __pre __valid __pre __elem_readableTo(length);
static const int = __pre __valid __pre __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = ___exceptthat __maybenull;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __in_z_opt = __pre __nullterminated;
static const int __in_ecount_z_opt(size) = __pre __nullterminated;
static const int __in_bcount_z_opt(size) = __pre __nullterminated;
static const int __in_nz_opt = ;
static const int __in_ecount_nz_opt(size) = ;
static const int __in_bcount_nz_opt(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_ecount_full_opt(size) = __exceptthat __maybenull;
static const int __out_bcount_full_opt(size) = __exceptthat __maybenull;
static const int __out_ecount_z_opt(size) = __nullterminated;
static const int __out_bcount_z_opt(size) = __nullterminated;
static const int __out_ecount_part_z_opt(size,length) = __nullterminated;
static const int __out_bcount_part_z_opt(size,length) = __nullterminated;
static const int __out_ecount_full_z_opt(size) = __out_ecount_full_opt(size) __nullterminated;
static const int __out_bcount_full_z_opt(size) = __out_bcount_full_opt(size) __nullterminated;
static const int __out_ecount_nz_opt(size) = __nullterminated;
static const int __out_bcount_nz_opt(size) = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = ;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int = ___elem_readableTo(1) __notnull __elem_writableTo(size);
static const int = ___elem_readableTo(1) __notnull __byte_writableTo(size);
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __valid __refparam;
static const int = __elem_readableTo(length);
static const int = __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __valid __refparam __nullterminated;
static const int _ecount_z(size) = __nullterminated;
static const int _bcount_z(size) = __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __notnull __elem_readableTo(1) __pre __valid __valid __refparam;
static const int _z = __pre __nullterminated __nullterminated;
static const int = __pre __elem_writableTo(size) __elem_writableTo(size);
static const int = __pre __byte_writableTo(size) __byte_writableTo(size);
static const int = __pre __elem_readableTo(length) __elem_readableTo(length);
static const int = __pre __byte_readableTo(length) __byte_readableTo(length);
static const int _ecount_full(size) = ;
static const int _bcount_full(size) = ;
static const int _z = __pre __nullterminated __nullterminated;
static const int _ecount_z(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z(size) = __pre __nullterminated __nullterminated;
static const int _nz = ;
static const int _ecount_nz(size) = ;
static const int _bcount_nz(size) = ;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _opt = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __execeptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _z_opt = _opt __pre __nullterminated __nullterminated;
static const int _ecount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _bcount_z_opt(size) = __pre __nullterminated __nullterminated;
static const int _nz_opt = _opt;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _z = __nullterminated;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _ecount_full(size) __exceptthat __maybenull;
static const int = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout = __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full(size) = _ecount_full(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full(size) = _bcount_full(size) __exceptthat __maybenull;
static const int _opt_inout_z = _opt_inout __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz = _opt_inout;
static const int _opt_inout_ecount_nz(size) = _opt_inout;
static const int _opt_inout_bcount_nz(size) = _opt_inout;
static const int _opt= __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int = _opt __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _z_opt = __valid __refparam __exceptthat __maybenull __pre __exceptthat __maybenull __exceptthat __maybenull __nullterminated;
static const int _ecount_z_opt(size) = __nullterminated;
static const int _bcount_z_opt(size) = __nullterminated;
static const int _nz_opt = ;
static const int _ecount_nz_opt(size) = ;
static const int _bcount_nz_opt(size) = ;
static const int _opt_inout_opt = _opt __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_ecount_full_opt(size) = _ecount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_bcount_full_opt(size) = _bcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout_z_opt = _opt_inout_opt __pre __nullterminated __nullterminated;
static const int _opt_inout_ecount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_bcount_z_opt(size) = _opt_inout__pre __nullterminated __nullterminated;
static const int _opt_inout_nz_opt = _opt_inout_opt;
static const int _opt_inout_ecount_nz_opt(size) = _opt_inout;
static const int _opt_inout_bcount_nz_opt(size) = _opt_inout;
static const int = __inner_success(expr);
static const int __nullterminated = __readableTo(sentinel(0));
static const int = __pre __null;
static const int = __inner_checkReturn;
static const int __typefix(ctype) = __inner_typefix(ctype);
static const int __override = __inner_override;
static const int = __inner_callback;
static const int __blocksOn(resource) = __inner_blocksOn(resource);
static const int __control_entrypoint(category) = __inner_control_entrypoint(category);
static const int __data_entrypoint(category) = __inner_data_entrypoint(category);
static const int __fallthrough = __inner_fallthrough;
static const int _CRT_PACKING = 8;
static const int _CRT_PACKING = 8;
typedef unsigned __int64 uintptr_t;
typedef char * va_list;
static const int _ADDRESSOF(v) = ( &(v) );
static const int _SLOTSIZEOF(t) = (sizeof(t));
static const int _APALIGN(t,ap) = (__alignof(t));
static const int _INTSIZEOF(n) = ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) );
static const int _crt_va_start(ap,v) = ( ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v) );
static const int _crt_va_arg(ap,t) = ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) );
static const int _crt_va_end(ap) = ( ap = (va_list)0 );
static const int __CRT_STRINGIZE(_Value) = #_Value;
static const int _CRT_STRINGIZE(_Value) = __CRT_STRINGIZE(_Value);
static const int __CRT_WIDE(_String) = L ## _String;
static const int _CRT_WIDE(_String) = __CRT_WIDE(_String);
static const int __CRT_APPEND(_Value1,_Value2) = _Value1 ## _Value2;
static const int _CRT_APPEND(_Value1,_Value2) = __CRT_APPEND(_Value1, _Value2);
static const int _NOIA64 = ;
static const int _MRTIMP = ;
static const int __CLRCALL_OR_CDECL = ;
static const int _PURE = ;
static const long __STDC_SECURE_LIB__ = 200411L;
static const int __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
static const int __STDC_WANT_SECURE_LIB__ = 1;
static const int _CRT_DEPRECATE_TEXT(_Text) = ;
static const int _CRT_INSECURE_DEPRECATE(_Replacement) = _CRT_DEPRECATE_TEXT("This function or variable may be unsafe. Consider using " #_Replacement " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.");
static const int _CRT_INSECURE_DEPRECATE_GLOBALS(_Replacement) = _CRT_INSECURE_DEPRECATE(_Replacement);
static const int _SECURECRT_FILL_BUFFER_PATTERN = 0xFE;
static const int _CRT_OBSOLETE(_NewItem) = _CRT_DEPRECATE_TEXT("This function or variable has been superceded by newer library or operating system functionality. Consider using " #_NewItem " instead. See online help for details.");
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
static const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
static const int _CRT_SECURE_CPP_NOTHROW = throw();
static const int _CRT_NONSTDC_DEPRECATE(_NewName) = _CRT_DEPRECATE_TEXT("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " #_NewName ". See online help for details.");
typedef unsigned __int64 size_t;
typedef size_t rsize_t;
typedef __int64 intptr_t;
typedef __int64 ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t; /* 32-bit time value */
typedef __int64 __time64_t; /* 64-bit time value */
typedef __time64_t time_t; /* time value */
static const int _CRT_ALIGN(x) = );
static const int _CRTNOALIAS = ;
static const int _CRTRESTRICT = ;
static const int __CRTDECL = ;
static const int __STR2WSTR(str) = L ##str;
static const int _STR2WSTR(str) = __STR2WSTR(str);
static const int __FILEW__ = _STR2WSTR(__FILE__);
static const int __FUNCTIONW__ = _STR2WSTR(__FUNCTION__);
 void _invalid_parameter_noinfo(void);
 void _invalid_parameter_noinfo_noreturn(void);
void _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
static const int _CRT_SECURE_INVALID_PARAMETER(expr) = ::_invalid_parameter_noinfo_noreturn();
static const int _ARGMAX = 100;
static const int _TRUNCATE = ((size_t)-1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _VFuncName, _VFuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3, _TType4, _TArg4);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _HType1, _HArg1, _HType2, _HArg2, _SalAttributeDst, _DstType, _Dst);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName ##_s, _VFuncName, _VFuncName ##_s, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE(_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec, _FuncName, _FuncName ##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1, _TType2, _TArg2, _TType3, _TArg3);
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_CGETS(_ReturnType,_DeclSpec,_FuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureVFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_0_GETS(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_4_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3,_TType4,_TArg4) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_1_1_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _SalAttributeDst _DstType *_Dst, _TType1 _TArg1);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_2_0_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_HType1,_HArg1,_HType2,_HArg2,_SalAttributeDst,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_HType1 _HArg1, _HType2 _HArg2, _SalAttributeDst _DstType *_Dst);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_1_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_SecureFuncName,_VFuncName,_SecureVFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, ...); _CRT_INSECURE_DEPRECATE(_SecureVFuncName) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_ARGLIST_EX(_ReturnType,_ReturnPolicy,_DeclSpec,_FuncName,_VFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_FuncName ##_s) _DeclSpec _ReturnType _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, ...); _CRT_INSECURE_DEPRECATE(_VFuncName ##_s) _DeclSpec _ReturnType _VFuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _Args);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);;
static const int __DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_3_SIZE_EX(_DeclSpec,_FuncName,_SecureFuncName,_SecureDstType,_SalAttributeDst,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec size_t _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);;
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_FUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_0_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_1_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_2_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
static const int __DECLARE_CPP_OVERLOAD_INLINE_NFUNC_0_3_EX(_ReturnType,_ReturnPolicy,_FuncName,_SecureFuncName,_SecureDstType,_DstType,_Dst,_TType1,_TArg1,_TType2,_TArg2,_TType3,_TArg3) = _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3);
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;
typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;
typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; /* LCID */
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;
static const int _CRT_UNUSED(x) = (void)x;
typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
static const int GetExceptionCode = _exception_code;
static const int exception_code = _exception_code;
static const int GetExceptionInformation = (struct _EXCEPTION_POINTERS *)_exception_info;
static const int exception_info = (struct _EXCEPTION_POINTERS *)_exception_info;
static const int AbnormalTermination = _abnormal_termination;
static const int abnormal_termination = _abnormal_termination;
unsigned long _exception_code(void);
void * _exception_info(void);
int _abnormal_termination(void);
static const int EXCEPTION_EXECUTE_HANDLER = 1;
static const int EXCEPTION_CONTINUE_SEARCH = 0;
static const int EXCEPTION_CONTINUE_EXECUTION = -1;
static const int va_start = _crt_va_start;
static const int va_arg = _crt_va_arg;
static const int va_end = _crt_va_end;
static const int STRICT = 1;
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
static const int MAX_PATH = 260;
static const int NULL = ((void *)0);
static const int FALSE = 0;
static const int TRUE = 1;
static const int APIENTRY = ;
static const int = pascal;
static const int _INLINE = ;
static const int FAR = far;
static const int NEAR = near;
static const int = const;
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;
typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;
static const int WEOF = (wint_t)(0xFFFF);
static const int __PCTYPE_FUNC = __pctype_func();
 const unsigned short * __pctype_func(void);
 const unsigned short *_pctype;
 const unsigned short _wctype[];
 const wctype_t * __pwctype_func(void);
 const wctype_t *_pwctype;
static const int _UPPER = 0x1;
static const int _LOWER = 0x2;
static const int _DIGIT = 0x4;
static const int _SPACE = 0x8;
static const int _PUNCT = 0x10;
static const int _CONTROL = 0x20;
static const int _BLANK = 0x40;
static const int _HEX = 0x80;
static const int _LEADBYTE = 0x8000;
static const int _ALPHA = (0x0100|_UPPER|_LOWER);
 int _isctype( int _C, int _Type);
 int _isctype_l( int _C, int _Type, _locale_t _Locale);
 int isalpha( int _C);
 int _isalpha_l( int _C, _locale_t _Locale);
 int isupper( int _C);
 int _isupper_l( int _C, _locale_t _Locale);
 int islower( int _C);
 int _islower_l( int _C, _locale_t _Locale);
 int isdigit( int _C);
 int _isdigit_l( int _C, _locale_t _Locale);
 int isxdigit( int _C);
 int _isxdigit_l( int _C, _locale_t _Locale);
 int isspace( int _C);
 int _isspace_l( int _C, _locale_t _Locale);
 int ispunct( int _C);
 int _ispunct_l( int _C, _locale_t _Locale);
 int isalnum( int _C);
 int _isalnum_l( int _C, _locale_t _Locale);
 int isprint( int _C);
 int _isprint_l( int _C, _locale_t _Locale);
 int isgraph( int _C);
 int _isgraph_l( int _C, _locale_t _Locale);
 int iscntrl( int _C);
 int _iscntrl_l( int _C, _locale_t _Locale);
 int toupper( int _C);
 int tolower( int _C);
 int _tolower( int _C);
 int _tolower_l( int _C, _locale_t _Locale);
 int _toupper( int _C);
 int _toupper_l( int _C, _locale_t _Locale);
 int __isascii( int _C);
 int __toascii( int _C);
 int __iscsymf( int _C);
 int __iscsym( int _C);
 int iswalpha( wint_t _C);
 int _iswalpha_l( wint_t _C, _locale_t _Locale);
 int iswupper( wint_t _C);
 int _iswupper_l( wint_t _C, _locale_t _Locale);
 int iswlower( wint_t _C);
 int _iswlower_l( wint_t _C, _locale_t _Locale);
 int iswdigit( wint_t _C);
 int _iswdigit_l( wint_t _C, _locale_t _Locale);
 int iswxdigit( wint_t _C);
 int _iswxdigit_l( wint_t _C, _locale_t _Locale);
 int iswspace( wint_t _C);
 int _iswspace_l( wint_t _C, _locale_t _Locale);
 int iswpunct( wint_t _C);
 int _iswpunct_l( wint_t _C, _locale_t _Locale);
 int iswalnum( wint_t _C);
 int _iswalnum_l( wint_t _C, _locale_t _Locale);
 int iswprint( wint_t _C);
 int _iswprint_l( wint_t _C, _locale_t _Locale);
 int iswgraph( wint_t _C);
 int _iswgraph_l( wint_t _C, _locale_t _Locale);
 int iswcntrl( wint_t _C);
 int _iswcntrl_l( wint_t _C, _locale_t _Locale);
 int iswascii( wint_t _C);
 int isleadbyte( int _C);
 int _isleadbyte_l( int _C, _locale_t _Locale);
 wint_t towupper( wint_t _C);
 wint_t _towupper_l( wint_t _C, _locale_t _Locale);
 wint_t towlower( wint_t _C);
 wint_t _towlower_l( wint_t _C, _locale_t _Locale);
 int iswctype( wint_t _C, wctype_t _Type);
 int _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);
 int __iswcsymf( wint_t _C);
 int _iswcsymf_l( wint_t _C, _locale_t _Locale);
 int __iswcsym( wint_t _C);
 int _iswcsym_l( wint_t _C, _locale_t _Locale);
int is_wctype( wint_t _C, wctype_t _Type);
static const int MB_CUR_MAX = ___mb_cur_max_func();
 int __mb_cur_max;
 int ___mb_cur_max_func(void);
 int ___mb_cur_max_l_func(_locale_t);
static const int __chvalidchk(a,b) = (__PCTYPE_FUNC[(a)] & (b));
static const int _chvalidchk_l(_Char,_Flag,_Locale) = (_Locale==NULL ? __chvalidchk(_Char, _Flag) : ((_locale_t)_Locale)->locinfo->pctype[_Char] & (_Flag));
static const int _ischartype_l(_Char,_Flag,_Locale) = ( ((_Locale)!=NULL && (((_locale_t)(_Locale))->locinfo->mb_cur_max) > 1) ? _isctype_l(_Char, (_Flag), _Locale) : _chvalidchk_l(_Char,_Flag,_Locale));
static const int _isalpha_l(_Char,_Locale) = _ischartype_l(_Char, _ALPHA, _Locale);
static const int _isupper_l(_Char,_Locale) = _ischartype_l(_Char, _UPPER, _Locale);
static const int _islower_l(_Char,_Locale) = _ischartype_l(_Char, _LOWER, _Locale);
static const int _isdigit_l(_Char,_Locale) = _ischartype_l(_Char, _DIGIT, _Locale);
static const int _isxdigit_l(_Char,_Locale) = _ischartype_l(_Char, _HEX, _Locale);
static const int _isspace_l(_Char,_Locale) = _ischartype_l(_Char, _SPACE, _Locale);
static const int _ispunct_l(_Char,_Locale) = _ischartype_l(_Char, _PUNCT, _Locale);
static const int _isalnum_l(_Char,_Locale) = _ischartype_l(_Char, _ALPHA|_DIGIT, _Locale);
static const int _isprint_l(_Char,_Locale) = _ischartype_l(_Char, _BLANK|_PUNCT|_ALPHA|_DIGIT, _Locale);
static const int _isgraph_l(_Char,_Locale) = _ischartype_l(_Char, _PUNCT|_ALPHA|_DIGIT, _Locale);
static const int _iscntrl_l(_Char,_Locale) = _ischartype_l(_Char, _CONTROL, _Locale);
static const int _tolower(_Char) = ( (_Char)-'A'+'a' );
static const int _toupper(_Char) = ( (_Char)-'a'+'A' );
static const int __isascii(_Char) = ( (unsigned)(_Char) < 0x80 );
static const int __toascii(_Char) = ( (_Char) & 0x7f );
static const int iswalpha(_c) = ( iswctype(_c,_ALPHA) );
static const int iswupper(_c) = ( iswctype(_c,_UPPER) );
static const int iswlower(_c) = ( iswctype(_c,_LOWER) );
static const int iswdigit(_c) = ( iswctype(_c,_DIGIT) );
static const int iswxdigit(_c) = ( iswctype(_c,_HEX) );
static const int iswspace(_c) = ( iswctype(_c,_SPACE) );
static const int iswpunct(_c) = ( iswctype(_c,_PUNCT) );
static const int iswalnum(_c) = ( iswctype(_c,_ALPHA|_DIGIT) );
static const int iswprint(_c) = ( iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT) );
static const int iswgraph(_c) = ( iswctype(_c,_PUNCT|_ALPHA|_DIGIT) );
static const int iswcntrl(_c) = ( iswctype(_c,_CONTROL) );
static const int iswascii(_c) = ( (unsigned)(_c) < 0x80 );
static const int _iswalpha_l(_c,_p) = ( iswctype(_c,_ALPHA) );
static const int _iswupper_l(_c,_p) = ( iswctype(_c,_UPPER) );
static const int _iswlower_l(_c,_p) = ( iswctype(_c,_LOWER) );
static const int _iswdigit_l(_c,_p) = ( iswctype(_c,_DIGIT) );
static const int _iswxdigit_l(_c,_p) = ( iswctype(_c,_HEX) );
static const int _iswspace_l(_c,_p) = ( iswctype(_c,_SPACE) );
static const int _iswpunct_l(_c,_p) = ( iswctype(_c,_PUNCT) );
static const int _iswalnum_l(_c,_p) = ( iswctype(_c,_ALPHA|_DIGIT) );
static const int _iswprint_l(_c,_p) = ( iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT) );
static const int _iswgraph_l(_c,_p) = ( iswctype(_c,_PUNCT|_ALPHA|_DIGIT) );
static const int _iswcntrl_l(_c,_p) = ( iswctype(_c,_CONTROL) );
static const int __iscsymf(_c) = (isalpha(_c) || ((_c) == '_'));
static const int __iscsym(_c) = (isalnum(_c) || ((_c) == '_'));
static const int __iswcsymf(_c) = (iswalpha(_c) || ((_c) == '_'));
static const int __iswcsym(_c) = (iswalnum(_c) || ((_c) == '_'));
static const int _iscsymf_l(_c,_p) = (_isalpha_l(_c, _p) || ((_c) == '_'));
static const int _iscsym_l(_c,_p) = (_isalnum_l(_c, _p) || ((_c) == '_'));
static const int _iswcsymf_l(_c,_p) = (iswalpha(_c) || ((_c) == '_'));
static const int _iswcsym_l(_c,_p) = (iswalnum(_c) || ((_c) == '_'));
static const int ANYSIZE_ARRAY = 1;
static const int DUMMYUNIONNAME = u;
static const int DUMMYUNIONNAME2 = u2;
static const int DUMMYUNIONNAME3 = u3;
static const int DUMMYUNIONNAME4 = u4;
static const int DUMMYUNIONNAME5 = u5;
static const int DUMMYUNIONNAME6 = u6;
static const int DUMMYUNIONNAME7 = u7;
static const int DUMMYUNIONNAME8 = u8;
static const int DUMMYUNIONNAME9 = u9;
static const int DUMMYSTRUCTNAME = s;
static const int DUMMYSTRUCTNAME2 = s2;
static const int DUMMYSTRUCTNAME3 = s3;
static const int DUMMYSTRUCTNAME4 = s4;
static const int DUMMYSTRUCTNAME5 = s5;
static const int __SAL_H_FULL_VER = 140050727;
static const int _= __notnull __inexpressible_writableTo(size);
static const int = __pre __inexpressible_readableTo(size);
static const int = ___valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int = ;
static const int = __pre __valid;
static const int = __pre __valid __pre __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = ___exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int __out_xcount_full_opt(size) = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = ___elem_readableTo(1) __notnull __inexpressible_writableTo(size);
static const int _in = __pre __readonly;
static const int _in= _in __pre __elem_readableTo(size);
static const int _in= _in __pre __byte_readableTo(size);
static const int _in= _in __pre __inexpressible_readableTo(size);
static const int = __valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __valid __refparam;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = ___elem_readableTo(1) __notnull __inexpressible_writableTo(size);
static const int _in = __pre __readonly;
static const int _in= _in __pre __elem_readableTo(size);
static const int _in= _in __pre __byte_readableTo(size);
static const int _in= _in __pre __inexpressible_readableTo(size);
static const int = __valid __refparam;
static const int = __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __valid __refparam;
static const int = __pre __inexpressible_writableTo(size) __inexpressible_writableTo(size);
static const int = __pre __inexpressible_readableTo(length) __inexpressible_readableTo(length);
static const int _xcount_full(size) = ;
static const int = __exceptthat __maybenull;
static const int _in_opt = _in __pre __exceptthat __maybenull;
static const int _in_opt_out = __pre __exceptthat __maybenull __notnull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int _in= _in__pre __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int = __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full(size) __pre __exceptthat __maybenull __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int _opt_in = _in __exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = _xcount_full(size) __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_xcount_full(size) = _xcount_full(size) __exceptthat __maybenull;
static const int _opt= __exceptthat __maybenull;
static const int _opt_in_opt = _in_opt __exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int _opt_in= _in__exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int = __exceptthat __maybenull;
static const int _xcount_full_opt(size) = _xcount_full_opt(size) __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout= __exceptthat __maybenull;
static const int _opt_inout_xcount_full_opt(size) = _xcount_full_opt(size) __exceptthat __maybenull;
static const int = __inexpressible_readableTo("string terminated by two nulls") __nullterminated;
static const int = __inner_checkReturn;
static const int __field= __notnull __elem_writableTo(size);
static const int = __notnull __byte_writableTo(size);
static const int __field= __notnull __inexpressible_writableTo(size);
static const int __field= __maybenull __elem_writableTo(size);
static const int __field= __maybenull __byte_writableTo(size);
static const int __field= __maybenull __inexpressible_writableTo(size);
static const int __field= __notnull __elem_writableTo(size) __elem_readableTo(init);
static const int __field= __notnull __byte_writableTo(size) __byte_readableTo(init);
static const int __field= __notnull __inexpressible_writableTo(size) __inexpressible_readableTo(init);
static const int __field= __maybenull __elem_writableTo(size) __elem_readableTo(init);
static const int __field= __maybenull __byte_writableTo(size) __byte_readableTo(init);
static const int __field= __maybenull __inexpressible_writableTo(size) __inexpressible_readableTo(init);
static const int __field_ecount_full(size) = __field;
static const int __field_bcount_full(size) = __field;
static const int __field_xcount_full(size) = __field;
static const int __field_ecount_full_opt(size) = __field;
static const int __field_bcount_full_opt(size) = __field;
static const int __field_xcount_full_opt(size) = __field;
static const int __field_nullterminated = __nullterminated;
static const int __struct= __byte_writableTo(size);
static const int __struct= __inexpressible_writableTo(size);
static const int __out_awcount(expr,size) = __pre __notnull __byte_writableTo((expr) ? (size) : (size) * 2) __valid __refparam;
static const int __in_awcount(expr,size) = __pre __valid __pre __readonly __byte_readableTo((expr) ? (size) : (size) * 2);
static const int _invalid = ;
static const int __allocator = __inner_allocator;
static const int __deallocate(kind) = __pre __notnull _invalid;
static const int __deallocate_opt(kind) = __pre __maybenull _invalid;
static const int __bound = __inner_bound;
static const int __range(lb,ub) = __inner_range(lb,ub);
static const int __in_bound = __pre __inner_bound;
static const int __out_bound = __inner_bound;
static const int _bound = __inner_bound;
static const int __in_range(lb,ub) = __pre __inner_range(lb,ub);
static const int __out_range(lb,ub) = __inner_range(lb,ub);
static const int _in_range(lb,ub) = __pre __inner_range(lb,ub);
static const int _range(lb,ub) = __inner_range(lb,ub);
static const int _range(lb,ub) = _in_range(lb,ub) _range(lb,ub);
static const int __field_range(lb,ub) = __range(lb,ub);
static const int __field_data_source(src_sym) = __inner_data_source(#src_sym);
static const int __range_max(a,b) = __range(>=,a) __range(>=,b);
static const int __range_min(a,b) = __range(<=,a) __range(<=,b);
static const int __in_data_source(src_sym) = __pre __inner_data_source(#src_sym);
static const int = __inner_data_source(#src_sym);
static const int __out_validated(typ_sym) = __inner_out_validated(#typ_sym);
static const int __this_out_data_source(src_sym) = __inner_this_data_source(#src_sym);
static const int __this_out_validated(typ_sym) = __inner_this_out_validated(#typ_sym);
static const int __transfer(formal) = __inner_transfer(formal);
static const int __rpc_entry = __inner_control_entrypoint(RPC);
static const int __kernel_entry = __inner_control_entrypoint(UserToKernel);
static const int __gdi_entry = __inner_control_entrypoint(GDI);
static const int __encoded_pointer = __inner_encoded;
static const int __encoded_array = __inner_encoded;
static const int __field_encoded_pointer = __inner_encoded;
static const int __field_encoded_array = __inner_encoded;
static const int _volatile = __volatile;
static const int _nonvolatile = __nonvolatile;
static const int __analysis_assume_nullterminated(x) = __inner_analysis_assume_nullterminated(x);
static const int __assume_validated(p) = __inner_assume_validated(p);
static const int __assume_bound(i) = __inner_assume_bound(i);
static const int __SPECSTRINGS_STRICT_LEVEL = 1;
static const int __drv_deref(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int __drv_in(annotes) = __pre __$drv_group( ##__drv_nop(annotes));
static const int __drv_in_deref(annotes) = __pre __$drv_group( ##__drv_nop(annotes));
static const int __drv_out(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int __drv_out_deref(annotes) = __$drv_group( ##__drv_nop(annotes));
static const int static const int __drv_at(expr,annotes) = __drv_declspec("SAL_at(" SPECSTRINGIZE(expr) ")") __$drv_group( ##__drv_nop(annotes));
static const int __drv_fun(annotes) = __drv_at(return, ##__drv_nop(annotes));
static const int __drv_ret(annotes) = __drv_at(return, ##__drv_nop(annotes));
static const int __drv_arg(expr,annotes) = __drv_at(expr, ##__drv_nop(annotes));
static const int __drv_unit(p) = typedef int __$drv_unit_ ##p $GENSYM(__prefast_flag_kernel_driver_mode);;
static const int __$drv_unit_internal_kernel_driver = __drv_declspec("SAL_internal_kernel_driver");
static const int __$drv_unit_kernel_code = __drv_declspec("SAL_kernel") __drv_declspec("SAL_nodriver");
static const int __$drv_unit_kernel_driver = __drv_declspec("SAL_kernel") __drv_declspec("SAL_driver");
static const int __$drv_unit_user_driver = __drv_declspec("SAL_nokernel") __drv_declspec("SAL_driver");
static const int __$drv_unit_user_code = __drv_declspec("SAL_nokernel") __drv_declspec("SAL_nodriver");
static const int __drv_defined(x) = macroDefined$( #x );
static const int __drv_functionClass(x) = __drv_out(__drv_declspec("SAL_functionClass(\""#x"\")"));
static const int __drv_acquiresResource(kind) = __drv_declspec("SAL_acquire(\"" #kind "\")");
static const int __drv_releasesResource(kind) = __drv_declspec("SAL_release(\"" #kind "\")");
static const int __drv_innerAcquiresGlobal(kind,param) = __drv_declspec("SAL_acquireGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_acquiresResourceGlobal(kind,param) = __drv_innerAcquiresGlobal(kind, param);
static const int __drv_innerReleasesGlobal(kind,param) = __drv_declspec("SAL_releaseGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_releasesResourceGlobal(kind,param) = __drv_innerReleasesGlobal(kind, param);
static const int __drv_mustHold(kind) = __pre __drv_declspec("SAL_mustHold(\""#kind"\")");
static const int __drv_innerMustHoldGlobal(kind,param) = __pre __drv_declspec("SAL_mustHoldGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_mustHoldGlobal(kind,param) = __drv_innerMustHoldGlobal(kind, param);
static const int __drv_neverHold(kind) = __pre __drv_declspec("SAL_neverHold(\"" #kind "\")");
static const int __drv_innerNeverHoldGlobal(kind,param) = __pre __drv_declspec("SAL_neverHoldGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_neverHoldGlobal(kind,param) = __drv_innerNeverHoldGlobal(kind, param);
static const int __drv_clearDoInit(yesNo) = __drv_declspec("SAL_clearDoInit(" SPECSTRINGIZE(yesNo) ")");
static const int __drv_IoGetDmaAdapter = __drv_declspec("SAL_IoGetDmaAdapter");
static const int __drv_valueIs(arglist) = __drv_declspec("SAL_return("SPECSTRINGIZE(arglist)")");
static const int __drv_constant = __pre __drv_declspec("SAL_constant(__yes)");
static const int __drv_nonConstant = __pre __drv_declspec("SAL_constant(__no)");
static const int __drv_strictTypeMatch(mode) = __pre __drv_declspec("SAL_strictTypeMatch("SPECSTRINGIZE(mode)")");
static const int __drv_strictType(typename,mode) = __pre __drv_declspec("SAL_strictType("SPECSTRINGIZE(typename)"," SPECSTRINGIZE(mode)")");
static const int __drv_typeConst = 0;
static const int __drv_typeCond = 1;
static const int __drv_typeBitset = 2;
static const int __drv_typeExpr = 3;
static const int __drv_notPointer = __pre __drv_declspec("SAL_mayBePointer(__no)");
static const int __drv_isObjectPointer = __drv_deref(__drv_notPointer);
static const int = __drv_declspec("SAL_IsAliased");
static const int __drv_allocatesMem(kind) = __drv_declspec("SAL_NeedsRelease(__yes)");
static const int = __drv_declspec("SAL_NeedsRelease(__no)");
static const int = __pre __drv_declspec( "SAL_preferredFunction(" SPECSTRINGIZE(func) "," SPECSTRINGIZE(why) ")");
static const int  // ---------------------------------------------------------------------
static const int __drv_floatSaved = __drv_declspec("SAL_floatSaved");
static const int __drv_floatRestored = __drv_declspec("SAL_floatRestored");
static const int __drv_floatUsed = __drv_declspec("SAL_floatUsed");
static const int __drv_interlocked = __pre __drv_declspec("SAL_interlocked");
static const int __drv_inTry = __pre __drv_declspec("SAL_inTry(__yes)");
static const int __drv_notInTry = __pre __drv_declspec("SAL_inTry(__no)");
static const int __drv_formatString(kind) = __drv_declspec("SAL_IsFormatString(\"" #kind "\")");
static const int __drv_dispatchType(kindlist) = __pre __drv_declspec("SAL_dispatchType(" SPECSTRINGIZE(kindlist) ")" );
static const int __drv_dispatchType_other = __drv_dispatchType(-1);
static const int __drv_completionType(kindlist) = __drv_declspec("SAL_completionType(" #kindlist ")" );
static const int __drv_callbackType(kind) = __drv_declspec("SAL_callbackType(" #kind ")" );
static const int DISPATCH_LEVEL = 2;
static const int APC_LEVEL = 1;
static const int PASSIVE_LEVEL = 0;
static const int __drv_setsIRQL(irql) = __drv_declspec("SAL_IRQL("SPECSTRINGIZE(irql)")");
static const int __drv_raisesIRQL(irql) = __drv_declspec("SAL_raiseIRQL("SPECSTRINGIZE(irql)")");
static const int __drv_requiresIRQL(irql) = __pre __drv_declspec("SAL_IRQL("SPECSTRINGIZE(irql)")");
static const int __drv_maxIRQL(irql) = __pre __drv_declspec("SAL_maxIRQL("SPECSTRINGIZE(irql)")");
static const int __drv_minIRQL(irql) = __pre __drv_declspec("SAL_minIRQL("SPECSTRINGIZE(irql)")");
static const int __drv_savesIRQL = __drv_declspec("SAL_saveIRQL");
static const int __drv_savesIRQLGlobal(kind,param) = __drv_declspec("SAL_saveIRQLGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_restoresIRQL = __drv_declspec("SAL_restoreIRQL");
static const int __drv_restoresIRQLGlobal(kind,param) = __drv_declspec("SAL_restoreIRQLGlobal(\"" #kind "\"," SPECSTRINGIZE(param\t)")");
static const int __drv_minFunctionIRQL(irql) = __pre __drv_declspec("SAL_minFunctionIrql(" SPECSTRINGIZE(irql) ")");
static const int __drv_maxFunctionIRQL(irql) = __pre __drv_declspec("SAL_maxFunctionIrql(" SPECSTRINGIZE(irql) ")");
static const int __drv_sameIRQL = __drv_declspec("SAL_sameIRQL");
static const int __drv_useCancelIRQL = __drv_declspec("SAL_UseCancelIrql");
static const int MAX_NATURAL_ALIGNMENT = sizeof(ULONGLONG);
static const int MEMORY_ALLOCATION_ALIGNMENT = 16;
static const int TYPE_ALIGNMENT(t) = FIELD_OFFSET( struct { char x; t test; }, test );
static const int PROBE_ALIGNMENT32(_s) = TYPE_ALIGNMENT( DWORD );
static const int C_ASSERT(e) = typedef char __C_ASSERT__[(e)?1:-1];
  typedef unsigned long POINTER_64_INT;
static const int FIRMWARE_PTR = POINTER_32;
static const int SPOINTER_32 = POINTER_SIGNED POINTER_32;
static const int UPOINTER_32 = POINTER_UNSIGNED POINTER_32;
typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;
typedef signed int LONG32, *PLONG32;
typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
    typedef __int64 INT_PTR, *PINT_PTR;
    typedef unsigned __int64 UINT_PTR, *PUINT_PTR;
    typedef __int64 LONG_PTR, *PLONG_PTR;
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;
static const int __int3264 = __int64;
static const int ADDRESS_TAG_BIT = 0x40000000000UI64;
typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;
unsigned long
HandleToULong(
    const void *h
    )
{
    return((unsigned long) (ULONG_PTR) h );
}
long
HandleToLong(
    const void *h
    )
{
    return((long) (LONG_PTR) h );
}
void *
ULongToHandle(
    const unsigned long h
    )
{
    return((void *) (UINT_PTR) h );
}
void *
LongToHandle(
    const long h
    )
{
    return((void *) (INT_PTR) h );
}
unsigned long
PtrToUlong(
    const void *p
    )
{
    return((unsigned long) (ULONG_PTR) p );
}
unsigned int
PtrToUint(
    const void *p
    )
{
    return((unsigned int) (UINT_PTR) p );
}
unsigned short
PtrToUshort(
    const void *p
    )
{
    return((unsigned short) (unsigned long) (ULONG_PTR) p );
}
long
PtrToLong(
    const void *p
    )
{
    return((long) (LONG_PTR) p );
}
int
PtrToInt(
    const void *p
    )
{
    return((int) (INT_PTR) p );
}
short
PtrToShort(
    const void *p
    )
{
    return((short) (long) (LONG_PTR) p );
}
void *
IntToPtr(
    const int i
    )
{
    return( (void *)(INT_PTR)i );
}
void *
UIntToPtr(
    const unsigned int ui
    )
{
    return( (void *)(UINT_PTR)ui );
}
void *
LongToPtr(
    const long l
    )
{
    return( (void *)(LONG_PTR)l );
}
void *
ULongToPtr(
    const unsigned long ul
    )
{
    return( (void *)(ULONG_PTR)ul );
}
static const int PtrToPtr64(p) = ((void * POINTER_64) p);
static const int Ptr64ToPtr(p) = ((void *) p);
static const int HandleToHandle64(h) = (PtrToPtr64( h ));
static const int Handle64ToHandle(h) = (Ptr64ToPtr( h ));
void *
Ptr32ToPtr(
    const void * p
    )
{
    return((void *) (ULONG_PTR) (unsigned long) p);
}
void *
Handle32ToHandle(
    const void * h
    )
{
    return((void *) (LONG_PTR) (long) h);
}
void *
PtrToPtr32(
    const void *p
    )
{
    return((void * ) (unsigned long) (ULONG_PTR) p);
}
static const int HandleToHandle32(h) = (PtrToPtr32( h ));
static const int HandleToUlong(h) = HandleToULong(h);
static const int UlongToHandle(ul) = ULongToHandle(ul);
static const int UlongToPtr(ul) = ULongToPtr(ul);
static const int UintToPtr(ui) = UIntToPtr(ui);
static const int MAXUINT_PTR = (~((UINT_PTR)0));
static const int MAXINT_PTR = ((INT_PTR)(MAXUINT_PTR >> 1));
static const int MININT_PTR = (~MAXINT_PTR);
static const int MAXULONG_PTR = (~((ULONG_PTR)0));
static const int MAXLONG_PTR = ((LONG_PTR)(MAXULONG_PTR >> 1));
static const int MINLONG_PTR = (~MAXLONG_PTR);
static const int MAXUHALF_PTR = ((UHALF_PTR)~0);
static const int MAXHALF_PTR = ((HALF_PTR)(MAXUHALF_PTR >> 1));
static const int MINHALF_PTR = (~MAXHALF_PTR);
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
static const int MAXUINT8 = ((UINT8)~((UINT8)0));
static const int MAXINT8 = ((INT8)(MAXUINT8 >> 1));
static const int MININT8 = ((INT8)~MAXINT8);
static const int MAXUINT16 = ((UINT16)~((UINT16)0));
static const int MAXINT16 = ((INT16)(MAXUINT16 >> 1));
static const int MININT16 = ((INT16)~MAXINT16);
static const int MAXUINT32 = ((UINT32)~((UINT32)0));
static const int MAXINT32 = ((INT32)(MAXUINT32 >> 1));
static const int MININT32 = ((INT32)~MAXINT32);
static const int MAXUINT64 = ((UINT64)~((UINT64)0));
static const int MAXINT64 = ((INT64)(MAXUINT64 >> 1));
static const int MININT64 = ((INT64)~MAXINT64);
static const int MAXULONG32 = ((ULONG32)~((ULONG32)0));
static const int MAXLONG32 = ((LONG32)(MAXULONG32 >> 1));
static const int MINLONG32 = ((LONG32)~MAXLONG32);
static const int MAXULONG64 = ((ULONG64)~((ULONG64)0));
static const int MAXLONG64 = ((LONG64)(MAXULONG64 >> 1));
static const int MINLONG64 = ((LONG64)~MAXLONG64);
static const int MAXULONGLONG = ((ULONGLONG)~((ULONGLONG)0));
static const int MINLONGLONG = ((LONGLONG)~MAXLONGLONG);
static const int MAXSIZE_T = ((SIZE_T)~((SIZE_T)0));
static const int MAXSSIZE_T = ((SSIZE_T)(MAXSIZE_T >> 1));
static const int MINSSIZE_T = ((SSIZE_T)~MAXSSIZE_T);
static const int MAXUINT = ((UINT)~((UINT)0));
static const int MAXINT = ((INT)(MAXUINT >> 1));
static const int MININT = ((INT)~MAXINT);
static const int MAXDWORD32 = ((DWORD32)~((DWORD32)0));
static const int MAXDWORD64 = ((DWORD64)~((DWORD64)0));
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef __int64 LONG64, *PLONG64;
typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;
static const int SYSTEM_CACHE_ALIGNMENT_SIZE = 128;
static const int DECLSPEC_CACHEALIGN = DECLSPEC_ALIGN(SYSTEM_CACHE_ALIGNMENT_SIZE);
static const int NOP_FUNCTION = (void)0;
static const int FORCEINLINE = ;
static const int PRAGMA_DEPRECATED_DDK = 0;
typedef void *PVOID;
typedef void * PVOID64;
static const int NTAPI_INLINE = NTAPI;
static const int NTSYSAPI = ;
static const int NTSYSCALLAPI = ;
static const int VOID = void;
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef int INT;
typedef wchar_t WCHAR; // wc,   16-bit UNICODE character
typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;
typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;
typedef __possibly_notnullterminated WCHAR *PNZWCH;
typedef __possibly_notnullterminated const WCHAR *PCNZWCH;
typedef __possibly_notnullterminated WCHAR *PUNZWCH;
typedef __possibly_notnullterminated const WCHAR *PCUNZWCH;
typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;
typedef unsigned long UCSCHAR;
static const int UCSCHAR_INVALID_CHARACTER = (0xffffffff);
static const int MIN_UCSCHAR = (0);
static const int MAX_UCSCHAR = (0x0010FFFF);
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;
typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR *PUUCSSTR;
typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR *PCUUCSSTR;
typedef UCSCHAR *PUUCSCHAR;
typedef const UCSCHAR *PCUUCSCHAR;
typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;
typedef __possibly_notnullterminated CHAR *PNZCH;
typedef __possibly_notnullterminated const CHAR *PCNZCH;
typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;
typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;
static const int __TEXT(quote) = quote;
static const int TEXT(quote) = __TEXT(quote);
typedef SHORT *PSHORT;
typedef LONG *PLONG;
static const int ALL_PROCESSOR_GROUPS = 0xffff;
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;
typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
typedef void *HANDLE;
static const int DECLARE_HANDLE(name) = struct name ##__{int unused;}; typedef struct name ##__ *name;
typedef HANDLE *PHANDLE;
typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
typedef long HRESULT;
static const int EXTERN_C = ;
static const int STDMETHODCALLTYPE = ;
static const int STDMETHODVCALLTYPE = ;
static const int STDAPICALLTYPE = ;
static const int STDAPIVCALLTYPE = ;
static const int STDAPI = EXTERN_C HRESULT STDAPICALLTYPE;
static const int STDAPI_(type) = EXTERN_C type STDAPICALLTYPE;
static const int STDMETHODIMP = HRESULT STDMETHODCALLTYPE;
static const int STDMETHODIMP_(type) = type STDMETHODCALLTYPE;
static const int STDOVERRIDEMETHODIMP = __override STDMETHODIMP;
static const int STDOVERRIDEMETHODIMP_(type) = __override STDMETHODIMP_(type);
static const int IFACEMETHODIMP = __override STDMETHODIMP;
static const int IFACEMETHODIMP_(type) = __override STDMETHODIMP_(type);
static const int STDAPIV = EXTERN_C HRESULT STDAPIVCALLTYPE;
static const int STDAPIV_(type) = EXTERN_C type STDAPIVCALLTYPE;
static const int STDMETHODIMPV = HRESULT STDMETHODVCALLTYPE;
static const int STDMETHODIMPV_(type) = type STDMETHODVCALLTYPE;
static const int STDOVERRIDEMETHODIMPV = __override STDMETHODIMPV;
static const int STDOVERRIDEMETHODIMPV_(type) = __override STDMETHODIMPV_(type);
static const int IFACEMETHODIMPV = __override STDMETHODIMPV;
static const int IFACEMETHODIMPV_(type) = __override STDMETHODIMPV_(type);
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
static const int APPLICATION_ERROR_MASK = 0x20000000;
static const int ERROR_SEVERITY_SUCCESS = 0x00000000;
static const int ERROR_SEVERITY_INFORMATIONAL = 0x40000000;
static const int ERROR_SEVERITY_WARNING = 0x80000000;
static const int ERROR_SEVERITY_ERROR = 0xC0000000;
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;
typedef FLOAT128 *PFLOAT128;
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
static const int MAXLONGLONG = (0x7fffffffffffffff);
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;
typedef LONGLONG USN;
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } s;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } s;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;
typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
static const int ANSI_NULL = ((CHAR)0);
static const int UNICODE_NULL = ((WCHAR)0);
static const int UNICODE_STRING_MAX_BYTES = ((WORD ) 65534);
static const int UNICODE_STRING_MAX_CHARS = (32767);
typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;
typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;
typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
static const int DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) = EXTERN_C const GUID FAR name;
static const int DEFINE_OLEGUID(name,l,w1,w2) = DEFINE_GUID(name, l, w1, w2, 0xC0,0,0,0,0,0,0,0x46);
typedef GUID *LPGUID;
typedef const GUID *LPCGUID;
typedef GUID IID;
typedef IID *LPIID;
static const int IID_NULL = GUID_NULL;
static const int IsEqualIID(riid1,riid2) = IsEqualGUID(riid1, riid2);
typedef GUID CLSID;
typedef CLSID *LPCLSID;
static const int CLSID_NULL = GUID_NULL;
static const int IsEqualCLSID(rclsid1,rclsid2) = IsEqualGUID(rclsid1, rclsid2);
typedef GUID FMTID;
typedef FMTID *LPFMTID;
static const int FMTID_NULL = GUID_NULL;
static const int IsEqualFMTID(rfmtid1,rfmtid2) = IsEqualGUID(rfmtid1, rfmtid2);
static const int __MIDL_= const;
static const int REFGUID = const GUID * __MIDL_CONST;
static const int REFIID = const IID * __MIDL_CONST;
static const int REFCLSID = const IID * __MIDL_CONST;
static const int REFFMTID = const IID * __MIDL_CONST;
static const int _NLSCMPERROR = 2147483647;
static const int _WConst_return = _CONST_RETURN;
 void * _memccpy( void * _Dst, const void * _Src, int _Val, size_t _MaxCount);
 void * memchr( const void * _Buf , int _Val, size_t _MaxCount);
 int _memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
 int _memicmp_l( const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale);
        int memcmp( const void * _Buf1, const void * _Buf2, size_t _Size);
        void * memcpy( void * _Dst, const void * _Src, size_t _Size);
 errno_t memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
        void * memset( void * _Dst, int _Val, size_t _Size);
 errno_t _strset_s( char * _Dst, size_t _DstSize, int _Value);
char * _strset( char *_Dest, int _Value);
 errno_t strcpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);
char * strcpy( char *_Dest, const char * _Source);
 errno_t strcat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);
char * strcat( char *_Dest, const char * _Source);
        int strcmp( const char * _Str1, const char * _Str2);
        size_t strlen( const char * _Str);
 size_t strnlen( const char * _Str, size_t _MaxCount);
 static size_t strnlen_s( const char * _Str, size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
 errno_t memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
 void * memmove( void * _Dst, const void * _Src, size_t _Size);
 char * _strdup( const char * _Src);
 char * strchr( const char * _Str, int _Val);
 int _stricmp( const char * _Str1, const char * _Str2);
 int _strcmpi( const char * _Str1, const char * _Str2);
 int _stricmp_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
 int strcoll( const char * _Str1, const char * _Str2);
 int _strcoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
 int _stricoll( const char * _Str1, const char * _Str2);
 int _stricoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
 int _strncoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
 int _strncoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
 int _strnicoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
 int _strnicoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
 size_t strcspn( const char * _Str, const char * _Control);
 char * _strerror( const char * _ErrMsg);
 errno_t _strerror_s( char * _Buf, size_t _SizeInBytes, const char * _ErrMsg);
 char * strerror( int);
 errno_t strerror_s( char * _Buf, size_t _SizeInBytes, int _ErrNum);
 errno_t _strlwr_s( char * _Str, size_t _Size);
char * _strlwr( char *_String);
 errno_t _strlwr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
char * _strlwr_l( char *_String, _locale_t _Locale);
 errno_t strncat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);
char * strncat( char *_Dest, const char * _Source, size_t _Count);
 int strncmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
 int _strnicmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
 int _strnicmp_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
 errno_t strncpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);
char * strncpy( char *_Dest, const char * _Source, size_t _Count);
 errno_t _strnset_s( char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount);
char * _strnset( char *_Dest, int _Val, size_t _Count);
 char * strpbrk( const char * _Str, const char * _Control);
 char * strrchr( const char * _Str, int _Ch);
 char * _strrev( char * _Str);
 size_t strspn( const char * _Str, const char * _Control);
 char * strstr( const char * _Str, const char * _SubStr);
 char * strtok( char * _Str, const char * _Delim);
 char * strtok_s( char * _Str, const char * _Delim, char ** _Context);
 errno_t _strupr_s( char * _Str, size_t _Size);
char * _strupr( char *_String);
 errno_t _strupr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
char * _strupr_l( char *_String, _locale_t _Locale);
 size_t strxfrm ( char * _Dst, const char * _Src, size_t _MaxCount);
 size_t _strxfrm_l( char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale);
 wchar_t * _wcsdup( const wchar_t * _Str);
 errno_t wcscat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);
wchar_t * wcscat( wchar_t *_Dest, const wchar_t * _Source);
 wchar_t * wcschr( const wchar_t * _Str, wchar_t _Ch);
 int wcscmp( const wchar_t * _Str1, const wchar_t * _Str2);
 errno_t wcscpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);
wchar_t * wcscpy( wchar_t *_Dest, const wchar_t * _Source);
 size_t wcscspn( const wchar_t * _Str, const wchar_t * _Control);
 size_t wcslen( const wchar_t * _Str);
 size_t wcsnlen( const wchar_t * _Src, size_t _MaxCount);
 static size_t wcsnlen_s( const wchar_t * _Src, size_t _MaxCount)
{
    return (_Src == ((void *)0)) ? 0 : wcsnlen(_Src, _MaxCount);
}
 errno_t wcsncat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);
wchar_t * wcsncat( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
 int wcsncmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
 errno_t wcsncpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);
wchar_t * wcsncpy( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
 wchar_t * wcspbrk( const wchar_t * _Str, const wchar_t * _Control);
 wchar_t * wcsrchr( const wchar_t * _Str, wchar_t _Ch);
 size_t wcsspn( const wchar_t * _Str, const wchar_t * _Control);
 wchar_t * wcsstr( const wchar_t * _Str, const wchar_t * _SubStr);
 wchar_t * wcstok( wchar_t * _Str, const wchar_t * _Delim);
 wchar_t * wcstok_s( wchar_t * _Str, const wchar_t * _Delim, wchar_t ** _Context);
 wchar_t * _wcserror( int _ErrNum);
 errno_t _wcserror_s( wchar_t * _Buf, size_t _SizeInWords, int _ErrNum);
 wchar_t * __wcserror( const wchar_t * _Str);
 errno_t __wcserror_s( wchar_t * _Buffer, size_t _SizeInWords, const wchar_t * _ErrMsg);
 int _wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
 int _wcsicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
 int _wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
 int _wcsnicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
 errno_t _wcsnset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Val, size_t _MaxCount);
wchar_t * _wcsnset( wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
 wchar_t * _wcsrev( wchar_t * _Str);
 errno_t _wcsset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Value);
wchar_t * _wcsset( wchar_t *_Str, wchar_t _Val);
 errno_t _wcslwr_s( wchar_t * _Str, size_t _SizeInWords);
wchar_t * _wcslwr( wchar_t *_String);
 errno_t _wcslwr_s_l( wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale);
wchar_t * _wcslwr_l( wchar_t *_String, _locale_t _Locale);
 errno_t _wcsupr_s( wchar_t * _Str, size_t _Size);
wchar_t * _wcsupr( wchar_t *_String);
 errno_t _wcsupr_s_l( wchar_t * _Str, size_t _Size, _locale_t _Locale);
wchar_t * _wcsupr_l( wchar_t *_String, _locale_t _Locale);
 size_t wcsxfrm( wchar_t * _Dst, const wchar_t * _Src, size_t _MaxCount);
 size_t _wcsxfrm_l( wchar_t * _Dst, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
 int wcscoll( const wchar_t * _Str1, const wchar_t * _Str2);
 int _wcscoll_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
 int _wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
 int _wcsicoll_l( const wchar_t * _Str1, const wchar_t *_Str2, _locale_t _Locale);
 int _wcsncoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
 int _wcsncoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
 int _wcsnicoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
 int _wcsnicoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
static const int InlineIsEqualGUID(rguid1,rguid2) = (((unsigned long *) rguid1)[0] == ((unsigned long *) rguid2)[0] && ((unsigned long *) rguid1)[1] == ((unsigned long *) rguid2)[1] && ((unsigned long *) rguid1)[2] == ((unsigned long *) rguid2)[2] && ((unsigned long *) rguid1)[3] == ((unsigned long *) rguid2)[3]);
static const int IsEqualGUID(rguid1,rguid2) = (!memcmp(rguid1, rguid2, sizeof(GUID)));
static const int IsEqualIID(riid1,riid2) = IsEqualGUID(riid1, riid2);
static const int IsEqualCLSID(rclsid1,rclsid2) = IsEqualGUID(rclsid1, rclsid2);
typedef struct _OBJECTID { // size is 20
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
static const int MINCHAR = 0x80;
static const int MAXCHAR = 0x7f;
static const int MINSHORT = 0x8000;
static const int MAXSHORT = 0x7fff;
static const int MINLONG = 0x80000000;
static const int MAXLONG = 0x7fffffff;
static const int MAXBYTE = 0xff;
static const int MAXWORD = 0xffff;
static const int MAXDWORD = 0xffffffff;
static const int FIELD_OFFSET(type,field) = ((LONG)(LONG_PTR)&(((type *)0)->field));
static const int RTL_FIELD_SIZE(type,field) = (sizeof(((type *)0)->field));
static const int RTL_SIZEOF_THROUGH_FIELD(type,field) = (FIELD_OFFSET(type, field) + RTL_FIELD_SIZE(type, field));
static const int RTL_CONTAINS_FIELD(Struct,Size,Field) = ( (((PCHAR)(&(Struct)->Field)) + sizeof((Struct)->Field)) <= (((PCHAR)(Struct))+(Size)) );
static const int RTL_NUMBER_OF_V1(A) = (sizeof(A)/sizeof((A)[0]));
static const int RTL_NUMBER_OF_V2(A) = RTL_NUMBER_OF_V1(A);
static const int RTL_NUMBER_OF(A) = RTL_NUMBER_OF_V1(A);
static const int ARRAYSIZE(A) = RTL_NUMBER_OF_V2(A);
static const int _ARRAYSIZE(A) = RTL_NUMBER_OF_V1(A);
static const int RTL_FIELD_TYPE(type,field) = (((type*)0)->field);
static const int RTL_NUMBER_OF_FIELD(type,field) = (RTL_NUMBER_OF(RTL_FIELD_TYPE(type, field)));
static const int RTL_PADDING_BETWEEN_FIELDS(T,F1,F2) = ((FIELD_OFFSET(T, F2) > FIELD_OFFSET(T, F1)) ? (FIELD_OFFSET(T, F2) - FIELD_OFFSET(T, F1) - RTL_FIELD_SIZE(T, F1)) : (FIELD_OFFSET(T, F1) - FIELD_OFFSET(T, F2) - RTL_FIELD_SIZE(T, F2)));
static const int RTL_CONST_CAST(type) = (type);
static const int RTL_BITS_OF(sizeOfArg) = (sizeof(sizeOfArg) * 8);
static const int RTL_BITS_OF_FIELD(type,field) = (RTL_BITS_OF(RTL_FIELD_TYPE(type, field)));
static const int CONTAINING_RECORD(address,type,field) = ((type *)( (PCHAR)(address) - (ULONG_PTR)(&((type *)0)->field)));
typedef
EXCEPTION_DISPOSITION
EXCEPTION_ROUTINE (
    struct _EXCEPTION_RECORD *ExceptionRecord,
    PVOID EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    PVOID DispatcherContext
    );
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
static const int VER_SERVER_NT = 0x80000000;
static const int VER_WORKSTATION_NT = 0x40000000;
static const int VER_SUITE_SMALLBUSINESS = 0x00000001;
static const int VER_SUITE_ENTERPRISE = 0x00000002;
static const int VER_SUITE_BACKOFFICE = 0x00000004;
static const int VER_SUITE_COMMUNICATIONS = 0x00000008;
static const int VER_SUITE_TERMINAL = 0x00000010;
static const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x00000020;
static const int VER_SUITE_EMBEDDEDNT = 0x00000040;
static const int VER_SUITE_DATACENTER = 0x00000080;
static const int VER_SUITE_SINGLEUSERTS = 0x00000100;
static const int VER_SUITE_PERSONAL = 0x00000200;
static const int VER_SUITE_BLADE = 0x00000400;
static const int VER_SUITE_EMBEDDED_RESTRICTED = 0x00000800;
static const int VER_SUITE_SECURITY_APPLIANCE = 0x00001000;
static const int VER_SUITE_STORAGE_SERVER = 0x00002000;
static const int VER_SUITE_COMPUTE_SERVER = 0x00004000;
static const int VER_SUITE_WH_SERVER = 0x00008000;
static const int PRODUCT_UNDEFINED = 0x00000000;
static const int PRODUCT_ULTIMATE = 0x00000001;
static const int PRODUCT_HOME_BASIC = 0x00000002;
static const int PRODUCT_HOME_PREMIUM = 0x00000003;
static const int PRODUCT_ENTERPRISE = 0x00000004;
static const int PRODUCT_HOME_BASIC_N = 0x00000005;
static const int PRODUCT_BUSINESS = 0x00000006;
static const int PRODUCT_STANDARD_SERVER = 0x00000007;
static const int PRODUCT_DATACENTER_SERVER = 0x00000008;
static const int PRODUCT_SMALLBUSINESS_SERVER = 0x00000009;
static const int PRODUCT_ENTERPRISE_SERVER = 0x0000000A;
static const int PRODUCT_STARTER = 0x0000000B;
static const int PRODUCT_DATACENTER_SERVER_CORE = 0x0000000C;
static const int PRODUCT_STANDARD_SERVER_CORE = 0x0000000D;
static const int PRODUCT_ENTERPRISE_SERVER_CORE = 0x0000000E;
static const double PRODUCT_ENTERPRISE_SERVER_IA64 = 0x0000000F;
static const int PRODUCT_BUSINESS_N = 0x00000010;
static const int PRODUCT_WEB_SERVER = 0x00000011;
static const int PRODUCT_CLUSTER_SERVER = 0x00000012;
static const int PRODUCT_HOME_SERVER = 0x00000013;
static const int PRODUCT_STORAGE_EXPRESS_SERVER = 0x00000014;
static const int PRODUCT_STORAGE_STANDARD_SERVER = 0x00000015;
static const int PRODUCT_STORAGE_WORKGROUP_SERVER = 0x00000016;
static const int PRODUCT_STORAGE_ENTERPRISE_SERVER = 0x00000017;
static const int PRODUCT_SERVER_FOR_SMALLBUSINESS = 0x00000018;
static const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 0x00000019;
static const int PRODUCT_HOME_PREMIUM_N = 0x0000001A;
static const int PRODUCT_ENTERPRISE_N = 0x0000001B;
static const int PRODUCT_ULTIMATE_N = 0x0000001C;
static const int PRODUCT_WEB_SERVER_CORE = 0x0000001D;
static const int PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 0x0000001E;
static const double PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 0x0000001F;
static const int PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 0x00000020;
static const int PRODUCT_SERVER_FOUNDATION = 0x00000021;
static const int PRODUCT_HOME_PREMIUM_SERVER = 0x00000022;
static const int PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 0x00000023;
static const int PRODUCT_STANDARD_SERVER_V = 0x00000024;
static const int PRODUCT_DATACENTER_SERVER_V = 0x00000025;
static const int PRODUCT_ENTERPRISE_SERVER_V = 0x00000026;
static const int PRODUCT_DATACENTER_SERVER_CORE_V = 0x00000027;
static const int PRODUCT_STANDARD_SERVER_CORE_V = 0x00000028;
static const int PRODUCT_ENTERPRISE_SERVER_CORE_V = 0x00000029;
static const int PRODUCT_HYPERV = 0x0000002A;
static const int PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 0x0000002B;
static const int PRODUCT_STORAGE_STANDARD_SERVER_CORE = 0x0000002C;
static const int PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 0x0000002D;
static const int PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 0x0000002E;
static const double PRODUCT_STARTER_N = 0x0000002F;
static const int PRODUCT_PROFESSIONAL = 0x00000030;
static const int PRODUCT_PROFESSIONAL_N = 0x00000031;
static const int PRODUCT_SB_SOLUTION_SERVER = 0x00000032;
static const int PRODUCT_SERVER_FOR_SB_SOLUTIONS = 0x00000033;
static const int PRODUCT_STANDARD_SERVER_SOLUTIONS = 0x00000034;
static const int PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 0x00000035;
static const int PRODUCT_SB_SOLUTION_SERVER_EM = 0x00000036;
static const int PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 0x00000037;
static const int PRODUCT_SOLUTION_EMBEDDEDSERVER = 0x00000038;
static const int PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 0x00000039;
static const double PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 0x0000003F;
static const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 0x0000003B;
static const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 0x0000003C;
static const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 0x0000003D;
static const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 0x0000003E;
static const int PRODUCT_CLUSTER_SERVER_V = 0x00000040;
static const int PRODUCT_EMBEDDED = 0x00000041;
static const int PRODUCT_STARTER_E = 0x00000042;
static const int PRODUCT_HOME_BASIC_E = 0x00000043;
static const int PRODUCT_HOME_PREMIUM_E = 0x00000044;
static const int PRODUCT_PROFESSIONAL_E = 0x00000045;
static const int PRODUCT_ENTERPRISE_E = 0x00000046;
static const int PRODUCT_ULTIMATE_E = 0x00000047;
static const int PRODUCT_UNLICENSED = 0xABCDABCD;
static const int LANG_NEUTRAL = 0x00;
static const int LANG_INVARIANT = 0x7f;
static const int LANG_AFRIKAANS = 0x36;
static const int LANG_ALBANIAN = 0x1c;
static const int LANG_ALSATIAN = 0x84;
static const int LANG_AMHARIC = 0x5e;
static const int LANG_ARABIC = 0x01;
static const int LANG_ARMENIAN = 0x2b;
static const int LANG_ASSAMESE = 0x4d;
static const int LANG_AZERI = 0x2c;
static const int LANG_BASHKIR = 0x6d;
static const int LANG_BASQUE = 0x2d;
static const int LANG_BELARUSIAN = 0x23;
static const int LANG_BENGALI = 0x45;
static const int LANG_BRETON = 0x7e;
static const int LANG_BOSNIAN = 0x1a;
static const int LANG_BOSNIAN_NEUTRAL = 0x781a;
static const int LANG_BULGARIAN = 0x02;
static const int LANG_CATALAN = 0x03;
static const int LANG_CHINESE = 0x04;
static const int LANG_CHINESE_SIMPLIFIED = 0x04;
static const int LANG_CHINESE_TRADITIONAL = 0x7c04;
static const int LANG_CORSICAN = 0x83;
static const int LANG_CROATIAN = 0x1a;
static const int LANG_CZECH = 0x05;
static const int LANG_DANISH = 0x06;
static const int LANG_DARI = 0x8c;
static const int LANG_DIVEHI = 0x65;
static const int LANG_DUTCH = 0x13;
static const int LANG_ENGLISH = 0x09;
static const int LANG_ESTONIAN = 0x25;
static const int LANG_FAEROESE = 0x38;
static const int LANG_FARSI = 0x29;
static const int LANG_FILIPINO = 0x64;
static const int LANG_FINNISH = 0x0b;
static const int LANG_FRENCH = 0x0c;
static const int LANG_FRISIAN = 0x62;
static const int LANG_GALICIAN = 0x56;
static const int LANG_GEORGIAN = 0x37;
static const int LANG_GERMAN = 0x07;
static const int LANG_GREEK = 0x08;
static const int LANG_GREENLANDIC = 0x6f;
static const int LANG_GUJARATI = 0x47;
static const int LANG_HAUSA = 0x68;
static const int LANG_HEBREW = 0x0d;
static const int LANG_HINDI = 0x39;
static const int LANG_HUNGARIAN = 0x0e;
static const int LANG_ICELANDIC = 0x0f;
static const int LANG_IGBO = 0x70;
static const int LANG_INDONESIAN = 0x21;
static const int LANG_INUKTITUT = 0x5d;
static const int LANG_IRISH = 0x3c;
static const int LANG_ITALIAN = 0x10;
static const int LANG_JAPANESE = 0x11;
static const int LANG_KANNADA = 0x4b;
static const int LANG_KASHMIRI = 0x60;
static const int LANG_KAZAK = 0x3f;
static const int LANG_KHMER = 0x53;
static const int LANG_KICHE = 0x86;
static const int LANG_KINYARWANDA = 0x87;
static const int LANG_KONKANI = 0x57;
static const int LANG_KOREAN = 0x12;
static const int LANG_KYRGYZ = 0x40;
static const int LANG_LAO = 0x54;
static const int LANG_LATVIAN = 0x26;
static const int LANG_LITHUANIAN = 0x27;
static const int LANG_LOWER_SORBIAN = 0x2e;
static const int LANG_LUXEMBOURGISH = 0x6e;
static const int LANG_MACEDONIAN = 0x2f;
static const int LANG_MALAY = 0x3e;
static const int LANG_MALAYALAM = 0x4c;
static const int LANG_MALTESE = 0x3a;
static const int LANG_MANIPURI = 0x58;
static const int LANG_MAORI = 0x81;
static const int LANG_MAPUDUNGUN = 0x7a;
static const int LANG_MARATHI = 0x4e;
static const int LANG_MOHAWK = 0x7c;
static const int LANG_MONGOLIAN = 0x50;
static const int LANG_NEPALI = 0x61;
static const int LANG_NORWEGIAN = 0x14;
static const int LANG_OCCITAN = 0x82;
static const int LANG_ORIYA = 0x48;
static const int LANG_PASHTO = 0x63;
static const int LANG_PERSIAN = 0x29;
static const int LANG_POLISH = 0x15;
static const int LANG_PORTUGUESE = 0x16;
static const int LANG_PUNJABI = 0x46;
static const int LANG_QUECHUA = 0x6b;
static const int LANG_ROMANIAN = 0x18;
static const int LANG_ROMANSH = 0x17;
static const int LANG_RUSSIAN = 0x19;
static const int LANG_SAMI = 0x3b;
static const int LANG_SANSKRIT = 0x4f;
static const int LANG_SCOTTISH_GAELIC = 0x91;
static const int LANG_SERBIAN = 0x1a;
static const int LANG_SERBIAN_NEUTRAL = 0x7c1a;
static const int LANG_SINDHI = 0x59;
static const int LANG_SINHALESE = 0x5b;
static const int LANG_SLOVAK = 0x1b;
static const int LANG_SLOVENIAN = 0x24;
static const int LANG_SOTHO = 0x6c;
static const int LANG_SPANISH = 0x0a;
static const int LANG_SWAHILI = 0x41;
static const int LANG_SWEDISH = 0x1d;
static const int LANG_SYRIAC = 0x5a;
static const int LANG_TAJIK = 0x28;
static const int LANG_TAMAZIGHT = 0x5f;
static const int LANG_TAMIL = 0x49;
static const int LANG_TATAR = 0x44;
static const int LANG_TELUGU = 0x4a;
static const int LANG_THAI = 0x1e;
static const int LANG_TIBETAN = 0x51;
static const int LANG_TIGRIGNA = 0x73;
static const int LANG_TSWANA = 0x32;
static const int LANG_TURKISH = 0x1f;
static const int LANG_TURKMEN = 0x42;
static const int LANG_UIGHUR = 0x80;
static const int LANG_UKRAINIAN = 0x22;
static const int LANG_UPPER_SORBIAN = 0x2e;
static const int LANG_URDU = 0x20;
static const int LANG_UZBEK = 0x43;
static const int LANG_VIETNAMESE = 0x2a;
static const int LANG_WELSH = 0x52;
static const int LANG_WOLOF = 0x88;
static const int LANG_XHOSA = 0x34;
static const int LANG_YAKUT = 0x85;
static const int LANG_YI = 0x78;
static const int LANG_YORUBA = 0x6a;
static const int LANG_ZULU = 0x35;
static const int SUBLANG_NEUTRAL = 0x00;
static const int SUBLANG_DEFAULT = 0x01;
static const int SUBLANG_SYS_DEFAULT = 0x02;
static const int SUBLANG_CUSTOM_DEFAULT = 0x03;
static const int SUBLANG_CUSTOM_UNSPECIFIED = 0x04;
static const int SUBLANG_UI_CUSTOM_DEFAULT = 0x05;
static const int SUBLANG_AFRIKAANS_SOUTH_AFRICA = 0x01;
static const int SUBLANG_ALBANIAN_ALBANIA = 0x01;
static const int SUBLANG_ALSATIAN_FRANCE = 0x01;
static const int SUBLANG_AMHARIC_ETHIOPIA = 0x01;
static const int SUBLANG_ARABIC_SAUDI_ARABIA = 0x01;
static const int SUBLANG_ARABIC_IRAQ = 0x02;
static const int SUBLANG_ARABIC_EGYPT = 0x03;
static const int SUBLANG_ARABIC_LIBYA = 0x04;
static const int SUBLANG_ARABIC_ALGERIA = 0x05;
static const int SUBLANG_ARABIC_MOROCCO = 0x06;
static const int SUBLANG_ARABIC_TUNISIA = 0x07;
static const int SUBLANG_ARABIC_OMAN = 0x08;
static const int SUBLANG_ARABIC_YEMEN = 0x09;
static const int SUBLANG_ARABIC_SYRIA = 0x0a;
static const int SUBLANG_ARABIC_JORDAN = 0x0b;
static const int SUBLANG_ARABIC_LEBANON = 0x0c;
static const int SUBLANG_ARABIC_KUWAIT = 0x0d;
static const int SUBLANG_ARABIC_UAE = 0x0e;
static const int SUBLANG_ARABIC_BAHRAIN = 0x0f;
static const int SUBLANG_ARABIC_QATAR = 0x10;
static const int SUBLANG_ARMENIAN_ARMENIA = 0x01;
static const int SUBLANG_ASSAMESE_INDIA = 0x01;
static const int SUBLANG_AZERI_LATIN = 0x01;
static const int SUBLANG_AZERI_CYRILLIC = 0x02;
static const int SUBLANG_BASHKIR_RUSSIA = 0x01;
static const int SUBLANG_BASQUE_BASQUE = 0x01;
static const int SUBLANG_BELARUSIAN_BELARUS = 0x01;
static const int SUBLANG_BENGALI_INDIA = 0x01;
static const int SUBLANG_BENGALI_BANGLADESH = 0x02;
static const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 0x05;
static const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x08;
static const int SUBLANG_BRETON_FRANCE = 0x01;
static const int SUBLANG_BULGARIAN_BULGARIA = 0x01;
static const int SUBLANG_CATALAN_CATALAN = 0x01;
static const int SUBLANG_CHINESE_TRADITIONAL = 0x01;
static const int SUBLANG_CHINESE_SIMPLIFIED = 0x02;
static const int SUBLANG_CHINESE_HONGKONG = 0x03;
static const int SUBLANG_CHINESE_SINGAPORE = 0x04;
static const int SUBLANG_CHINESE_MACAU = 0x05;
static const int SUBLANG_CORSICAN_FRANCE = 0x01;
static const int SUBLANG_CZECH_CZECH_REPUBLIC = 0x01;
static const int SUBLANG_CROATIAN_CROATIA = 0x01;
static const int SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 0x04;
static const int SUBLANG_DANISH_DENMARK = 0x01;
static const int SUBLANG_DARI_AFGHANISTAN = 0x01;
static const int SUBLANG_DIVEHI_MALDIVES = 0x01;
static const int SUBLANG_DUTCH = 0x01;
static const int SUBLANG_DUTCH_BELGIAN = 0x02;
static const int SUBLANG_ENGLISH_US = 0x01;
static const int SUBLANG_ENGLISH_UK = 0x02;
static const int SUBLANG_ENGLISH_AUS = 0x03;
static const int SUBLANG_ENGLISH_CAN = 0x04;
static const int SUBLANG_ENGLISH_NZ = 0x05;
static const int SUBLANG_ENGLISH_EIRE = 0x06;
static const int SUBLANG_ENGLISH_SOUTH_AFRICA = 0x07;
static const int SUBLANG_ENGLISH_JAMAICA = 0x08;
static const int SUBLANG_ENGLISH_CARIBBEAN = 0x09;
static const int SUBLANG_ENGLISH_BELIZE = 0x0a;
static const int SUBLANG_ENGLISH_TRINIDAD = 0x0b;
static const int SUBLANG_ENGLISH_ZIMBABWE = 0x0c;
static const int SUBLANG_ENGLISH_PHILIPPINES = 0x0d;
static const int SUBLANG_ENGLISH_INDIA = 0x10;
static const int SUBLANG_ENGLISH_MALAYSIA = 0x11;
static const int SUBLANG_ENGLISH_SINGAPORE = 0x12;
static const int SUBLANG_ESTONIAN_ESTONIA = 0x01;
static const int SUBLANG_FAEROESE_FAROE_ISLANDS = 0x01;
static const int SUBLANG_FILIPINO_PHILIPPINES = 0x01;
static const int SUBLANG_FINNISH_FINLAND = 0x01;
static const int SUBLANG_FRENCH = 0x01;
static const int SUBLANG_FRENCH_BELGIAN = 0x02;
static const int SUBLANG_FRENCH_CANADIAN = 0x03;
static const int SUBLANG_FRENCH_SWISS = 0x04;
static const int SUBLANG_FRENCH_LUXEMBOURG = 0x05;
static const int SUBLANG_FRENCH_MONACO = 0x06;
static const int SUBLANG_FRISIAN_NETHERLANDS = 0x01;
static const int SUBLANG_GALICIAN_GALICIAN = 0x01;
static const int SUBLANG_GEORGIAN_GEORGIA = 0x01;
static const int SUBLANG_GERMAN = 0x01;
static const int SUBLANG_GERMAN_SWISS = 0x02;
static const int SUBLANG_GERMAN_AUSTRIAN = 0x03;
static const int SUBLANG_GERMAN_LUXEMBOURG = 0x04;
static const int SUBLANG_GERMAN_LIECHTENSTEIN = 0x05;
static const int SUBLANG_GREEK_GREECE = 0x01;
static const int SUBLANG_GREENLANDIC_GREENLAND = 0x01;
static const int SUBLANG_GUJARATI_INDIA = 0x01;
static const int SUBLANG_HAUSA_NIGERIA_LATIN = 0x01;
static const int SUBLANG_HEBREW_ISRAEL = 0x01;
static const int SUBLANG_HINDI_INDIA = 0x01;
static const int SUBLANG_HUNGARIAN_HUNGARY = 0x01;
static const int SUBLANG_ICELANDIC_ICELAND = 0x01;
static const int SUBLANG_IGBO_NIGERIA = 0x01;
static const int SUBLANG_INDONESIAN_INDONESIA = 0x01;
static const int SUBLANG_INUKTITUT_CANADA = 0x01;
static const int SUBLANG_INUKTITUT_CANADA_LATIN = 0x02;
static const int SUBLANG_IRISH_IRELAND = 0x02;
static const int SUBLANG_ITALIAN = 0x01;
static const int SUBLANG_ITALIAN_SWISS = 0x02;
static const int SUBLANG_JAPANESE_JAPAN = 0x01;
static const int SUBLANG_KANNADA_INDIA = 0x01;
static const int SUBLANG_KASHMIRI_SASIA = 0x02;
static const int SUBLANG_KASHMIRI_INDIA = 0x02;
static const int SUBLANG_KAZAK_KAZAKHSTAN = 0x01;
static const int SUBLANG_KHMER_CAMBODIA = 0x01;
static const int SUBLANG_KICHE_GUATEMALA = 0x01;
static const int SUBLANG_KINYARWANDA_RWANDA = 0x01;
static const int SUBLANG_KONKANI_INDIA = 0x01;
static const int SUBLANG_KOREAN = 0x01;
static const int SUBLANG_KYRGYZ_KYRGYZSTAN = 0x01;
static const int SUBLANG_LAO_LAO = 0x01;
static const int SUBLANG_LATVIAN_LATVIA = 0x01;
static const int SUBLANG_LITHUANIAN = 0x01;
static const int SUBLANG_LOWER_SORBIAN_GERMANY = 0x02;
static const int SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 0x01;
static const int SUBLANG_MACEDONIAN_MACEDONIA = 0x01;
static const int SUBLANG_MALAY_MALAYSIA = 0x01;
static const int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x02;
static const int SUBLANG_MALAYALAM_INDIA = 0x01;
static const int SUBLANG_MALTESE_MALTA = 0x01;
static const int SUBLANG_MAORI_NEW_ZEALAND = 0x01;
static const int SUBLANG_MAPUDUNGUN_CHILE = 0x01;
static const int SUBLANG_MARATHI_INDIA = 0x01;
static const int SUBLANG_MOHAWK_MOHAWK = 0x01;
static const int SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 0x01;
static const int SUBLANG_MONGOLIAN_PRC = 0x02;
static const int SUBLANG_NEPALI_INDIA = 0x02;
static const int SUBLANG_NEPALI_NEPAL = 0x01;
static const int SUBLANG_NORWEGIAN_BOKMAL = 0x01;
static const int SUBLANG_NORWEGIAN_NYNORSK = 0x02;
static const int SUBLANG_OCCITAN_FRANCE = 0x01;
static const int SUBLANG_ORIYA_INDIA = 0x01;
static const int SUBLANG_PASHTO_AFGHANISTAN = 0x01;
static const int SUBLANG_PERSIAN_IRAN = 0x01;
static const int SUBLANG_POLISH_POLAND = 0x01;
static const int SUBLANG_PORTUGUESE = 0x02;
static const int SUBLANG_PORTUGUESE_BRAZILIAN = 0x01;
static const int SUBLANG_PUNJABI_INDIA = 0x01;
static const int SUBLANG_QUECHUA_BOLIVIA = 0x01;
static const int SUBLANG_QUECHUA_ECUADOR = 0x02;
static const int SUBLANG_QUECHUA_PERU = 0x03;
static const int SUBLANG_ROMANIAN_ROMANIA = 0x01;
static const int SUBLANG_ROMANSH_SWITZERLAND = 0x01;
static const int SUBLANG_RUSSIAN_RUSSIA = 0x01;
static const int SUBLANG_SAMI_NORTHERN_NORWAY = 0x01;
static const int SUBLANG_SAMI_NORTHERN_SWEDEN = 0x02;
static const int SUBLANG_SAMI_NORTHERN_FINLAND = 0x03;
static const int SUBLANG_SAMI_LULE_NORWAY = 0x04;
static const int SUBLANG_SAMI_LULE_SWEDEN = 0x05;
static const int SUBLANG_SAMI_SOUTHERN_NORWAY = 0x06;
static const int SUBLANG_SAMI_SOUTHERN_SWEDEN = 0x07;
static const int SUBLANG_SAMI_SKOLT_FINLAND = 0x08;
static const int SUBLANG_SAMI_INARI_FINLAND = 0x09;
static const int SUBLANG_SANSKRIT_INDIA = 0x01;
static const int SUBLANG_SCOTTISH_GAELIC = 0x01;
static const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 0x06;
static const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x07;
static const int SUBLANG_SERBIAN_MONTENEGRO_LATIN = 0x0b;
static const int SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 0x0c;
static const int SUBLANG_SERBIAN_SERBIA_LATIN = 0x09;
static const int SUBLANG_SERBIAN_SERBIA_CYRILLIC = 0x0a;
static const int SUBLANG_SERBIAN_CROATIA = 0x01;
static const int SUBLANG_SERBIAN_LATIN = 0x02;
static const int SUBLANG_SERBIAN_CYRILLIC = 0x03;
static const int SUBLANG_SINDHI_INDIA = 0x01;
static const int SUBLANG_SINDHI_PAKISTAN = 0x02;
static const int SUBLANG_SINDHI_AFGHANISTAN = 0x02;
static const int SUBLANG_SINHALESE_SRI_LANKA = 0x01;
static const int SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 0x01;
static const int SUBLANG_SLOVAK_SLOVAKIA = 0x01;
static const int SUBLANG_SLOVENIAN_SLOVENIA = 0x01;
static const int SUBLANG_SPANISH = 0x01;
static const int SUBLANG_SPANISH_MEXICAN = 0x02;
static const int SUBLANG_SPANISH_MODERN = 0x03;
static const int SUBLANG_SPANISH_GUATEMALA = 0x04;
static const int SUBLANG_SPANISH_COSTA_RICA = 0x05;
static const int SUBLANG_SPANISH_PANAMA = 0x06;
static const int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x07;
static const int SUBLANG_SPANISH_VENEZUELA = 0x08;
static const int SUBLANG_SPANISH_COLOMBIA = 0x09;
static const int SUBLANG_SPANISH_PERU = 0x0a;
static const int SUBLANG_SPANISH_ARGENTINA = 0x0b;
static const int SUBLANG_SPANISH_ECUADOR = 0x0c;
static const int SUBLANG_SPANISH_CHILE = 0x0d;
static const int SUBLANG_SPANISH_URUGUAY = 0x0e;
static const int SUBLANG_SPANISH_PARAGUAY = 0x0f;
static const int SUBLANG_SPANISH_BOLIVIA = 0x10;
static const int SUBLANG_SPANISH_EL_SALVADOR = 0x11;
static const int SUBLANG_SPANISH_HONDURAS = 0x12;
static const int SUBLANG_SPANISH_NICARAGUA = 0x13;
static const int SUBLANG_SPANISH_PUERTO_RICO = 0x14;
static const int SUBLANG_SPANISH_US = 0x15;
static const int SUBLANG_SWAHILI_KENYA = 0x01;
static const int SUBLANG_SWEDISH = 0x01;
static const int SUBLANG_SWEDISH_FINLAND = 0x02;
static const int SUBLANG_SYRIAC_SYRIA = 0x01;
static const int SUBLANG_TAJIK_TAJIKISTAN = 0x01;
static const int SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 0x02;
static const int SUBLANG_TAMIL_INDIA = 0x01;
static const int SUBLANG_TATAR_RUSSIA = 0x01;
static const int SUBLANG_TELUGU_INDIA = 0x01;
static const int SUBLANG_THAI_THAILAND = 0x01;
static const int SUBLANG_TIBETAN_PRC = 0x01;
static const int SUBLANG_TIGRIGNA_ERITREA = 0x02;
static const int SUBLANG_TSWANA_SOUTH_AFRICA = 0x01;
static const int SUBLANG_TURKISH_TURKEY = 0x01;
static const int SUBLANG_TURKMEN_TURKMENISTAN = 0x01;
static const int SUBLANG_UIGHUR_PRC = 0x01;
static const int SUBLANG_UKRAINIAN_UKRAINE = 0x01;
static const int SUBLANG_UPPER_SORBIAN_GERMANY = 0x01;
static const int SUBLANG_URDU_PAKISTAN = 0x01;
static const int SUBLANG_URDU_INDIA = 0x02;
static const int SUBLANG_UZBEK_LATIN = 0x01;
static const int SUBLANG_UZBEK_CYRILLIC = 0x02;
static const int SUBLANG_VIETNAMESE_VIETNAM = 0x01;
static const int SUBLANG_WELSH_UNITED_KINGDOM = 0x01;
static const int SUBLANG_WOLOF_SENEGAL = 0x01;
static const int SUBLANG_XHOSA_SOUTH_AFRICA = 0x01;
static const int SUBLANG_YAKUT_RUSSIA = 0x01;
static const int SUBLANG_YI_PRC = 0x01;
static const int SUBLANG_YORUBA_NIGERIA = 0x01;
static const int SUBLANG_ZULU_SOUTH_AFRICA = 0x01;
static const int SORT_DEFAULT = 0x0;
static const int SORT_INVARIANT_MATH = 0x1;
static const int SORT_JAPANESE_XJIS = 0x0;
static const int SORT_JAPANESE_UNICODE = 0x1;
static const int SORT_JAPANESE_RADICALSTROKE = 0x4;
static const int SORT_CHINESE_BIG5 = 0x0;
static const int SORT_CHINESE_PRCP = 0x0;
static const int SORT_CHINESE_UNICODE = 0x1;
static const int SORT_CHINESE_PRC = 0x2;
static const int SORT_CHINESE_BOPOMOFO = 0x3;
static const int SORT_CHINESE_RADICALSTROKE = 0x4;
static const int SORT_KOREAN_KSC = 0x0;
static const int SORT_KOREAN_UNICODE = 0x1;
static const int SORT_GERMAN_PHONE_BOOK = 0x1;
static const int SORT_HUNGARIAN_DEFAULT = 0x0;
static const int SORT_HUNGARIAN_TECHNICAL = 0x1;
static const int SORT_GEORGIAN_TRADITIONAL = 0x0;
static const int SORT_GEORGIAN_MODERN = 0x1;
static const int MAKELANGID(p,s) = ((((WORD )(s)) << 10) | (WORD )(p));
static const int PRIMARYLANGID(lgid) = ((WORD )(lgid) & 0x3ff);
static const int SUBLANGID(lgid) = ((WORD )(lgid) >> 10);
static const int NLS_VALID_LOCALE_MASK = 0x000fffff;
static const int MAKELCID(lgid,srtid) = ((DWORD)((((DWORD)((WORD )(srtid))) << 16) | ((DWORD)((WORD )(lgid)))));
static const int MAKESORTLCID(lgid,srtid,ver) = ((DWORD)((MAKELCID(lgid, srtid)) | (((DWORD)((WORD )(ver))) << 20)));
static const int LANGIDFROMLCID(lcid) = ((WORD )(lcid));
static const int SORTIDFROMLCID(lcid) = ((WORD )((((DWORD)(lcid)) >> 16) & 0xf));
static const int SORTVERSIONFROMLCID(lcid) = ((WORD )((((DWORD)(lcid)) >> 20) & 0xf));
static const int LOCALE_NAME_MAX_LENGTH = 85;
static const int LANG_SYSTEM_DEFAULT = (MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT));
static const int LANG_USER_DEFAULT = (MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT));
static const int LOCALE_SYSTEM_DEFAULT = (MAKELCID(LANG_SYSTEM_DEFAULT, SORT_DEFAULT));
static const int LOCALE_USER_DEFAULT = (MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT));
static const int LOCALE_CUSTOM_DEFAULT = (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_DEFAULT), SORT_DEFAULT));
static const int LOCALE_CUSTOM_UNSPECIFIED = (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_UNSPECIFIED), SORT_DEFAULT));
static const int LOCALE_CUSTOM_UI_DEFAULT = (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_UI_CUSTOM_DEFAULT), SORT_DEFAULT));
static const int LOCALE_NEUTRAL = (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), SORT_DEFAULT));
static const int LOCALE_INVARIANT = (MAKELCID(MAKELANGID(LANG_INVARIANT, SUBLANG_NEUTRAL), SORT_DEFAULT));
static const int UNREFERENCED_PARAMETER(P) = (P);
static const int DBG_UNREFERENCED_PARAMETER(P) = (P);
static const int DBG_UNREFERENCED_LOCAL_VARIABLE(V) = (V);
static const int COMPILETIME_OR_2FLAGS(a,b) = ((UINT)(a)|(UINT)(b));
static const int COMPILETIME_OR_3FLAGS(a,b,c) = ((UINT)(a)|(UINT)(b)|(UINT)(c));
static const int COMPILETIME_OR_4FLAGS(a,b,c,d) = ((UINT)(a)|(UINT)(b)|(UINT)(c)|(UINT)(d));
static const int COMPILETIME_OR_5FLAGS(a,b,c,d,e) = ((UINT)(a)|(UINT)(b)|(UINT)(c)|(UINT)(d)|(UINT)(e));
static const int STATUS_WAIT_0 = ((DWORD )0x00000000L);
static const int STATUS_ABANDONED_WAIT_0 = ((DWORD )0x00000080L);
static const int STATUS_USER_APC = ((DWORD )0x000000C0L);
static const int STATUS_TIMEOUT = ((DWORD )0x00000102L);
static const int STATUS_PENDING = ((DWORD )0x00000103L);
static const int DBG_EXCEPTION_HANDLED = ((DWORD )0x00010001L);
static const int DBG_CONTINUE = ((DWORD )0x00010002L);
static const int STATUS_SEGMENT_NOTIFICATION = ((DWORD )0x40000005L);
static const int DBG_TERMINATE_THREAD = ((DWORD )0x40010003L);
static const int DBG_TERMINATE_PROCESS = ((DWORD )0x40010004L);
static const int DBG_CONTROL_C = ((DWORD )0x40010005L);
static const int DBG_PRINTEXCEPTION_C = ((DWORD )0x40010006L);
static const int DBG_RIPEXCEPTION = ((DWORD )0x40010007L);
static const int DBG_CONTROL_BREAK = ((DWORD )0x40010008L);
static const int DBG_COMMAND_EXCEPTION = ((DWORD )0x40010009L);
static const int STATUS_GUARD_PAGE_VIOLATION = ((DWORD )0x80000001L);
static const int STATUS_DATATYPE_MISALIGNMENT = ((DWORD )0x80000002L);
static const int STATUS_BREAKPOINT = ((DWORD )0x80000003L);
static const int STATUS_SINGLE_STEP = ((DWORD )0x80000004L);
static const int STATUS_LONGJUMP = ((DWORD )0x80000026L);
static const int STATUS_UNWIND_CONSOLIDATE = ((DWORD )0x80000029L);
static const int DBG_EXCEPTION_NOT_HANDLED = ((DWORD )0x80010001L);
static const int STATUS_ACCESS_VIOLATION = ((DWORD )0xC0000005L);
static const int STATUS_IN_PAGE_ERROR = ((DWORD )0xC0000006L);
static const int STATUS_INVALID_HANDLE = ((DWORD )0xC0000008L);
static const int STATUS_INVALID_PARAMETER = ((DWORD )0xC000000DL);
static const int STATUS_NO_MEMORY = ((DWORD )0xC0000017L);
static const int STATUS_ILLEGAL_INSTRUCTION = ((DWORD )0xC000001DL);
static const int STATUS_NONCONTINUABLE_EXCEPTION = ((DWORD )0xC0000025L);
static const int STATUS_INVALID_DISPOSITION = ((DWORD )0xC0000026L);
static const int STATUS_ARRAY_BOUNDS_EXCEEDED = ((DWORD )0xC000008CL);
static const int STATUS_FLOAT_DENORMAL_OPERAND = ((DWORD )0xC000008DL);
static const int STATUS_FLOAT_DIVIDE_BY_ZERO = ((DWORD )0xC000008EL);
static const int STATUS_FLOAT_INEXACT_RESULT = ((DWORD )0xC000008FL);
static const int STATUS_FLOAT_INVALID_OPERATION = ((DWORD )0xC0000090L);
static const int STATUS_FLOAT_OVERFLOW = ((DWORD )0xC0000091L);
static const int STATUS_FLOAT_STACK_CHECK = ((DWORD )0xC0000092L);
static const int STATUS_FLOAT_UNDERFLOW = ((DWORD )0xC0000093L);
static const int STATUS_INTEGER_DIVIDE_BY_ZERO = ((DWORD )0xC0000094L);
static const int STATUS_INTEGER_OVERFLOW = ((DWORD )0xC0000095L);
static const int STATUS_PRIVILEGED_INSTRUCTION = ((DWORD )0xC0000096L);
static const int STATUS_STACK_OVERFLOW = ((DWORD )0xC00000FDL);
static const int STATUS_DLL_NOT_FOUND = ((DWORD )0xC0000135L);
static const int STATUS_ORDINAL_NOT_FOUND = ((DWORD )0xC0000138L);
static const int STATUS_ENTRYPOINT_NOT_FOUND = ((DWORD )0xC0000139L);
static const int STATUS_CONTROL_C_EXIT = ((DWORD )0xC000013AL);
static const int STATUS_DLL_INIT_FAILED = ((DWORD )0xC0000142L);
static const int STATUS_FLOAT_MULTIPLE_FAULTS = ((DWORD )0xC00002B4L);
static const int STATUS_FLOAT_MULTIPLE_TRAPS = ((DWORD )0xC00002B5L);
static const int STATUS_REG_NAT_CONSUMPTION = ((DWORD )0xC00002C9L);
static const int STATUS_STACK_BUFFER_OVERRUN = ((DWORD )0xC0000409L);
static const int STATUS_INVALID_CRUNTIME_PARAMETER = ((DWORD )0xC0000417L);
static const int STATUS_ASSERTION_FAILURE = ((DWORD )0xC0000420L);
static const int STATUS_SXS_EARLY_DEACTIVATION = ((DWORD )0xC015000FL);
static const int STATUS_SXS_INVALID_DEACTIVATION = ((DWORD )0xC0150010L);
static const int MAXIMUM_WAIT_OBJECTS = 64;
static const int MAXIMUM_SUSPEND_COUNT = MAXCHAR;
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;
typedef struct _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;
typedef struct _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
    M128A XmmRegisters[16];
    BYTE Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT;
typedef struct _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;
typedef struct _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;
typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
    PXSAVE_AREA Area;
    PVOID Buffer;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT;
static const int XSAVE_ALIGN = 64;
static const int MINIMAL_XSTATE_AREA_LENGTH = sizeof(XSAVE_AREA);
typedef struct _CONTEXT_CHUNK {
    LONG Offset;
    DWORD Length;
} CONTEXT_CHUNK, *PCONTEXT_CHUNK;
typedef struct _CONTEXT_EX {
    CONTEXT_CHUNK All;
    CONTEXT_CHUNK Legacy;
    CONTEXT_CHUNK XState;
} CONTEXT_EX, *PCONTEXT_EX;
static const int CONTEXT_EX_LENGTH = ALIGN_UP_BY(sizeof(CONTEXT_EX), STACK_ALIGN);
static const int RTL_CONTEXT_EX_OFFSET(ContextEx,Chunk) = ((ContextEx)->Chunk.Offset);
static const int RTL_CONTEXT_EX_LENGTH(ContextEx,Chunk) = ((ContextEx)->Chunk.Length);
static const int RTL_CONTEXT_EX_CHUNK(Base,Layout,Chunk) = ((PVOID)((PCHAR)(Base) + RTL_CONTEXT_EX_OFFSET(Layout, Chunk)));
static const int RTL_CONTEXT_OFFSET(Context,Chunk) = RTL_CONTEXT_EX_OFFSET((PCONTEXT_EX)(Context + 1), Chunk);
static const int RTL_CONTEXT_LENGTH(Context,Chunk) = RTL_CONTEXT_EX_LENGTH((PCONTEXT_EX)(Context + 1), Chunk);
static const int RTL_CONTEXT_CHUNK(Context,Chunk) = RTL_CONTEXT_EX_CHUNK((PCONTEXT_EX)(Context + 1), (PCONTEXT_EX)(Context + 1), Chunk);
typedef char __C_ASSERT__[((sizeof(XSAVE_FORMAT) & (64 - 1)) == 0)?1:-1];
typedef char __C_ASSERT__[((((LONG)(LONG_PTR)&(((XSAVE_AREA *)0)->Header)) & (64 - 1)) == 0)?1:-1];
typedef char __C_ASSERT__[(sizeof(XSAVE_AREA) == 512 + 64)?1:-1];
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1; // Declare as bytes to avoid alignment
            BYTE Flags2; // Problems.
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
static const int WOW64_CONTEXT_i386 = 0x00010000;
static const int WOW64_CONTEXT_i486 = 0x00010000;
static const int WOW64_CONTEXT_CONTROL = (WOW64_CONTEXT_i386 | 0x00000001L);
static const int WOW64_CONTEXT_INTEGER = (WOW64_CONTEXT_i386 | 0x00000002L);
static const int WOW64_CONTEXT_SEGMENTS = (WOW64_CONTEXT_i386 | 0x00000004L);
static const int WOW64_CONTEXT_FLOATING_POINT = (WOW64_CONTEXT_i386 | 0x00000008L);
static const int WOW64_CONTEXT_DEBUG_REGISTERS = (WOW64_CONTEXT_i386 | 0x00000010L);
static const int WOW64_CONTEXT_EXTENDED_REGISTERS = (WOW64_CONTEXT_i386 | 0x00000020L);
static const int WOW64_CONTEXT_FULL = (WOW64_CONTEXT_CONTROL | WOW64_CONTEXT_INTEGER | WOW64_CONTEXT_SEGMENTS);
static const int WOW64_CONTEXT_ALL = (WOW64_CONTEXT_CONTROL | WOW64_CONTEXT_INTEGER | WOW64_CONTEXT_SEGMENTS | WOW64_CONTEXT_FLOATING_POINT | WOW64_CONTEXT_DEBUG_REGISTERS | WOW64_CONTEXT_EXTENDED_REGISTERS);
static const int WOW64_CONTEXT_XSTATE = (WOW64_CONTEXT_i386 | 0x00000040L);
static const int WOW64_SIZE_OF_80387_REGISTERS = 80;
static const int WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;
typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;
typedef struct _WOW64_CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    WOW64_FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs; // MUST BE SANITIZED
    DWORD EFlags; // MUST BE SANITIZED
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
} WOW64_CONTEXT;
typedef WOW64_CONTEXT *PWOW64_CONTEXT;
typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1; // Declare as bytes to avoid alignment
            BYTE Flags2; // Problems.
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;
typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
static const int EXCEPTION_NONCONTINUABLE = 0x1;
static const int EXCEPTION_MAXIMUM_PARAMETERS = 15;
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;
typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
void
RtlUnwind (
    PVOID TargetFrame,
    PVOID TargetIp,
    PEXCEPTION_RECORD ExceptionRecord,
    PVOID ReturnValue
    );
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
static const int DELETE = (0x00010000L);
static const int READ_CONTROL = (0x00020000L);
static const int WRITE_DAC = (0x00040000L);
static const int WRITE_OWNER = (0x00080000L);
static const int SYNCHRONIZE = (0x00100000L);
static const int STANDARD_RIGHTS_REQUIRED = (0x000F0000L);
static const int STANDARD_RIGHTS_READ = (READ_CONTROL);
static const int STANDARD_RIGHTS_WRITE = (READ_CONTROL);
static const int STANDARD_RIGHTS_EXECUTE = (READ_CONTROL);
static const int STANDARD_RIGHTS_ALL = (0x001F0000L);
static const int SPECIFIC_RIGHTS_ALL = (0x0000FFFFL);
static const int ACCESS_SYSTEM_SECURITY = (0x01000000L);
static const int MAXIMUM_ALLOWED = (0x02000000L);
static const int GENERIC_READ = (0x80000000L);
static const int GENERIC_WRITE = (0x40000000L);
static const int GENERIC_EXECUTE = (0x20000000L);
static const int GENERIC_ALL = (0x10000000L);
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
   DWORD SubAuthority[1];
} SID, *PISID;
static const int SID_REVISION = (1);
static const int SID_MAX_SUB_AUTHORITIES = (15);
static const int SID_RECOMMENDED_SUB_AUTHORITIES = (1);
static const int SECURITY_MAX_SID_SIZE = (sizeof(SID) - sizeof(DWORD) + (SID_MAX_SUB_AUTHORITIES * sizeof(DWORD)));
typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;
typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
static const int SID_HASH_SIZE = 32;
typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;
typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
static const int SECURITY_NULL_SID_AUTHORITY = {0,0,0,0,0,0};
static const int SECURITY_WORLD_SID_AUTHORITY = {0,0,0,0,0,1};
static const int SECURITY_LOCAL_SID_AUTHORITY = {0,0,0,0,0,2};
static const int SECURITY_CREATOR_SID_AUTHORITY = {0,0,0,0,0,3};
static const int SECURITY_NON_UNIQUE_AUTHORITY = {0,0,0,0,0,4};
static const int SECURITY_RESOURCE_MANAGER_AUTHORITY = {0,0,0,0,0,9};
static const int SECURITY_NULL_RID = (0x00000000L);
static const int SECURITY_WORLD_RID = (0x00000000L);
static const int SECURITY_LOCAL_RID = (0x00000000L);
static const int SECURITY_LOCAL_LOGON_RID = (0x00000001L);
static const int SECURITY_CREATOR_OWNER_RID = (0x00000000L);
static const int SECURITY_CREATOR_GROUP_RID = (0x00000001L);
static const int SECURITY_CREATOR_OWNER_SERVER_RID = (0x00000002L);
static const int SECURITY_CREATOR_GROUP_SERVER_RID = (0x00000003L);
static const int SECURITY_CREATOR_OWNER_RIGHTS_RID = (0x00000004L);
static const int SECURITY_NT_AUTHORITY = {0,0,0,0,0,5};
static const int SECURITY_DIALUP_RID = (0x00000001L);
static const int SECURITY_NETWORK_RID = (0x00000002L);
static const int SECURITY_BATCH_RID = (0x00000003L);
static const int SECURITY_INTERACTIVE_RID = (0x00000004L);
static const int SECURITY_LOGON_IDS_RID = (0x00000005L);
static const int SECURITY_LOGON_IDS_RID_COUNT = (3L);
static const int SECURITY_SERVICE_RID = (0x00000006L);
static const int SECURITY_ANONYMOUS_LOGON_RID = (0x00000007L);
static const int SECURITY_PROXY_RID = (0x00000008L);
static const int SECURITY_ENTERPRISE_CONTROLLERS_RID = (0x00000009L);
static const int SECURITY_SERVER_LOGON_RID = SECURITY_ENTERPRISE_CONTROLLERS_RID;
static const int SECURITY_PRINCIPAL_SELF_RID = (0x0000000AL);
static const int SECURITY_AUTHENTICATED_USER_RID = (0x0000000BL);
static const int SECURITY_RESTRICTED_CODE_RID = (0x0000000CL);
static const int SECURITY_TERMINAL_SERVER_RID = (0x0000000DL);
static const int SECURITY_REMOTE_LOGON_RID = (0x0000000EL);
static const int SECURITY_THIS_ORGANIZATION_RID = (0x0000000FL);
static const int SECURITY_IUSER_RID = (0x00000011L);
static const int SECURITY_LOCAL_SYSTEM_RID = (0x00000012L);
static const int SECURITY_LOCAL_SERVICE_RID = (0x00000013L);
static const int SECURITY_NETWORK_SERVICE_RID = (0x00000014L);
static const int SECURITY_NT_NON_UNIQUE = (0x00000015L);
static const int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = (3L);
static const int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = (0x00000016L);
static const int SECURITY_BUILTIN_DOMAIN_RID = (0x00000020L);
static const int SECURITY_WRITE_RESTRICTED_CODE_RID = (0x00000021L);
static const int SECURITY_PACKAGE_BASE_RID = (0x00000040L);
static const int SECURITY_PACKAGE_RID_COUNT = (2L);
static const int SECURITY_PACKAGE_NTLM_RID = (0x0000000AL);
static const int SECURITY_PACKAGE_SCHANNEL_RID = (0x0000000EL);
static const int SECURITY_PACKAGE_DIGEST_RID = (0x00000015L);
static const int SECURITY_CRED_TYPE_BASE_RID = (0x00000041L);
static const int SECURITY_CRED_TYPE_RID_COUNT = (2L);
static const int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = (0x00000001L);
static const int SECURITY_MIN_BASE_RID = (0x00000050L);
static const int SECURITY_SERVICE_ID_BASE_RID = (0x00000050L);
static const int SECURITY_SERVICE_ID_RID_COUNT = (6L);
static const int SECURITY_RESERVED_ID_BASE_RID = (0x00000051L);
static const int SECURITY_APPPOOL_ID_BASE_RID = (0x00000052L);
static const int SECURITY_APPPOOL_ID_RID_COUNT = (6L);
static const int SECURITY_VIRTUALSERVER_ID_BASE_RID = (0x00000053L);
static const int SECURITY_VIRTUALSERVER_ID_RID_COUNT = (6L);
static const int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = (0x00000054L);
static const int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = (6L);
static const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = (0x00000055L);
static const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = (6L);
static const int SECURITY_WMIHOST_ID_BASE_RID = (0x00000056L);
static const int SECURITY_WMIHOST_ID_RID_COUNT = (6L);
static const int SECURITY_TASK_ID_BASE_RID = (0x00000057L);
static const int SECURITY_NFS_ID_BASE_RID = (0x00000058L);
static const int SECURITY_COM_ID_BASE_RID = (0x00000059L);
static const int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = (6L);
static const int SECURITY_MAX_BASE_RID = (0x0000006FL);
static const int SECURITY_MAX_ALWAYS_FILTERED = (0x000003E7L);
static const int SECURITY_MIN_NEVER_FILTERED = (0x000003E8L);
static const int SECURITY_OTHER_ORGANIZATION_RID = (0x000003E8L);
static const int SECURITY_WINDOWSMOBILE_ID_BASE_RID = (0x00000070L);
static const int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = (0x000001F2L);
static const int FOREST_USER_RID_MAX = (0x000001F3L);
static const int DOMAIN_USER_RID_ADMIN = (0x000001F4L);
static const int DOMAIN_USER_RID_GUEST = (0x000001F5L);
static const int DOMAIN_USER_RID_KRBTGT = (0x000001F6L);
static const int DOMAIN_USER_RID_MAX = (0x000003E7L);
static const int DOMAIN_GROUP_RID_ADMINS = (0x00000200L);
static const int DOMAIN_GROUP_RID_USERS = (0x00000201L);
static const int DOMAIN_GROUP_RID_GUESTS = (0x00000202L);
static const int DOMAIN_GROUP_RID_COMPUTERS = (0x00000203L);
static const int DOMAIN_GROUP_RID_CONTROLLERS = (0x00000204L);
static const int DOMAIN_GROUP_RID_CERT_ADMINS = (0x00000205L);
static const int DOMAIN_GROUP_RID_SCHEMA_ADMINS = (0x00000206L);
static const int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = (0x00000207L);
static const int DOMAIN_GROUP_RID_POLICY_ADMINS = (0x00000208L);
static const int DOMAIN_GROUP_RID_READONLY_CONTROLLERS = (0x00000209L);
static const int DOMAIN_ALIAS_RID_ADMINS = (0x00000220L);
static const int DOMAIN_ALIAS_RID_USERS = (0x00000221L);
static const int DOMAIN_ALIAS_RID_GUESTS = (0x00000222L);
static const int DOMAIN_ALIAS_RID_POWER_USERS = (0x00000223L);
static const int DOMAIN_ALIAS_RID_ACCOUNT_OPS = (0x00000224L);
static const int DOMAIN_ALIAS_RID_SYSTEM_OPS = (0x00000225L);
static const int DOMAIN_ALIAS_RID_PRINT_OPS = (0x00000226L);
static const int DOMAIN_ALIAS_RID_BACKUP_OPS = (0x00000227L);
static const int DOMAIN_ALIAS_RID_REPLICATOR = (0x00000228L);
static const int DOMAIN_ALIAS_RID_RAS_SERVERS = (0x00000229L);
static const int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = (0x0000022AL);
static const int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = (0x0000022BL);
static const int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = (0x0000022CL);
static const int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = (0x0000022DL);
static const int DOMAIN_ALIAS_RID_MONITORING_USERS = (0x0000022EL);
static const int DOMAIN_ALIAS_RID_LOGGING_USERS = (0x0000022FL);
static const int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = (0x00000230L);
static const int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = (0x00000231L);
static const int DOMAIN_ALIAS_RID_DCOM_USERS = (0x00000232L);
static const int DOMAIN_ALIAS_RID_IUSERS = (0x00000238L);
static const int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = (0x00000239L);
static const int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = (0x0000023BL);
static const int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = (0x0000023CL);
static const int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = (0x0000023DL);
static const int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = (0x0000023EL);
static const int SECURITY_MANDATORY_LABEL_AUTHORITY = {0,0,0,0,0,16};
static const int SECURITY_MANDATORY_UNTRUSTED_RID = (0x00000000L);
static const int SECURITY_MANDATORY_LOW_RID = (0x00001000L);
static const int SECURITY_MANDATORY_MEDIUM_RID = (0x00002000L);
static const int SECURITY_MANDATORY_MEDIUM_PLUS_RID = (SECURITY_MANDATORY_MEDIUM_RID + 0x100);
static const int SECURITY_MANDATORY_HIGH_RID = (0x00003000L);
static const int SECURITY_MANDATORY_SYSTEM_RID = (0x00004000L);
static const int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = (0x00005000L);
static const int SECURITY_MANDATORY_MAXIMUM_USER_RID = SECURITY_MANDATORY_SYSTEM_RID;
static const int MANDATORY_LEVEL_TO_MANDATORY_RID(IL) = (IL * 0x1000);
typedef enum {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
} WELL_KNOWN_SID_TYPE;
static const int SYSTEM_LUID = { 0x3e7, 0x0 };
static const int ANONYMOUS_LOGON_LUID = { 0x3e6, 0x0 };
static const int LOCALSERVICE_LUID = { 0x3e5, 0x0 };
static const int NETWORKSERVICE_LUID = { 0x3e4, 0x0 };
static const int IUSER_LUID = { 0x3e3, 0x0 };
static const int SE_GROUP_MANDATORY = (0x00000001L);
static const int SE_GROUP_ENABLED_BY_DEFAULT = (0x00000002L);
static const int SE_GROUP_ENABLED = (0x00000004L);
static const int SE_GROUP_OWNER = (0x00000008L);
static const int SE_GROUP_USE_FOR_DENY_ONLY = (0x00000010L);
static const int SE_GROUP_INTEGRITY = (0x00000020L);
static const int SE_GROUP_INTEGRITY_ENABLED = (0x00000040L);
static const int SE_GROUP_LOGON_ID = (0xC0000000L);
static const int SE_GROUP_RESOURCE = (0x20000000L);
static const int SE_GROUP_VALID_ATTRIBUTES = (SE_GROUP_MANDATORY | SE_GROUP_ENABLED_BY_DEFAULT | SE_GROUP_ENABLED | SE_GROUP_OWNER | SE_GROUP_USE_FOR_DENY_ONLY | SE_GROUP_LOGON_ID | SE_GROUP_RESOURCE | SE_GROUP_INTEGRITY | SE_GROUP_INTEGRITY_ENABLED);
static const int ACL_REVISION = (2);
static const int ACL_REVISION_DS = (4);
static const int ACL_REVISION1 = (1);
static const int MIN_ACL_REVISION = ACL_REVISION2;
static const int ACL_REVISION2 = (2);
static const int ACL_REVISION3 = (3);
static const int ACL_REVISION4 = (4);
static const int MAX_ACL_REVISION = ACL_REVISION4;
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
static const int ACCESS_MIN_MS_ACE_TYPE = (0x0);
static const int ACCESS_ALLOWED_ACE_TYPE = (0x0);
static const int ACCESS_DENIED_ACE_TYPE = (0x1);
static const int SYSTEM_AUDIT_ACE_TYPE = (0x2);
static const int SYSTEM_ALARM_ACE_TYPE = (0x3);
static const int ACCESS_MAX_MS_V2_ACE_TYPE = (0x3);
static const int ACCESS_ALLOWED_COMPOUND_ACE_TYPE = (0x4);
static const int ACCESS_MAX_MS_V3_ACE_TYPE = (0x4);
static const int ACCESS_MIN_MS_OBJECT_ACE_TYPE = (0x5);
static const int ACCESS_ALLOWED_OBJECT_ACE_TYPE = (0x5);
static const int ACCESS_DENIED_OBJECT_ACE_TYPE = (0x6);
static const int SYSTEM_AUDIT_OBJECT_ACE_TYPE = (0x7);
static const int SYSTEM_ALARM_OBJECT_ACE_TYPE = (0x8);
static const int ACCESS_MAX_MS_OBJECT_ACE_TYPE = (0x8);
static const int ACCESS_MAX_MS_V4_ACE_TYPE = (0x8);
static const int ACCESS_MAX_MS_ACE_TYPE = (0x8);
static const int ACCESS_ALLOWED_CALLBACK_ACE_TYPE = (0x9);
static const int ACCESS_DENIED_CALLBACK_ACE_TYPE = (0xA);
static const int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = (0xB);
static const int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = (0xC);
static const int SYSTEM_AUDIT_CALLBACK_ACE_TYPE = (0xD);
static const int SYSTEM_ALARM_CALLBACK_ACE_TYPE = (0xE);
static const int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = (0xF);
static const int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = (0x10);
static const int SYSTEM_MANDATORY_LABEL_ACE_TYPE = (0x11);
static const int ACCESS_MAX_MS_V5_ACE_TYPE = (0x11);
static const int OBJECT_INHERIT_ACE = (0x1);
static const int CONTAINER_INHERIT_ACE = (0x2);
static const int NO_PROPAGATE_INHERIT_ACE = (0x4);
static const int INHERIT_ONLY_ACE = (0x8);
static const int INHERITED_ACE = (0x10);
static const int VALID_INHERIT_FLAGS = (0x1F);
static const int SUCCESSFUL_ACCESS_ACE_FLAG = (0x40);
static const int FAILED_ACCESS_ACE_FLAG = (0x80);
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;
static const int SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 0x1;
static const int SYSTEM_MANDATORY_LABEL_NO_READ_UP = 0x2;
static const int SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 0x4;
static const int SYSTEM_MANDATORY_LABEL_VALID_MASK = (SYSTEM_MANDATORY_LABEL_NO_WRITE_UP | SYSTEM_MANDATORY_LABEL_NO_READ_UP | SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP);
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
static const int ACE_OBJECT_TYPE_PRESENT = 0x1;
static const int ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2;
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;
typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
static const int SECURITY_DESCRIPTOR_REVISION = (1);
static const int SECURITY_DESCRIPTOR_REVISION1 = (1);
static const int SECURITY_DESCRIPTOR_MIN_LENGTH = (sizeof(SECURITY_DESCRIPTOR));
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
static const int SE_OWNER_DEFAULTED = (0x0001);
static const int SE_GROUP_DEFAULTED = (0x0002);
static const int SE_DACL_PRESENT = (0x0004);
static const int SE_DACL_DEFAULTED = (0x0008);
static const int SE_SACL_PRESENT = (0x0010);
static const int SE_SACL_DEFAULTED = (0x0020);
static const int SE_DACL_AUTO_INHERIT_REQ = (0x0100);
static const int SE_SACL_AUTO_INHERIT_REQ = (0x0200);
static const int SE_DACL_AUTO_INHERITED = (0x0400);
static const int SE_SACL_AUTO_INHERITED = (0x0800);
static const int SE_DACL_PROTECTED = (0x1000);
static const int SE_SACL_PROTECTED = (0x2000);
static const int SE_RM_CONTROL_VALID = (0x4000);
static const int SE_SELF_RELATIVE = (0x8000);
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;
   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
static const int ACCESS_OBJECT_GUID = 0;
static const int ACCESS_PROPERTY_SET_GUID = 1;
static const int ACCESS_PROPERTY_GUID = 2;
static const int ACCESS_MAX_LEVEL = 4;
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
static const int AUDIT_ALLOW_NO_PRIVILEGE = 0x1;
static const char ACCESS_DS_SOURCE_A = "DS";
static const char ACCESS_DS_SOURCE_W = L"DS";
static const char ACCESS_DS_OBJECT_TYPE_NAME_A = "Directory Service Object";
static const char ACCESS_DS_OBJECT_TYPE_NAME_W = L"Directory Service Object";
static const int SE_PRIVILEGE_ENABLED_BY_DEFAULT = (0x00000001L);
static const int SE_PRIVILEGE_ENABLED = (0x00000002L);
static const int SE_PRIVILEGE_REMOVED = (0X00000004L);
static const int SE_PRIVILEGE_USED_FOR_ACCESS = (0x80000000L);
static const int SE_PRIVILEGE_VALID_ATTRIBUTES = (SE_PRIVILEGE_ENABLED_BY_DEFAULT | SE_PRIVILEGE_ENABLED | SE_PRIVILEGE_REMOVED | SE_PRIVILEGE_USED_FOR_ACCESS);
static const int PRIVILEGE_SET_ALL_NECESSARY = (1);
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
static const int ACCESS_REASON_TYPE_MASK = 0xffff0000;
static const int ACCESS_REASON_DATA_MASK = 0x0000ffff;
typedef enum _ACCESS_REASON_TYPE{
    AccessReasonNone = 0x00000000, // Indicate no reason for the bit. The bit may not be checked, or just no known reason.
    AccessReasonAllowedAce = 0x00010000, // Granted a permission.
    AccessReasonDeniedAce = 0x00020000, // Denied a permission.
    AccessReasonAllowedParentAce = 0x00030000, // Granted a permission from parent ACE
    AccessReasonDeniedParentAce = 0x00040000, // Denied a permission from parent ACE
    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,
    AccessReasonIntegrityLevel = 0x00300000,
    AccessReasonOwnership = 0x00400000,
    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,
    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000 // this access bit is not granted by any ACE.
} ACCESS_REASON_TYPE;
typedef DWORD ACCESS_REASON;
typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
static const int SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 0x00000001;
static const int SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 0x00000002;
static const int SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 0x00000003;
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;
typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid; // Need to watch how this field affects the cache.
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;
typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount; // Indicate the array size of GrantedAccess and AccessStatus, it only can be either 1 or ObjectTypeListCount.
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
static const int SE_CREATE_TOKEN_NAME = TEXT("SeCreateTokenPrivilege");
static const int SE_ASSIGNPRIMARYTOKEN_NAME = TEXT("SeAssignPrimaryTokenPrivilege");
static const int SE_LOCK_MEMORY_NAME = TEXT("SeLockMemoryPrivilege");
static const int SE_INCREASE_QUOTA_NAME = TEXT("SeIncreaseQuotaPrivilege");
static const int SE_UNSOLICITED_INPUT_NAME = TEXT("SeUnsolicitedInputPrivilege");
static const int SE_MACHINE_ACCOUNT_NAME = TEXT("SeMachineAccountPrivilege");
static const int SE_TCB_NAME = TEXT("SeTcbPrivilege");
static const int SE_SECURITY_NAME = TEXT("SeSecurityPrivilege");
static const int SE_TAKE_OWNERSHIP_NAME = TEXT("SeTakeOwnershipPrivilege");
static const int SE_LOAD_DRIVER_NAME = TEXT("SeLoadDriverPrivilege");
static const int SE_SYSTEM_PROFILE_NAME = TEXT("SeSystemProfilePrivilege");
static const int SE_SYSTEMTIME_NAME = TEXT("SeSystemtimePrivilege");
static const int SE_PROF_SINGLE_PROCESS_NAME = TEXT("SeProfileSingleProcessPrivilege");
static const int SE_INC_BASE_PRIORITY_NAME = TEXT("SeIncreaseBasePriorityPrivilege");
static const int SE_CREATE_PAGEFILE_NAME = TEXT("SeCreatePagefilePrivilege");
static const int SE_CREATE_PERMANENT_NAME = TEXT("SeCreatePermanentPrivilege");
static const int SE_BACKUP_NAME = TEXT("SeBackupPrivilege");
static const int SE_RESTORE_NAME = TEXT("SeRestorePrivilege");
static const int SE_SHUTDOWN_NAME = TEXT("SeShutdownPrivilege");
static const int SE_DEBUG_NAME = TEXT("SeDebugPrivilege");
static const int SE_AUDIT_NAME = TEXT("SeAuditPrivilege");
static const int SE_SYSTEM_ENVIRONMENT_NAME = TEXT("SeSystemEnvironmentPrivilege");
static const int SE_CHANGE_NOTIFY_NAME = TEXT("SeChangeNotifyPrivilege");
static const int SE_REMOTE_SHUTDOWN_NAME = TEXT("SeRemoteShutdownPrivilege");
static const int SE_UNDOCK_NAME = TEXT("SeUndockPrivilege");
static const int SE_SYNC_AGENT_NAME = TEXT("SeSyncAgentPrivilege");
static const int SE_ENABLE_DELEGATION_NAME = TEXT("SeEnableDelegationPrivilege");
static const int SE_MANAGE_VOLUME_NAME = TEXT("SeManageVolumePrivilege");
static const int SE_IMPERSONATE_NAME = TEXT("SeImpersonatePrivilege");
static const int SE_CREATE_GLOBAL_NAME = TEXT("SeCreateGlobalPrivilege");
static const int SE_TRUSTED_CREDMAN_ACCESS_NAME = TEXT("SeTrustedCredManAccessPrivilege");
static const int SE_RELABEL_NAME = TEXT("SeRelabelPrivilege");
static const int SE_INC_WORKING_SET_NAME = TEXT("SeIncreaseWorkingSetPrivilege");
static const int SE_TIME_ZONE_NAME = TEXT("SeTimeZonePrivilege");
static const int SE_CREATE_SYMBOLIC_LINK_NAME = TEXT("SeCreateSymbolicLinkPrivilege");
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
static const int SECURITY_MAX_IMPERSONATION_LEVEL = SecurityDelegation;
static const int SECURITY_MIN_IMPERSONATION_LEVEL = SecurityAnonymous;
static const int DEFAULT_IMPERSONATION_LEVEL = SecurityImpersonation;
static const int VALID_IMPERSONATION_LEVEL(L) = (((L) >= SECURITY_MIN_IMPERSONATION_LEVEL) && ((L) <= SECURITY_MAX_IMPERSONATION_LEVEL));
static const int TOKEN_ASSIGN_PRIMARY = (0x0001);
static const int TOKEN_DUPLICATE = (0x0002);
static const int TOKEN_IMPERSONATE = (0x0004);
static const int TOKEN_QUERY = (0x0008);
static const int TOKEN_QUERY_SOURCE = (0x0010);
static const int TOKEN_ADJUST_PRIVILEGES = (0x0020);
static const int TOKEN_ADJUST_GROUPS = (0x0040);
static const int TOKEN_ADJUST_DEFAULT = (0x0080);
static const int TOKEN_ADJUST_SESSIONID = (0x0100);
static const int TOKEN_ALL_ACCESS_P = (STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT );
static const int TOKEN_ALL_ACCESS = (TOKEN_ALL_ACCESS_P | TOKEN_ADJUST_SESSIONID );
static const int TOKEN_READ = (STANDARD_RIGHTS_READ | TOKEN_QUERY);
static const int TOKEN_WRITE = (STANDARD_RIGHTS_WRITE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT);
static const int TOKEN_EXECUTE = (STANDARD_RIGHTS_EXECUTE);
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    MaxTokenInfoClass // MaxTokenInfoClass should always be the last enum
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;
typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;
typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;
typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;
typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;
typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;
typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;
typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;
typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
static const int TOKEN_MANDATORY_POLICY_OFF = 0x0;
static const int TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 0x1;
static const int TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 0x2;
static const int TOKEN_MANDATORY_POLICY_VALID_MASK = (TOKEN_MANDATORY_POLICY_NO_WRITE_UP | TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN);
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;
typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;
static const int POLICY_AUDIT_SUBCATEGORY_COUNT = (53);
typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((53)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;
static const int TOKEN_SOURCE_LENGTH = 8;
typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;
typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;
typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;
typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;
typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;
static const int SECURITY_DYNAMIC_TRACKING = (TRUE);
static const int SECURITY_STATIC_TRACKING = (FALSE);
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;
typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;
static const int DISABLE_MAX_PRIVILEGE = 0x1;
static const int SANDBOX_INERT = 0x2;
static const int LUA_TOKEN = 0x4;
static const int WRITE_RESTRICTED = 0x8;
typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
static const int OWNER_SECURITY_INFORMATION = (0x00000001L);
static const int GROUP_SECURITY_INFORMATION = (0x00000002L);
static const int DACL_SECURITY_INFORMATION = (0x00000004L);
static const int SACL_SECURITY_INFORMATION = (0x00000008L);
static const int LABEL_SECURITY_INFORMATION = (0x00000010L);
static const int PROTECTED_DACL_SECURITY_INFORMATION = (0x80000000L);
static const int PROTECTED_SACL_SECURITY_INFORMATION = (0x40000000L);
static const int UNPROTECTED_DACL_SECURITY_INFORMATION = (0x20000000L);
static const int UNPROTECTED_SACL_SECURITY_INFORMATION = (0x10000000L);
static const int PROCESS_TERMINATE = (0x0001);
static const int PROCESS_CREATE_THREAD = (0x0002);
static const int PROCESS_SET_SESSIONID = (0x0004);
static const int PROCESS_VM_OPERATION = (0x0008);
static const int PROCESS_VM_READ = (0x0010);
static const int PROCESS_VM_WRITE = (0x0020);
static const int PROCESS_DUP_HANDLE = (0x0040);
static const int PROCESS_CREATE_PROCESS = (0x0080);
static const int PROCESS_SET_QUOTA = (0x0100);
static const int PROCESS_SET_INFORMATION = (0x0200);
static const int PROCESS_QUERY_INFORMATION = (0x0400);
static const int PROCESS_SUSPEND_RESUME = (0x0800);
static const int PROCESS_QUERY_LIMITED_INFORMATION = (0x1000);
static const int PROCESS_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0xFFFF);
static const int MAXIMUM_PROC_PER_GROUP = 64;
static const int MAXIMUM_PROCESSORS = MAXIMUM_PROC_PER_GROUP;
static const int THREAD_TERMINATE = (0x0001);
static const int THREAD_SUSPEND_RESUME = (0x0002);
static const int THREAD_GET_CONTEXT = (0x0008);
static const int THREAD_SET_CONTEXT = (0x0010);
static const int THREAD_QUERY_INFORMATION = (0x0040);
static const int THREAD_SET_INFORMATION = (0x0020);
static const int THREAD_SET_THREAD_TOKEN = (0x0080);
static const int THREAD_IMPERSONATE = (0x0100);
static const int THREAD_DIRECT_IMPERSONATION = (0x0200);
static const int THREAD_SET_LIMITED_INFORMATION = (0x0400);
static const int THREAD_QUERY_LIMITED_INFORMATION = (0x0800);
static const int THREAD_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0xFFFF);
static const int JOB_OBJECT_ASSIGN_PROCESS = (0x0001);
static const int JOB_OBJECT_SET_ATTRIBUTES = (0x0002);
static const int JOB_OBJECT_QUERY = (0x0004);
static const int JOB_OBJECT_TERMINATE = (0x0008);
static const int JOB_OBJECT_SET_SECURITY_ATTRIBUTES = (0x0010);
static const int JOB_OBJECT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1F );
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle; // Handle to job object to insert
    DWORD MemberLevel; // Level of this job in the set. Must be > 0. Can be sparse.
    DWORD Flags; // Unused. Must be zero
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;
static const int FLS_MAXIMUM_AVAILABLE = 128;
static const int TLS_MINIMUM_AVAILABLE = 64;
typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;
typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
    DWORD FiberData;
    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;
typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
    DWORD64 FiberData;
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
static const int THREAD_BASE_PRIORITY_LOWRT = 15;
static const int THREAD_BASE_PRIORITY_MAX = 2;
static const int THREAD_BASE_PRIORITY_MIN = (-2);
static const int THREAD_BASE_PRIORITY_IDLE = (-15);
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;
typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;
static const int QUOTA_LIMITS_HARDWS_MIN_ENABLE = 0x00000001;
static const int QUOTA_LIMITS_HARDWS_MIN_DISABLE = 0x00000002;
static const int QUOTA_LIMITS_HARDWS_MAX_ENABLE = 0x00000004;
static const int QUOTA_LIMITS_HARDWS_MAX_DISABLE = 0x00000008;
static const int QUOTA_LIMITS_USE_DEFAULT_LIMITS = 0x00000010;
typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } s;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;
typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit; // Limit expressed in pages
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit; // Limit expressed in pages
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;
typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;
static const int MAX_HW_COUNTERS = 16;
static const int THREAD_PROFILING_FLAG_DISPATCH = 0x00000001;
typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;
static const int JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;
static const int JOB_OBJECT_POST_AT_END_OF_JOB = 1;
static const int JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;
static const int JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;
static const int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;
static const int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;
static const int JOB_OBJECT_MSG_NEW_PROCESS = 6;
static const int JOB_OBJECT_MSG_EXIT_PROCESS = 7;
static const int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;
static const int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;
static const int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;
static const int JOB_OBJECT_LIMIT_WORKINGSET = 0x00000001;
static const int JOB_OBJECT_LIMIT_PROCESS_TIME = 0x00000002;
static const int JOB_OBJECT_LIMIT_JOB_TIME = 0x00000004;
static const int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 0x00000008;
static const int JOB_OBJECT_LIMIT_AFFINITY = 0x00000010;
static const int JOB_OBJECT_LIMIT_PRIORITY_CLASS = 0x00000020;
static const int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 0x00000040;
static const int JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 0x00000080;
static const int JOB_OBJECT_LIMIT_PROCESS_MEMORY = 0x00000100;
static const int JOB_OBJECT_LIMIT_JOB_MEMORY = 0x00000200;
static const int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 0x00000400;
static const int JOB_OBJECT_LIMIT_BREAKAWAY_OK = 0x00000800;
static const int JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 0x00001000;
static const int JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 0x00002000;
static const int JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 0x00004000;
static const int JOB_OBJECT_LIMIT_RESERVED3 = 0x00008000;
static const int JOB_OBJECT_LIMIT_RESERVED4 = 0x00010000;
static const int JOB_OBJECT_LIMIT_RESERVED5 = 0x00020000;
static const int JOB_OBJECT_LIMIT_RESERVED6 = 0x00040000;
static const int JOB_OBJECT_LIMIT_VALID_FLAGS = 0x0007ffff;
static const int JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 0x000000ff;
static const int JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 0x00007fff;
static const int JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS = 0x0007ffff;
static const int JOB_OBJECT_UILIMIT_NONE = 0x00000000;
static const int JOB_OBJECT_UILIMIT_HANDLES = 0x00000001;
static const int JOB_OBJECT_UILIMIT_READCLIPBOARD = 0x00000002;
static const int JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 0x00000004;
static const int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 0x00000008;
static const int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 0x00000010;
static const int JOB_OBJECT_UILIMIT_GLOBALATOMS = 0x00000020;
static const int JOB_OBJECT_UILIMIT_DESKTOP = 0x00000040;
static const int JOB_OBJECT_UILIMIT_EXITWINDOWS = 0x00000080;
static const int JOB_OBJECT_UILIMIT_ALL = 0x000000FF;
static const int JOB_OBJECT_UI_VALID_FLAGS = 0x000000FF;
static const int JOB_OBJECT_SECURITY_NO_ADMIN = 0x00000001;
static const int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 0x00000002;
static const int JOB_OBJECT_SECURITY_ONLY_TOKEN = 0x00000004;
static const int JOB_OBJECT_SECURITY_FILTER_TOKENS = 0x00000008;
static const int JOB_OBJECT_SECURITY_VALID_FLAGS = 0x0000000f;
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation, // deprecated
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;
static const int EVENT_MODIFY_STATE = 0x0002;
static const int EVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3);
static const int MUTANT_QUERY_STATE = 0x0001;
static const int MUTANT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE| MUTANT_QUERY_STATE);
static const int SEMAPHORE_MODIFY_STATE = 0x0002;
static const int SEMAPHORE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3);
static const int TIMER_QUERY_STATE = 0x0001;
static const int TIMER_MODIFY_STATE = 0x0002;
static const int TIMER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE| TIMER_QUERY_STATE|TIMER_MODIFY_STATE);
static const int TIME_ZONE_ID_UNKNOWN = 0;
static const int TIME_ZONE_ID_STANDARD = 1;
static const int TIME_ZONE_ID_DAYLIGHT = 2;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;
static const int LTP_PC_SMT = 0x1;
typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;
static const int CACHE_FULLY_ASSOCIATIVE = 0xFF;
typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } u;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE Reserved[21];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;
typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;
typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;
typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;
typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;
 struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } u;
};
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
static const int PROCESSOR_INTEL_386 = 386;
static const int PROCESSOR_INTEL_486 = 486;
static const int PROCESSOR_INTEL_PENTIUM = 586;
static const int PROCESSOR_INTEL_IA64 = 2200;
static const int PROCESSOR_AMD_X8664 = 8664;
static const int PROCESSOR_MIPS_R4000 = 4000;
static const int PROCESSOR_ALPHA_21064 = 21064;
static const int PROCESSOR_PPC_601 = 601;
static const int PROCESSOR_PPC_603 = 603;
static const int PROCESSOR_PPC_604 = 604;
static const int PROCESSOR_PPC_620 = 620;
static const int PROCESSOR_HITACHI_SH3 = 10003;
static const int PROCESSOR_HITACHI_SH3E = 10004;
static const int PROCESSOR_HITACHI_SH4 = 10005;
static const int PROCESSOR_MOTOROLA_821 = 821;
static const int PROCESSOR_SHx_SH3 = 103;
static const int PROCESSOR_SHx_SH4 = 104;
static const int PROCESSOR_STRONGARM = 2577;
static const int PROCESSOR_ARM720 = 1824;
static const int PROCESSOR_ARM820 = 2080;
static const int PROCESSOR_ARM920 = 2336;
static const int PROCESSOR_ARM_7TDMI = 70001;
static const int PROCESSOR_OPTIL = 0x494f;
static const int PROCESSOR_ARCHITECTURE_INTEL = 0;
static const int PROCESSOR_ARCHITECTURE_MIPS = 1;
static const int PROCESSOR_ARCHITECTURE_ALPHA = 2;
static const int PROCESSOR_ARCHITECTURE_PPC = 3;
static const int PROCESSOR_ARCHITECTURE_SHX = 4;
static const int PROCESSOR_ARCHITECTURE_ARM = 5;
static const int PROCESSOR_ARCHITECTURE_IA64 = 6;
static const int PROCESSOR_ARCHITECTURE_ALPHA64 = 7;
static const int PROCESSOR_ARCHITECTURE_MSIL = 8;
static const int PROCESSOR_ARCHITECTURE_AMD64 = 9;
static const int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;
static const int PROCESSOR_ARCHITECTURE_UNKNOWN = 0xFFFF;
static const int PF_FLOATING_POINT_PRECISION_ERRATA = 0;
static const int PF_FLOATING_POINT_EMULATED = 1;
static const int PF_COMPARE_EXCHANGE_DOUBLE = 2;
static const int PF_MMX_INSTRUCTIONS_AVAILABLE = 3;
static const int PF_PPC_MOVEMEM_64BIT_OK = 4;
static const int PF_ALPHA_BYTE_INSTRUCTIONS = 5;
static const int PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;
static const int PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;
static const int PF_RDTSC_INSTRUCTION_AVAILABLE = 8;
static const int PF_PAE_ENABLED = 9;
static const int PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;
static const int PF_SSE_DAZ_MODE_AVAILABLE = 11;
static const int PF_NX_ENABLED = 12;
static const int PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;
static const int PF_COMPARE_EXCHANGE128 = 14;
static const int PF_COMPARE64_EXCHANGE128 = 15;
static const int PF_CHANNELS_ENABLED = 16;
static const int PF_XSAVE_ENABLED = 17;
static const int XSTATE_LEGACY_FLOATING_POINT = 0;
static const int XSTATE_LEGACY_SSE = 1;
static const int XSTATE_GSSE = 2;
static const int XSTATE_MASK_LEGACY_FLOATING_POINT = (1i64 << (XSTATE_LEGACY_FLOATING_POINT));
static const int XSTATE_MASK_LEGACY_SSE = (1i64 << (XSTATE_LEGACY_SSE));
static const int XSTATE_MASK_LEGACY = (XSTATE_MASK_LEGACY_FLOATING_POINT | XSTATE_MASK_LEGACY_SSE);
static const int XSTATE_MASK_GSSE = (1i64 << (XSTATE_GSSE));
static const int MAXIMUM_XSTATE_FEATURES = 64;
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;
typedef struct _XSTATE_CONFIGURATION {
    DWORD64 EnabledFeatures;
    DWORD Size;
    DWORD OptimizedSave : 1;
    XSTATE_FEATURE Features[64];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;
typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;
typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;
typedef struct _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
static const int SECTION_QUERY = 0x0001;
static const int SECTION_MAP_WRITE = 0x0002;
static const int SECTION_MAP_READ = 0x0004;
static const int SECTION_MAP_EXECUTE = 0x0008;
static const int SECTION_EXTEND_SIZE = 0x0010;
static const int SECTION_MAP_EXECUTE_EXPLICIT = 0x0020;
static const int SECTION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SECTION_QUERY| SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE | SECTION_EXTEND_SIZE);
static const int SESSION_QUERY_ACCESS = 0x0001;
static const int SESSION_MODIFY_ACCESS = 0x0002;
static const int SESSION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SESSION_QUERY_ACCESS | SESSION_MODIFY_ACCESS);
static const int PAGE_NOACCESS = 0x01;
static const int PAGE_READONLY = 0x02;
static const int PAGE_READWRITE = 0x04;
static const int PAGE_WRITECOPY = 0x08;
static const int PAGE_EXECUTE = 0x10;
static const int PAGE_EXECUTE_READ = 0x20;
static const int PAGE_EXECUTE_READWRITE = 0x40;
static const int PAGE_EXECUTE_WRITECOPY = 0x80;
static const int PAGE_GUARD = 0x100;
static const int PAGE_NOCACHE = 0x200;
static const int PAGE_WRITECOMBINE = 0x400;
static const int MEM_COMMIT = 0x1000;
static const int MEM_RESERVE = 0x2000;
static const int MEM_DECOMMIT = 0x4000;
static const int MEM_RELEASE = 0x8000;
static const int MEM_FREE = 0x10000;
static const int MEM_PRIVATE = 0x20000;
static const int MEM_MAPPED = 0x40000;
static const int MEM_RESET = 0x80000;
static const int MEM_TOP_DOWN = 0x100000;
static const int MEM_WRITE_WATCH = 0x200000;
static const int MEM_PHYSICAL = 0x400000;
static const int MEM_ROTATE = 0x800000;
static const int MEM_LARGE_PAGES = 0x20000000;
static const int MEM_4MB_PAGES = 0x80000000;
static const int SEC_FILE = 0x800000;
static const int SEC_IMAGE = 0x1000000;
static const int SEC_PROTECTED_IMAGE = 0x2000000;
static const int SEC_RESERVE = 0x4000000;
static const int SEC_COMMIT = 0x8000000;
static const int SEC_NOCACHE = 0x10000000;
static const int SEC_WRITECOMBINE = 0x40000000;
static const int SEC_LARGE_PAGES = 0x80000000;
static const int MEM_IMAGE = SEC_IMAGE;
static const int WRITE_WATCH_FLAG_RESET = 0x01;
static const int FILE_READ_DATA = ( 0x0001 );
static const int FILE_LIST_DIRECTORY = ( 0x0001 );
static const int FILE_WRITE_DATA = ( 0x0002 );
static const int FILE_ADD_FILE = ( 0x0002 );
static const int FILE_APPEND_DATA = ( 0x0004 );
static const int FILE_ADD_SUBDIRECTORY = ( 0x0004 );
static const int FILE_CREATE_PIPE_INSTANCE = ( 0x0004 );
static const int FILE_READ_EA = ( 0x0008 );
static const int FILE_WRITE_EA = ( 0x0010 );
static const int FILE_EXECUTE = ( 0x0020 );
static const int FILE_TRAVERSE = ( 0x0020 );
static const int FILE_DELETE_CHILD = ( 0x0040 );
static const int FILE_READ_ATTRIBUTES = ( 0x0080 );
static const int FILE_WRITE_ATTRIBUTES = ( 0x0100 );
static const int FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1FF);
static const int FILE_GENERIC_READ = (STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE);
static const int FILE_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | FILE_WRITE_DATA | FILE_WRITE_ATTRIBUTES | FILE_WRITE_EA | FILE_APPEND_DATA | SYNCHRONIZE);
static const int FILE_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE | FILE_READ_ATTRIBUTES | FILE_EXECUTE | SYNCHRONIZE);
static const int FILE_SHARE_READ = 0x00000001;
static const int FILE_SHARE_WRITE = 0x00000002;
static const int FILE_SHARE_DELETE = 0x00000004;
static const int FILE_ATTRIBUTE_READONLY = 0x00000001;
static const int FILE_ATTRIBUTE_HIDDEN = 0x00000002;
static const int FILE_ATTRIBUTE_SYSTEM = 0x00000004;
static const int FILE_ATTRIBUTE_DIRECTORY = 0x00000010;
static const int FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
static const int FILE_ATTRIBUTE_DEVICE = 0x00000040;
static const int FILE_ATTRIBUTE_NORMAL = 0x00000080;
static const int FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
static const int FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;
static const int FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;
static const int FILE_ATTRIBUTE_COMPRESSED = 0x00000800;
static const int FILE_ATTRIBUTE_OFFLINE = 0x00001000;
static const int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;
static const int FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;
static const int FILE_ATTRIBUTE_VIRTUAL = 0x00010000;
static const int FILE_NOTIFY_CHANGE_FILE_NAME = 0x00000001;
static const int FILE_NOTIFY_CHANGE_DIR_NAME = 0x00000002;
static const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x00000004;
static const int FILE_NOTIFY_CHANGE_SIZE = 0x00000008;
static const int FILE_NOTIFY_CHANGE_LAST_WRITE = 0x00000010;
static const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x00000020;
static const int FILE_NOTIFY_CHANGE_CREATION = 0x00000040;
static const int FILE_NOTIFY_CHANGE_SECURITY = 0x00000100;
static const int FILE_ACTION_ADDED = 0x00000001;
static const int FILE_ACTION_REMOVED = 0x00000002;
static const int FILE_ACTION_MODIFIED = 0x00000003;
static const int FILE_ACTION_RENAMED_OLD_NAME = 0x00000004;
static const int FILE_ACTION_RENAMED_NEW_NAME = 0x00000005;
static const int MAILSLOT_NO_MESSAGE = ((DWORD)-1);
static const int MAILSLOT_WAIT_FOREVER = ((DWORD)-1);
static const int FILE_CASE_SENSITIVE_SEARCH = 0x00000001;
static const int FILE_CASE_PRESERVED_NAMES = 0x00000002;
static const int FILE_UNICODE_ON_DISK = 0x00000004;
static const int FILE_PERSISTENT_ACLS = 0x00000008;
static const int FILE_FILE_COMPRESSION = 0x00000010;
static const int FILE_VOLUME_QUOTAS = 0x00000020;
static const int FILE_SUPPORTS_SPARSE_FILES = 0x00000040;
static const int FILE_SUPPORTS_REPARSE_POINTS = 0x00000080;
static const int FILE_SUPPORTS_REMOTE_STORAGE = 0x00000100;
static const int FILE_VOLUME_IS_COMPRESSED = 0x00008000;
static const int FILE_SUPPORTS_OBJECT_IDS = 0x00010000;
static const int FILE_SUPPORTS_ENCRYPTION = 0x00020000;
static const int FILE_NAMED_STREAMS = 0x00040000;
static const int FILE_READ_ONLY_VOLUME = 0x00080000;
static const int FILE_SEQUENTIAL_WRITE_ONCE = 0x00100000;
static const int FILE_SUPPORTS_TRANSACTIONS = 0x00200000;
static const int FILE_SUPPORTS_HARD_LINKS = 0x00400000;
static const int FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 0x00800000;
static const int FILE_SUPPORTS_OPEN_BY_FILE_ID = 0x01000000;
static const int FILE_SUPPORTS_USN_JOURNAL = 0x02000000;
typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;
typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
static const int REPARSE_GUID_DATA_BUFFER_HEADER_SIZE = FIELD_OFFSET(REPARSE_GUID_DATA_BUFFER, GenericReparseBuffer);
static const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = ( 16 * 1024 );
static const int IO_REPARSE_TAG_RESERVED_ZERO = (0);
static const int IO_REPARSE_TAG_RESERVED_ONE = (1);
static const int IO_REPARSE_TAG_RESERVED_RANGE = IO_REPARSE_TAG_RESERVED_ONE;
static const int IsReparseTagMicrosoft(_tag) = ( ((_tag) & 0x80000000) );
static const int IsReparseTagNameSurrogate(_tag) = ( ((_tag) & 0x20000000) );
static const int IO_REPARSE_TAG_MOUNT_POINT = (0xA0000003L);
static const int IO_REPARSE_TAG_HSM = (0xC0000004L);
static const int IO_REPARSE_TAG_HSM2 = (0x80000006L);
static const int IO_REPARSE_TAG_SIS = (0x80000007L);
static const int IO_REPARSE_TAG_WIM = (0x80000008L);
static const int IO_REPARSE_TAG_CSV = (0x80000009L);
static const int IO_REPARSE_TAG_DFS = (0x8000000AL);
static const int IO_REPARSE_TAG_SYMLINK = (0xA000000CL);
static const int IO_REPARSE_TAG_DFSR = (0x80000012L);
static const int IO_COMPLETION_MODIFY_STATE = 0x0002;
static const int IO_COMPLETION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3);
static const int DUPLICATE_CLOSE_SOURCE = 0x00000001;
static const int DUPLICATE_SAME_ACCESS = 0x00000002;
const GUID GUID_MAX_POWER_SAVINGS;
const GUID GUID_MIN_POWER_SAVINGS;
const GUID GUID_TYPICAL_POWER_SAVINGS;
const GUID NO_SUBGROUP_GUID;
const GUID ALL_POWERSCHEMES_GUID;
const GUID GUID_POWERSCHEME_PERSONALITY;
const GUID GUID_ACTIVE_POWERSCHEME;
const GUID GUID_VIDEO_SUBGROUP;
const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
const GUID GUID_VIDEO_DIM_TIMEOUT;
const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
const GUID GUID_MONITOR_POWER_ON;
const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
const GUID GUID_SESSION_DISPLAY_STATE;
const GUID GUID_CONSOLE_DISPLAY_STATE;
const GUID GUID_ALLOW_DISPLAY_REQUIRED;
const GUID GUID_DISK_SUBGROUP;
const GUID GUID_DISK_POWERDOWN_TIMEOUT;
const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
const GUID GUID_SLEEP_SUBGROUP;
const GUID GUID_SLEEP_IDLE_THRESHOLD;
const GUID GUID_STANDBY_TIMEOUT;
const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
const GUID GUID_HIBERNATE_TIMEOUT;
const GUID GUID_HIBERNATE_FASTS4_POLICY;
const GUID GUID_CRITICAL_POWER_TRANSITION;
const GUID GUID_SYSTEM_AWAYMODE;
const GUID GUID_ALLOW_AWAYMODE;
const GUID GUID_ALLOW_STANDBY_STATES;
const GUID GUID_ALLOW_RTC_WAKE;
const GUID GUID_ALLOW_SYSTEM_REQUIRED;
const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
const GUID GUID_POWERBUTTON_ACTION;
const GUID GUID_POWERBUTTON_ACTION_FLAGS;
const GUID GUID_SLEEPBUTTON_ACTION;
const GUID GUID_SLEEPBUTTON_ACTION_FLAGS;
const GUID GUID_USERINTERFACEBUTTON_ACTION;
const GUID GUID_LIDCLOSE_ACTION;
const GUID GUID_LIDCLOSE_ACTION_FLAGS;
const GUID GUID_LIDOPEN_POWERSTATE;
const GUID GUID_BATTERY_SUBGROUP;
const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
const GUID GUID_PROCESSOR_THROTTLE_POLICY;
static const int PERFSTATE_POLICY_CHANGE_IDEAL = 0;
static const int PERFSTATE_POLICY_CHANGE_SINGLE = 1;
static const int PERFSTATE_POLICY_CHANGE_ROCKET = 2;
static const int PERFSTATE_POLICY_CHANGE_MAX = PERFSTATE_POLICY_CHANGE_ROCKET;
const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
static const int PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;
static const int PROCESSOR_PERF_BOOST_POLICY_MAX = 100;
const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
const GUID GUID_PROCESSOR_IDLE_DISABLE;
const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
static const int CORE_PARKING_POLICY_CHANGE_IDEAL = 0;
static const int CORE_PARKING_POLICY_CHANGE_SINGLE = 1;
static const int CORE_PARKING_POLICY_CHANGE_ROCKET = 2;
static const int CORE_PARKING_POLICY_CHANGE_MAX = CORE_PARKING_POLICY_CHANGE_ROCKET;
const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
const GUID GUID_PROCESSOR_PERF_HISTORY;
const GUID GUID_SYSTEM_COOLING_POLICY;
const GUID GUID_LOCK_CONSOLE_ON_WAKE;
const GUID GUID_DEVICE_IDLE_POLICY;
static const int POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;
static const int POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;
const GUID GUID_ACDC_POWER_SOURCE;
const GUID GUID_LIDSWITCH_STATE_CHANGE;
const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
const GUID GUID_IDLE_BACKGROUND_TASK;
const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
const GUID GUID_APPLAUNCH_BUTTON;
const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
const GUID GUID_PCIEXPRESS_ASPM_POLICY;
const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;
static const int POWER_SYSTEM_MAXIMUM = 7;
typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;
typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;
typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;
static const int ES_SYSTEM_REQUIRED = ((DWORD)0x00000001);
static const int ES_DISPLAY_REQUIRED = ((DWORD)0x00000002);
static const int ES_USER_PRESENT = ((DWORD)0x00000004);
static const int ES_AWAYMODE_REQUIRED = ((DWORD)0x00000040);
static const int ES_CONTINUOUS = ((DWORD)0x80000000);
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;
typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
static const int DIAGNOSTIC_REASON_VERSION = 0;
static const int DIAGNOSTIC_REASON_SIMPLE_STRING = 0x00000001;
static const int DIAGNOSTIC_REASON_DETAILED_STRING = 0x00000002;
static const int DIAGNOSTIC_REASON_NOT_SPECIFIED = 0x80000000;
static const int DIAGNOSTIC_REASON_INVALID_FLAGS = (~0x80000003);
static const int POWER_REQUEST_CONTEXT_VERSION = 0;
static const int POWER_REQUEST_CONTEXT_SIMPLE_STRING = 0x00000001;
static const int POWER_REQUEST_CONTEXT_DETAILED_STRING = 0x00000002;
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
static const int PowerRequestMaximum = 3;
static const int PDCAP_D0_SUPPORTED = 0x00000001;
static const int PDCAP_D1_SUPPORTED = 0x00000002;
static const int PDCAP_D2_SUPPORTED = 0x00000004;
static const int PDCAP_D3_SUPPORTED = 0x00000008;
static const int PDCAP_WAKE_FROM_D0_SUPPORTED = 0x00000010;
static const int PDCAP_WAKE_FROM_D1_SUPPORTED = 0x00000020;
static const int PDCAP_WAKE_FROM_D2_SUPPORTED = 0x00000040;
static const int PDCAP_WAKE_FROM_D3_SUPPORTED = 0x00000080;
static const int PDCAP_WARM_EJECT_SUPPORTED = 0x00000100;
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;
typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime, // Compare with KeQueryInterruptTime()
    LastSleepTime, // Compare with KeQueryInterruptTime()
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    PowerInformationLevelUnused1,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;
typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;
typedef struct {
    DWORD Version;
    GUID Guid;
    SYSTEM_POWER_CONDITION PowerCondition;
    DWORD DataLength;
    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;
static const int POWER_SETTING_VALUE_VERSION = (0x1);
typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;
typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
    LARGE_INTEGER ActivationTime;
    DWORD Flags;
    DWORD ButtonInstanceID;
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;
typedef enum {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE;
typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;
typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1; // reserved for future use
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;
typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState; // current idle state
    DWORD OldState; // previous idle state
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;
typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState; // current idle state
    DWORD OldState; // previous idle state
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;
typedef struct {
    DWORD Frequency; // in Mhz
    DWORD Power; // in milliwatts
    BYTE PercentFrequency;
    BYTE IncreaseLevel; // goto higher state
    BYTE DecreaseLevel; // goto lower state
    BYTE Type; // performance or throttle
    DWORD IncreaseTime; // in tick counts
    DWORD DecreaseTime; // in tick counts
    DWORD64 Control; // control value
    DWORD64 Status; // control value
    DWORD HitCount;
    DWORD Reserved1; // reserved for future use
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;
typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState; // current state
    DWORD MaxPerfState; // fastest state considering policy restrictions
    DWORD MinPerfState; // slowest state considering policy restrictions
    DWORD LowestPerfState; // slowest perf state, fixed, aka the "knee"
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType; // domain coordination
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors; // domain affinity
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;
typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState; // current state
    DWORD MaxPerfState; // fastest state considering policy restrictions
    DWORD MinPerfState; // slowest state considering policy restrictions
    DWORD LowestPerfState; // slowest perf state, fixed, aka the "knee"
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType; // domain coordination
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors; // domain affinity
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;
static const int PROC_IDLE_BUCKET_COUNT = 6;
typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;
typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;
static const int PROC_IDLE_BUCKET_COUNT_EX = 16;
typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;
typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;
typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
static const int ACPI_PPM_SOFTWARE_ALL = 0xFC;
static const int ACPI_PPM_SOFTWARE_ANY = 0xFD;
static const int ACPI_PPM_HARDWARE_ALL = 0xFE;
static const int MS_PPM_SOFTWARE_ALL = 0x1;
static const int PPM_FIRMWARE_ACPI1C2 = 0x00000001;
static const int PPM_FIRMWARE_ACPI1C3 = 0x00000002;
static const int PPM_FIRMWARE_ACPI1TSTATES = 0x00000004;
static const int PPM_FIRMWARE_CST = 0x00000008;
static const int PPM_FIRMWARE_CSD = 0x00000010;
static const int PPM_FIRMWARE_PCT = 0x00000020;
static const int PPM_FIRMWARE_PSS = 0x00000040;
static const int PPM_FIRMWARE_XPSS = 0x00000080;
static const int PPM_FIRMWARE_PPC = 0x00000100;
static const int PPM_FIRMWARE_PSD = 0x00000200;
static const int PPM_FIRMWARE_PTC = 0x00000400;
static const int PPM_FIRMWARE_TSS = 0x00000800;
static const int PPM_FIRMWARE_TPC = 0x00001000;
static const int PPM_FIRMWARE_TSD = 0x00002000;
static const int PPM_FIRMWARE_PCCH = 0x00004000;
static const int PPM_FIRMWARE_PCCP = 0x00008000;
const GUID PPM_PERFSTATE_CHANGE_GUID;
const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
const GUID PPM_IDLESTATE_CHANGE_GUID;
const GUID PPM_PERFSTATES_DATA_GUID;
const GUID PPM_IDLESTATES_DATA_GUID;
const GUID PPM_IDLE_ACCOUNTING_GUID;
const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
const GUID PPM_THERMALCONSTRAINT_GUID;
const GUID PPM_PERFMON_PERFSTATE_GUID;
const GUID PPM_THERMAL_POLICY_CHANGE_GUID;
typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;
typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;
typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;
typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;
typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;
typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
static const int POWER_ACTION_QUERY_ALLOWED = 0x00000001;
static const int POWER_ACTION_UI_ALLOWED = 0x00000002;
static const int POWER_ACTION_OVERRIDE_APPS = 0x00000004;
static const int POWER_ACTION_PSEUDO_TRANSITION = 0x08000000;
static const int POWER_ACTION_LIGHTEST_FIRST = 0x10000000;
static const int POWER_ACTION_LOCK_CONSOLE = 0x20000000;
static const int POWER_ACTION_DISABLE_WAKES = 0x40000000;
static const int POWER_ACTION_CRITICAL = 0x80000000;
static const int POWER_LEVEL_USER_NOTIFY_TEXT = 0x00000001;
static const int POWER_LEVEL_USER_NOTIFY_SOUND = 0x00000002;
static const int POWER_LEVEL_USER_NOTIFY_EXEC = 0x00000004;
static const int POWER_USER_NOTIFY_BUTTON = 0x00000008;
static const int POWER_USER_NOTIFY_SHUTDOWN = 0x00000010;
static const int POWER_USER_NOTIFY_FORCED_SHUTDOWN = 0x00000020;
static const int POWER_FORCE_TRIGGER_RESET = 0x80000000;
static const int BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 0x00000007;
static const int BATTERY_DISCHARGE_FLAGS_ENABLE = 0x80000000;
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
static const int NUM_DISCHARGE_POLICIES = 4;
static const int DISCHARGE_POLICY_CRITICAL = 0;
static const int DISCHARGE_POLICY_LOW = 1;
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision; // 1
    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;
    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;
    BYTE DynamicThrottle;
    BYTE Spare2[2];
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;
    DWORD Spare3;
    DWORD DozeS4Timeout;
    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];
    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];
    DWORD SpindownTimeout;
    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
static const int PROCESSOR_IDLESTATE_POLICY_COUNT = 0x3;
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;
typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } s;
    } Flags;
    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
static const int PO_THROTTLE_NONE = 0;
static const int PO_THROTTLE_CONSTANT = 1;
static const int PO_THROTTLE_DEGRADE = 2;
static const int PO_THROTTLE_ADAPTIVE = 3;
static const int PO_THROTTLE_MAXIMUM = 4;
typedef struct _PROCESSOR_POWER_POLICY_INFO {
    DWORD TimeCheck; // in US
    DWORD DemoteLimit; // in US
    DWORD PromoteLimit; // in US
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;
typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision; // 1
    BYTE DynamicThrottle;
    BYTE Spare[3];
    DWORD DisableCStates:1;
    DWORD Reserved:31;
    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;
typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } s;
        } Flags;
    } u;
    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;
typedef struct _ADMINISTRATOR_POWER_POLICY {
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;
    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;
typedef struct {
    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4; // hibernate
    BOOLEAN SystemS5; // off
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;
    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;
    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BYTE spare2[3];
    BOOLEAN DiskSpinDown;
    BYTE spare3[8];
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];
    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState; // note this may change on driver load
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;
typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[4];
    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;
    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
static const int IMAGE_DOS_SIGNATURE = 0x5A4D;
static const int IMAGE_OS2_SIGNATURE = 0x454E;
static const int IMAGE_OS2_SIGNATURE_LE = 0x454C;
static const int IMAGE_VXD_SIGNATURE = 0x454C;
static const int IMAGE_NT_SIGNATURE = 0x00004550;
typedef struct _IMAGE_DOS_HEADER { // DOS .EXE header
    WORD e_magic; // Magic number
    WORD e_cblp; // Bytes on last page of file
    WORD e_cp; // Pages in file
    WORD e_crlc; // Relocations
    WORD e_cparhdr; // Size of header in paragraphs
    WORD e_minalloc; // Minimum extra paragraphs needed
    WORD e_maxalloc; // Maximum extra paragraphs needed
    WORD e_ss; // Initial (relative) SS value
    WORD e_sp; // Initial SP value
    WORD e_csum; // Checksum
    WORD e_ip; // Initial IP value
    WORD e_cs; // Initial (relative) CS value
    WORD e_lfarlc; // File address of relocation table
    WORD e_ovno; // Overlay number
    WORD e_res[4]; // Reserved words
    WORD e_oemid; // OEM identifier (for e_oeminfo)
    WORD e_oeminfo; // OEM information; e_oemid specific
    WORD e_res2[10]; // Reserved words
    LONG e_lfanew; // File address of new exe header
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER { // OS/2 .EXE header
    WORD ne_magic; // Magic number
    CHAR ne_ver; // Version number
    CHAR ne_rev; // Revision number
    WORD ne_enttab; // Offset of Entry Table
    WORD ne_cbenttab; // Number of bytes in Entry Table
    LONG ne_crc; // Checksum of whole file
    WORD ne_flags; // Flag word
    WORD ne_autodata; // Automatic data segment number
    WORD ne_heap; // Initial heap allocation
    WORD ne_stack; // Initial stack allocation
    LONG ne_csip; // Initial CS:IP setting
    LONG ne_sssp; // Initial SS:SP setting
    WORD ne_cseg; // Count of file segments
    WORD ne_cmod; // Entries in Module Reference Table
    WORD ne_cbnrestab; // Size of non-resident name table
    WORD ne_segtab; // Offset of Segment Table
    WORD ne_rsrctab; // Offset of Resource Table
    WORD ne_restab; // Offset of resident name table
    WORD ne_modtab; // Offset of Module Reference Table
    WORD ne_imptab; // Offset of Imported Names Table
    LONG ne_nrestab; // Offset of Non-resident Names Table
    WORD ne_cmovent; // Count of movable entries
    WORD ne_align; // Segment alignment shift count
    WORD ne_cres; // Count of resource segments
    BYTE ne_exetyp; // Target Operating system
    BYTE ne_flagsothers; // Other .EXE flags
    WORD ne_pretthunks; // offset to return thunks
    WORD ne_psegrefbytes; // offset to segment ref. bytes
    WORD ne_swaparea; // Minimum code swap area size
    WORD ne_expver; // Expected Windows version number
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER { // Windows VXD header
    WORD e32_magic; // Magic number
    BYTE e32_border; // The byte ordering for the VXD
    BYTE e32_worder; // The word ordering for the VXD
    DWORD e32_level; // The EXE format level for now = 0
    WORD e32_cpu; // The CPU type
    WORD e32_os; // The OS type
    DWORD e32_ver; // Module version
    DWORD e32_mflags; // Module flags
    DWORD e32_mpages; // Module # pages
    DWORD e32_startobj; // Object # for instruction pointer
    DWORD e32_eip; // Extended instruction pointer
    DWORD e32_stackobj; // Object # for stack pointer
    DWORD e32_esp; // Extended stack pointer
    DWORD e32_pagesize; // VXD page size
    DWORD e32_lastpagesize; // Last page size in VXD
    DWORD e32_fixupsize; // Fixup section size
    DWORD e32_fixupsum; // Fixup section checksum
    DWORD e32_ldrsize; // Loader section size
    DWORD e32_ldrsum; // Loader section checksum
    DWORD e32_objtab; // Object table offset
    DWORD e32_objcnt; // Number of objects in module
    DWORD e32_objmap; // Object page map offset
    DWORD e32_itermap; // Object iterated data map offset
    DWORD e32_rsrctab; // Offset of Resource Table
    DWORD e32_rsrccnt; // Number of resource entries
    DWORD e32_restab; // Offset of resident name table
    DWORD e32_enttab; // Offset of Entry Table
    DWORD e32_dirtab; // Offset of Module Directive Table
    DWORD e32_dircnt; // Number of module directives
    DWORD e32_fpagetab; // Offset of Fixup Page Table
    DWORD e32_frectab; // Offset of Fixup Record Table
    DWORD e32_impmod; // Offset of Import Module Name Table
    DWORD e32_impmodcnt; // Number of entries in Import Module Name Table
    DWORD e32_impproc; // Offset of Import Procedure Name Table
    DWORD e32_pagesum; // Offset of Per-Page Checksum Table
    DWORD e32_datapage; // Offset of Enumerated Data Pages
    DWORD e32_preload; // Number of preload pages
    DWORD e32_nrestab; // Offset of Non-resident Names Table
    DWORD e32_cbnrestab; // Size of Non-resident Name Table
    DWORD e32_nressum; // Non-resident Name Table Checksum
    DWORD e32_autodata; // Object # for automatic data object
    DWORD e32_debuginfo; // Offset of the debugging information
    DWORD e32_debuglen; // The length of the debugging info. in bytes
    DWORD e32_instpreload; // Number of instance pages in preload section of VXD file
    DWORD e32_instdemand; // Number of instance pages in demand load section of VXD file
    DWORD e32_heapsize; // Size of heap - for 16-bit apps
    BYTE e32_res3[12]; // Reserved words
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid; // Device ID for VxD
    WORD e32_ddkver; // DDK version for VxD
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;
typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
static const int IMAGE_SIZEOF_FILE_HEADER = 20;
static const int IMAGE_FILE_RELOCS_STRIPPED = 0x0001;
static const int IMAGE_FILE_EXECUTABLE_IMAGE = 0x0002;
static const int IMAGE_FILE_LINE_NUMS_STRIPPED = 0x0004;
static const int IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x0008;
static const int IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x0010;
static const int IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x0020;
static const int IMAGE_FILE_BYTES_REVERSED_LO = 0x0080;
static const int IMAGE_FILE_32BIT_MACHINE = 0x0100;
static const int IMAGE_FILE_DEBUG_STRIPPED = 0x0200;
static const int IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x0400;
static const int IMAGE_FILE_NET_RUN_FROM_SWAP = 0x0800;
static const int IMAGE_FILE_SYSTEM = 0x1000;
static const int IMAGE_FILE_DLL = 0x2000;
static const int IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000;
static const int IMAGE_FILE_BYTES_REVERSED_HI = 0x8000;
static const int IMAGE_FILE_MACHINE_UNKNOWN = 0;
static const int IMAGE_FILE_MACHINE_I386 = 0x014c;
static const int IMAGE_FILE_MACHINE_R3000 = 0x0162;
static const int IMAGE_FILE_MACHINE_R4000 = 0x0166;
static const int IMAGE_FILE_MACHINE_R10000 = 0x0168;
static const int IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x0169;
static const int IMAGE_FILE_MACHINE_ALPHA = 0x0184;
static const int IMAGE_FILE_MACHINE_SH3 = 0x01a2;
static const int IMAGE_FILE_MACHINE_SH3DSP = 0x01a3;
static const int IMAGE_FILE_MACHINE_SH3E = 0x01a4;
static const int IMAGE_FILE_MACHINE_SH4 = 0x01a6;
static const int IMAGE_FILE_MACHINE_SH5 = 0x01a8;
static const int IMAGE_FILE_MACHINE_ARM = 0x01c0;
static const int IMAGE_FILE_MACHINE_THUMB = 0x01c2;
static const int IMAGE_FILE_MACHINE_AM33 = 0x01d3;
static const int IMAGE_FILE_MACHINE_POWERPC = 0x01F0;
static const int IMAGE_FILE_MACHINE_POWERPCFP = 0x01f1;
static const int IMAGE_FILE_MACHINE_IA64 = 0x0200;
static const int IMAGE_FILE_MACHINE_MIPS16 = 0x0266;
static const int IMAGE_FILE_MACHINE_ALPHA64 = 0x0284;
static const int IMAGE_FILE_MACHINE_MIPSFPU = 0x0366;
static const int IMAGE_FILE_MACHINE_MIPSFPU16 = 0x0466;
static const int IMAGE_FILE_MACHINE_AXP64 = IMAGE_FILE_MACHINE_ALPHA64;
static const int IMAGE_FILE_MACHINE_TRICORE = 0x0520;
static const int IMAGE_FILE_MACHINE_CEF = 0x0CEF;
static const int IMAGE_FILE_MACHINE_EBC = 0x0EBC;
static const int IMAGE_FILE_MACHINE_AMD64 = 0x8664;
static const int IMAGE_FILE_MACHINE_M32R = 0x9041;
static const int IMAGE_FILE_MACHINE_CEE = 0xC0EE;
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
static const int IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;
typedef struct _IMAGE_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
static const int IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;
static const int IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;
static const int IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107;
typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;
static const int IMAGE_NT_OPTIONAL_HDR_MAGIC = IMAGE_NT_OPTIONAL_HDR64_MAGIC;
typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;
typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;
typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
static const int IMAGE_FIRST_SECTION(ntheader) = ((PIMAGE_SECTION_HEADER) ((ULONG_PTR)(ntheader) + FIELD_OFFSET( IMAGE_NT_HEADERS, OptionalHeader ) + ((ntheader))->FileHeader.SizeOfOptionalHeader ));
static const int IMAGE_SUBSYSTEM_UNKNOWN = 0;
static const int IMAGE_SUBSYSTEM_NATIVE = 1;
static const int IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
static const int IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
static const int IMAGE_SUBSYSTEM_OS2_CUI = 5;
static const int IMAGE_SUBSYSTEM_POSIX_CUI = 7;
static const int IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;
static const int IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;
static const int IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;
static const int IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;
static const int IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;
static const int IMAGE_SUBSYSTEM_EFI_ROM = 13;
static const int IMAGE_SUBSYSTEM_XBOX = 14;
static const int IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;
static const int IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x0040;
static const int IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 0x0080;
static const int IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x0100;
static const int IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 0x0200;
static const int IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x0400;
static const int IMAGE_DLLCHARACTERISTICS_NO_BIND = 0x0800;
static const int IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000;
static const int IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000;
static const int IMAGE_DIRECTORY_ENTRY_EXPORT = 0;
static const int IMAGE_DIRECTORY_ENTRY_IMPORT = 1;
static const int IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;
static const int IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;
static const int IMAGE_DIRECTORY_ENTRY_SECURITY = 4;
static const int IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;
static const int IMAGE_DIRECTORY_ENTRY_DEBUG = 6;
static const int IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;
static const int IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;
static const int IMAGE_DIRECTORY_ENTRY_TLS = 9;
static const int IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;
static const int IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;
static const int IMAGE_DIRECTORY_ENTRY_IAT = 12;
static const int IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;
static const int IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1; // Must be IMAGE_FILE_MACHINE_UNKNOWN
    WORD Sig2; // Must be 0xffff
    WORD Version; // >= 1 (implies the CLSID field is present)
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID; // Used to invoke CoCreateInstance
    DWORD SizeOfData; // Size of data that follows the header
} ANON_OBJECT_HEADER;
typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1; // Must be IMAGE_FILE_MACHINE_UNKNOWN
    WORD Sig2; // Must be 0xffff
    WORD Version; // >= 2 (implies the Flags field is present - otherwise V1)
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID; // Used to invoke CoCreateInstance
    DWORD SizeOfData; // Size of data that follows the header
    DWORD Flags; // 0x1 -> contains metadata
    DWORD MetaDataSize; // Size of CLR metadata
    DWORD MetaDataOffset; // Offset of CLR metadata
} ANON_OBJECT_HEADER_V2;
typedef struct ANON_OBJECT_HEADER_BIGOBJ {
    WORD Sig1; // Must be IMAGE_FILE_MACHINE_UNKNOWN
    WORD Sig2; // Must be 0xffff
    WORD Version; // >= 2 (implies the Flags field is present)
    WORD Machine; // Actual machine - IMAGE_FILE_MACHINE_xxx
    DWORD TimeDateStamp;
    CLSID ClassID; // {D1BAA1C7-BAEE-4ba9-AF20-FAF66AA4DCB8}
    DWORD SizeOfData; // Size of data that follows the header
    DWORD Flags; // 0x1 -> contains metadata
    DWORD MetaDataSize; // Size of CLR metadata
    DWORD MetaDataOffset; // Offset of CLR metadata
    DWORD NumberOfSections; // extended from WORD
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;
static const int IMAGE_SIZEOF_SHORT_NAME = 8;
typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
static const int IMAGE_SIZEOF_SECTION_HEADER = 40;
static const int IMAGE_SCN_TYPE_NO_PAD = 0x00000008;
static const int IMAGE_SCN_CNT_CODE = 0x00000020;
static const int IMAGE_SCN_CNT_INITIALIZED_DATA = 0x00000040;
static const int IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080;
static const int IMAGE_SCN_LNK_OTHER = 0x00000100;
static const int IMAGE_SCN_LNK_INFO = 0x00000200;
static const int IMAGE_SCN_LNK_REMOVE = 0x00000800;
static const int IMAGE_SCN_LNK_COMDAT = 0x00001000;
static const int IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x00004000;
static const int IMAGE_SCN_GPREL = 0x00008000;
static const int IMAGE_SCN_MEM_FARDATA = 0x00008000;
static const int IMAGE_SCN_MEM_PURGEABLE = 0x00020000;
static const int IMAGE_SCN_MEM_16BIT = 0x00020000;
static const int IMAGE_SCN_MEM_LOCKED = 0x00040000;
static const int IMAGE_SCN_MEM_PRELOAD = 0x00080000;
static const int IMAGE_SCN_ALIGN_1BYTES = 0x00100000;
static const int IMAGE_SCN_ALIGN_2BYTES = 0x00200000;
static const int IMAGE_SCN_ALIGN_4BYTES = 0x00300000;
static const int IMAGE_SCN_ALIGN_8BYTES = 0x00400000;
static const int IMAGE_SCN_ALIGN_16BYTES = 0x00500000;
static const int IMAGE_SCN_ALIGN_32BYTES = 0x00600000;
static const int IMAGE_SCN_ALIGN_64BYTES = 0x00700000;
static const int IMAGE_SCN_ALIGN_128BYTES = 0x00800000;
static const int IMAGE_SCN_ALIGN_256BYTES = 0x00900000;
static const int IMAGE_SCN_ALIGN_512BYTES = 0x00A00000;
static const int IMAGE_SCN_ALIGN_1024BYTES = 0x00B00000;
static const int IMAGE_SCN_ALIGN_2048BYTES = 0x00C00000;
static const int IMAGE_SCN_ALIGN_4096BYTES = 0x00D00000;
static const int IMAGE_SCN_ALIGN_8192BYTES = 0x00E00000;
static const int IMAGE_SCN_ALIGN_MASK = 0x00F00000;
static const int IMAGE_SCN_LNK_NRELOC_OVFL = 0x01000000;
static const int IMAGE_SCN_MEM_DISCARDABLE = 0x02000000;
static const int IMAGE_SCN_MEM_NOT_CACHED = 0x04000000;
static const int IMAGE_SCN_MEM_NOT_PAGED = 0x08000000;
static const int IMAGE_SCN_MEM_SHARED = 0x10000000;
static const int IMAGE_SCN_MEM_EXECUTE = 0x20000000;
static const int IMAGE_SCN_MEM_READ = 0x40000000;
static const int IMAGE_SCN_MEM_WRITE = 0x80000000;
static const int IMAGE_SCN_SCALE_INDEX = 0x00000001;
typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short; // if 0, use LongName
            DWORD Long; // offset into string table
        } Name;
        DWORD LongName[2]; // PBYTE [2]
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
static const int IMAGE_SIZEOF_SYMBOL = 18;
typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short; // if 0, use LongName
            DWORD Long; // offset into string table
        } Name;
        DWORD LongName[2]; // PBYTE  [2]
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
static const int IMAGE_SYM_UNDEFINED = (SHORT)0;
static const int IMAGE_SYM_ABSOLUTE = (SHORT)-1;
static const int IMAGE_SYM_DEBUG = (SHORT)-2;
static const int IMAGE_SYM_SECTION_MAX = 0xFEFF;
static const int IMAGE_SYM_SECTION_MAX_EX = MAXLONG;
static const int IMAGE_SYM_TYPE_NULL = 0x0000;
static const int IMAGE_SYM_TYPE_VOID = 0x0001;
static const int IMAGE_SYM_TYPE_CHAR = 0x0002;
static const int IMAGE_SYM_TYPE_SHORT = 0x0003;
static const int IMAGE_SYM_TYPE_INT = 0x0004;
static const int IMAGE_SYM_TYPE_LONG = 0x0005;
static const int IMAGE_SYM_TYPE_FLOAT = 0x0006;
static const int IMAGE_SYM_TYPE_DOUBLE = 0x0007;
static const int IMAGE_SYM_TYPE_STRUCT = 0x0008;
static const int IMAGE_SYM_TYPE_UNION = 0x0009;
static const int IMAGE_SYM_TYPE_ENUM = 0x000A;
static const int IMAGE_SYM_TYPE_MOE = 0x000B;
static const int IMAGE_SYM_TYPE_BYTE = 0x000C;
static const int IMAGE_SYM_TYPE_WORD = 0x000D;
static const int IMAGE_SYM_TYPE_UINT = 0x000E;
static const double IMAGE_SYM_TYPE_DWORD = 0x000F;
static const int IMAGE_SYM_TYPE_PCODE = 0x8000;
static const int IMAGE_SYM_DTYPE_NULL = 0;
static const int IMAGE_SYM_DTYPE_POINTER = 1;
static const int IMAGE_SYM_DTYPE_FUNCTION = 2;
static const int IMAGE_SYM_DTYPE_ARRAY = 3;
static const int IMAGE_SYM_CLASS_END_OF_FUNCTION = (BYTE )-1;
static const int IMAGE_SYM_CLASS_NULL = 0x0000;
static const int IMAGE_SYM_CLASS_AUTOMATIC = 0x0001;
static const int IMAGE_SYM_CLASS_EXTERNAL = 0x0002;
static const int IMAGE_SYM_CLASS_STATIC = 0x0003;
static const int IMAGE_SYM_CLASS_REGISTER = 0x0004;
static const int IMAGE_SYM_CLASS_EXTERNAL_DEF = 0x0005;
static const int IMAGE_SYM_CLASS_LABEL = 0x0006;
static const int IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x0007;
static const int IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x0008;
static const int IMAGE_SYM_CLASS_ARGUMENT = 0x0009;
static const int IMAGE_SYM_CLASS_STRUCT_TAG = 0x000A;
static const int IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0x000B;
static const int IMAGE_SYM_CLASS_UNION_TAG = 0x000C;
static const int IMAGE_SYM_CLASS_TYPE_DEFINITION = 0x000D;
static const int IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0x000E;
static const double IMAGE_SYM_CLASS_ENUM_TAG = 0x000F;
static const int IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x0010;
static const int IMAGE_SYM_CLASS_REGISTER_PARAM = 0x0011;
static const int IMAGE_SYM_CLASS_BIT_FIELD = 0x0012;
static const int IMAGE_SYM_CLASS_FAR_EXTERNAL = 0x0044;
static const int IMAGE_SYM_CLASS_BLOCK = 0x0064;
static const int IMAGE_SYM_CLASS_FUNCTION = 0x0065;
static const int IMAGE_SYM_CLASS_END_OF_STRUCT = 0x0066;
static const int IMAGE_SYM_CLASS_FILE = 0x0067;
static const int IMAGE_SYM_CLASS_SECTION = 0x0068;
static const int IMAGE_SYM_CLASS_WEAK_EXTERNAL = 0x0069;
static const int IMAGE_SYM_CLASS_CLR_TOKEN = 0x006B;
static const double N_BTMASK = 0x000F;
static const int N_TMASK = 0x0030;
static const int N_TMASK1 = 0x00C0;
static const int N_TMASK2 = 0x00F0;
static const int N_BTSHFT = 4;
static const int N_TSHIFT = 2;
static const int BTYPE(x) = ((x) & N_BTMASK);
static const int ISPTR(x) = (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_POINTER << N_BTSHFT));
static const int ISFCN(x) = (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_FUNCTION << N_BTSHFT));
static const int ISARY(x) = (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_ARRAY << N_BTSHFT));
static const int ISTAG(x) = ((x)==IMAGE_SYM_CLASS_STRUCT_TAG || (x)==IMAGE_SYM_CLASS_UNION_TAG || (x)==IMAGE_SYM_CLASS_ENUM_TAG);
static const int INCREF(x) = ((((x)&~N_BTMASK)<<N_TSHIFT)|(IMAGE_SYM_DTYPE_POINTER<<N_BTSHFT)|((x)&N_BTMASK));
static const int DECREF(x) = ((((x)>>N_TSHIFT)&~N_BTMASK)|((x)&N_BTMASK));
typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType; // IMAGE_AUX_SYMBOL_TYPE
    BYTE bReserved; // Must be 0
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12]; // Must be 0
} IMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex; // struct, union, or enum tag index
        union {
            struct {
                WORD Linenumber; // declaration line number
                WORD Size; // size of struct, union, or enum
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct { // if ISFCN, tag, or .bb
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct { // if ISARY, up to 4 dimen.
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex; // tv index
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length; // section length
        WORD NumberOfRelocations; // number of relocation entries
        WORD NumberOfLinenumbers; // number of line numbers
        DWORD CheckSum; // checksum for communal
        SHORT Number; // section number to associate with
        BYTE Selection; // communal selection type
 BYTE bReserved;
 SHORT HighNumber; // high bits of the section number
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex; // the weak default symbol index
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length; // section length
        WORD NumberOfRelocations; // number of relocation entries
        WORD NumberOfLinenumbers; // number of line numbers
        DWORD CheckSum; // checksum for communal
        SHORT Number; // section number to associate with
        BYTE Selection; // communal selection type
        BYTE bReserved;
        SHORT HighNumber; // high bits of the section number
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;
typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
static const int IMAGE_COMDAT_SELECT_NODUPLICATES = 1;
static const int IMAGE_COMDAT_SELECT_ANY = 2;
static const int IMAGE_COMDAT_SELECT_SAME_SIZE = 3;
static const int IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;
static const int IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;
static const int IMAGE_COMDAT_SELECT_LARGEST = 6;
static const int IMAGE_COMDAT_SELECT_NEWEST = 7;
static const int IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;
static const int IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;
static const int IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount; // Set to the real count when IMAGE_SCN_LNK_NRELOC_OVFL is set
    } u;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
static const int IMAGE_REL_I386_ABSOLUTE = 0x0000;
static const int IMAGE_REL_I386_DIR16 = 0x0001;
static const int IMAGE_REL_I386_REL16 = 0x0002;
static const int IMAGE_REL_I386_DIR32 = 0x0006;
static const int IMAGE_REL_I386_DIR32NB = 0x0007;
static const int IMAGE_REL_I386_SEG12 = 0x0009;
static const int IMAGE_REL_I386_SECTION = 0x000A;
static const int IMAGE_REL_I386_SECREL = 0x000B;
static const int IMAGE_REL_I386_TOKEN = 0x000C;
static const int IMAGE_REL_I386_SECREL7 = 0x000D;
static const int IMAGE_REL_I386_REL32 = 0x0014;
static const int IMAGE_REL_MIPS_ABSOLUTE = 0x0000;
static const int IMAGE_REL_MIPS_REFHALF = 0x0001;
static const int IMAGE_REL_MIPS_REFWORD = 0x0002;
static const int IMAGE_REL_MIPS_JMPADDR = 0x0003;
static const int IMAGE_REL_MIPS_REFHI = 0x0004;
static const int IMAGE_REL_MIPS_REFLO = 0x0005;
static const int IMAGE_REL_MIPS_GPREL = 0x0006;
static const int IMAGE_REL_MIPS_LITERAL = 0x0007;
static const int IMAGE_REL_MIPS_SECTION = 0x000A;
static const int IMAGE_REL_MIPS_SECREL = 0x000B;
static const int IMAGE_REL_MIPS_SECRELLO = 0x000C;
static const int IMAGE_REL_MIPS_SECRELHI = 0x000D;
static const int IMAGE_REL_MIPS_TOKEN = 0x000E;
static const int IMAGE_REL_MIPS_JMPADDR16 = 0x0010;
static const int IMAGE_REL_MIPS_REFWORDNB = 0x0022;
static const int IMAGE_REL_MIPS_PAIR = 0x0025;
static const int IMAGE_REL_ALPHA_ABSOLUTE = 0x0000;
static const int IMAGE_REL_ALPHA_REFLONG = 0x0001;
static const int IMAGE_REL_ALPHA_REFQUAD = 0x0002;
static const int IMAGE_REL_ALPHA_GPREL32 = 0x0003;
static const int IMAGE_REL_ALPHA_LITERAL = 0x0004;
static const int IMAGE_REL_ALPHA_LITUSE = 0x0005;
static const int IMAGE_REL_ALPHA_GPDISP = 0x0006;
static const int IMAGE_REL_ALPHA_BRADDR = 0x0007;
static const int IMAGE_REL_ALPHA_HINT = 0x0008;
static const int IMAGE_REL_ALPHA_INLINE_REFLONG = 0x0009;
static const int IMAGE_REL_ALPHA_REFHI = 0x000A;
static const int IMAGE_REL_ALPHA_REFLO = 0x000B;
static const int IMAGE_REL_ALPHA_PAIR = 0x000C;
static const int IMAGE_REL_ALPHA_MATCH = 0x000D;
static const int IMAGE_REL_ALPHA_SECTION = 0x000E;
static const double IMAGE_REL_ALPHA_SECREL = 0x000F;
static const int IMAGE_REL_ALPHA_REFLONGNB = 0x0010;
static const int IMAGE_REL_ALPHA_SECRELLO = 0x0011;
static const int IMAGE_REL_ALPHA_SECRELHI = 0x0012;
static const int IMAGE_REL_ALPHA_REFQ3 = 0x0013;
static const int IMAGE_REL_ALPHA_REFQ2 = 0x0014;
static const int IMAGE_REL_ALPHA_REFQ1 = 0x0015;
static const int IMAGE_REL_ALPHA_GPRELLO = 0x0016;
static const int IMAGE_REL_ALPHA_GPRELHI = 0x0017;
static const int IMAGE_REL_PPC_ABSOLUTE = 0x0000;
static const int IMAGE_REL_PPC_ADDR64 = 0x0001;
static const int IMAGE_REL_PPC_ADDR32 = 0x0002;
static const int IMAGE_REL_PPC_ADDR24 = 0x0003;
static const int IMAGE_REL_PPC_ADDR16 = 0x0004;
static const int IMAGE_REL_PPC_ADDR14 = 0x0005;
static const int IMAGE_REL_PPC_REL24 = 0x0006;
static const int IMAGE_REL_PPC_REL14 = 0x0007;
static const int IMAGE_REL_PPC_TOCREL16 = 0x0008;
static const int IMAGE_REL_PPC_TOCREL14 = 0x0009;
static const int IMAGE_REL_PPC_ADDR32NB = 0x000A;
static const int IMAGE_REL_PPC_SECREL = 0x000B;
static const int IMAGE_REL_PPC_SECTION = 0x000C;
static const int IMAGE_REL_PPC_IFGLUE = 0x000D;
static const int IMAGE_REL_PPC_IMGLUE = 0x000E;
static const double IMAGE_REL_PPC_SECREL16 = 0x000F;
static const int IMAGE_REL_PPC_REFHI = 0x0010;
static const int IMAGE_REL_PPC_REFLO = 0x0011;
static const int IMAGE_REL_PPC_PAIR = 0x0012;
static const int IMAGE_REL_PPC_SECRELLO = 0x0013;
static const int IMAGE_REL_PPC_SECRELHI = 0x0014;
static const int IMAGE_REL_PPC_GPREL = 0x0015;
static const int IMAGE_REL_PPC_TOKEN = 0x0016;
static const int IMAGE_REL_PPC_TYPEMASK = 0x00FF;
static const int IMAGE_REL_PPC_NEG = 0x0100;
static const int IMAGE_REL_PPC_BRTAKEN = 0x0200;
static const int IMAGE_REL_PPC_BRNTAKEN = 0x0400;
static const int IMAGE_REL_PPC_TOCDEFN = 0x0800;
static const int IMAGE_REL_SH3_ABSOLUTE = 0x0000;
static const int IMAGE_REL_SH3_DIRECT16 = 0x0001;
static const int IMAGE_REL_SH3_DIRECT32 = 0x0002;
static const int IMAGE_REL_SH3_DIRECT8 = 0x0003;
static const int IMAGE_REL_SH3_DIRECT8_WORD = 0x0004;
static const int IMAGE_REL_SH3_DIRECT8_LONG = 0x0005;
static const int IMAGE_REL_SH3_DIRECT4 = 0x0006;
static const int IMAGE_REL_SH3_DIRECT4_WORD = 0x0007;
static const int IMAGE_REL_SH3_DIRECT4_LONG = 0x0008;
static const int IMAGE_REL_SH3_PCREL8_WORD = 0x0009;
static const int IMAGE_REL_SH3_PCREL8_LONG = 0x000A;
static const int IMAGE_REL_SH3_PCREL12_WORD = 0x000B;
static const int IMAGE_REL_SH3_STARTOF_SECTION = 0x000C;
static const int IMAGE_REL_SH3_SIZEOF_SECTION = 0x000D;
static const int IMAGE_REL_SH3_SECTION = 0x000E;
static const double IMAGE_REL_SH3_SECREL = 0x000F;
static const int IMAGE_REL_SH3_DIRECT32_NB = 0x0010;
static const int IMAGE_REL_SH3_GPREL4_LONG = 0x0011;
static const int IMAGE_REL_SH3_TOKEN = 0x0012;
static const int IMAGE_REL_SHM_PCRELPT = 0x0013;
static const int IMAGE_REL_SHM_REFLO = 0x0014;
static const int IMAGE_REL_SHM_REFHALF = 0x0015;
static const int IMAGE_REL_SHM_RELLO = 0x0016;
static const int IMAGE_REL_SHM_RELHALF = 0x0017;
static const int IMAGE_REL_SHM_PAIR = 0x0018;
static const int IMAGE_REL_SH_NOMODE = 0x8000;
static const int IMAGE_REL_ARM_ABSOLUTE = 0x0000;
static const int IMAGE_REL_ARM_ADDR32 = 0x0001;
static const int IMAGE_REL_ARM_ADDR32NB = 0x0002;
static const int IMAGE_REL_ARM_BRANCH24 = 0x0003;
static const int IMAGE_REL_ARM_BRANCH11 = 0x0004;
static const int IMAGE_REL_ARM_TOKEN = 0x0005;
static const int IMAGE_REL_ARM_GPREL12 = 0x0006;
static const int IMAGE_REL_ARM_GPREL7 = 0x0007;
static const int IMAGE_REL_ARM_BLX24 = 0x0008;
static const int IMAGE_REL_ARM_BLX11 = 0x0009;
static const int IMAGE_REL_ARM_SECTION = 0x000E;
static const double IMAGE_REL_ARM_SECREL = 0x000F;
static const int IMAGE_REL_AM_ABSOLUTE = 0x0000;
static const int IMAGE_REL_AM_ADDR32 = 0x0001;
static const int IMAGE_REL_AM_ADDR32NB = 0x0002;
static const int IMAGE_REL_AM_CALL32 = 0x0003;
static const int IMAGE_REL_AM_FUNCINFO = 0x0004;
static const int IMAGE_REL_AM_REL32_1 = 0x0005;
static const int IMAGE_REL_AM_REL32_2 = 0x0006;
static const int IMAGE_REL_AM_SECREL = 0x0007;
static const int IMAGE_REL_AM_SECTION = 0x0008;
static const int IMAGE_REL_AM_TOKEN = 0x0009;
static const int IMAGE_REL_AMD64_ABSOLUTE = 0x0000;
static const int IMAGE_REL_AMD64_ADDR64 = 0x0001;
static const int IMAGE_REL_AMD64_ADDR32 = 0x0002;
static const int IMAGE_REL_AMD64_ADDR32NB = 0x0003;
static const int IMAGE_REL_AMD64_REL32 = 0x0004;
static const int IMAGE_REL_AMD64_REL32_1 = 0x0005;
static const int IMAGE_REL_AMD64_REL32_2 = 0x0006;
static const int IMAGE_REL_AMD64_REL32_3 = 0x0007;
static const int IMAGE_REL_AMD64_REL32_4 = 0x0008;
static const int IMAGE_REL_AMD64_REL32_5 = 0x0009;
static const int IMAGE_REL_AMD64_SECTION = 0x000A;
static const int IMAGE_REL_AMD64_SECREL = 0x000B;
static const int IMAGE_REL_AMD64_SECREL7 = 0x000C;
static const int IMAGE_REL_AMD64_TOKEN = 0x000D;
static const int IMAGE_REL_AMD64_SREL32 = 0x000E;
static const double IMAGE_REL_AMD64_PAIR = 0x000F;
static const int IMAGE_REL_AMD64_SSPAN32 = 0x0010;
static const int IMAGE_REL_IA64_ABSOLUTE = 0x0000;
static const int IMAGE_REL_IA64_IMM14 = 0x0001;
static const int IMAGE_REL_IA64_IMM22 = 0x0002;
static const int IMAGE_REL_IA64_IMM64 = 0x0003;
static const int IMAGE_REL_IA64_DIR32 = 0x0004;
static const int IMAGE_REL_IA64_DIR64 = 0x0005;
static const int IMAGE_REL_IA64_PCREL21B = 0x0006;
static const int IMAGE_REL_IA64_PCREL21M = 0x0007;
static const int IMAGE_REL_IA64_PCREL21F = 0x0008;
static const int IMAGE_REL_IA64_GPREL22 = 0x0009;
static const int IMAGE_REL_IA64_LTOFF22 = 0x000A;
static const int IMAGE_REL_IA64_SECTION = 0x000B;
static const int IMAGE_REL_IA64_SECREL22 = 0x000C;
static const int IMAGE_REL_IA64_SECREL64I = 0x000D;
static const int IMAGE_REL_IA64_SECREL32 = 0x000E;
static const int IMAGE_REL_IA64_DIR32NB = 0x0010;
static const int IMAGE_REL_IA64_SREL14 = 0x0011;
static const int IMAGE_REL_IA64_SREL22 = 0x0012;
static const int IMAGE_REL_IA64_SREL32 = 0x0013;
static const int IMAGE_REL_IA64_UREL32 = 0x0014;
static const int IMAGE_REL_IA64_PCREL60X = 0x0015;
static const int IMAGE_REL_IA64_PCREL60B = 0x0016;
static const int IMAGE_REL_IA64_PCREL60F = 0x0017;
static const int IMAGE_REL_IA64_PCREL60I = 0x0018;
static const int IMAGE_REL_IA64_PCREL60M = 0x0019;
static const int IMAGE_REL_IA64_IMMGPREL64 = 0x001A;
static const int IMAGE_REL_IA64_TOKEN = 0x001B;
static const int IMAGE_REL_IA64_GPREL32 = 0x001C;
static const double IMAGE_REL_IA64_ADDEND = 0x001F;
static const int IMAGE_REL_CEF_ABSOLUTE = 0x0000;
static const int IMAGE_REL_CEF_ADDR32 = 0x0001;
static const int IMAGE_REL_CEF_ADDR64 = 0x0002;
static const int IMAGE_REL_CEF_ADDR32NB = 0x0003;
static const int IMAGE_REL_CEF_SECTION = 0x0004;
static const int IMAGE_REL_CEF_SECREL = 0x0005;
static const int IMAGE_REL_CEF_TOKEN = 0x0006;
static const int IMAGE_REL_CEE_ABSOLUTE = 0x0000;
static const int IMAGE_REL_CEE_ADDR32 = 0x0001;
static const int IMAGE_REL_CEE_ADDR64 = 0x0002;
static const int IMAGE_REL_CEE_ADDR32NB = 0x0003;
static const int IMAGE_REL_CEE_SECTION = 0x0004;
static const int IMAGE_REL_CEE_SECREL = 0x0005;
static const int IMAGE_REL_CEE_TOKEN = 0x0006;
static const int IMAGE_REL_M32R_ABSOLUTE = 0x0000;
static const int IMAGE_REL_M32R_ADDR32 = 0x0001;
static const int IMAGE_REL_M32R_ADDR32NB = 0x0002;
static const int IMAGE_REL_M32R_ADDR24 = 0x0003;
static const int IMAGE_REL_M32R_GPREL16 = 0x0004;
static const int IMAGE_REL_M32R_PCREL24 = 0x0005;
static const int IMAGE_REL_M32R_PCREL16 = 0x0006;
static const int IMAGE_REL_M32R_PCREL8 = 0x0007;
static const int IMAGE_REL_M32R_REFHALF = 0x0008;
static const int IMAGE_REL_M32R_REFHI = 0x0009;
static const int IMAGE_REL_M32R_REFLO = 0x000A;
static const int IMAGE_REL_M32R_PAIR = 0x000B;
static const int IMAGE_REL_M32R_SECTION = 0x000C;
static const int IMAGE_REL_M32R_SECREL32 = 0x000D;
static const int IMAGE_REL_M32R_TOKEN = 0x000E;
static const int IMAGE_REL_EBC_ABSOLUTE = 0x0000;
static const int IMAGE_REL_EBC_ADDR32NB = 0x0001;
static const int IMAGE_REL_EBC_REL32 = 0x0002;
static const int IMAGE_REL_EBC_SECTION = 0x0003;
static const int IMAGE_REL_EBC_SECREL = 0x0004;
static const int EXT_IMM64(Value,Address,Size,InstPos,ValPos) = Value |= (((ULONGLONG)((*(Address) >> InstPos) & (((ULONGLONG)1 << Size) - 1))) << ValPos);
static const int INS_IMM64(Value,Address,Size,InstPos,ValPos) = *(PDWORD)Address = (*(PDWORD)Address & ~(((1 << Size) - 1) << InstPos)) | ((DWORD)((((ULONGLONG)Value >> ValPos) & (((ULONGLONG)1 << Size) - 1))) << InstPos);
static const int EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;
static const int EMARCH_ENC_I17_IMM7B_SIZE_X = 7;
static const int EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;
static const int EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;
static const int EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;
static const int EMARCH_ENC_I17_IMM9D_SIZE_X = 9;
static const int EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;
static const int EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;
static const int EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;
static const int EMARCH_ENC_I17_IMM5C_SIZE_X = 5;
static const int EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;
static const int EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;
static const int EMARCH_ENC_I17_IC_INST_WORD_X = 3;
static const int EMARCH_ENC_I17_IC_SIZE_X = 1;
static const int EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;
static const int EMARCH_ENC_I17_IC_VAL_POS_X = 21;
static const int EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;
static const int EMARCH_ENC_I17_IMM41a_SIZE_X = 10;
static const int EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;
static const int EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;
static const int EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;
static const int EMARCH_ENC_I17_IMM41b_SIZE_X = 8;
static const int EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;
static const int EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;
static const int EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;
static const int EMARCH_ENC_I17_IMM41c_SIZE_X = 23;
static const int EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;
static const int EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;
static const int EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;
static const int EMARCH_ENC_I17_SIGN_SIZE_X = 1;
static const int EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;
static const int EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;
static const int X3_OPCODE_INST_WORD_X = 3;
static const int X3_OPCODE_SIZE_X = 4;
static const int X3_OPCODE_INST_WORD_POS_X = 28;
static const int X3_OPCODE_SIGN_VAL_POS_X = 0;
static const int X3_I_INST_WORD_X = 3;
static const int X3_I_SIZE_X = 1;
static const int X3_I_INST_WORD_POS_X = 27;
static const int X3_I_SIGN_VAL_POS_X = 59;
static const int X3_D_WH_INST_WORD_X = 3;
static const int X3_D_WH_SIZE_X = 3;
static const int X3_D_WH_INST_WORD_POS_X = 24;
static const int X3_D_WH_SIGN_VAL_POS_X = 0;
static const int X3_IMM20_INST_WORD_X = 3;
static const int X3_IMM20_SIZE_X = 20;
static const int X3_IMM20_INST_WORD_POS_X = 4;
static const int X3_IMM20_SIGN_VAL_POS_X = 0;
static const int X3_IMM39_1_INST_WORD_X = 2;
static const int X3_IMM39_1_SIZE_X = 23;
static const int X3_IMM39_1_INST_WORD_POS_X = 0;
static const int X3_IMM39_1_SIGN_VAL_POS_X = 36;
static const int X3_IMM39_2_INST_WORD_X = 1;
static const int X3_IMM39_2_SIZE_X = 16;
static const int X3_IMM39_2_INST_WORD_POS_X = 16;
static const int X3_IMM39_2_SIGN_VAL_POS_X = 20;
static const int X3_P_INST_WORD_X = 3;
static const int X3_P_SIZE_X = 4;
static const int X3_P_INST_WORD_POS_X = 0;
static const int X3_P_SIGN_VAL_POS_X = 0;
static const int X3_TMPLT_INST_WORD_X = 0;
static const int X3_TMPLT_SIZE_X = 4;
static const int X3_TMPLT_INST_WORD_POS_X = 0;
static const int X3_TMPLT_SIGN_VAL_POS_X = 0;
static const int X3_BTYPE_QP_INST_WORD_X = 2;
static const int X3_BTYPE_QP_SIZE_X = 9;
static const int X3_BTYPE_QP_INST_WORD_POS_X = 23;
static const int X3_BTYPE_QP_INST_VAL_POS_X = 0;
static const int X3_EMPTY_INST_WORD_X = 1;
static const int X3_EMPTY_SIZE_X = 2;
static const int X3_EMPTY_INST_WORD_POS_X = 14;
static const int X3_EMPTY_INST_VAL_POS_X = 0;
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex; // Symbol table index of function name if Linenumber is 0.
        DWORD VirtualAddress; // Virtual address of line number.
    } Type;
    WORD Linenumber; // Line number.
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;
} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
static const int IMAGE_REL_BASED_ABSOLUTE = 0;
static const int IMAGE_REL_BASED_HIGH = 1;
static const int IMAGE_REL_BASED_LOW = 2;
static const int IMAGE_REL_BASED_HIGHLOW = 3;
static const int IMAGE_REL_BASED_HIGHADJ = 4;
static const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;
static const int IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;
static const int IMAGE_REL_BASED_IA64_IMM64 = 9;
static const int IMAGE_REL_BASED_DIR64 = 10;
static const int IMAGE_ARCHIVE_START_SIZE = 8;
static const char IMAGE_ARCHIVE_START = "!<arch>\n";
static const char IMAGE_ARCHIVE_END = "`\n";
static const char IMAGE_ARCHIVE_PAD = "\n";
static const char IMAGE_ARCHIVE_LINKER_MEMBER = "/               ";
static const int IMAGE_ARCHIVE_LONGNAMES_MEMBER = ";  //              "
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16]; // File member name - `/' terminated.
    BYTE Date[12]; // File member date - decimal.
    BYTE UserID[6]; // File member user id - decimal.
    BYTE GroupID[6]; // File member group id - decimal.
    BYTE Mode[8]; // File member mode - octal.
    BYTE Size[10]; // File member size - decimal.
    BYTE EndHeader[2]; // String to end header.
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
static const int IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions; // RVA from base of image
    DWORD AddressOfNames; // RVA from base of image
    DWORD AddressOfNameOrdinals; // RVA from base of image
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    BYTE Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString; // PBYTE 
        ULONGLONG Function; // PDWORD
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData; // PIMAGE_IMPORT_BY_NAME
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;
typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString; // PBYTE 
        DWORD Function; // PDWORD
        DWORD Ordinal;
        DWORD AddressOfData; // PIMAGE_IMPORT_BY_NAME
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
static const int IMAGE_ORDINAL_FLAG64 = 0x8000000000000000;
static const int IMAGE_ORDINAL_FLAG32 = 0x80000000;
static const int IMAGE_ORDINAL64(Ordinal) = (Ordinal & 0xffff);
static const int IMAGE_ORDINAL32(Ordinal) = (Ordinal & 0xffff);
static const int IMAGE_SNAP_BY_ORDINAL64(Ordinal) = ((Ordinal & IMAGE_ORDINAL_FLAG64) != 0);
static const int IMAGE_SNAP_BY_ORDINAL32(Ordinal) = ((Ordinal & IMAGE_ORDINAL_FLAG32) != 0);
typedef void
( *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );
typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex; // PDWORD
    ULONGLONG AddressOfCallBacks; // PIMAGE_TLS_CALLBACK *;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;
typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex; // PDWORD
    DWORD AddressOfCallBacks; // PIMAGE_TLS_CALLBACK *
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
static const int IMAGE_ORDINAL_FLAG = IMAGE_ORDINAL_FLAG64;
static const int IMAGE_ORDINAL(Ordinal) = IMAGE_ORDINAL64(Ordinal);
typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;
static const int IMAGE_SNAP_BY_ORDINAL(Ordinal) = IMAGE_SNAP_BY_ORDINAL64(Ordinal);
typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics; // 0 for terminating null import descriptor
        DWORD OriginalFirstThunk; // RVA to original unbound IAT (PIMAGE_THUNK_DATA)
    } u;
    DWORD TimeDateStamp; // 0 if not bound,
    DWORD ForwarderChain; // -1 if no forwarders
    DWORD Name;
    DWORD FirstThunk; // RVA to IAT (if bound this IAT has actual addresses)
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
static const int IMAGE_RESOURCE_NAME_IS_STRING = 0x80000000;
static const int IMAGE_RESOURCE_DATA_IS_DIRECTORY = 0x80000000;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } s;
        DWORD Name;
        WORD Id;
    } u;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } s2;
    } u2;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable; // VA
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList; // VA
    DWORD SecurityCookie; // VA
    DWORD SEHandlerTable; // VA
    DWORD SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable; // VA
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList; // VA
    ULONGLONG SecurityCookie; // VA
    ULONGLONG SEHandlerTable; // VA
    ULONGLONG SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
static const int IMAGE_DEBUG_TYPE_UNKNOWN = 0;
static const int IMAGE_DEBUG_TYPE_COFF = 1;
static const int IMAGE_DEBUG_TYPE_CODEVIEW = 2;
static const int IMAGE_DEBUG_TYPE_FPO = 3;
static const int IMAGE_DEBUG_TYPE_MISC = 4;
static const int IMAGE_DEBUG_TYPE_EXCEPTION = 5;
static const int IMAGE_DEBUG_TYPE_FIXUP = 6;
static const int IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;
static const int IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;
static const int IMAGE_DEBUG_TYPE_BORLAND = 9;
static const int IMAGE_DEBUG_TYPE_RESERVED10 = 10;
static const int IMAGE_DEBUG_TYPE_CLSID = 11;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;
static const int FRAME_FPO = 0;
static const int FRAME_TRAP = 1;
static const int FRAME_TSS = 2;
static const int FRAME_NONFPO = 3;
typedef struct _FPO_DATA {
    DWORD ulOffStart; // offset 1st byte of function code
    DWORD cbProcSize; // # bytes in function
    DWORD cdwLocals; // # bytes in locals/4
    WORD cdwParams; // # bytes in params/4
    WORD cbProlog : 8; // # bytes in prolog
    WORD cbRegs : 3; // # regs saved
    WORD fHasSEH : 1; // TRUE if SEH in func
    WORD fUseBP : 1; // TRUE if EBP has been allocated
    WORD reserved : 1; // reserved for future use
    WORD cbFrame : 2; // frame type
} FPO_DATA, *PFPO_DATA;
static const int SIZEOF_RFPO_DATA = 16;
static const int IMAGE_DEBUG_MISC_EXENAME = 1;
typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType; // type of misc data, see defines
    DWORD Length; // total length of record, rounded to four
    BOOLEAN Unicode; // TRUE if data is unicode string
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ]; // Actual data
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } u;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
static const int IMAGE_SEPARATE_DEBUG_SIGNATURE = 0x4944;
static const int NON_PAGED_DEBUG_SIGNATURE = 0x494E;
static const int IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 0x8000;
static const int IMAGE_SEPARATE_DEBUG_MISMATCH = 0x8000;
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1; // 1 -> code section depends on mask bit
    int :7; // MBZ
    unsigned int AmaskShift: 8; // Amask bit in question for this fixup
    int :16; // MBZ
    DWORD FirstEntryRVA; // RVA into .arch section to array of ARCHITECTURE_ENTRY's
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA; // RVA of instruction to fixup
    DWORD NewInst; // fixup instruction (see alphaops.h)
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;
static const int IMPORT_OBJECT_HDR_SIG2 = 0xffff;
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1; // Must be IMAGE_FILE_MACHINE_UNKNOWN
    WORD Sig2; // Must be IMPORT_OBJECT_HDR_SIG2.
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp; // Time/date stamp
    DWORD SizeOfData; // particularly useful for incremental links
    union {
        WORD Ordinal; // if grf & IMPORT_OBJECT_ORDINAL
        WORD Hint;
    } u;
    WORD Type : 2; // IMPORT_TYPE
    WORD NameType : 3; // IMPORT_NAME_TYPE
    WORD Reserved : 11; // Reserved. Must be zero.
} IMPORT_OBJECT_HEADER;
typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_= 2,
} IMPORT_OBJECT_TYPE;
typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0, // Import by ordinal
    IMPORT_OBJECT_NAME = 1, // Import name == public symbol name.
    IMPORT_OBJECT_NAME_NO_PREFIX = 2, // Import name == public symbol name skipping leading ?, @, or optionally _.
    IMPORT_OBJECT_NAME_UNDECORATE = 3, // Import name == public symbol name skipping leading ?, @, or optionally _
} IMPORT_OBJECT_NAME_TYPE;
typedef enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,
    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =0,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,
    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,
    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,
    COR_VTABLE_32BIT =0x01, // V-table slots are 32-bits in size.
    COR_VTABLE_64BIT =0x02, // V-table slots are 64-bits in size.
    COR_VTABLE_FROM_UNMANAGED =0x04, // If set, transition from unmanaged.
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08, // If set, transition from unmanaged with keeping the current appdomain.
    COR_VTABLE_CALL_MOST_DERIVED =0x10, // Call most derived method described by
    IMAGE_COR_EATJ_THUNK_SIZE =32, // Size of a jump thunk reserved range.
    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;
typedef struct IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } u;
    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;
typedef struct _SLIST_ENTRY *PSLIST_ENTRY;
typedef struct _SLIST_ENTRY {
    PSLIST_ENTRY Next;
} SLIST_ENTRY;
typedef struct _SLIST_ENTRY32 {
    DWORD Next;
} SLIST_ENTRY32, *PSLIST_ENTRY32;
typedef union _SLIST_HEADER {
    struct { // original struct
        ULONGLONG Alignment;
        ULONGLONG Region;
    } s;
    struct { // 8-byte header
        ULONGLONG Depth:16;
        ULONGLONG Sequence:9;
        ULONGLONG NextEntry:39;
        ULONGLONG HeaderType:1; // 0: 8-byte; 1: 16-byte
        ULONGLONG Init:1; // 0: uninitialized; 1: initialized
        ULONGLONG Reserved:59;
        ULONGLONG Region:3;
    } Header8;
    struct { // ia64 16-byte header
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG HeaderType:1; // 0: 8-byte; 1: 16-byte
        ULONGLONG Init:1; // 0: uninitialized; 1: initialized
        ULONGLONG Reserved:2;
        ULONGLONG NextEntry:60; // last 4 bits are always 0's
    } Header16;
    struct { // x64 16-byte header
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG HeaderType:1; // 0: 8-byte; 1: 16-byte
        ULONGLONG Reserved:3;
        ULONGLONG NextEntry:60; // last 4 bits are always 0's
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;
typedef union _SLIST_HEADER32{
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY32 Next;
        WORD Depth;
        WORD Sequence;
    } s;
} SLIST_HEADER32, *PSLIST_HEADER32;
void
RtlInitializeSListHead (
    PSLIST_HEADER ListHead
    );
PSLIST_ENTRY
RtlFirstEntrySList (
    const SLIST_HEADER *ListHead
    );
PSLIST_ENTRY
RtlInterlockedPopEntrySList (
    PSLIST_HEADER ListHead
    );
PSLIST_ENTRY
RtlInterlockedPushEntrySList (
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY ListEntry
    );
PSLIST_ENTRY
RtlInterlockedFlushSList (
    PSLIST_HEADER ListHead
    );
WORD
RtlQueryDepthSList (
    PSLIST_HEADER ListHead
    );
static const int RTL_RUN_ONCE_INIT = {0};
static const int RTL_RUN_ONCE_CHECK_ONLY = 0x00000001UL;
static const int RTL_RUN_ONCE_ASYNC = 0x00000002UL;
static const int RTL_RUN_ONCE_INIT_FAILED = 0x00000004UL;
static const int RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef
DWORD /* LOGICAL */
RTL_RUN_ONCE_INIT_FN (
    PRTL_RUN_ONCE RunOnce,
    PVOID Parameter,
    PVOID *Context
    );
typedef RTL_RUN_ONCE_INIT_FN *PRTL_RUN_ONCE_INIT_FN;
void
RtlRunOnceInitialize (
    PRTL_RUN_ONCE RunOnce
    );
DWORD
RtlRunOnceExecuteOnce (
    PRTL_RUN_ONCE RunOnce,
    PRTL_RUN_ONCE_INIT_FN InitFn,
    PVOID Parameter,
    PVOID *Context
    );
DWORD
RtlRunOnceBeginInitialize (
    PRTL_RUN_ONCE RunOnce,
    DWORD Flags,
    PVOID *Context
    );
DWORD
RtlRunOnceComplete (
    PRTL_RUN_ONCE RunOnce,
    DWORD Flags,
    PVOID Context
    );
static const int HEAP_NO_SERIALIZE = 0x00000001;
static const int HEAP_GROWABLE = 0x00000002;
static const int HEAP_GENERATE_EXCEPTIONS = 0x00000004;
static const int HEAP_ZERO_MEMORY = 0x00000008;
static const int HEAP_REALLOC_IN_PLACE_ONLY = 0x00000010;
static const int HEAP_TAIL_CHECKING_ENABLED = 0x00000020;
static const int HEAP_FREE_CHECKING_ENABLED = 0x00000040;
static const int HEAP_DISABLE_COALESCE_ON_FREE = 0x00000080;
static const int HEAP_CREATE_ALIGN_16 = 0x00010000;
static const int HEAP_CREATE_ENABLE_TRACING = 0x00020000;
static const int HEAP_CREATE_ENABLE_EXECUTE = 0x00040000;
static const int HEAP_MAXIMUM_TAG = 0x0FFF;
static const int HEAP_PSEUDO_TAG_FLAG = 0x8000;
static const int HEAP_TAG_SHIFT = 18;
DWORD
HEAP_MAKE_TAG_FLAGS (
    DWORD TagBase,
    DWORD Tag
    )
{;
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
WORD
RtlCaptureStackBackTrace(
    DWORD FramesToSkip,
    DWORD FramesToCapture,
    PVOID *BackTrace,
    PDWORD BackTraceHash
   );
void
RtlCaptureContext (
    PCONTEXT ContextRecord
    );
static const int IS_TEXT_UNICODE_ASCII16 = 0x0001;
static const int IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x0010;
static const int IS_TEXT_UNICODE_STATISTICS = 0x0002;
static const int IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x0020;
static const int IS_TEXT_UNICODE_CONTROLS = 0x0004;
static const int IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x0040;
static const int IS_TEXT_UNICODE_SIGNATURE = 0x0008;
static const int IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x0080;
static const int IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x0100;
static const int IS_TEXT_UNICODE_ODD_LENGTH = 0x0200;
static const int IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x0400;
static const int IS_TEXT_UNICODE_NULL_BYTES = 0x1000;
static const double IS_TEXT_UNICODE_UNICODE_MASK = 0x000F;
static const int IS_TEXT_UNICODE_REVERSE_MASK = 0x00F0;
static const int IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0x0F00;
static const int IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000;
static const int COMPRESSION_FORMAT_NONE = (0x0000);
static const int COMPRESSION_FORMAT_DEFAULT = (0x0001);
static const int COMPRESSION_FORMAT_LZNT1 = (0x0002);
static const int COMPRESSION_ENGINE_STANDARD = (0x0000);
static const int COMPRESSION_ENGINE_MAXIMUM = (0x0100);
static const int COMPRESSION_ENGINE_HIBER = (0x0200);
SIZE_T
RtlCompareMemory (
    const void *Source1,
    const void *Source2,
    SIZE_T Length
    );
static const int RtlEqualMemory(Destination,Source,Length) = (!memcmp((Destination),(Source),(Length)));
static const int RtlMoveMemory(Destination,Source,Length) = memmove((Destination),(Source),(Length));
static const int RtlCopyMemory(Destination,Source,Length) = memcpy((Destination),(Source),(Length));
static const int RtlFillMemory(Destination,Length,Fill) = memset((Destination),(Fill),(Length));
static const int RtlZeroMemory(Destination,Length) = memset((Destination),0,(Length));
PVOID
RtlSecureZeroMemory(
    PVOID ptr,
    SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;
    while (cnt) {
        *vptr = 0;
        vptr++;
        cnt--;
    }
    return ptr;
}
static const int SEF_DACL_AUTO_INHERIT = 0x01;
static const int SEF_SACL_AUTO_INHERIT = 0x02;
static const int SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x04;
static const int SEF_AVOID_PRIVILEGE_CHECK = 0x08;
static const int SEF_AVOID_OWNER_CHECK = 0x10;
static const int SEF_DEFAULT_OWNER_FROM_PARENT = 0x20;
static const int SEF_DEFAULT_GROUP_FROM_PARENT = 0x40;
static const int SEF_MACL_NO_WRITE_UP = 0x100;
static const int SEF_MACL_NO_READ_UP = 0x200;
static const int SEF_MACL_NO_EXECUTE_UP = 0x400;
static const int SEF_AVOID_OWNER_RESTRICTION = 0x1000;
static const int SEF_MACL_VALID_FLAGS = (SEF_MACL_NO_WRITE_UP | SEF_MACL_NO_READ_UP | SEF_MACL_NO_EXECUTE_UP);
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;
static const int MESSAGE_RESOURCE_UNICODE = 0x0001;
typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;
PVOID
RtlPcToFileHeader(
    PVOID PcValue,
    PVOID *BaseOfImage
    );
typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ]; // Maintenance string for PSS usage
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ]; // Maintenance string for PSS usage
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ]; // Maintenance string for PSS usage
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ]; // Maintenance string for PSS usage
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
static const int VER_EQUAL = 1;
static const int VER_GREATER = 2;
static const int VER_GREATER_EQUAL = 3;
static const int VER_LESS = 4;
static const int VER_LESS_EQUAL = 5;
static const int VER_AND = 6;
static const int VER_OR = 7;
static const int VER_CONDITION_MASK = 7;
static const int VER_NUM_BITS_PER_CONDITION_MASK = 3;
static const int VER_MINORVERSION = 0x0000001;
static const int VER_MAJORVERSION = 0x0000002;
static const int VER_BUILDNUMBER = 0x0000004;
static const int VER_PLATFORMID = 0x0000008;
static const int VER_SERVICEPACKMINOR = 0x0000010;
static const int VER_SERVICEPACKMAJOR = 0x0000020;
static const int VER_SUITENAME = 0x0000040;
static const int VER_PRODUCT_TYPE = 0x0000080;
static const int VER_NT_WORKSTATION = 0x0000001;
static const int VER_NT_DOMAIN_CONTROLLER = 0x0000002;
static const int VER_NT_SERVER = 0x0000003;
static const int VER_PLATFORM_WIN32s = 0;
static const int VER_PLATFORM_WIN32_WINDOWS = 1;
static const int VER_PLATFORM_WIN32_NT = 2;
static const int VER_SET_CONDITION(_m_,_t_,_c_) = ((_m_)=VerSetConditionMask((_m_),(_t_),(_c_)));
ULONGLONG
VerSetConditionMask(
    ULONGLONG ConditionMask,
    DWORD TypeMask,
    BYTE Condition
    );
BOOLEAN
RtlGetProductInfo(
    DWORD OSMajorVersion,
    DWORD OSMinorVersion,
    DWORD SpMajorVersion,
    DWORD SpMinorVersion,
    PDWORD ReturnedProductType
    );
static const int RTL_UMS_VERSION = (0x0100);
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;
typedef
void
RTL_UMS_SCHEDULER_ENTRY_POINT(
    RTL_UMS_SCHEDULER_REASON Reason,
    ULONG_PTR ActivationPayload,
    PVOID SchedulerParam
    );
typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
DWORD
RtlCopyExtendedContext (
    PCONTEXT_EX Destination,
    DWORD ContextFlags,
    PCONTEXT_EX Source
    );
DWORD
RtlInitializeExtendedContext (
    PVOID Context,
    DWORD ContextFlags,
    PCONTEXT_EX* ContextEx
    );
DWORD64
RtlGetEnabledExtendedFeatures (
    DWORD64 FeatureMask
    );
DWORD
RtlGetExtendedContextLength (
    DWORD ContextFlags,
    PDWORD ContextLength
    );
DWORD64
RtlGetExtendedFeaturesMask (
    PCONTEXT_EX ContextEx
    );
PVOID
RtlLocateExtendedFeature (
    PCONTEXT_EX ContextEx,
    DWORD FeatureId,
    PDWORD Length
    );
PCONTEXT
RtlLocateLegacyContext (
    PCONTEXT_EX ContextEx,
    PDWORD Length
    );
void
RtlSetExtendedFeaturesMask (
    PCONTEXT_EX ContextEx,
    DWORD64 FeatureMask
    );
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
static const int RTL_CRITSECT_TYPE = 0;
static const int RTL_RESOURCE_TYPE = 1;
static const int RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 0x01000000;
static const int RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 0x02000000;
static const int RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 0x04000000;
static const int RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 0xFF000000;
static const int RTL_CRITICAL_SECTION_FLAG_RESERVED = (RTL_CRITICAL_SECTION_ALL_FLAG_BITS & (~(RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO | RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN | RTL_CRITICAL_SECTION_FLAG_STATIC_INIT)));
static const int RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 0x00000001;
typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread; // from the thread's ClientId->UniqueThread
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount; // force size on 64-bit systems when packed
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;
static const int RTL_SRWLOCK_INIT = {0};
typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;
static const int RTL_CONDITION_VARIABLE_INIT = {0};
static const int RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 0x1;
typedef
void
( *PAPCFUNC)(
    ULONG_PTR Parameter
    );
typedef LONG ( *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef enum _HEAP_INFORMATION_CLASS {
    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption
} HEAP_INFORMATION_CLASS;
static const int WT_EXECUTEDEFAULT = 0x00000000;
static const int WT_EXECUTEINIOTHREAD = 0x00000001;
static const int WT_EXECUTEINUITHREAD = 0x00000002;
static const int WT_EXECUTEINWAITTHREAD = 0x00000004;
static const int WT_EXECUTEONLYONCE = 0x00000008;
static const int WT_EXECUTEINTIMERTHREAD = 0x00000020;
static const int WT_EXECUTELONGFUNCTION = 0x00000010;
static const int WT_EXECUTEINPERSISTENTIOTHREAD = 0x00000040;
static const int WT_EXECUTEINPERSISTENTTHREAD = 0x00000080;
static const int WT_TRANSFER_IMPERSONATION = 0x00000100;
static const int WT_SET_MAX_THREADPOOL_THREADS(Flags,Limit) = ((Flags) |= (Limit)<<16);
typedef void ( * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void ( * WORKERCALLBACKFUNC) (PVOID );
typedef void ( * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef
void
( *PFLS_CALLBACK_FUNCTION) (
    PVOID lpFlsData
    );
typedef
BOOLEAN
( *PSECURE_MEMORY_CACHE_CALLBACK) (
    PVOID Addr,
    SIZE_T Range
    );
static const int WT_EXECUTEINLONGTHREAD = 0x00000010;
static const int WT_EXECUTEDELETEWAIT = 0x00000008;
typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;
static const int ACTIVATIONCONTEXTINFOCLASS = ACTIVATION_CONTEXT_INFO_CLASS;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;
typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;
static const int ACTIVATION_CONTEXT_PATH_TYPE_NONE = (1);
static const int ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = (2);
static const int ACTIVATION_CONTEXT_PATH_TYPE_URL = (3);
static const int ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = (4);
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
static const int _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION;
static const int ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = ASSEMBLY_FILE_DETAILED_INFORMATION;
static const int PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = PASSEMBLY_FILE_DETAILED_INFORMATION;
static const int PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = PCASSEMBLY_FILE_DETAILED_INFORMATION;
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength; // in bytes
    DWORD ulManifestPathType; // ACTIVATION_CONTEXT_PATH_TYPE_*
    DWORD ulManifestPathLength; // in bytes
    LARGE_INTEGER liManifestLastWriteTime; // FILETIME
    DWORD ulPolicyPathType; // ACTIVATION_CONTEXT_PATH_TYPE_*
    DWORD ulPolicyPathLength; // in bytes
    LARGE_INTEGER liPolicyLastWriteTime; // FILETIME
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor; // 1
    DWORD ulManifestVersionMinor; // 0
    DWORD ulPolicyVersionMajor; // 0
    DWORD ulPolicyVersionMinor; // 0
    DWORD ulAssemblyDirectoryNameLength; // in bytes
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;
typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;
typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;
typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;
typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
static const int MAX_SUPPORTED_OS_NUM = (4);
static const int INVALID_OS_COUNT = (0xffff);
typedef struct _SUPPORTED_OS_INFO {
    WORD OsCount;
    WORD MitigationExist;
    WORD OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;
static const int PERFORMANCE_DATA_VERSION = 1;
typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
static const int READ_THREAD_PROFILING_FLAG_DISPATCHING = 0x00000001;
static const int READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 0x00000002;
static const int DLL_PROCESS_ATTACH = 1;
static const int DLL_THREAD_ATTACH = 2;
static const int DLL_THREAD_DETACH = 3;
static const int DLL_PROCESS_DETACH = 0;
static const int EVENTLOG_SEQUENTIAL_READ = 0x0001;
static const int EVENTLOG_SEEK_READ = 0x0002;
static const int EVENTLOG_FORWARDS_READ = 0x0004;
static const int EVENTLOG_BACKWARDS_READ = 0x0008;
static const int EVENTLOG_SUCCESS = 0x0000;
static const int EVENTLOG_ERROR_TYPE = 0x0001;
static const int EVENTLOG_WARNING_TYPE = 0x0002;
static const int EVENTLOG_INFORMATION_TYPE = 0x0004;
static const int EVENTLOG_AUDIT_SUCCESS = 0x0008;
static const int EVENTLOG_AUDIT_FAILURE = 0x0010;
static const int EVENTLOG_START_PAIRED_EVENT = 0x0001;
static const int EVENTLOG_END_PAIRED_EVENT = 0x0002;
static const int EVENTLOG_END_ALL_PAIRED_EVENTS = 0x0004;
static const int EVENTLOG_PAIRED_EVENT_ACTIVE = 0x0008;
static const int EVENTLOG_PAIRED_EVENT_INACTIVE = 0x0010;
typedef struct _EVENTLOGRECORD {
    DWORD Length; // Length of full record
    DWORD Reserved; // Used by the service
    DWORD RecordNumber; // Absolute record number
    DWORD TimeGenerated; // Seconds since 1-1-1970
    DWORD TimeWritten; // Seconds since 1-1-1970
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags; // For use with paired events (auditing)
    DWORD ClosingRecordNumber; // For use with paired events (auditing)
    DWORD StringOffset; // Offset from beginning of record
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset; // Offset from beginning of record
} EVENTLOGRECORD, *PEVENTLOGRECORD;
static const int MAXLOGICALLOGNAMESIZE = 256;
struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;
struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;
static const int KEY_QUERY_VALUE = (0x0001);
static const int KEY_SET_VALUE = (0x0002);
static const int KEY_CREATE_SUB_KEY = (0x0004);
static const int KEY_ENUMERATE_SUB_KEYS = (0x0008);
static const int KEY_NOTIFY = (0x0010);
static const int KEY_CREATE_LINK = (0x0020);
static const int KEY_WOW64_32KEY = (0x0200);
static const int KEY_WOW64_64KEY = (0x0100);
static const int KEY_WOW64_RES = (0x0300);
static const int KEY_READ = ((STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & (~SYNCHRONIZE));
static const int KEY_WRITE = ((STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY) & (~SYNCHRONIZE));
static const int KEY_EXECUTE = ((KEY_READ) & (~SYNCHRONIZE));
static const int KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL | KEY_QUERY_VALUE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY | KEY_CREATE_LINK) & (~SYNCHRONIZE));
static const int REG_OPTION_RESERVED = (0x00000000L);
static const int REG_OPTION_NON_VOLATILE = (0x00000000L);
static const int REG_OPTION_VOLATILE = (0x00000001L);
static const int REG_OPTION_CREATE_LINK = (0x00000002L);
static const int REG_OPTION_BACKUP_RESTORE = (0x00000004L);
static const int REG_OPTION_OPEN_LINK = (0x00000008L);
static const int REG_LEGAL_OPTION = (REG_OPTION_RESERVED | REG_OPTION_NON_VOLATILE | REG_OPTION_VOLATILE | REG_OPTION_CREATE_LINK | REG_OPTION_BACKUP_RESTORE | REG_OPTION_OPEN_LINK);
static const int REG_OPEN_LEGAL_OPTION = (REG_OPTION_RESERVED | REG_OPTION_BACKUP_RESTORE | REG_OPTION_OPEN_LINK);
static const int REG_CREATED_NEW_KEY = (0x00000001L);
static const int REG_OPENED_EXISTING_KEY = (0x00000002L);
static const int REG_STANDARD_FORMAT = 1;
static const int REG_LATEST_FORMAT = 2;
static const int REG_NO_COMPRESSION = 4;
static const int REG_WHOLE_HIVE_VOLATILE = (0x00000001L);
static const int REG_REFRESH_HIVE = (0x00000002L);
static const int REG_NO_LAZY_FLUSH = (0x00000004L);
static const int REG_FORCE_RESTORE = (0x00000008L);
static const int REG_APP_HIVE = (0x00000010L);
static const int REG_PROCESS_PRIVATE = (0x00000020L);
static const int REG_START_JOURNAL = (0x00000040L);
static const int REG_HIVE_EXACT_FILE_GROWTH = (0x00000080L);
static const int REG_HIVE_NO_RM = (0x00000100L);
static const int REG_HIVE_SINGLE_LOG = (0x00000200L);
static const int REG_BOOT_HIVE = (0x00000400L);
static const int REG_FORCE_UNLOAD = 1;
static const int REG_NOTIFY_CHANGE_NAME = (0x00000001L);
static const int REG_NOTIFY_CHANGE_ATTRIBUTES = (0x00000002L);
static const int REG_NOTIFY_CHANGE_LAST_SET = (0x00000004L);
static const int REG_NOTIFY_CHANGE_SECURITY = (0x00000008L);
static const int REG_LEGAL_CHANGE_FILTER = (REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY);
static const int REG_NONE = ( 0 );
static const int REG_SZ = ( 1 );
static const int REG_EXPAND_SZ = ( 2 );
static const int REG_BINARY = ( 3 );
static const int REG_DWORD = ( 4 );
static const int REG_DWORD_LITTLE_ENDIAN = ( 4 );
static const int REG_DWORD_BIG_ENDIAN = ( 5 );
static const int REG_LINK = ( 6 );
static const int REG_MULTI_SZ = ( 7 );
static const int REG_RESOURCE_LIST = ( 8 );
static const int REG_FULL_RESOURCE_DESCRIPTOR = ( 9 );
static const int REG_RESOURCE_REQUIREMENTS_LIST = ( 10 );
static const int REG_QWORD = ( 11 );
static const int REG_QWORD_LITTLE_ENDIAN = ( 11 );
static const int SERVICE_KERNEL_DRIVER = 0x00000001;
static const int SERVICE_FILE_SYSTEM_DRIVER = 0x00000002;
static const int SERVICE_ADAPTER = 0x00000004;
static const int SERVICE_RECOGNIZER_DRIVER = 0x00000008;
static const int SERVICE_DRIVER = (SERVICE_KERNEL_DRIVER | SERVICE_FILE_SYSTEM_DRIVER | SERVICE_RECOGNIZER_DRIVER);
static const int SERVICE_WIN32_OWN_PROCESS = 0x00000010;
static const int SERVICE_WIN32_SHARE_PROCESS = 0x00000020;
static const int SERVICE_WIN32 = (SERVICE_WIN32_OWN_PROCESS | SERVICE_WIN32_SHARE_PROCESS);
static const int SERVICE_INTERACTIVE_PROCESS = 0x00000100;
static const int SERVICE_TYPE_ALL = (SERVICE_WIN32 | SERVICE_ADAPTER | SERVICE_DRIVER | SERVICE_INTERACTIVE_PROCESS);
static const int SERVICE_BOOT_START = 0x00000000;
static const int SERVICE_SYSTEM_START = 0x00000001;
static const int SERVICE_AUTO_START = 0x00000002;
static const int SERVICE_DEMAND_START = 0x00000003;
static const int SERVICE_DISABLED = 0x00000004;
static const int SERVICE_ERROR_IGNORE = 0x00000000;
static const int SERVICE_ERROR_NORMAL = 0x00000001;
static const int SERVICE_ERROR_SEVERE = 0x00000002;
static const int SERVICE_ERROR_CRITICAL = 0x00000003;
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
static const int CM_SERVICE_NETWORK_BOOT_LOAD = 0x00000001;
static const int CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 0x00000002;
static const int CM_SERVICE_USB_DISK_BOOT_LOAD = 0x00000004;
static const int CM_SERVICE_VALID_PROMOTION_MASK = (CM_SERVICE_NETWORK_BOOT_LOAD | CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD | CM_SERVICE_USB_DISK_BOOT_LOAD);
static const long TAPE_ERASE_SHORT = 0L;
static const long TAPE_ERASE_LONG = 1L;
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
static const long TAPE_LOAD = 0L;
static const long TAPE_UNLOAD = 1L;
static const long TAPE_TENSION = 2L;
static const long TAPE_LOCK = 3L;
static const long TAPE_UNLOCK = 4L;
static const long TAPE_FORMAT = 5L;
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
static const long TAPE_SETMARKS = 0L;
static const long TAPE_FILEMARKS = 1L;
static const long TAPE_SHORT_FILEMARKS = 2L;
static const long TAPE_LONG_FILEMARKS = 3L;
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
static const long TAPE_ABSOLUTE_POSITION = 0L;
static const long TAPE_LOGICAL_POSITION = 1L;
static const long TAPE_PSEUDO_LOGICAL_POSITION = 2L;
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
static const long TAPE_REWIND = 0L;
static const long TAPE_ABSOLUTE_BLOCK = 1L;
static const long TAPE_LOGICAL_BLOCK = 2L;
static const long TAPE_PSEUDO_LOGICAL_BLOCK = 3L;
static const long TAPE_SPACE_END_OF_DATA = 4L;
static const long TAPE_SPACE_RELATIVE_BLOCKS = 5L;
static const long TAPE_SPACE_FILEMARKS = 6L;
static const long TAPE_SPACE_SEQUENTIAL_FMKS = 7L;
static const long TAPE_SPACE_SETMARKS = 8L;
static const long TAPE_SPACE_SEQUENTIAL_SMKS = 9L;
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
static const int TAPE_DRIVE_FIXED = 0x00000001;
static const int TAPE_DRIVE_SELECT = 0x00000002;
static const int TAPE_DRIVE_INITIATOR = 0x00000004;
static const int TAPE_DRIVE_ERASE_SHORT = 0x00000010;
static const int TAPE_DRIVE_ERASE_LONG = 0x00000020;
static const int TAPE_DRIVE_ERASE_BOP_ONLY = 0x00000040;
static const int TAPE_DRIVE_ERASE_IMMEDIATE = 0x00000080;
static const int TAPE_DRIVE_TAPE_CAPACITY = 0x00000100;
static const int TAPE_DRIVE_TAPE_REMAINING = 0x00000200;
static const int TAPE_DRIVE_FIXED_BLOCK = 0x00000400;
static const int TAPE_DRIVE_VARIABLE_BLOCK = 0x00000800;
static const int TAPE_DRIVE_WRITE_PROTECT = 0x00001000;
static const int TAPE_DRIVE_EOT_WZ_SIZE = 0x00002000;
static const int TAPE_DRIVE_ECC = 0x00010000;
static const int TAPE_DRIVE_COMPRESSION = 0x00020000;
static const int TAPE_DRIVE_PADDING = 0x00040000;
static const int TAPE_DRIVE_REPORT_SMKS = 0x00080000;
static const int TAPE_DRIVE_GET_ABSOLUTE_BLK = 0x00100000;
static const int TAPE_DRIVE_GET_LOGICAL_BLK = 0x00200000;
static const int TAPE_DRIVE_SET_EOT_WZ_SIZE = 0x00400000;
static const int TAPE_DRIVE_EJECT_MEDIA = 0x01000000;
static const int TAPE_DRIVE_CLEAN_REQUESTS = 0x02000000;
static const int TAPE_DRIVE_SET_CMP_BOP_ONLY = 0x04000000;
static const int TAPE_DRIVE_RESERVED_BIT = 0x80000000;
static const int TAPE_DRIVE_LOAD_UNLOAD = 0x80000001;
static const int TAPE_DRIVE_TENSION = 0x80000002;
static const int TAPE_DRIVE_LOCK_UNLOCK = 0x80000004;
static const int TAPE_DRIVE_REWIND_IMMEDIATE = 0x80000008;
static const int TAPE_DRIVE_SET_BLOCK_SIZE = 0x80000010;
static const int TAPE_DRIVE_LOAD_UNLD_IMMED = 0x80000020;
static const int TAPE_DRIVE_TENSION_IMMED = 0x80000040;
static const int TAPE_DRIVE_LOCK_UNLK_IMMED = 0x80000080;
static const int TAPE_DRIVE_SET_ECC = 0x80000100;
static const int TAPE_DRIVE_SET_COMPRESSION = 0x80000200;
static const int TAPE_DRIVE_SET_PADDING = 0x80000400;
static const int TAPE_DRIVE_SET_REPORT_SMKS = 0x80000800;
static const int TAPE_DRIVE_ABSOLUTE_BLK = 0x80001000;
static const int TAPE_DRIVE_ABS_BLK_IMMED = 0x80002000;
static const int TAPE_DRIVE_LOGICAL_BLK = 0x80004000;
static const int TAPE_DRIVE_LOG_BLK_IMMED = 0x80008000;
static const int TAPE_DRIVE_END_OF_DATA = 0x80010000;
static const int TAPE_DRIVE_RELATIVE_BLKS = 0x80020000;
static const int TAPE_DRIVE_FILEMARKS = 0x80040000;
static const int TAPE_DRIVE_SEQUENTIAL_FMKS = 0x80080000;
static const int TAPE_DRIVE_SETMARKS = 0x80100000;
static const int TAPE_DRIVE_SEQUENTIAL_SMKS = 0x80200000;
static const int TAPE_DRIVE_REVERSE_POSITION = 0x80400000;
static const int TAPE_DRIVE_SPACE_IMMEDIATE = 0x80800000;
static const int TAPE_DRIVE_WRITE_SETMARKS = 0x81000000;
static const int TAPE_DRIVE_WRITE_FILEMARKS = 0x82000000;
static const int TAPE_DRIVE_WRITE_SHORT_FMKS = 0x84000000;
static const int TAPE_DRIVE_WRITE_LONG_FMKS = 0x88000000;
static const int TAPE_DRIVE_WRITE_MARK_IMMED = 0x90000000;
static const int TAPE_DRIVE_FORMAT = 0xA0000000;
static const int TAPE_DRIVE_FORMAT_IMMEDIATE = 0xC0000000;
static const int TAPE_DRIVE_HIGH_FEATURES = 0x80000000;
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
static const long TAPE_FIXED_PARTITIONS = 0L;
static const long TAPE_SELECT_PARTITIONS = 1L;
static const long TAPE_INITIATOR_PARTITIONS = 2L;
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
static const long TAPE_QUERY_DRIVE_PARAMETERS = 0L;
static const long TAPE_QUERY_MEDIA_CAPACITY = 1L;
static const long TAPE_CHECK_FOR_DRIVE_PROBLEM = 2L;
static const long TAPE_QUERY_IO_ERROR_DATA = 3L;
static const long TAPE_QUERY_DEVICE_ERROR_DATA = 4L;
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;
typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;
typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
static const int TRANSACTION_MANAGER_VOLATILE = 0x00000001;
static const int TRANSACTION_MANAGER_COMMIT_DEFAULT = 0x00000000;
static const int TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 0x00000002;
static const int TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 0x00000004;
static const int TRANSACTION_MANAGER_COMMIT_LOWEST = 0x00000008;
static const int TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 0x00000010;
static const int TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 0x00000020;
static const double TRANSACTION_MANAGER_MAXIMUM_OPTION = 0x0000003F;
static const int TRANSACTION_DO_NOT_PROMOTE = 0x00000001;
static const int TRANSACTION_MAXIMUM_OPTION = 0x00000001;
static const int RESOURCE_MANAGER_VOLATILE = 0x00000001;
static const int RESOURCE_MANAGER_COMMUNICATION = 0x00000002;
static const int RESOURCE_MANAGER_MAXIMUM_OPTION = 0x00000003;
static const int CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 0x00000001;
static const int CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 0x00000002;
static const int CRM_PROTOCOL_MAXIMUM_OPTION = 0x00000003;
static const int ENLISTMENT_SUPERIOR = 0x00000001;
static const int ENLISTMENT_MAXIMUM_OPTION = 0x00000001;
typedef ULONG NOTIFICATION_MASK;
static const int TRANSACTION_NOTIFY_MASK = 0x3FFFFFFF;
static const int TRANSACTION_NOTIFY_PREPREPARE = 0x00000001;
static const int TRANSACTION_NOTIFY_PREPARE = 0x00000002;
static const int TRANSACTION_NOTIFY_COMMIT = 0x00000004;
static const int TRANSACTION_NOTIFY_ROLLBACK = 0x00000008;
static const int TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 0x00000010;
static const int TRANSACTION_NOTIFY_PREPARE_COMPLETE = 0x00000020;
static const int TRANSACTION_NOTIFY_COMMIT_COMPLETE = 0x00000040;
static const int TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 0x00000080;
static const int TRANSACTION_NOTIFY_RECOVER = 0x00000100;
static const int TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 0x00000200;
static const int TRANSACTION_NOTIFY_DELEGATE_COMMIT = 0x00000400;
static const int TRANSACTION_NOTIFY_RECOVER_QUERY = 0x00000800;
static const int TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 0x00001000;
static const int TRANSACTION_NOTIFY_LAST_RECOVER = 0x00002000;
static const int TRANSACTION_NOTIFY_INDOUBT = 0x00004000;
static const int TRANSACTION_NOTIFY_PROPAGATE_PULL = 0x00008000;
static const int TRANSACTION_NOTIFY_PROPAGATE_PUSH = 0x00010000;
static const int TRANSACTION_NOTIFY_MARSHAL = 0x00020000;
static const int TRANSACTION_NOTIFY_ENLIST_MASK = 0x00040000;
static const int TRANSACTION_NOTIFY_RM_DISCONNECTED = 0x01000000;
static const int TRANSACTION_NOTIFY_TM_ONLINE = 0x02000000;
static const int TRANSACTION_NOTIFY_COMMIT_REQUEST = 0x04000000;
static const int TRANSACTION_NOTIFY_PROMOTE = 0x08000000;
static const int TRANSACTION_NOTIFY_PROMOTE_NEW = 0x10000000;
static const int TRANSACTION_NOTIFY_REQUEST_OUTCOME = 0x20000000;
static const int TRANSACTION_NOTIFY_COMMIT_FINALIZE = 0x40000000;
static const char TRANSACTIONMANAGER_OBJECT_PATH = L"\\TransactionManager\\";
static const char TRANSACTION_OBJECT_PATH = L"\\Transaction\\";
static const char ENLISTMENT_OBJECT_PATH = L"\\Enlistment\\";
static const char RESOURCE_MANAGER_OBJECT_PATH = L"\\ResourceManager\\";
static const int TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES = (sizeof(TRANSACTIONMANAGER_OBJECT_PATH)+(38*sizeof(WCHAR)));
static const int TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES = (sizeof(TRANSACTION_OBJECT_PATH)+(38*sizeof(WCHAR)));
static const int ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES = (sizeof(ENLISTMENT_OBJECT_PATH)+(38*sizeof(WCHAR)));
static const int RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES = (sizeof(RESOURCE_MANAGER_OBJECT_PATH)+(38*sizeof(WCHAR)));
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;
typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
static const int TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 0x1;
typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;
typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
static const int KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;
static const int KTM_MARSHAL_BLOB_VERSION_MINOR = 1;
static const int MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;
static const int MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;
typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused; // for alignment purposes
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;
typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;
typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength; //??? ProtocolDynamicInfoLength;
    ULONG Unused1; // for alignment purposes
    ULONG Unused2; // for alignment purposes
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;
static const int TRANSACTIONMANAGER_QUERY_INFORMATION = ( 0x0001 );
static const int TRANSACTIONMANAGER_SET_INFORMATION = ( 0x0002 );
static const int TRANSACTIONMANAGER_RECOVER = ( 0x0004 );
static const int TRANSACTIONMANAGER_RENAME = ( 0x0008 );
static const int TRANSACTIONMANAGER_CREATE_RM = ( 0x0010 );
static const int TRANSACTIONMANAGER_BIND_TRANSACTION = ( 0x0020 );
static const int TRANSACTIONMANAGER_GENERIC_READ = (STANDARD_RIGHTS_READ | TRANSACTIONMANAGER_QUERY_INFORMATION);
static const int TRANSACTIONMANAGER_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | TRANSACTIONMANAGER_SET_INFORMATION | TRANSACTIONMANAGER_RECOVER | TRANSACTIONMANAGER_RENAME | TRANSACTIONMANAGER_CREATE_RM);
static const int TRANSACTIONMANAGER_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE);
static const int TRANSACTIONMANAGER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | TRANSACTIONMANAGER_GENERIC_READ | TRANSACTIONMANAGER_GENERIC_WRITE | TRANSACTIONMANAGER_GENERIC_EXECUTE | TRANSACTIONMANAGER_BIND_TRANSACTION);
static const int TRANSACTION_QUERY_INFORMATION = ( 0x0001 );
static const int TRANSACTION_SET_INFORMATION = ( 0x0002 );
static const int TRANSACTION_ENLIST = ( 0x0004 );
static const int TRANSACTION_COMMIT = ( 0x0008 );
static const int TRANSACTION_ROLLBACK = ( 0x0010 );
static const int TRANSACTION_PROPAGATE = ( 0x0020 );
static const int TRANSACTION_RIGHT_RESERVED1 = ( 0x0040 );
static const int TRANSACTION_GENERIC_READ = (STANDARD_RIGHTS_READ | TRANSACTION_QUERY_INFORMATION | SYNCHRONIZE);
static const int TRANSACTION_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | TRANSACTION_SET_INFORMATION | TRANSACTION_COMMIT | TRANSACTION_ENLIST | TRANSACTION_ROLLBACK | TRANSACTION_PROPAGATE | SYNCHRONIZE);
static const int TRANSACTION_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE | TRANSACTION_COMMIT | TRANSACTION_ROLLBACK | SYNCHRONIZE);
static const int TRANSACTION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | TRANSACTION_GENERIC_READ | TRANSACTION_GENERIC_WRITE | TRANSACTION_GENERIC_EXECUTE);
static const int TRANSACTION_RESOURCE_MANAGER_RIGHTS = (TRANSACTION_GENERIC_READ | STANDARD_RIGHTS_WRITE | TRANSACTION_SET_INFORMATION | TRANSACTION_ENLIST | TRANSACTION_ROLLBACK | TRANSACTION_PROPAGATE | SYNCHRONIZE);
static const int RESOURCEMANAGER_QUERY_INFORMATION = ( 0x0001 );
static const int RESOURCEMANAGER_SET_INFORMATION = ( 0x0002 );
static const int RESOURCEMANAGER_RECOVER = ( 0x0004 );
static const int RESOURCEMANAGER_ENLIST = ( 0x0008 );
static const int RESOURCEMANAGER_GET_NOTIFICATION = ( 0x0010 );
static const int RESOURCEMANAGER_REGISTER_PROTOCOL = ( 0x0020 );
static const int RESOURCEMANAGER_COMPLETE_PROPAGATION = ( 0x0040 );
static const int RESOURCEMANAGER_GENERIC_READ = (STANDARD_RIGHTS_READ | RESOURCEMANAGER_QUERY_INFORMATION | SYNCHRONIZE);
static const int RESOURCEMANAGER_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | RESOURCEMANAGER_SET_INFORMATION | RESOURCEMANAGER_RECOVER | RESOURCEMANAGER_ENLIST | RESOURCEMANAGER_GET_NOTIFICATION | RESOURCEMANAGER_REGISTER_PROTOCOL | RESOURCEMANAGER_COMPLETE_PROPAGATION | SYNCHRONIZE);
static const int RESOURCEMANAGER_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE | RESOURCEMANAGER_RECOVER | RESOURCEMANAGER_ENLIST | RESOURCEMANAGER_GET_NOTIFICATION | RESOURCEMANAGER_COMPLETE_PROPAGATION | SYNCHRONIZE);
static const int RESOURCEMANAGER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | RESOURCEMANAGER_GENERIC_READ | RESOURCEMANAGER_GENERIC_WRITE | RESOURCEMANAGER_GENERIC_EXECUTE);
static const int ENLISTMENT_QUERY_INFORMATION = ( 0x0001 );
static const int ENLISTMENT_SET_INFORMATION = ( 0x0002 );
static const int ENLISTMENT_RECOVER = ( 0x0004 );
static const int ENLISTMENT_SUBORDINATE_RIGHTS = ( 0x0008 );
static const int ENLISTMENT_SUPERIOR_RIGHTS = ( 0x0010 );
static const int ENLISTMENT_GENERIC_READ = (STANDARD_RIGHTS_READ | ENLISTMENT_QUERY_INFORMATION);
static const int ENLISTMENT_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | ENLISTMENT_SET_INFORMATION | ENLISTMENT_RECOVER | ENLISTMENT_SUBORDINATE_RIGHTS | ENLISTMENT_SUPERIOR_RIGHTS);
static const int ENLISTMENT_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE | ENLISTMENT_RECOVER | ENLISTMENT_SUBORDINATE_RIGHTS | ENLISTMENT_SUPERIOR_RIGHTS);
static const int ENLISTMENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | ENLISTMENT_GENERIC_READ | ENLISTMENT_GENERIC_WRITE | ENLISTMENT_GENERIC_EXECUTE);
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;
typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;
typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
    WCHAR LogPath[1]; // Variable size
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;
typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1]; // Variable size
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;
typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;
typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;
typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; // Variable size
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;
typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1]; // Variable size
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;
typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;
typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation
    ,
    TransactionBindInformation, // private and deprecated
    TransactionDTCPrivateInformation // private and deprecated
    ,
} TRANSACTION_INFORMATION_CLASS;
typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4
    ,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5
} TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;
typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;
typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;
typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;
typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;
typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; // Var size
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;
typedef enum _KTMOBJECT_TYPE {
    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
typedef struct _KTMOBJECT_CURSOR {
    GUID LastQuery;
    DWORD ObjectIdCount;
    GUID ObjectIds[1];
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
typedef DWORD TP_VERSION, *PTP_VERSION;
typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;
typedef void ( *PTP_SIMPLE_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context
    );
typedef struct _TP_POOL TP_POOL, *PTP_POOL;
typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;
typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;
typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;
typedef void ( *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
    PVOID ObjectContext,
    PVOID CleanupContext
    );
typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;
typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
void
TpInitializeCallbackEnviron(
    PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->Version = 3;
    CallbackEnviron->Pool = ((void *)0);
    CallbackEnviron->CleanupGroup = ((void *)0);
    CallbackEnviron->CleanupGroupCancelCallback = ((void *)0);
    CallbackEnviron->RaceDll = ((void *)0);
    CallbackEnviron->ActivationContext = ((void *)0);
    CallbackEnviron->FinalizationCallback = ((void *)0);
    CallbackEnviron->u.Flags = 0;
    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);
}
void
TpSetCallbackThreadpool(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}
void
TpSetCallbackCleanupGroup(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    PTP_CLEANUP_GROUP CleanupGroup,
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}
void
TpSetCallbackActivationContext(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}
void
TpSetCallbackNoActivationContext(
    PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1; // INVALID_ACTIVATION_CONTEXT
}
void
TpSetCallbackLongFunction(
    PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}
void
TpSetCallbackRaceWithDll(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}
void
TpSetCallbackFinalizationCallback(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}
void
TpSetCallbackPriority(
    PTP_CALLBACK_ENVIRON CallbackEnviron,
    TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}
void
TpSetCallbackPersistent(
    PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}
void
TpDestroyCallbackEnviron(
    PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    (CallbackEnviron);
}
typedef struct _TP_WORK TP_WORK, *PTP_WORK;
typedef void ( *PTP_WORK_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PTP_WORK Work
    );
typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;
typedef void ( *PTP_TIMER_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PTP_TIMER Timer
    );
typedef DWORD TP_WAIT_RESULT;
typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;
typedef void ( *PTP_WAIT_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PTP_WAIT Wait,
    TP_WAIT_RESULT WaitResult
    );
typedef struct _TP_IO TP_IO, *PTP_IO;
static const int ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = (1);
static const int ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = (2);
static const int ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = (3);
static const int ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = (4);
static const int ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = (5);
static const int ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = (6);
static const int ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = (7);
static const int ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = (8);
static const int ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = (9);
static const int ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = (10);
static const int ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = (11);
typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
static const int max(a,b) = (((a) > (b)) ? (a) : (b));
static const int min(a,b) = (((a) < (b)) ? (a) : (b));
static const int MAKEWORD(a,b) = ((WORD)(((BYTE)(((DWORD_PTR)(a)) & 0xff)) | ((WORD)((BYTE)(((DWORD_PTR)(b)) & 0xff))) << 8));
static const int MAKELONG(a,b) = ((LONG)(((WORD)(((DWORD_PTR)(a)) & 0xffff)) | ((DWORD)((WORD)(((DWORD_PTR)(b)) & 0xffff))) << 16));
static const int LOWORD(l) = ((WORD)(((DWORD_PTR)(l)) & 0xffff));
static const int HIWORD(l) = ((WORD)((((DWORD_PTR)(l)) >> 16) & 0xffff));
static const int LOBYTE(w) = ((BYTE)(((DWORD_PTR)(w)) & 0xff));
static const int HIBYTE(w) = ((BYTE)((((DWORD_PTR)(w)) >> 8) & 0xff));
struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;
typedef WORD ATOM;
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef INT_PTR ( *)();
typedef INT_PTR ( *NEARPROC)();
typedef INT_PTR ( *PROC)();
typedef void * HGDIOBJ;
struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;
struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDC__{int unused;}; typedef struct HDC__ *HDC;
struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC; // OpenGL
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;
struct HICON__{int unused;}; typedef struct HICON__ *HICON;
struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE; /* HMODULEs can be used in place of HINSTANCEs */
struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;
struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;
struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;
typedef int HFILE;
typedef HICON HCURSOR; /* HICONs & HCURSORs are polymorphic */
typedef DWORD COLORREF;
typedef DWORD *LPCOLORREF;
static const int HFILE_ERROR = ((HFILE)-1);
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;
typedef const RECT * LPCRECT;
typedef struct _RECTL /* rcl */
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;
typedef const RECTL * LPCRECTL;
typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;
typedef struct _POINTL /* ptl  */
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;
typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;
typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;
typedef struct tagPOINTS
{
    SHORT x;
    SHORT y;
} POINTS, *PPOINTS, *LPPOINTS;
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;
static const int DM_UPDATE = 1;
static const int DM_COPY = 2;
static const int DM_PROMPT = 4;
static const int DM_MODIFY = 8;
static const int DM_IN_BUFFER = DM_MODIFY;
static const int DM_IN_PROMPT = DM_PROMPT;
static const int DM_OUT_BUFFER = DM_COPY;
static const int DM_OUT_DEFAULT = DM_UPDATE;
static const int DC_FIELDS = 1;
static const int DC_PAPERS = 2;
static const int DC_PAPERSIZE = 3;
static const int DC_MINEXTENT = 4;
static const int DC_MAXEXTENT = 5;
static const int DC_BINS = 6;
static const int DC_DUPLEX = 7;
static const int DC_SIZE = 8;
static const int DC_EXTRA = 9;
static const int DC_VERSION = 10;
static const int DC_DRIVER = 11;
static const int DC_BINNAMES = 12;
static const int DC_ENUMRESOLUTIONS = 13;
static const int DC_FILEDEPENDENCIES = 14;
static const int DC_TRUETYPE = 15;
static const int DC_PAPERNAMES = 16;
static const int DC_ORIENTATION = 17;
static const int DC_COPIES = 18;
static const int WINADVAPI = ;
static const int WINBASEAPI = ;
static const int ZAWPROXYAPI = ;
static const int DefineHandleTable(w) = ((w),TRUE);
static const int SetSwapAreaSize(w) = (w);
static const int LockSegment(w) = GlobalFix((HANDLE)(w));
static const int UnlockSegment(w) = GlobalUnfix((HANDLE)(w));
static const int GetCurrentTime() = GetTickCount();
static const int INVALID_HANDLE_VALUE = ((HANDLE)(LONG_PTR)-1);
static const int INVALID_FILE_SIZE = ((DWORD)0xFFFFFFFF);
static const int INVALID_SET_FILE_POINTER = ((DWORD)-1);
static const int INVALID_FILE_ATTRIBUTES = ((DWORD)-1);
static const int FILE_BEGIN = 0;
static const int FILE_CURRENT = 1;
static const int FILE_END = 2;
static const int TIME_ZONE_ID_INVALID = ((DWORD)0xFFFFFFFF);
static const int WAIT_FAILED = ((DWORD)0xFFFFFFFF);
static const int WAIT_OBJECT_0 = ((STATUS_WAIT_0 ) + 0 );
static const int WAIT_ABANDONED = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
static const int WAIT_ABANDONED_0 = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
static const int WAIT_IO_COMPLETION = STATUS_USER_APC;
static const int STILL_ACTIVE = STATUS_PENDING;
static const int EXCEPTION_ACCESS_VIOLATION = STATUS_ACCESS_VIOLATION;
static const int EXCEPTION_DATATYPE_MISALIGNMENT = STATUS_DATATYPE_MISALIGNMENT;
static const int EXCEPTION_BREAKPOINT = STATUS_BREAKPOINT;
static const int EXCEPTION_SINGLE_STEP = STATUS_SINGLE_STEP;
static const int EXCEPTION_ARRAY_BOUNDS_EXCEEDED = STATUS_ARRAY_BOUNDS_EXCEEDED;
static const int EXCEPTION_FLT_DENORMAL_OPERAND = STATUS_FLOAT_DENORMAL_OPERAND;
static const int EXCEPTION_FLT_DIVIDE_BY_ZERO = STATUS_FLOAT_DIVIDE_BY_ZERO;
static const int EXCEPTION_FLT_INEXACT_RESULT = STATUS_FLOAT_INEXACT_RESULT;
static const int EXCEPTION_FLT_INVALID_OPERATION = STATUS_FLOAT_INVALID_OPERATION;
static const int EXCEPTION_FLT_OVERFLOW = STATUS_FLOAT_OVERFLOW;
static const int EXCEPTION_FLT_STACK_CHECK = STATUS_FLOAT_STACK_CHECK;
static const int EXCEPTION_FLT_UNDERFLOW = STATUS_FLOAT_UNDERFLOW;
static const int EXCEPTION_INT_DIVIDE_BY_ZERO = STATUS_INTEGER_DIVIDE_BY_ZERO;
static const int EXCEPTION_INT_OVERFLOW = STATUS_INTEGER_OVERFLOW;
static const int EXCEPTION_PRIV_INSTRUCTION = STATUS_PRIVILEGED_INSTRUCTION;
static const int EXCEPTION_IN_PAGE_ERROR = STATUS_IN_PAGE_ERROR;
static const int EXCEPTION_ILLEGAL_INSTRUCTION = STATUS_ILLEGAL_INSTRUCTION;
static const int EXCEPTION_NONCONTINUABLE_EXCEPTION = STATUS_NONCONTINUABLE_EXCEPTION;
static const int EXCEPTION_STACK_OVERFLOW = STATUS_STACK_OVERFLOW;
static const int EXCEPTION_INVALID_DISPOSITION = STATUS_INVALID_DISPOSITION;
static const int EXCEPTION_GUARD_PAGE = STATUS_GUARD_PAGE_VIOLATION;
static const int EXCEPTION_INVALID_HANDLE = STATUS_INVALID_HANDLE;
static const int EXCEPTION_POSSIBLE_DEADLOCK = STATUS_POSSIBLE_DEADLOCK;
static const int CONTROL_C_EXIT = STATUS_CONTROL_C_EXIT;
static const int MoveMemory = RtlMoveMemory;
static const int CopyMemory = RtlCopyMemory;
static const int FillMemory = RtlFillMemory;
static const int ZeroMemory = RtlZeroMemory;
static const int SecureZeroMemory = RtlSecureZeroMemory;
static const int CaptureStackBackTrace = RtlCaptureStackBackTrace;
static const int FILE_FLAG_WRITE_THROUGH = 0x80000000;
static const int FILE_FLAG_OVERLAPPED = 0x40000000;
static const int FILE_FLAG_NO_BUFFERING = 0x20000000;
static const int FILE_FLAG_RANDOM_ACCESS = 0x10000000;
static const int FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;
static const int FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;
static const int FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
static const int FILE_FLAG_POSIX_SEMANTICS = 0x01000000;
static const int FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
static const int FILE_FLAG_OPEN_NO_RECALL = 0x00100000;
static const int FILE_FLAG_FIRST_PIPE_INSTANCE = 0x00080000;
static const int CREATE_NEW = 1;
static const int CREATE_ALWAYS = 2;
static const int OPEN_EXISTING = 3;
static const int OPEN_ALWAYS = 4;
static const int TRUNCATE_EXISTING = 5;
static const int PROGRESS_CONTINUE = 0;
static const int PROGRESS_CANCEL = 1;
static const int PROGRESS_STOP = 2;
static const int PROGRESS_QUIET = 3;
static const int CALLBACK_CHUNK_FINISHED = 0x00000000;
static const int CALLBACK_STREAM_SWITCH = 0x00000001;
static const int COPY_FILE_FAIL_IF_EXISTS = 0x00000001;
static const int COPY_FILE_RESTARTABLE = 0x00000002;
static const int COPY_FILE_OPEN_SOURCE_FOR_WRITE = 0x00000004;
static const int COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 0x00000008;
static const int COPY_FILE_COPY_SYMLINK = 0x00000800;
static const int COPY_FILE_NO_BUFFERING = 0x00001000;
static const int REPLACEFILE_WRITE_THROUGH = 0x00000001;
static const int REPLACEFILE_IGNORE_MERGE_ERRORS = 0x00000002;
static const int REPLACEFILE_IGNORE_ACL_ERRORS = 0x00000004;
static const int PIPE_ACCESS_INBOUND = 0x00000001;
static const int PIPE_ACCESS_OUTBOUND = 0x00000002;
static const int PIPE_ACCESS_DUPLEX = 0x00000003;
static const int PIPE_CLIENT_END = 0x00000000;
static const int PIPE_SERVER_END = 0x00000001;
static const int PIPE_WAIT = 0x00000000;
static const int PIPE_NOWAIT = 0x00000001;
static const int PIPE_READMODE_BYTE = 0x00000000;
static const int PIPE_READMODE_MESSAGE = 0x00000002;
static const int PIPE_TYPE_BYTE = 0x00000000;
static const int PIPE_TYPE_MESSAGE = 0x00000004;
static const int PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000;
static const int PIPE_REJECT_REMOTE_CLIENTS = 0x00000008;
static const int PIPE_UNLIMITED_INSTANCES = 255;
static const int SECURITY_ANONYMOUS = ( SecurityAnonymous << 16 );
static const int SECURITY_IDENTIFICATION = ( SecurityIdentification << 16 );
static const int SECURITY_IMPERSONATION = ( SecurityImpersonation << 16 );
static const int SECURITY_DELEGATION = ( SecurityDelegation << 16 );
static const int SECURITY_CONTEXT_TRACKING = 0x00040000;
static const int SECURITY_EFFECTIVE_ONLY = 0x00080000;
static const int SECURITY_SQOS_PRESENT = 0x00100000;
static const int SECURITY_VALID_SQOS_FLAGS = 0x001F0000;
typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } s;
        PVOID Pointer;
    } u;
    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;
typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;
typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
typedef DWORD ( *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef void ( *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
static const int INIT_ONCE_STATIC_INIT = RTL_RUN_ONCE_INIT;
static const int INIT_ONCE_CHECK_ONLY = RTL_RUN_ONCE_CHECK_ONLY;
static const int INIT_ONCE_ASYNC = RTL_RUN_ONCE_ASYNC;
static const int INIT_ONCE_INIT_FAILED = RTL_RUN_ONCE_INIT_FAILED;
static const int INIT_ONCE_CTX_RESERVED_BITS = RTL_RUN_ONCE_CTX_RESERVED_BITS;
static const int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 0x1;
static const int FAIL_FAST_NO_HARD_ERROR_DLG = 0x2;
typedef
BOOL
( *PINIT_ONCE_FN) (
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context
    );
void
InitOnceInitialize (
    PINIT_ONCE InitOnce
    );
BOOL
InitOnceExecuteOnce (
    PINIT_ONCE InitOnce,
    PINIT_ONCE_FN InitFn,
    PVOID Parameter,
    LPVOID *Context
    );
BOOL
InitOnceBeginInitialize (
    LPINIT_ONCE lpInitOnce,
    DWORD dwFlags,
    PBOOL fPending,
    LPVOID *lpContext
    );
BOOL
InitOnceComplete (
    LPINIT_ONCE lpInitOnce,
    DWORD dwFlags,
    LPVOID lpContext
    );
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
static const int SRWLOCK_INIT = RTL_SRWLOCK_INIT;
void
InitializeSRWLock (
     PSRWLOCK SRWLock
     );
void
ReleaseSRWLockExclusive (
     PSRWLOCK SRWLock
     );
void
ReleaseSRWLockShared (
     PSRWLOCK SRWLock
     );
void
AcquireSRWLockExclusive (
     PSRWLOCK SRWLock
     );
void
AcquireSRWLockShared (
     PSRWLOCK SRWLock
     );
BOOLEAN
TryAcquireSRWLockExclusive (
    PSRWLOCK SRWLock
    );
BOOLEAN
TryAcquireSRWLockShared (
    PSRWLOCK SRWLock
    );
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
void
InitializeConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
void
WakeConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
void
WakeAllConditionVariable (
    PCONDITION_VARIABLE ConditionVariable
    );
BOOL
SleepConditionVariableCS (
    PCONDITION_VARIABLE ConditionVariable,
    PCRITICAL_SECTION CriticalSection,
    DWORD dwMilliseconds
    );
BOOL
SleepConditionVariableSRW (
    PCONDITION_VARIABLE ConditionVariable,
    PSRWLOCK SRWLock,
    DWORD dwMilliseconds,
    ULONG Flags
    );
static const int CONDITION_VARIABLE_INIT = RTL_CONDITION_VARIABLE_INIT;
static const int CONDITION_VARIABLE_LOCKMODE_SHARED = RTL_CONDITION_VARIABLE_LOCKMODE_SHARED;
PVOID
EncodePointer (
    PVOID Ptr
    );
PVOID
DecodePointer (
    PVOID Ptr
    );
PVOID
EncodeSystemPointer (
    PVOID Ptr
    );
PVOID
DecodeSystemPointer (
    PVOID Ptr
    );
typedef LPVOID LPLDT_ENTRY;
static const int MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE;
static const int MUTEX_ALL_ACCESS = MUTANT_ALL_ACCESS;
static const int SP_SERIALCOMM = ((DWORD)0x00000001);
static const int PST_UNSPECIFIED = ((DWORD)0x00000000);
static const int PST_RS232 = ((DWORD)0x00000001);
static const int PST_PARALLELPORT = ((DWORD)0x00000002);
static const int PST_RS422 = ((DWORD)0x00000003);
static const int PST_RS423 = ((DWORD)0x00000004);
static const int PST_RS449 = ((DWORD)0x00000005);
static const int PST_MODEM = ((DWORD)0x00000006);
static const int PST_FAX = ((DWORD)0x00000021);
static const int PST_SCANNER = ((DWORD)0x00000022);
static const int PST_NETWORK_BRIDGE = ((DWORD)0x00000100);
static const int PST_LAT = ((DWORD)0x00000101);
static const int PST_TCPIP_TELNET = ((DWORD)0x00000102);
static const int PST_X25 = ((DWORD)0x00000103);
static const int PCF_DTRDSR = ((DWORD)0x0001);
static const int PCF_RTSCTS = ((DWORD)0x0002);
static const int PCF_RLSD = ((DWORD)0x0004);
static const int PCF_PARITY_CHECK = ((DWORD)0x0008);
static const int PCF_XONXOFF = ((DWORD)0x0010);
static const int PCF_SETXCHAR = ((DWORD)0x0020);
static const int PCF_TOTALTIMEOUTS = ((DWORD)0x0040);
static const int PCF_INTTIMEOUTS = ((DWORD)0x0080);
static const int PCF_SPECIALCHARS = ((DWORD)0x0100);
static const int PCF_16BITMODE = ((DWORD)0x0200);
static const int SP_PARITY = ((DWORD)0x0001);
static const int SP_BAUD = ((DWORD)0x0002);
static const int SP_DATABITS = ((DWORD)0x0004);
static const int SP_STOPBITS = ((DWORD)0x0008);
static const int SP_HANDSHAKING = ((DWORD)0x0010);
static const int SP_PARITY_CHECK = ((DWORD)0x0020);
static const int SP_RLSD = ((DWORD)0x0040);
static const int BAUD_075 = ((DWORD)0x00000001);
static const int BAUD_110 = ((DWORD)0x00000002);
static const int BAUD_134_5 = ((DWORD)0x00000004);
static const int BAUD_150 = ((DWORD)0x00000008);
static const int BAUD_300 = ((DWORD)0x00000010);
static const int BAUD_600 = ((DWORD)0x00000020);
static const int BAUD_1200 = ((DWORD)0x00000040);
static const int BAUD_1800 = ((DWORD)0x00000080);
static const int BAUD_2400 = ((DWORD)0x00000100);
static const int BAUD_4800 = ((DWORD)0x00000200);
static const int BAUD_7200 = ((DWORD)0x00000400);
static const int BAUD_9600 = ((DWORD)0x00000800);
static const int BAUD_14400 = ((DWORD)0x00001000);
static const int BAUD_19200 = ((DWORD)0x00002000);
static const int BAUD_38400 = ((DWORD)0x00004000);
static const int BAUD_56K = ((DWORD)0x00008000);
static const int BAUD_128K = ((DWORD)0x00010000);
static const int BAUD_115200 = ((DWORD)0x00020000);
static const int BAUD_57600 = ((DWORD)0x00040000);
static const int BAUD_USER = ((DWORD)0x10000000);
static const int DATABITS_5 = ((WORD)0x0001);
static const int DATABITS_6 = ((WORD)0x0002);
static const int DATABITS_7 = ((WORD)0x0004);
static const int DATABITS_8 = ((WORD)0x0008);
static const int DATABITS_16 = ((WORD)0x0010);
static const int DATABITS_16X = ((WORD)0x0020);
static const int STOPBITS_10 = ((WORD)0x0001);
static const int STOPBITS_15 = ((WORD)0x0002);
static const int STOPBITS_20 = ((WORD)0x0004);
static const int PARITY_NONE = ((WORD)0x0100);
static const int PARITY_ODD = ((WORD)0x0200);
static const int PARITY_EVEN = ((WORD)0x0400);
static const int PARITY_MARK = ((WORD)0x0800);
static const int PARITY_SPACE = ((WORD)0x1000);
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;
static const int COMMPROP_INITIALIZED = ((DWORD)0xE73CF52E);
typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
static const int DTR_CONTROL_DISABLE = 0x00;
static const int DTR_CONTROL_ENABLE = 0x01;
static const int DTR_CONTROL_HANDSHAKE = 0x02;
static const int RTS_CONTROL_DISABLE = 0x00;
static const int RTS_CONTROL_ENABLE = 0x01;
static const int RTS_CONTROL_HANDSHAKE = 0x02;
static const int RTS_CONTROL_TOGGLE = 0x03;
typedef struct _DCB {
    DWORD DCBlength; /* sizeof(DCB)                     */
    DWORD BaudRate; /* Baudrate at which running       */
    DWORD fBinary: 1; /* Binary Mode (skip EOF check)    */
    DWORD fParity: 1; /* Enable parity checking          */
    DWORD fOutxCtsFlow:1; /* CTS handshaking on output       */
    DWORD fOutxDsrFlow:1; /* DSR handshaking on output       */
    DWORD fDtrControl:2; /* DTR Flow control                */
    DWORD fDsrSensitivity:1; /* DSR Sensitivity              */
    DWORD fTXContinueOnXoff: 1; /* Continue TX when Xoff sent */
    DWORD fOutX: 1; /* Enable output X-ON/X-OFF        */
    DWORD fInX: 1; /* Enable input X-ON/X-OFF         */
    DWORD fErrorChar: 1; /* Enable Err Replacement          */
    DWORD fNull: 1; /* Enable Null stripping           */
    DWORD fRtsControl:2; /* Rts Flow control                */
    DWORD fAbortOnError:1; /* Abort all reads and writes on Error */
    DWORD fDummy2:17; /* Reserved                        */
    WORD wReserved; /* Not currently used              */
    WORD XonLim; /* Transmit X-ON threshold         */
    WORD XoffLim; /* Transmit X-OFF threshold        */
    BYTE ByteSize; /* Number of bits/byte, 4-8        */
    BYTE Parity; /* 0-4=None,Odd,Even,Mark,Space    */
    BYTE StopBits; /* 0,1,2 = 1, 1.5, 2               */
    char XonChar; /* Tx and Rx X-ON character        */
    char XoffChar; /* Tx and Rx X-OFF character       */
    char ErrorChar; /* Error replacement char          */
    char EofChar; /* End of Input character          */
    char EvtChar; /* Received Event character        */
    WORD wReserved1; /* Fill for now.                   */
} DCB, *LPDCB;
typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout; /* Maximum time between read chars. */
    DWORD ReadTotalTimeoutMultiplier; /* Multiplier of characters.        */
    DWORD ReadTotalTimeoutConstant; /* Constant in milliseconds.        */
    DWORD WriteTotalTimeoutMultiplier; /* Multiplier of characters.        */
    DWORD WriteTotalTimeoutConstant; /* Constant in milliseconds.        */
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
typedef struct _COMMCONFIG {
    DWORD dwSize; /* Size of the entire struct */
    WORD wVersion; /* version of the structure */
    WORD wReserved; /* alignment */
    DCB dcb; /* device control block */
    DWORD dwProviderSubType; /* ordinal value for identifying
                                   provider-defined data structure format*/
    DWORD dwProviderOffset; /* Specifies the offset of provider specific
                                   data field in bytes from the start */
    DWORD dwProviderSize; /* size of the provider-specific data field */
    WCHAR wcProviderData[1]; /* provider-specific data */
} COMMCONFIG,*LPCOMMCONFIG;
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId; // Obsolete field...do not use
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } s;
    } u;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
static const int FreeModule(hLibModule) = FreeLibrary((hLibModule));
static const int MakeProcInstance(lpProc,hInstance) = (lpProc);
static const int FreeProcInstance(lpProc) = (lpProc);
static const int GMEM_FIXED = 0x0000;
static const int GMEM_MOVEABLE = 0x0002;
static const int GMEM_NOCOMPACT = 0x0010;
static const int GMEM_NODISCARD = 0x0020;
static const int GMEM_ZEROINIT = 0x0040;
static const int GMEM_MODIFY = 0x0080;
static const int GMEM_DISCARDABLE = 0x0100;
static const int GMEM_NOT_BANKED = 0x1000;
static const int GMEM_SHARE = 0x2000;
static const int GMEM_DDESHARE = 0x2000;
static const int GMEM_NOTIFY = 0x4000;
static const int GMEM_LOWER = GMEM_NOT_BANKED;
static const int GMEM_VALID_FLAGS = 0x7F72;
static const int GMEM_INVALID_HANDLE = 0x8000;
static const int GHND = (GMEM_MOVEABLE | GMEM_ZEROINIT);
static const int GPTR = (GMEM_FIXED | GMEM_ZEROINIT);
static const int GlobalLRUNewest(h) = ((HANDLE)(h));
static const int GlobalLRUOldest(h) = ((HANDLE)(h));
static const int GlobalDiscard(h) = GlobalReAlloc( (h), 0, GMEM_MOVEABLE );
static const int GMEM_DISCARDED = 0x4000;
static const int GMEM_LOCKCOUNT = 0x00FF;
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
static const int LMEM_FIXED = 0x0000;
static const int LMEM_MOVEABLE = 0x0002;
static const int LMEM_NOCOMPACT = 0x0010;
static const int LMEM_NODISCARD = 0x0020;
static const int LMEM_ZEROINIT = 0x0040;
static const int LMEM_MODIFY = 0x0080;
static const int LMEM_DISCARDABLE = 0x0F00;
static const int LMEM_VALID_FLAGS = 0x0F72;
static const int LMEM_INVALID_HANDLE = 0x8000;
static const int LHND = (LMEM_MOVEABLE | LMEM_ZEROINIT);
static const int LPTR = (LMEM_FIXED | LMEM_ZEROINIT);
static const int NONZEROLHND = (LMEM_MOVEABLE);
static const int NONZEROLPTR = (LMEM_FIXED);
static const int LocalDiscard(h) = LocalReAlloc( (h), 0, LMEM_MOVEABLE );
static const int LMEM_DISCARDED = 0x4000;
static const int LMEM_LOCKCOUNT = 0x00FF;
static const int NUMA_NO_PREFERRED_NODE = ((DWORD) -1);
static const int DEBUG_PROCESS = 0x00000001;
static const int DEBUG_ONLY_THIS_PROCESS = 0x00000002;
static const int CREATE_SUSPENDED = 0x00000004;
static const int DETACHED_PROCESS = 0x00000008;
static const int CREATE_NEW_CONSOLE = 0x00000010;
static const int NORMAL_PRIORITY_CLASS = 0x00000020;
static const int IDLE_PRIORITY_CLASS = 0x00000040;
static const int HIGH_PRIORITY_CLASS = 0x00000080;
static const int REALTIME_PRIORITY_CLASS = 0x00000100;
static const int CREATE_NEW_PROCESS_GROUP = 0x00000200;
static const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;
static const int CREATE_SEPARATE_WOW_VDM = 0x00000800;
static const int CREATE_SHARED_WOW_VDM = 0x00001000;
static const int CREATE_FORCEDOS = 0x00002000;
static const int BELOW_NORMAL_PRIORITY_CLASS = 0x00004000;
static const int ABOVE_NORMAL_PRIORITY_CLASS = 0x00008000;
static const int INHERIT_PARENT_AFFINITY = 0x00010000;
static const int INHERIT_CALLER_PRIORITY = 0x00020000;
static const int CREATE_PROTECTED_PROCESS = 0x00040000;
static const int EXTENDED_STARTUPINFO_PRESENT = 0x00080000;
static const int PROCESS_MODE_BACKGROUND_BEGIN = 0x00100000;
static const int PROCESS_MODE_BACKGROUND_END = 0x00200000;
static const int CREATE_BREAKAWAY_FROM_JOB = 0x01000000;
static const int CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000;
static const int CREATE_DEFAULT_ERROR_MODE = 0x04000000;
static const int CREATE_NO_WINDOW = 0x08000000;
static const int PROFILE_USER = 0x10000000;
static const int PROFILE_KERNEL = 0x20000000;
static const int PROFILE_SERVER = 0x40000000;
static const int CREATE_IGNORE_SYSTEM_DEFAULT = 0x80000000;
static const int STACK_SIZE_PARAM_IS_A_RESERVATION = 0x00010000;
static const int THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN;
static const int THREAD_PRIORITY_BELOW_NORMAL = (THREAD_PRIORITY_LOWEST+1);
static const int THREAD_PRIORITY_NORMAL = 0;
static const int THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX;
static const int THREAD_PRIORITY_ABOVE_NORMAL = (THREAD_PRIORITY_HIGHEST-1);
static const int THREAD_PRIORITY_ERROR_RETURN = (MAXLONG);
static const int THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT;
static const int THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE;
static const int THREAD_MODE_BACKGROUND_BEGIN = 0x00010000;
static const int THREAD_MODE_BACKGROUND_END = 0x00020000;
static const int VOLUME_NAME_DOS = 0x0;
static const int VOLUME_NAME_GUID = 0x1;
static const int VOLUME_NAME_NT = 0x2;
static const int VOLUME_NAME_NONE = 0x4;
static const int FILE_NAME_NORMALIZED = 0x0;
static const int FILE_NAME_OPENED = 0x8;
static const int EXCEPTION_DEBUG_EVENT = 1;
static const int CREATE_THREAD_DEBUG_EVENT = 2;
static const int CREATE_PROCESS_DEBUG_EVENT = 3;
static const int EXIT_THREAD_DEBUG_EVENT = 4;
static const int EXIT_PROCESS_DEBUG_EVENT = 5;
static const int LOAD_DLL_DEBUG_EVENT = 6;
static const int UNLOAD_DLL_DEBUG_EVENT = 7;
static const int OUTPUT_DEBUG_STRING_EVENT = 8;
static const int RIP_EVENT = 9;
typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;
typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;
typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
static const int DRIVE_UNKNOWN = 0;
static const int DRIVE_NO_ROOT_DIR = 1;
static const int DRIVE_REMOVABLE = 2;
static const int DRIVE_FIXED = 3;
static const int DRIVE_REMOTE = 4;
static const int DRIVE_CDROM = 5;
static const int DRIVE_RAMDISK = 6;
static const int GetFreeSpace(w) = (0x100000L);
static const int FILE_TYPE_UNKNOWN = 0x0000;
static const int FILE_TYPE_DISK = 0x0001;
static const int FILE_TYPE_CHAR = 0x0002;
static const int FILE_TYPE_PIPE = 0x0003;
static const int FILE_TYPE_REMOTE = 0x8000;
static const int STD_INPUT_HANDLE = ((DWORD)-10);
static const int STD_OUTPUT_HANDLE = ((DWORD)-11);
static const int STD_ERROR_HANDLE = ((DWORD)-12);
static const int NOPARITY = 0;
static const int ODDPARITY = 1;
static const int EVENPARITY = 2;
static const int MARKPARITY = 3;
static const int SPACEPARITY = 4;
static const int ONESTOPBIT = 0;
static const int ONE5STOPBITS = 1;
static const int TWOSTOPBITS = 2;
static const int IGNORE = 0;
static const int INFINITE = 0xFFFFFFFF;
static const int CBR_110 = 110;
static const int CBR_300 = 300;
static const int CBR_600 = 600;
static const int CBR_1200 = 1200;
static const int CBR_2400 = 2400;
static const int CBR_4800 = 4800;
static const int CBR_9600 = 9600;
static const int CBR_14400 = 14400;
static const int CBR_19200 = 19200;
static const int CBR_38400 = 38400;
static const int CBR_56000 = 56000;
static const int CBR_57600 = 57600;
static const int CBR_115200 = 115200;
static const int CBR_128000 = 128000;
static const int CBR_256000 = 256000;
static const int CE_RXOVER = 0x0001;
static const int CE_OVERRUN = 0x0002;
static const int CE_RXPARITY = 0x0004;
static const int CE_FRAME = 0x0008;
static const int CE_BREAK = 0x0010;
static const int CE_TXFULL = 0x0100;
static const int CE_PTO = 0x0200;
static const int CE_IOE = 0x0400;
static const int CE_DNS = 0x0800;
static const int CE_OOP = 0x1000;
static const int CE_MODE = 0x8000;
static const int IE_BADID = (-1);
static const int IE_OPEN = (-2);
static const int IE_NOPEN = (-3);
static const int IE_MEMORY = (-4);
static const int IE_DEFAULT = (-5);
static const int IE_HARDWARE = (-10);
static const int IE_BYTESIZE = (-11);
static const int IE_BAUDRATE = (-12);
static const int EV_RXCHAR = 0x0001;
static const int EV_RXFLAG = 0x0002;
static const int EV_TXEMPTY = 0x0004;
static const int EV_CTS = 0x0008;
static const int EV_DSR = 0x0010;
static const int EV_RLSD = 0x0020;
static const int EV_BREAK = 0x0040;
static const int EV_ERR = 0x0080;
static const int EV_RING = 0x0100;
static const int EV_PERR = 0x0200;
static const int EV_RX80FULL = 0x0400;
static const int EV_EVENT1 = 0x0800;
static const int EV_EVENT2 = 0x1000;
static const int SETXOFF = 1;
static const int SETXON = 2;
static const int SETRTS = 3;
static const int CLRRTS = 4;
static const int SETDTR = 5;
static const int CLRDTR = 6;
static const int RESETDEV = 7;
static const int SETBREAK = 8;
static const int CLRBREAK = 9;
static const int PURGE_TXABORT = 0x0001;
static const int PURGE_RXABORT = 0x0002;
static const int PURGE_TXCLEAR = 0x0004;
static const int PURGE_RXCLEAR = 0x0008;
static const int LPTx = 0x80;
static const int MS_CTS_ON = ((DWORD)0x0010);
static const int MS_DSR_ON = ((DWORD)0x0020);
static const int MS_RING_ON = ((DWORD)0x0040);
static const int MS_RLSD_ON = ((DWORD)0x0080);
static const int S_QUEUEEMPTY = 0;
static const int S_THRESHOLD = 1;
static const int S_ALLTHRESHOLD = 2;
static const int S_NORMAL = 0;
static const int S_LEGATO = 1;
static const int S_STACCATO = 2;
static const int S_PERIOD512 = 0;
static const int S_PERIOD1024 = 1;
static const int S_PERIOD2048 = 2;
static const int S_PERIODVOICE = 3;
static const int S_WHITE512 = 4;
static const int S_WHITE1024 = 5;
static const int S_WHITE2048 = 6;
static const int S_WHITEVOICE = 7;
static const int S_SERDVNA = (-1);
static const int S_SEROFM = (-2);
static const int S_SERMACT = (-3);
static const int S_SERQFUL = (-4);
static const int S_SERBDNT = (-5);
static const int S_SERDLN = (-6);
static const int S_SERDCC = (-7);
static const int S_SERDTP = (-8);
static const int S_SERDVL = (-9);
static const int S_SERDMD = (-10);
static const int S_SERDSH = (-11);
static const int S_SERDPT = (-12);
static const int S_SERDFQ = (-13);
static const int S_SERDDR = (-14);
static const int S_SERDSR = (-15);
static const int S_SERDST = (-16);
static const int NMPWAIT_WAIT_FOREVER = 0xffffffff;
static const int NMPWAIT_NOWAIT = 0x00000001;
static const int NMPWAIT_USE_DEFAULT_WAIT = 0x00000000;
static const int FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES;
static const int FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH;
static const int FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK;
static const int FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS;
static const int FS_VOL_IS_COMPRESSED = FILE_VOLUME_IS_COMPRESSED;
static const int FS_FILE_COMPRESSION = FILE_FILE_COMPRESSION;
static const int FS_FILE_ENCRYPTION = FILE_SUPPORTS_ENCRYPTION;
static const int FILE_MAP_COPY = SECTION_QUERY;
static const int FILE_MAP_WRITE = SECTION_MAP_WRITE;
static const int FILE_MAP_READ = SECTION_MAP_READ;
static const int FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS;
static const int FILE_MAP_EXECUTE = SECTION_MAP_EXECUTE_EXPLICIT;
static const int OF_READ = 0x00000000;
static const int OF_WRITE = 0x00000001;
static const int OF_READWRITE = 0x00000002;
static const int OF_SHARE_COMPAT = 0x00000000;
static const int OF_SHARE_EXCLUSIVE = 0x00000010;
static const int OF_SHARE_DENY_WRITE = 0x00000020;
static const int OF_SHARE_DENY_READ = 0x00000030;
static const int OF_SHARE_DENY_NONE = 0x00000040;
static const int OF_PARSE = 0x00000100;
static const int OF_DELETE = 0x00000200;
static const int OF_VERIFY = 0x00000400;
static const int OF_CANCEL = 0x00000800;
static const int OF_CREATE = 0x00001000;
static const int OF_PROMPT = 0x00002000;
static const int OF_EXIST = 0x00004000;
static const int OF_REOPEN = 0x00008000;
static const int OFS_MAXPATHNAME = 128;
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
LONG
InterlockedIncrement (
    LONG volatile *lpAddend
    );
LONG
InterlockedDecrement (
    LONG volatile *lpAddend
    );
LONG
InterlockedExchange (
    LONG volatile *Target,
    LONG Value
    );
static const int InterlockedExchangePointer(Target,Value) = (PVOID)InterlockedExchange((PLONG)(Target), (LONG)(Value));
LONG
InterlockedExchangeAdd (
    LONG volatile *Addend,
    LONG Value
    );
LONG
InterlockedCompareExchange (
    LONG volatile *Destination,
    LONG Exchange,
    LONG Comperand
    );
LONGLONG
InterlockedCompareExchange64 (
    LONGLONG volatile *Destination,
    LONGLONG Exchange,
    LONGLONG Comperand
    );
LONGLONG
InterlockedAnd64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);
    return Old;
}
LONGLONG
InterlockedOr64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);
    return Old;
}
LONGLONG
InterlockedXor64 (
    LONGLONG volatile *Destination,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);
    return Old;
}
LONGLONG
InterlockedIncrement64 (
    LONGLONG volatile *Addend
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);
    return Old + 1;
}
LONGLONG
InterlockedDecrement64 (
    LONGLONG volatile *Addend
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);
    return Old - 1;
}
LONGLONG
InterlockedExchange64 (
    LONGLONG volatile *Target,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);
    return Old;
}
LONGLONG
InterlockedExchangeAdd64(
    LONGLONG volatile *Addend,
    LONGLONG Value
    )
{
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);
    return Old;
}
static const int InterlockedCompareExchangePointer(Destination,ExChange,Comperand) = (PVOID)(LONG_PTR)InterlockedCompareExchange((LONG volatile *)(Destination), (LONG)(LONG_PTR)(ExChange), (LONG)(LONG_PTR)(Comperand));
static const int InterlockedIncrementAcquire = InterlockedIncrement;
static const int InterlockedIncrementRelease = InterlockedIncrement;
static const int InterlockedDecrementAcquire = InterlockedDecrement;
static const int InterlockedDecrementRelease = InterlockedDecrement;
static const int InterlockedIncrementAcquire = InterlockedIncrement;
static const int InterlockedIncrementRelease = InterlockedIncrement;
static const int InterlockedCompareExchangeAcquire = InterlockedCompareExchange;
static const int InterlockedCompareExchangeRelease = InterlockedCompareExchange;
static const int InterlockedCompareExchangeAcquire64 = InterlockedCompareExchange64;
static const int InterlockedCompareExchangeRelease64 = InterlockedCompareExchange64;
static const int InterlockedCompareExchangePointerAcquire = InterlockedCompareExchangePointer;
static const int InterlockedCompareExchangePointerRelease = InterlockedCompareExchangePointer;
void
InitializeSListHead (
    PSLIST_HEADER ListHead
    );
PSLIST_ENTRY
InterlockedPopEntrySList (
    PSLIST_HEADER ListHead
    );
PSLIST_ENTRY
InterlockedPushEntrySList (
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY ListEntry
    );
PSLIST_ENTRY
InterlockedFlushSList (
    PSLIST_HEADER ListHead
    );
USHORT
QueryDepthSList (
    PSLIST_HEADER ListHead
    );
BOOL
FreeResource(
    HGLOBAL hResData
    );
LPVOID
LockResource(
    HGLOBAL hResData
    );
static const int UnlockResource(hResData) = ((hResData), 0);
static const int MAXINTATOM = 0xC000;
static const int MAKEINTATOM(i) = (LPTSTR)((ULONG_PTR)((WORD)(i)));
static const int INVALID_ATOM = ((ATOM)0);
int
WinMain (
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd
    );
int
wWinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPWSTR lpCmdLine,
    int nShowCmd
    );
BOOL
FreeLibrary (
    HMODULE hLibModule
    );
void
FreeLibraryAndExitThread (
    HMODULE hLibModule,
    DWORD dwExitCode
    );
BOOL
DisableThreadLibraryCalls (
    HMODULE hLibModule
    );
GetProcAddress (
    HMODULE hModule,
    LPCSTR lpProcName
    );
DWORD
GetVersion (
    void
    );
HGLOBAL
GlobalAlloc (
    UINT uFlags,
    SIZE_T dwBytes
    );
HGLOBAL
GlobalReAlloc (
    HGLOBAL hMem,
    SIZE_T dwBytes,
    UINT uFlags
    );
SIZE_T
GlobalSize (
    HGLOBAL hMem
    );
UINT
GlobalFlags (
    HGLOBAL hMem
    );
LPVOID
GlobalLock (
    HGLOBAL hMem
    );
HGLOBAL
GlobalHandle (
    LPCVOID pMem
    );
BOOL
GlobalUnlock(
    HGLOBAL hMem
    );
HGLOBAL
GlobalFree(
    HGLOBAL hMem
    );
SIZE_T
GlobalCompact(
    DWORD dwMinFree
    );
void
GlobalFix(
    HGLOBAL hMem
    );
void
GlobalUnfix(
    HGLOBAL hMem
    );
LPVOID
GlobalWire(
    HGLOBAL hMem
    );
BOOL
GlobalUnWire(
    HGLOBAL hMem
    );
void
GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );
typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;
BOOL
GlobalMemoryStatusEx(
    LPMEMORYSTATUSEX lpBuffer
    );
HLOCAL
LocalAlloc(
    UINT uFlags,
    SIZE_T uBytes
    );
HLOCAL
LocalReAlloc(
    HLOCAL hMem,
    SIZE_T uBytes,
    UINT uFlags
    );
LPVOID
LocalLock(
    HLOCAL hMem
    );
HLOCAL
LocalHandle(
    LPCVOID pMem
    );
BOOL
LocalUnlock(
    HLOCAL hMem
    );
SIZE_T
LocalSize(
    HLOCAL hMem
    );
UINT
LocalFlags(
    HLOCAL hMem
    );
HLOCAL
LocalFree(
    HLOCAL hMem
    );
SIZE_T
LocalShrink(
    HLOCAL hMem,
    UINT cbNewSize
    );
SIZE_T
LocalCompact(
    UINT uMinFree
    );
BOOL
FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    SIZE_T dwSize
    );
void
FlushProcessWriteBuffers(
    void
    );
BOOL
QueryThreadCycleTime (
    HANDLE ThreadHandle,
    PULONG64 CycleTime
    );
BOOL
QueryProcessCycleTime (
    HANDLE ProcessHandle,
    PULONG64 CycleTime
    );
BOOL
QueryIdleProcessorCycleTime (
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime
    );
BOOL
QueryIdleProcessorCycleTimeEx (
    USHORT Group,
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime
    );
BOOL
QueryUnbiasedInterruptTime (
    PULONGLONG UnbiasedTime
    );
BOOL
GetProcessorSystemCycleTime (
    USHORT Group,
    PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
    PDWORD ReturnedLength
    );
LPVOID
VirtualAlloc(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );
BOOL
VirtualFree(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD dwFreeType
    );
BOOL
VirtualProtect(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );
SIZE_T
VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    SIZE_T dwLength
    );
LPVOID
VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );
LPVOID
VirtualAllocExNuma(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect,
    DWORD nndPreferred
    );
UINT
GetWriteWatch(
    DWORD dwFlags,
    PVOID lpBaseAddress,
    SIZE_T dwRegionSize,
    PVOID *lpAddresses,
    ULONG_PTR *lpdwCount,
    PULONG lpdwGranularity
    );
UINT
ResetWriteWatch(
    LPVOID lpBaseAddress,
    SIZE_T dwRegionSize
    );
SIZE_T
GetLargePageMinimum(
    void
    );
UINT
EnumSystemFirmwareTables(
    DWORD FirmwareTableProviderSignature,
    PVOID pFirmwareTableEnumBuffer,
    DWORD BufferSize
    );
UINT
GetSystemFirmwareTable(
    DWORD FirmwareTableProviderSignature,
    DWORD FirmwareTableID,
    PVOID pFirmwareTableBuffer,
    DWORD BufferSize
    );
BOOL
GetPhysicallyInstalledSystemMemory(
    PULONGLONG TotalMemoryInKilobytes
    );
BOOL
VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD dwFreeType
    );
BOOL
VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );
SIZE_T
VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    SIZE_T dwLength
    );
HANDLE
HeapCreate(
    DWORD flOptions,
    SIZE_T dwInitialSize,
    SIZE_T dwMaximumSize
    );
BOOL
HeapDestroy(
    HANDLE hHeap
    );
LPVOID
HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    SIZE_T dwBytes
    );
LPVOID
HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    SIZE_T dwBytes
    );
BOOL
HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );
SIZE_T
HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );
BOOL
HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );
SIZE_T
HeapCompact(
    HANDLE hHeap,
    DWORD dwFlags
    );
HANDLE
GetProcessHeap( void );
DWORD
GetProcessHeaps(
    DWORD NumberOfHeaps,
    PHANDLE ProcessHeaps
    );
typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } u;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
static const int PROCESS_HEAP_REGION = 0x0001;
static const int PROCESS_HEAP_UNCOMMITTED_RANGE = 0x0002;
static const int PROCESS_HEAP_ENTRY_BUSY = 0x0004;
static const int PROCESS_HEAP_ENTRY_MOVEABLE = 0x0010;
static const int PROCESS_HEAP_ENTRY_DDESHARE = 0x0020;
BOOL
HeapLock(
    HANDLE hHeap
    );
BOOL
HeapUnlock(
    HANDLE hHeap
    );
BOOL
HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry
    );
BOOL
HeapSetInformation (
    HANDLE HeapHandle,
    HEAP_INFORMATION_CLASS HeapInformationClass,
    PVOID HeapInformation,
    SIZE_T HeapInformationLength
    );
BOOL
HeapQueryInformation (
    HANDLE HeapHandle,
    HEAP_INFORMATION_CLASS HeapInformationClass,
    PVOID HeapInformation,
    SIZE_T HeapInformationLength,
    PSIZE_T ReturnLength
    );
static const int SCS_32BIT_BINARY = 0;
static const int SCS_DOS_BINARY = 1;
static const int SCS_WOW_BINARY = 2;
static const int SCS_PIF_BINARY = 3;
static const int SCS_POSIX_BINARY = 4;
static const int SCS_OS216_BINARY = 5;
static const int SCS_64BIT_BINARY = 6;
static const int SCS_THIS_PLATFORM_BINARY = SCS_64BIT_BINARY;
BOOL
GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
BOOL
GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
static const int GetBinaryType = GetBinaryTypeA;
DWORD
GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR lpszShortPath,
    DWORD cchBuffer
    );
DWORD
GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR lpszShortPath,
    DWORD cchBuffer
    );
static const int GetShortPathName = GetShortPathNameA;
DWORD
GetLongPathNameA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    DWORD cchBuffer
    );
DWORD
GetLongPathNameW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    DWORD cchBuffer
    );
static const int GetLongPathName = GetLongPathNameA;
DWORD
GetLongPathNameTransactedA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    DWORD cchBuffer,
    HANDLE hTransaction
    );
DWORD
GetLongPathNameTransactedW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    DWORD cchBuffer,
    HANDLE hTransaction
    );
static const int GetLongPathNameTransacted = GetLongPathNameTransactedA;
BOOL
GetProcessAffinityMask(
    HANDLE hProcess,
    PDWORD_PTR lpProcessAffinityMask,
    PDWORD_PTR lpSystemAffinityMask
    );
BOOL
SetProcessAffinityMask(
    HANDLE hProcess,
    DWORD_PTR dwProcessAffinityMask
    );
BOOL
GetProcessGroupAffinity(
    HANDLE hProcess,
    PUSHORT GroupCount,
    PUSHORT GroupArray
    );
BOOL
GetProcessHandleCount(
    HANDLE hProcess,
    PDWORD pdwHandleCount
    );
BOOL
GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
BOOL
GetProcessIoCounters(
    HANDLE hProcess,
    PIO_COUNTERS lpIoCounters
    );
BOOL
GetProcessWorkingSetSize(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize
    );
BOOL
GetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize,
    PDWORD Flags
    );
BOOL
SetProcessWorkingSetSize(
    HANDLE hProcess,
    SIZE_T dwMinimumWorkingSetSize,
    SIZE_T dwMaximumWorkingSetSize
    );
BOOL
SetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    SIZE_T dwMinimumWorkingSetSize,
    SIZE_T dwMaximumWorkingSetSize,
    DWORD Flags
    );
static const int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 0x00000001UL;
BOOL
SetProcessAffinityUpdateMode(
    HANDLE hProcess,
    DWORD dwFlags
    );
BOOL
QueryProcessAffinityUpdateMode(
    HANDLE hProcess,
    LPDWORD lpdwFlags
    );
HANDLE
OpenProcess(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
    );
HANDLE
GetCurrentProcess(
    void
    );
DWORD
GetCurrentProcessId(
    void
    );
void
ExitProcess(
    UINT uExitCode
    );
BOOL
TerminateProcess(
    HANDLE hProcess,
    UINT uExitCode
    );
BOOL
GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );
void
FatalExit(
    int ExitCode
    );
LPCH
GetEnvironmentStrings(
    void
    );
LPWCH
GetEnvironmentStringsW(
    void
    );
static const int GetEnvironmentStringsA = GetEnvironmentStrings;
BOOL
SetEnvironmentStringsA(
    LPCH NewEnvironment
    );
BOOL
SetEnvironmentStringsW(
    LPWCH NewEnvironment
    );
static const int SetEnvironmentStrings = SetEnvironmentStringsA;
BOOL
FreeEnvironmentStringsA(
    LPCH
    );
BOOL
FreeEnvironmentStringsW(
    LPWCH
    );
static const int FreeEnvironmentStrings = FreeEnvironmentStringsA;
void
RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    const ULONG_PTR *lpArguments
    );
void
RaiseFailFastException(
    PEXCEPTION_RECORD pExceptionRecord,
    PCONTEXT pContextRecord,
    DWORD dwFlags
    );
LONG
UnhandledExceptionFilter(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
LPTOP_LEVEL_EXCEPTION_FILTER
SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );
static const int FIBER_FLAG_FLOAT_SWITCH = 0x1;
LPVOID
CreateFiber(
    SIZE_T dwStackSize,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );
LPVOID
CreateFiberEx(
    SIZE_T dwStackCommitSize,
    SIZE_T dwStackReserveSize,
    DWORD dwFlags,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );
void
DeleteFiber(
    LPVOID lpFiber
    );
LPVOID
ConvertThreadToFiber(
    LPVOID lpParameter
    );
LPVOID
ConvertThreadToFiberEx(
    LPVOID lpParameter,
    DWORD dwFlags
    );
BOOL
ConvertFiberToThread(
    void
    );
BOOL
IsThreadAFiber(
    void
    );
void
SwitchToFiber(
    LPVOID lpFiber
    );
BOOL
SwitchToThread(
    void
    );
static const int UMS_VERSION = RTL_UMS_VERSION;
typedef void *PUMS_CONTEXT;
typedef void *PUMS_COMPLETION_LIST;
typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;
typedef struct _UMS_SCHEDULER_STARTUP_INFO {
    ULONG UmsVersion;
    PUMS_COMPLETION_LIST CompletionList;
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
    PVOID SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;
BOOL
CreateUmsCompletionList(
    PUMS_COMPLETION_LIST* UmsCompletionList
    );
BOOL
DequeueUmsCompletionListItems(
    PUMS_COMPLETION_LIST UmsCompletionList,
    DWORD WaitTimeOut,
    PUMS_CONTEXT* UmsThreadList
    );
BOOL
GetUmsCompletionListEvent(
    PUMS_COMPLETION_LIST UmsCompletionList,
    PHANDLE UmsCompletionEvent
    );
BOOL
ExecuteUmsThread(
    PUMS_CONTEXT UmsThread
    );
BOOL
UmsThreadYield(
    PVOID SchedulerParam
    );
BOOL
DeleteUmsCompletionList(
    PUMS_COMPLETION_LIST UmsCompletionList
    );
PUMS_CONTEXT
GetCurrentUmsThread(
    void
    );
PUMS_CONTEXT
GetNextUmsListItem(
    PUMS_CONTEXT UmsContext
    );
BOOL
QueryUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    ULONG UmsThreadInformationLength,
    PULONG ReturnLength
    );
BOOL
SetUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    ULONG UmsThreadInformationLength
    );
BOOL
DeleteUmsThreadContext(
    PUMS_CONTEXT UmsThread
    );
BOOL
CreateUmsThreadContext(
    PUMS_CONTEXT *lpUmsThread
    );
BOOL
EnterUmsSchedulingMode(
    PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;
HANDLE
CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );
HANDLE
CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );
HANDLE
CreateRemoteThreadEx(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    LPDWORD lpThreadId
    );
HANDLE
GetCurrentThread(
    void
    );
DWORD
GetCurrentThreadId(
    void
    );
BOOL
SetThreadStackGuarantee (
    PULONG StackSizeInBytes
    );
DWORD
GetProcessIdOfThread(
    HANDLE Thread
    );
DWORD
GetThreadId(
    HANDLE Thread
    );
DWORD
GetProcessId(
    HANDLE Process
    );
DWORD
GetCurrentProcessorNumber(
    void
    );
void
GetCurrentProcessorNumberEx(
    PPROCESSOR_NUMBER ProcNumber
    );
BOOL
GetThreadGroupAffinity(
    HANDLE hThread,
    PGROUP_AFFINITY GroupAffinity
    );
DWORD_PTR
SetThreadAffinityMask(
    HANDLE hThread,
    DWORD_PTR dwThreadAffinityMask
    );
BOOL
SetThreadGroupAffinity(
    HANDLE hThread,
    const GROUP_AFFINITY *GroupAffinity,
    PGROUP_AFFINITY PreviousGroupAffinity
    );
BOOL
SetThreadIdealProcessorEx (
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor,
    PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );
BOOL
GetThreadIdealProcessorEx (
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor
    );
DWORD
SetThreadIdealProcessor(
    HANDLE hThread,
    DWORD dwIdealProcessor
    );
static const int PROCESS_DEP_ENABLE = 0x00000001;
static const int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 0x00000002;
BOOL
SetProcessDEPPolicy(
    DWORD dwFlags
    );
BOOL
GetProcessDEPPolicy(
    HANDLE hProcess,
    LPDWORD lpFlags,
    PBOOL lpPermanent
    );
BOOL
SetProcessPriorityBoost(
    HANDLE hProcess,
    BOOL bDisablePriorityBoost
    );
BOOL
GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost
    );
BOOL
RequestWakeupLatency(
    LATENCY_TIME latency
    );
BOOL
IsSystemResumeAutomatic(
    void
    );
HANDLE
OpenThread(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwThreadId
    );
BOOL
SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );
BOOL
SetThreadPriorityBoost(
    HANDLE hThread,
    BOOL bDisablePriorityBoost
    );
BOOL
GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost
    );
int
GetThreadPriority(
    HANDLE hThread
    );
BOOL
GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
BOOL
GetThreadIOPendingFlag(
    HANDLE hThread,
    PBOOL lpIOIsPending
    );
void
ExitThread(
    DWORD dwExitCode
    );
BOOL
TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );
BOOL
GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );
BOOL
GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    LPLDT_ENTRY lpSelectorEntry
    );
EXECUTION_STATE
SetThreadExecutionState(
    EXECUTION_STATE esFlags
    );
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;
        } Detailed;
        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;
HANDLE
PowerCreateRequest (
    PREASON_CONTEXT Context
    );
BOOL
PowerSetRequest (
    HANDLE PowerRequest,
    POWER_REQUEST_TYPE RequestType
    );
BOOL
PowerClearRequest (
    HANDLE PowerRequest,
    POWER_REQUEST_TYPE RequestType
    );
DWORD
GetLastError(
    void
    );
void
SetLastError(
    DWORD dwErrCode
    );
static const int HasOverlappedIoCompleted(lpOverlapped) = (((DWORD)(lpOverlapped)->Internal) != STATUS_PENDING);
BOOL
GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    BOOL bWait
    );
HANDLE
CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    ULONG_PTR CompletionKey,
    DWORD NumberOfConcurrentThreads
    );
BOOL
GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    PULONG_PTR lpCompletionKey,
    LPOVERLAPPED *lpOverlapped,
    DWORD dwMilliseconds
    );
BOOL
GetQueuedCompletionStatusEx(
    HANDLE CompletionPort,
    LPOVERLAPPED_ENTRY lpCompletionPortEntries,
    ULONG ulCount,
    PULONG ulNumEntriesRemoved,
    DWORD dwMilliseconds,
    BOOL fAlertable
    );
BOOL
PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    DWORD dwNumberOfBytesTransferred,
    ULONG_PTR dwCompletionKey,
    LPOVERLAPPED lpOverlapped
    );
static const int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 0x1;
static const int FILE_SKIP_SET_EVENT_ON_HANDLE = 0x2;
BOOL
SetFileCompletionNotificationModes(
    HANDLE FileHandle,
    UCHAR Flags
    );
BOOL
SetFileIoOverlappedRange(
    HANDLE FileHandle,
    PUCHAR OverlappedRangeStart,
    ULONG Length
    );
static const int SEM_FAILCRITICALERRORS = 0x0001;
static const int SEM_NOGPFAULTERRORBOX = 0x0002;
static const int SEM_NOALIGNMENTFAULTEXCEPT = 0x0004;
static const int SEM_NOOPENFILEERRORBOX = 0x8000;
UINT
GetErrorMode(
    void
    );
UINT
SetErrorMode(
    UINT uMode
    );
DWORD
GetThreadErrorMode(
    void
    );
BOOL
SetThreadErrorMode(
    DWORD dwNewMode,
    LPDWORD lpOldMode
    );
BOOL
ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T * lpNumberOfBytesRead
    );
BOOL
WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPCVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T * lpNumberOfBytesWritten
    );
BOOL
GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );
BOOL
SetThreadContext(
    HANDLE hThread,
    const CONTEXT *lpContext
    );
BOOL
Wow64GetThreadContext(
    HANDLE hThread,
    PWOW64_CONTEXT lpContext
    );
BOOL
Wow64GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    PWOW64_LDT_ENTRY lpSelectorEntry
    );
BOOL
Wow64SetThreadContext(
    HANDLE hThread,
    const WOW64_CONTEXT *lpContext
    );
DWORD
SuspendThread(
    HANDLE hThread
    );
DWORD
Wow64SuspendThread(
    HANDLE hThread
    );
DWORD
ResumeThread(
    HANDLE hThread
    );
DWORD
QueueUserAPC(
    PAPCFUNC pfnAPC,
    HANDLE hThread,
    ULONG_PTR dwData
    );
BOOL
IsDebuggerPresent(
    void
    );
BOOL
CheckRemoteDebuggerPresent(
    HANDLE hProcess,
    PBOOL pbDebuggerPresent
    );
void
DebugBreak(
    void
    );
BOOL
WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );
BOOL
ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );
BOOL
DebugActiveProcess(
    DWORD dwProcessId
    );
BOOL
DebugActiveProcessStop(
    DWORD dwProcessId
    );
BOOL
DebugSetProcessKillOnExit(
    BOOL KillOnExit
    );
BOOL
DebugBreakProcess (
    HANDLE Process
    );
void
InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
void
EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
void
LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
static const int CRITICAL_SECTION_NO_DEBUG_INFO = RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO;
BOOL
InitializeCriticalSectionAndSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount
    );
BOOL
InitializeCriticalSectionEx(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount,
    DWORD Flags
    );
DWORD
SetCriticalSectionSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    DWORD dwSpinCount
    );
BOOL
TryEnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
void
DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );
BOOL
SetEvent(
    HANDLE hEvent
    );
BOOL
ResetEvent(
    HANDLE hEvent
    );
BOOL
PulseEvent(
    HANDLE hEvent
    );
BOOL
ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );
BOOL
ReleaseMutex(
    HANDLE hMutex
    );
DWORD
WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );
DWORD
WaitForMultipleObjects(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds
    );
void
Sleep(
    DWORD dwMilliseconds
    );
HGLOBAL
LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );
DWORD
SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );
ATOM
GlobalDeleteAtom(
    ATOM nAtom
    );
BOOL
InitAtomTable(
    DWORD nSize
    );
ATOM
DeleteAtom(
    ATOM nAtom
    );
UINT
SetHandleCount(
    UINT uNumber
    );
DWORD
GetLogicalDrives(
    void
    );
BOOL
LockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh
    );
BOOL
UnlockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh
    );
BOOL
LockFileEx(
    HANDLE hFile,
    DWORD dwFlags,
    DWORD dwReserved,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped
    );
static const int LOCKFILE_FAIL_IMMEDIATELY = 0x00000001;
static const int LOCKFILE_EXCLUSIVE_LOCK = 0x00000002;
BOOL
UnlockFileEx(
    HANDLE hFile,
    DWORD dwReserved,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped
    );
typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;
BOOL
GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );
DWORD
GetFileType(
    HANDLE hFile
    );
DWORD
GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );
BOOL
GetFileSizeEx(
    HANDLE hFile,
    PLARGE_INTEGER lpFileSize
    );
HANDLE
GetStdHandle(
    DWORD nStdHandle
    );
BOOL
SetStdHandle(
    DWORD nStdHandle,
    HANDLE hHandle
    );
BOOL
SetStdHandleEx(
    DWORD nStdHandle,
    HANDLE hHandle,
    PHANDLE phPrevValue
    );
BOOL
WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );
BOOL
ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );
BOOL
FlushFileBuffers(
    HANDLE hFile
    );
BOOL
DeviceIoControl(
    HANDLE hDevice,
    DWORD dwIoControlCode,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped
    );
BOOL
RequestDeviceWakeup(
    HANDLE hDevice
    );
BOOL
CancelDeviceWakeupRequest(
    HANDLE hDevice
    );
BOOL
GetDevicePowerState(
    HANDLE hDevice,
    BOOL *pfOn
    );
BOOL
SetMessageWaitingIndicator(
    HANDLE hMsgIndicator,
    ULONG ulMsgCount
    );
BOOL
SetEndOfFile(
    HANDLE hFile
    );
DWORD
SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );
BOOL
SetFilePointerEx(
    HANDLE hFile,
    LARGE_INTEGER liDistanceToMove,
    PLARGE_INTEGER lpNewFilePointer,
    DWORD dwMoveMethod
    );
BOOL
FindClose(
    HANDLE hFindFile
    );
BOOL
GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime
    );
BOOL
SetFileTime(
    HANDLE hFile,
    const FILETIME *lpCreationTime,
    const FILETIME *lpLastAccessTime,
    const FILETIME *lpLastWriteTime
    );
BOOL
SetFileValidData(
    HANDLE hFile,
    LONGLONG ValidDataLength
    );
BOOL
SetFileShortNameA(
    HANDLE hFile,
    LPCSTR lpShortName
    );
BOOL
SetFileShortNameW(
    HANDLE hFile,
    LPCWSTR lpShortName
    );
static const int SetFileShortName = SetFileShortNameA;
BOOL
CloseHandle(
    HANDLE hObject
    );
BOOL
DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwOptions
    );
BOOL
GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags
    );
BOOL
SetHandleInformation(
    HANDLE hObject,
    DWORD dwMask,
    DWORD dwFlags
    );
static const int HANDLE_FLAG_INHERIT = 0x00000001;
static const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x00000002;
static const int HINSTANCE_ERROR = 32;
DWORD
LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock
    );
UINT
WinExec(
    LPCSTR lpCmdLine,
    UINT uCmdShow
    );
BOOL
ClearCommBreak(
    HANDLE hFile
    );
BOOL
ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );
BOOL
SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );
BOOL
EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );
BOOL
GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
BOOL
GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );
BOOL
GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );
BOOL
GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );
BOOL
GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );
BOOL
GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );
BOOL
SetCommBreak(
    HANDLE hFile
    );
BOOL
SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
BOOL
SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );
BOOL
SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );
BOOL
SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
TransmitCommChar(
    HANDLE hFile,
    char cChar
    );
BOOL
WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );
DWORD
SetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionMethod,
    DWORD dwPartition,
    DWORD dwOffsetLow,
    DWORD dwOffsetHigh,
    BOOL bImmediate
    );
DWORD
GetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh
    );
DWORD
PrepareTape(
    HANDLE hDevice,
    DWORD dwOperation,
    BOOL bImmediate
    );
DWORD
EraseTape(
    HANDLE hDevice,
    DWORD dwEraseType,
    BOOL bImmediate
    );
DWORD
CreateTapePartition(
    HANDLE hDevice,
    DWORD dwPartitionMethod,
    DWORD dwCount,
    DWORD dwSize
    );
DWORD
WriteTapemark(
    HANDLE hDevice,
    DWORD dwTapemarkType,
    DWORD dwTapemarkCount,
    BOOL bImmediate
    );
DWORD
GetTapeStatus(
    HANDLE hDevice
    );
DWORD
GetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation
    );
static const int GET_TAPE_MEDIA_INFORMATION = 0;
static const int GET_TAPE_DRIVE_INFORMATION = 1;
DWORD
SetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPVOID lpTapeInformation
    );
static const int SET_TAPE_MEDIA_INFORMATION = 0;
static const int SET_TAPE_DRIVE_INFORMATION = 1;
BOOL
Beep(
    DWORD dwFreq,
    DWORD dwDuration
    );
int
MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator
    );
void
GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    );
void
GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    );
BOOL
SetSystemTime(
    const SYSTEMTIME *lpSystemTime
    );
void
GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    );
BOOL
SetLocalTime(
    const SYSTEMTIME *lpSystemTime
    );
void
GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );
typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;
DEP_SYSTEM_POLICY_TYPE
GetSystemDEPPolicy(
    void
    );
static const int FILE_CACHE_MAX_HARD_ENABLE = 0x00000001;
static const int FILE_CACHE_MAX_HARD_DISABLE = 0x00000002;
static const int FILE_CACHE_MIN_HARD_ENABLE = 0x00000004;
static const int FILE_CACHE_MIN_HARD_DISABLE = 0x00000008;
BOOL
SetSystemFileCacheSize (
    SIZE_T MinimumFileCacheSize,
    SIZE_T MaximumFileCacheSize,
    DWORD Flags
    );
BOOL
GetSystemFileCacheSize (
    PSIZE_T lpMinimumFileCacheSize,
    PSIZE_T lpMaximumFileCacheSize,
    PDWORD lpFlags
    );
BOOL
GetSystemRegistryQuota(
    PDWORD pdwQuotaAllowed,
    PDWORD pdwQuotaUsed
    );
BOOL
GetSystemTimes(
    LPFILETIME lpIdleTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );
void
GetNativeSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );
BOOL
IsProcessorFeaturePresent(
    DWORD ProcessorFeature
    );
typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;
typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;
BOOL
SystemTimeToTzSpecificLocalTime(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    const SYSTEMTIME *lpUniversalTime,
    LPSYSTEMTIME lpLocalTime
    );
BOOL
TzSpecificLocalTimeToSystemTime(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation,
    const SYSTEMTIME *lpLocalTime,
    LPSYSTEMTIME lpUniversalTime
    );
BOOL
GetTimeZoneInformationForYear(
    USHORT wYear,
    PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
    LPTIME_ZONE_INFORMATION ptzi
    );
DWORD
GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );
BOOL
SetTimeZoneInformation(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );
DWORD
GetDynamicTimeZoneInformation(
    PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );
BOOL
SetDynamicTimeZoneInformation(
    const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );
BOOL
SystemTimeToFileTime(
    const SYSTEMTIME *lpSystemTime,
    LPFILETIME lpFileTime
    );
BOOL
FileTimeToLocalFileTime(
    const FILETIME *lpFileTime,
    LPFILETIME lpLocalFileTime
    );
BOOL
LocalFileTimeToFileTime(
    const FILETIME *lpLocalFileTime,
    LPFILETIME lpFileTime
    );
BOOL
FileTimeToSystemTime(
    const FILETIME *lpFileTime,
    LPSYSTEMTIME lpSystemTime
    );
LONG
CompareFileTime(
    const FILETIME *lpFileTime1,
    const FILETIME *lpFileTime2
    );
BOOL
FileTimeToDosDateTime(
    const FILETIME *lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime
    );
BOOL
DosDateTimeToFileTime(
    WORD wFatDate,
    WORD wFatTime,
    LPFILETIME lpFileTime
    );
DWORD
GetTickCount(
    void
    );
ULONGLONG
GetTickCount64(
    void
    );
BOOL
SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    BOOL bTimeAdjustmentDisabled
    );
BOOL
GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL lpTimeAdjustmentDisabled
    );
DWORD
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
DWORD
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
static const int FormatMessage = FormatMessageA;
static const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100;
static const int FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200;
static const int FORMAT_MESSAGE_FROM_STRING = 0x00000400;
static const int FORMAT_MESSAGE_FROM_HMODULE = 0x00000800;
static const int FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000;
static const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000;
static const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 0x000000FF;
BOOL
CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    DWORD nSize
    );
BOOL
ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped
    );
BOOL
DisconnectNamedPipe(
    HANDLE hNamedPipe
    );
BOOL
SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout
    );
BOOL
GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances
    );
BOOL
PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    DWORD nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage
    );
BOOL
TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped
    );
HANDLE
CreateMailslotA(
    LPCSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
HANDLE
CreateMailslotW(
    LPCWSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateMailslot = CreateMailslotA;
BOOL
GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout
    );
BOOL
SetMailslotInfo(
    HANDLE hMailslot,
    DWORD lReadTimeout
    );
LPVOID
MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap
    );
BOOL
FlushViewOfFile(
    LPCVOID lpBaseAddress,
    SIZE_T dwNumberOfBytesToFlush
    );
BOOL
UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );
BOOL
EncryptFileA(
    LPCSTR lpFileName
    );
BOOL
EncryptFileW(
    LPCWSTR lpFileName
    );
static const int EncryptFile = EncryptFileA;
BOOL
DecryptFileA(
    LPCSTR lpFileName,
    DWORD dwReserved
    );
BOOL
DecryptFileW(
    LPCWSTR lpFileName,
    DWORD dwReserved
    );
static const int DecryptFile = DecryptFileA;
static const int FILE_ENCRYPTABLE = 0;
static const int FILE_IS_ENCRYPTED = 1;
static const int FILE_SYSTEM_ATTR = 2;
static const int FILE_ROOT_DIR = 3;
static const int FILE_SYSTEM_DIR = 4;
static const int FILE_UNKNOWN = 5;
static const int FILE_SYSTEM_NOT_SUPPORT = 6;
static const int FILE_USER_DISALLOWED = 7;
static const int FILE_READ_ONLY = 8;
static const int FILE_DIR_DISALLOWED = 9;
BOOL
FileEncryptionStatusA(
    LPCSTR lpFileName,
    LPDWORD lpStatus
    );
BOOL
FileEncryptionStatusW(
    LPCWSTR lpFileName,
    LPDWORD lpStatus
    );
static const int FileEncryptionStatus = FileEncryptionStatusA;
static const int EFS_USE_RECOVERY_KEYS = (0x1);
typedef
DWORD
( *PFE_EXPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    ULONG ulLength
    );
typedef
DWORD
( *PFE_IMPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    PULONG ulLength
    );
static const int CREATE_FOR_IMPORT = (1);
static const int CREATE_FOR_DIR = (2);
static const int OVERWRITE_HIDDEN = (4);
static const int EFSRPC_SECURE_ONLY = (8);
DWORD
OpenEncryptedFileRawA(
    LPCSTR lpFileName,
    ULONG ulFlags,
    PVOID *pvContext
    );
DWORD
OpenEncryptedFileRawW(
    LPCWSTR lpFileName,
    ULONG ulFlags,
    PVOID *pvContext
    );
static const int OpenEncryptedFileRaw = OpenEncryptedFileRawA;
DWORD
ReadEncryptedFileRaw(
    PFE_EXPORT_FUNC pfExportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext
    );
DWORD
WriteEncryptedFileRaw(
    PFE_IMPORT_FUNC pfImportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext
    );
void
CloseEncryptedFileRaw(
    PVOID pvContext
    );
int
lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
int
lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcmp = lstrcmpA;
int
lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
int
lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcmpi = lstrcmpiA;
LPSTR
lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength
    );
LPWSTR
lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength
    );
static const int lstrcpyn = lstrcpynA;
LPSTR
lstrcpyA(
    LPSTR lpString1, // deprecated: annotation is as good as it gets
    LPCSTR lpString2
    );
LPWSTR
lstrcpyW(
    LPWSTR lpString1, // deprecated: annotation is as good as it gets
    LPCWSTR lpString2
    );
static const int lstrcpy = lstrcpyA;
LPSTR
lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
LPWSTR
lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );
static const int lstrcat = lstrcatA;
int
lstrlenA(
    LPCSTR lpString
    );
int
lstrlenW(
    LPCWSTR lpString
    );
static const int lstrlen = lstrlenA;
HFILE
OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    UINT uStyle
    );
HFILE
_lopen(
    LPCSTR lpPathName,
    int iReadWrite
    );
HFILE
_lcreat(
    LPCSTR lpPathName,
    int iAttribute
    );
UINT
_lread(
    HFILE hFile,
    LPVOID lpBuffer,
    UINT uBytes
    );
UINT
_lwrite(
    HFILE hFile,
    LPCCH lpBuffer,
    UINT uBytes
    );
long
_hread(
    HFILE hFile,
    LPVOID lpBuffer,
    long lBytes
    );
long
_hwrite(
    HFILE hFile,
    LPCCH lpBuffer,
    long lBytes
    );
HFILE
_lclose(
    HFILE hFile
    );
LONG
_llseek(
    HFILE hFile,
    LONG lOffset,
    int iOrigin
    );
BOOL
IsTextUnicode(
    const void* lpv,
    int iSize,
    LPINT lpiResult
    );
static const int FLS_OUT_OF_INDEXES = ((DWORD)0xFFFFFFFF);
DWORD
FlsAlloc(
    PFLS_CALLBACK_FUNCTION lpCallback
    );
PVOID
FlsGetValue(
    DWORD dwFlsIndex
    );
BOOL
FlsSetValue(
    DWORD dwFlsIndex,
    PVOID lpFlsData
    );
BOOL
FlsFree(
    DWORD dwFlsIndex
    );
static const int TLS_OUT_OF_INDEXES = ((DWORD)0xFFFFFFFF);
DWORD
TlsAlloc(
    void
    );
LPVOID
TlsGetValue(
    DWORD dwTlsIndex
    );
BOOL
TlsSetValue(
    DWORD dwTlsIndex,
    LPVOID lpTlsValue
    );
BOOL
TlsFree(
    DWORD dwTlsIndex
    );
typedef
void
( *LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );
DWORD
SleepEx(
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
WaitForSingleObjectEx(
    HANDLE hHandle,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
WaitForMultipleObjectsEx(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
DWORD
SignalObjectAndWait(
    HANDLE hObjectToSignal,
    HANDLE hObjectToWaitOn,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );
BOOL
ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );
BOOL
BackupSeek(
    HANDLE hFile,
    DWORD dwLowBytesToSeek,
    DWORD dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    LPVOID *lpContext
    );
BOOL
BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );
typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
static const int BACKUP_INVALID = 0x00000000;
static const int BACKUP_DATA = 0x00000001;
static const int BACKUP_EA_DATA = 0x00000002;
static const int BACKUP_SECURITY_DATA = 0x00000003;
static const int BACKUP_ALTERNATE_DATA = 0x00000004;
static const int BACKUP_LINK = 0x00000005;
static const int BACKUP_PROPERTY_DATA = 0x00000006;
static const int BACKUP_OBJECT_ID = 0x00000007;
static const int BACKUP_REPARSE_DATA = 0x00000008;
static const int BACKUP_SPARSE_BLOCK = 0x00000009;
static const int BACKUP_TXFS_DATA = 0x0000000a;
static const int STREAM_NORMAL_ATTRIBUTE = 0x00000000;
static const int STREAM_MODIFIED_WHEN_READ = 0x00000001;
static const int STREAM_CONTAINS_SECURITY = 0x00000002;
static const int STREAM_CONTAINS_PROPERTIES = 0x00000004;
static const int STREAM_SPARSE_ATTRIBUTE = 0x00000008;
BOOL
ReadFileScatter(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToRead,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );
BOOL
WriteFileGather(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );
static const int STARTF_USESHOWWINDOW = 0x00000001;
static const int STARTF_USESIZE = 0x00000002;
static const int STARTF_USEPOSITION = 0x00000004;
static const int STARTF_USECOUNTCHARS = 0x00000008;
static const int STARTF_USEFILLATTRIBUTE = 0x00000010;
static const int STARTF_RUNFULLSCREEN = 0x00000020;
static const int STARTF_FORCEONFEEDBACK = 0x00000040;
static const int STARTF_FORCEOFFFEEDBACK = 0x00000080;
static const int STARTF_USESTDHANDLES = 0x00000100;
static const int STARTF_USEHOTKEY = 0x00000200;
static const int STARTF_TITLEISLINKNAME = 0x00000800;
static const int STARTF_TITLEISAPPID = 0x00001000;
static const int STARTF_PREVENTPINNING = 0x00002000;
typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;
typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;
typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
static const int SHUTDOWN_NORETRY = 0x00000001;
typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[ 260 ];
    CHAR cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[ 260 ];
    WCHAR cAlternateFileName[ 14 ];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
HANDLE
CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCSTR lpName
    );
HANDLE
CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCWSTR lpName
    );
static const int CreateMutex = CreateMutexA;
HANDLE
OpenMutexA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenMutexW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenMutex = OpenMutexA;
HANDLE
CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );
HANDLE
CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );
static const int CreateEvent = CreateEventA;
HANDLE
OpenEventA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenEventW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenEvent = OpenEventA;
HANDLE
CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );
HANDLE
CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );
static const int CreateSemaphore = CreateSemaphoreA;
HANDLE
OpenSemaphoreA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenSemaphoreW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenSemaphore = OpenSemaphoreA;
typedef
void
( *PTIMERAPCROUTINE)(
    LPVOID lpArgToCompletionRoutine,
    DWORD dwTimerLowValue,
    DWORD dwTimerHighValue
    );
HANDLE
CreateWaitableTimerA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCSTR lpTimerName
    );
HANDLE
CreateWaitableTimerW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCWSTR lpTimerName
    );
static const int CreateWaitableTimer = CreateWaitableTimerA;
HANDLE
OpenWaitableTimerA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpTimerName
    );
HANDLE
OpenWaitableTimerW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpTimerName
    );
static const int OpenWaitableTimer = OpenWaitableTimerA;
BOOL
SetWaitableTimerEx(
    HANDLE hTimer,
    const LARGE_INTEGER *lpDueTime,
    LONG lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    PREASON_CONTEXT WakeContext,
    ULONG TolerableDelay
    );
BOOL
SetWaitableTimer(
    HANDLE hTimer,
    const LARGE_INTEGER *lpDueTime,
    LONG lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    BOOL fResume
    );
BOOL
CancelWaitableTimer(
    HANDLE hTimer
    );
static const int CREATE_MUTEX_INITIAL_OWNER = 0x00000001;
HANDLE
CreateMutexExA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateMutexExW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateMutexEx = CreateMutexExA;
static const int CREATE_EVENT_MANUAL_RESET = 0x00000001;
static const int CREATE_EVENT_INITIAL_SET = 0x00000002;
HANDLE
CreateEventExA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateEventExW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateEventEx = CreateEventExA;
HANDLE
CreateSemaphoreExA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateSemaphoreExW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateSemaphoreEx = CreateSemaphoreExA;
static const int CREATE_WAITABLE_TIMER_MANUAL_RESET = 0x00000001;
HANDLE
CreateWaitableTimerExA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCSTR lpTimerName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
HANDLE
CreateWaitableTimerExW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCWSTR lpTimerName,
    DWORD dwFlags,
    DWORD dwDesiredAccess
    );
static const int CreateWaitableTimerEx = CreateWaitableTimerExA;
HANDLE
CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );
HANDLE
CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );
static const int CreateFileMapping = CreateFileMappingA;
HANDLE
CreateFileMappingNumaA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName,
    DWORD nndPreferred
    );
HANDLE
CreateFileMappingNumaW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName,
    DWORD nndPreferred
    );
static const int CreateFileMappingNuma = CreateFileMappingNumaA;
HANDLE
OpenFileMappingA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenFileMappingW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenFileMapping = OpenFileMappingA;
DWORD
GetLogicalDriveStringsA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetLogicalDriveStringsW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetLogicalDriveStrings = GetLogicalDriveStringsA;
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;
HANDLE
CreateMemoryResourceNotification(
    MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );
BOOL
QueryMemoryResourceNotification(
    HANDLE ResourceNotificationHandle,
    PBOOL ResourceState
    );
HMODULE
LoadLibraryA(
    LPCSTR lpLibFileName
    );
HMODULE
LoadLibraryW(
    LPCWSTR lpLibFileName
    );
static const int LoadLibrary = LoadLibraryA;
HMODULE
LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
HMODULE
LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
static const int LoadLibraryEx = LoadLibraryExA;
static const int DONT_RESOLVE_DLL_REFERENCES = 0x00000001;
static const int LOAD_LIBRARY_AS_DATAFILE = 0x00000002;
static const int LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008;
static const int LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x00000010;
static const int LOAD_LIBRARY_AS_IMAGE_RESOURCE = 0x00000020;
static const int LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 0x00000040;
static const int LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 0x00000080;
DWORD
GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );
DWORD
GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );
static const int GetModuleFileName = GetModuleFileNameA;
HMODULE
GetModuleHandleA(
    LPCSTR lpModuleName
    );
HMODULE
GetModuleHandleW(
    LPCWSTR lpModuleName
    );
static const int GetModuleHandle = GetModuleHandleA;
static const int GET_MODULE_HANDLE_EX_FLAG_PIN = (0x00000001);
static const int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = (0x00000002);
static const int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = (0x00000004);
typedef
BOOL
(*
PGET_MODULE_HANDLE_EXA)(
    DWORD dwFlags,
    LPCSTR lpModuleName,
    HMODULE* phModule
    );
typedef
BOOL
(*
PGET_MODULE_HANDLE_EXW)(
    DWORD dwFlags,
    LPCWSTR lpModuleName,
    HMODULE* phModule
    );
static const int PGET_MODULE_HANDLE_EX = PGET_MODULE_HANDLE_EXA;
BOOL
GetModuleHandleExA(
    DWORD dwFlags,
    LPCSTR lpModuleName,
    HMODULE* phModule
    );
BOOL
GetModuleHandleExW(
    DWORD dwFlags,
    LPCWSTR lpModuleName,
    HMODULE* phModule
    );
static const int GetModuleHandleEx = GetModuleHandleExA;
BOOL
NeedCurrentDirectoryForExePathA(
    LPCSTR ExeName
    );
BOOL
NeedCurrentDirectoryForExePathW(
    LPCWSTR ExeName
    );
static const int NeedCurrentDirectoryForExePath = NeedCurrentDirectoryForExePathA;
static const int PROCESS_NAME_NATIVE = 0x00000001;
BOOL
QueryFullProcessImageNameA(
    HANDLE hProcess,
    DWORD dwFlags,
    LPSTR lpExeName,
    PDWORD lpdwSize
    );
BOOL
QueryFullProcessImageNameW(
    HANDLE hProcess,
    DWORD dwFlags,
    LPWSTR lpExeName,
    PDWORD lpdwSize
    );
static const int QueryFullProcessImageName = QueryFullProcessImageNameA;
static const int PROC_THREAD_ATTRIBUTE_NUMBER = 0x0000FFFF;
static const int PROC_THREAD_ATTRIBUTE_THREAD = 0x00010000;
static const int PROC_THREAD_ATTRIBUTE_INPUT = 0x00020000;
static const int PROC_THREAD_ATTRIBUTE_ADDITIVE = 0x00040000;
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeExtendedFlags,
    ProcThreadAttributeHandleList,
    ProcThreadAttributeGroupAffinity,
    ProcThreadAttributePreferredNode,
    ProcThreadAttributeIdealProcessor,
    ProcThreadAttributeUmsThread,
    ProcThreadAttributeMitigationPolicy,
    ProcThreadAttributeMax
} PROC_THREAD_ATTRIBUTE_NUM;
static const int ProcThreadAttributeValue(Number,Thread,Input,Additive) = (((Number) & PROC_THREAD_ATTRIBUTE_NUMBER) | ((Thread != FALSE) ? PROC_THREAD_ATTRIBUTE_THREAD : 0) | ((Input != FALSE) ? PROC_THREAD_ATTRIBUTE_INPUT : 0) | ((Additive != FALSE) ? PROC_THREAD_ATTRIBUTE_ADDITIVE : 0));
static const int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = ProcThreadAttributeValue (ProcThreadAttributeParentProcess, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_EXTENDED_FLAGS = ProcThreadAttributeValue (ProcThreadAttributeExtendedFlags, FALSE, TRUE, TRUE);
static const int PROC_THREAD_ATTRIBUTE_HANDLE_LIST = ProcThreadAttributeValue (ProcThreadAttributeHandleList, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY = ProcThreadAttributeValue (ProcThreadAttributeGroupAffinity, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE = ProcThreadAttributeValue (ProcThreadAttributePreferredNode, FALSE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR = ProcThreadAttributeValue (ProcThreadAttributeIdealProcessor, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_UMS_THREAD = ProcThreadAttributeValue (ProcThreadAttributeUmsThread, TRUE, TRUE, FALSE);
static const int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = ProcThreadAttributeValue (ProcThreadAttributeMitigationPolicy, FALSE, TRUE, FALSE);
static const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 0x01;
static const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 0x02;
static const int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 0x04;
BOOL
InitializeProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    DWORD dwAttributeCount,
    DWORD dwFlags,
    PSIZE_T lpSize
    );
void
DeleteProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );
static const int PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 0x00000001;
BOOL
UpdateProcThreadAttribute(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    DWORD dwFlags,
    DWORD_PTR Attribute,
    PVOID lpValue,
    SIZE_T cbSize,
    PVOID lpPreviousValue,
    PSIZE_T lpReturnSize
    );
BOOL
CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
BOOL
CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
static const int CreateProcess = CreateProcessA;
BOOL
SetProcessShutdownParameters(
    DWORD dwLevel,
    DWORD dwFlags
    );
BOOL
GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags
    );
DWORD
GetProcessVersion(
    DWORD ProcessId
    );
void
FatalAppExitA(
    UINT uAction,
    LPCSTR lpMessageText
    );
void
FatalAppExitW(
    UINT uAction,
    LPCWSTR lpMessageText
    );
static const int FatalAppExit = FatalAppExitA;
void
GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo
    );
void
GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo
    );
static const int GetStartupInfo = GetStartupInfoA;
LPSTR
GetCommandLineA(
    void
    );
LPWSTR
GetCommandLineW(
    void
    );
static const int GetCommandLine = GetCommandLineA;
DWORD
GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    DWORD nSize
    );
DWORD
GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    DWORD nSize
    );
static const int GetEnvironmentVariable = GetEnvironmentVariableA;
BOOL
SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue
    );
BOOL
SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue
    );
static const int SetEnvironmentVariable = SetEnvironmentVariableA;
DWORD
ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    DWORD nSize
    );
DWORD
ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    DWORD nSize
    );
static const int ExpandEnvironmentStrings = ExpandEnvironmentStringsA;
DWORD
GetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pBuffer,
    DWORD nSize
    );
DWORD
GetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pBuffer,
    DWORD nSize
    );
static const int GetFirmwareEnvironmentVariable = GetFirmwareEnvironmentVariableA;
BOOL
SetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pValue,
    DWORD nSize
    );
BOOL
SetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pValue,
    DWORD nSize
    );
static const int SetFirmwareEnvironmentVariable = SetFirmwareEnvironmentVariableA;
void
OutputDebugStringA(
    LPCSTR lpOutputString
    );
void
OutputDebugStringW(
    LPCWSTR lpOutputString
    );
static const int OutputDebugString = OutputDebugStringA;
HRSRC
FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );
HRSRC
FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );
static const int FindResource = FindResourceA;
HRSRC
FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD wLanguage
    );
HRSRC
FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD wLanguage
    );
static const int FindResourceEx = FindResourceExA;
typedef BOOL (* ENUMRESTYPEPROCA)( HMODULE hModule, LPSTR lpType,
 LONG_PTR lParam);
typedef BOOL (* ENUMRESTYPEPROCW)( HMODULE hModule, LPWSTR lpType,
 LONG_PTR lParam);
static const int ENUMRESTYPEPROC = ENUMRESTYPEPROCA;
typedef BOOL (* ENUMRESNAMEPROCA)( HMODULE hModule, LPCSTR lpType,
 LPSTR lpName, LONG_PTR lParam);
typedef BOOL (* ENUMRESNAMEPROCW)( HMODULE hModule, LPCWSTR lpType,
 LPWSTR lpName, LONG_PTR lParam);
static const int ENUMRESNAMEPROC = ENUMRESNAMEPROCA;
typedef BOOL (* ENUMRESLANGPROCA)( HMODULE hModule, LPCSTR lpType,
 LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL (* ENUMRESLANGPROCW)( HMODULE hModule, LPCWSTR lpType,
 LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
static const int ENUMRESLANGPROC = ENUMRESLANGPROCA;
BOOL
EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceTypes = EnumResourceTypesA;
BOOL
EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceNames = EnumResourceNamesA;
BOOL
EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    LONG_PTR lParam
    );
BOOL
EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    LONG_PTR lParam
    );
static const int EnumResourceLanguages = EnumResourceLanguagesA;
static const int RESOURCE_ENUM_LN = (0x0001);
static const int RESOURCE_ENUM_MUI = (0x0002);
static const int RESOURCE_ENUM_MUI_SYSTEM = (0x0004);
static const int RESOURCE_ENUM_VALIDATE = (0x0008);
static const int RESOURCE_ENUM_MODULE_EXACT = (0x0010);
BOOL
EnumResourceTypesExA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceTypesExW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceTypesEx = EnumResourceTypesExA;
BOOL
EnumResourceNamesExA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceNamesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceNamesEx = EnumResourceNamesExA;
BOOL
EnumResourceLanguagesExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
BOOL
EnumResourceLanguagesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
static const int EnumResourceLanguagesEx = EnumResourceLanguagesExA;
HANDLE
BeginUpdateResourceA(
    LPCSTR pFileName,
    BOOL bDeleteExistingResources
    );
HANDLE
BeginUpdateResourceW(
    LPCWSTR pFileName,
    BOOL bDeleteExistingResources
    );
static const int BeginUpdateResource = BeginUpdateResourceA;
BOOL
UpdateResourceA(
    HANDLE hUpdate,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD wLanguage,
    LPVOID lpData,
    DWORD cb
    );
BOOL
UpdateResourceW(
    HANDLE hUpdate,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD wLanguage,
    LPVOID lpData,
    DWORD cb
    );
static const int UpdateResource = UpdateResourceA;
BOOL
EndUpdateResourceA(
    HANDLE hUpdate,
    BOOL fDiscard
    );
BOOL
EndUpdateResourceW(
    HANDLE hUpdate,
    BOOL fDiscard
    );
static const int EndUpdateResource = EndUpdateResourceA;
ATOM
GlobalAddAtomA(
    LPCSTR lpString
    );
ATOM
GlobalAddAtomW(
    LPCWSTR lpString
    );
static const int GlobalAddAtom = GlobalAddAtomA;
ATOM
GlobalFindAtomA(
    LPCSTR lpString
    );
ATOM
GlobalFindAtomW(
    LPCWSTR lpString
    );
static const int GlobalFindAtom = GlobalFindAtomA;
UINT
GlobalGetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
UINT
GlobalGetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );
static const int GlobalGetAtomName = GlobalGetAtomNameA;
ATOM
AddAtomA(
    LPCSTR lpString
    );
ATOM
AddAtomW(
    LPCWSTR lpString
    );
static const int AddAtom = AddAtomA;
ATOM
FindAtomA(
    LPCSTR lpString
    );
ATOM
FindAtomW(
    LPCWSTR lpString
    );
static const int FindAtom = FindAtomA;
UINT
GetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
UINT
GetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );
static const int GetAtomName = GetAtomNameA;
UINT
GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault
    );
UINT
GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault
    );
static const int GetProfileInt = GetProfileIntA;
DWORD
GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize
    );
DWORD
GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize
    );
static const int GetProfileString = GetProfileStringA;
BOOL
WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString
    );
BOOL
WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString
    );
static const int WriteProfileString = WriteProfileStringA;
DWORD
GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize
    );
DWORD
GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize
    );
static const int GetProfileSection = GetProfileSectionA;
BOOL
WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString
    );
BOOL
WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString
    );
static const int WriteProfileSection = WriteProfileSectionA;
UINT
GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault,
    LPCSTR lpFileName
    );
UINT
GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileInt = GetPrivateProfileIntA;
DWORD
GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileString = GetPrivateProfileStringA;
BOOL
WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
BOOL
WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );
static const int WritePrivateProfileString = WritePrivateProfileStringA;
DWORD
GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileSection = GetPrivateProfileSectionA;
BOOL
WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
BOOL
WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );
static const int WritePrivateProfileSection = WritePrivateProfileSectionA;
DWORD
GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    DWORD nSize,
    LPCSTR lpFileName
    );
DWORD
GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    DWORD nSize,
    LPCWSTR lpFileName
    );
static const int GetPrivateProfileSectionNames = GetPrivateProfileSectionNamesA;
BOOL
GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCSTR szFile
    );
BOOL
GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCWSTR szFile
    );
static const int GetPrivateProfileStruct = GetPrivateProfileStructA;
BOOL
WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCSTR szFile
    );
BOOL
WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    UINT uSizeStruct,
    LPCWSTR szFile
    );
static const int WritePrivateProfileStruct = WritePrivateProfileStructA;
UINT
GetDriveTypeA(
    LPCSTR lpRootPathName
    );
UINT
GetDriveTypeW(
    LPCWSTR lpRootPathName
    );
static const int GetDriveType = GetDriveTypeA;
UINT
GetSystemDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemDirectory = GetSystemDirectoryA;
DWORD
GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetTempPath = GetTempPathA;
UINT
GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );
UINT
GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );
static const int GetTempFileName = GetTempFileNameA;
UINT
GetWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetWindowsDirectory = GetWindowsDirectoryA;
UINT
GetSystemWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemWindowsDirectory = GetSystemWindowsDirectoryA;
UINT
GetSystemWow64DirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
UINT
GetSystemWow64DirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );
static const int GetSystemWow64Directory = GetSystemWow64DirectoryA;
BOOLEAN
Wow64EnableWow64FsRedirection (
    BOOLEAN Wow64FsEnableRedirection
    );
BOOL
Wow64DisableWow64FsRedirection (
    PVOID *OldValue
    );
BOOL
Wow64RevertWow64FsRedirection (
    PVOID OlValue
    );
typedef UINT (* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = "GetSystemWow64DirectoryA";
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = L"GetSystemWow64DirectoryA";
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = TEXT("GetSystemWow64DirectoryA");
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = "GetSystemWow64DirectoryW";
static const char GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = L"GetSystemWow64DirectoryW";
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = TEXT("GetSystemWow64DirectoryW");
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A;
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W;
static const int GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T;
BOOL
SetCurrentDirectoryA(
    LPCSTR lpPathName
    );
BOOL
SetCurrentDirectoryW(
    LPCWSTR lpPathName
    );
static const int SetCurrentDirectory = SetCurrentDirectoryA;
DWORD
GetCurrentDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetCurrentDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetCurrentDirectory = GetCurrentDirectoryA;
BOOL
SetDllDirectoryA(
    LPCSTR lpPathName
    );
BOOL
SetDllDirectoryW(
    LPCWSTR lpPathName
    );
static const int SetDllDirectory = SetDllDirectoryA;
DWORD
GetDllDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
DWORD
GetDllDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
static const int GetDllDirectory = GetDllDirectoryA;
static const int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 0x1;
static const int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 0x10000;
static const int BASE_SEARCH_PATH_PERMANENT = 0x8000;
static const int BASE_SEARCH_PATH_INVALID_FLAGS = ~0x18001;
BOOL
SetSearchPathMode (
    DWORD Flags
    );
BOOL
GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
BOOL
GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
static const int GetDiskFreeSpace = GetDiskFreeSpaceA;
BOOL
GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
BOOL
GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
static const int GetDiskFreeSpaceEx = GetDiskFreeSpaceExA;
BOOL
CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateDirectory = CreateDirectoryA;
BOOL
CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateDirectoryEx = CreateDirectoryExA;
BOOL
CreateDirectoryTransactedA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
BOOL
CreateDirectoryTransactedW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
static const int CreateDirectoryTransacted = CreateDirectoryTransactedA;
BOOL
RemoveDirectoryA(
    LPCSTR lpPathName
    );
BOOL
RemoveDirectoryW(
    LPCWSTR lpPathName
    );
static const int RemoveDirectory = RemoveDirectoryA;
BOOL
RemoveDirectoryTransactedA(
    LPCSTR lpPathName,
    HANDLE hTransaction
    );
BOOL
RemoveDirectoryTransactedW(
    LPCWSTR lpPathName,
    HANDLE hTransaction
    );
static const int RemoveDirectoryTransacted = RemoveDirectoryTransactedA;
DWORD
GetFullPathNameA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
DWORD
GetFullPathNameW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );
static const int GetFullPathName = GetFullPathNameA;
DWORD
GetFullPathNameTransactedA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart,
    HANDLE hTransaction
    );
DWORD
GetFullPathNameTransactedW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart,
    HANDLE hTransaction
    );
static const int GetFullPathNameTransacted = GetFullPathNameTransactedA;
static const int DDD_RAW_TARGET_PATH = 0x00000001;
static const int DDD_REMOVE_DEFINITION = 0x00000002;
static const int DDD_EXACT_MATCH_ON_REMOVE = 0x00000004;
static const int DDD_NO_BROADCAST_SYSTEM = 0x00000008;
static const int DDD_LUID_BROADCAST_DRIVE = 0x00000010;
BOOL
DefineDosDeviceA(
    DWORD dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath
    );
BOOL
DefineDosDeviceW(
    DWORD dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath
    );
static const int DefineDosDevice = DefineDosDeviceA;
DWORD
QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    DWORD ucchMax
    );
DWORD
QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    DWORD ucchMax
    );
static const int QueryDosDevice = QueryDosDeviceA;
HANDLE
CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
HANDLE
CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
static const int CreateFile = CreateFileA;
HANDLE
CreateFileTransactedA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter
    );
HANDLE
CreateFileTransactedW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter
    );
static const int CreateFileTransacted = CreateFileTransactedA;
HANDLE
ReOpenFile(
    HANDLE hOriginalFile,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    DWORD dwFlagsAndAttributes
    );
BOOL
SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );
BOOL
SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );
static const int SetFileAttributes = SetFileAttributesA;
DWORD
GetFileAttributesA(
    LPCSTR lpFileName
    );
DWORD
GetFileAttributesW(
    LPCWSTR lpFileName
    );
static const int GetFileAttributes = GetFileAttributesA;
BOOL
SetFileAttributesTransactedA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes,
    HANDLE hTransaction
    );
BOOL
SetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes,
    HANDLE hTransaction
    );
static const int SetFileAttributesTransacted = SetFileAttributesTransactedA;
typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;
BOOL
GetFileAttributesTransactedA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction
    );
BOOL
GetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction
    );
static const int GetFileAttributesTransacted = GetFileAttributesTransactedA;
BOOL
GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
BOOL
GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
static const int GetFileAttributesEx = GetFileAttributesExA;
DWORD
GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
DWORD
GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
static const int GetCompressedFileSize = GetCompressedFileSizeA;
DWORD
GetCompressedFileSizeTransactedA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction
    );
DWORD
GetCompressedFileSizeTransactedW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction
    );
static const int GetCompressedFileSizeTransacted = GetCompressedFileSizeTransactedA;
BOOL
DeleteFileA(
    LPCSTR lpFileName
    );
BOOL
DeleteFileW(
    LPCWSTR lpFileName
    );
static const int DeleteFile = DeleteFileA;
BOOL
DeleteFileTransactedA(
    LPCSTR lpFileName,
    HANDLE hTransaction
    );
BOOL
DeleteFileTransactedW(
    LPCWSTR lpFileName,
    HANDLE hTransaction
    );
static const int DeleteFileTransacted = DeleteFileTransactedA;
BOOL
CheckNameLegalDOS8Dot3A(
    LPCSTR lpName,
    LPSTR lpOemName,
    DWORD OemNameSize,
    PBOOL pbNameContainsSpaces ,
    PBOOL pbNameLegal
    );
BOOL
CheckNameLegalDOS8Dot3W(
    LPCWSTR lpName,
    LPSTR lpOemName,
    DWORD OemNameSize,
    PBOOL pbNameContainsSpaces ,
    PBOOL pbNameLegal
    );
static const int CheckNameLegalDOS8Dot3 = CheckNameLegalDOS8Dot3A;
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
static const int FIND_FIRST_EX_CASE_SENSITIVE = 0x00000001;
static const int FIND_FIRST_EX_LARGE_FETCH = 0x00000002;
HANDLE
FindFirstFileExA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );
HANDLE
FindFirstFileExW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );
static const int FindFirstFileEx = FindFirstFileExA;
HANDLE
FindFirstFileTransactedA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags,
    HANDLE hTransaction
    );
HANDLE
FindFirstFileTransactedW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags,
    HANDLE hTransaction
    );
static const int FindFirstFileTransacted = FindFirstFileTransactedA;
HANDLE
FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );
HANDLE
FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );
static const int FindFirstFile = FindFirstFileA;
BOOL
FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );
BOOL
FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );
static const int FindNextFile = FindNextFileA;
DWORD
SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
DWORD
SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );
static const int SearchPath = SearchPathA;
BOOL
CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );
BOOL
CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );
static const int CopyFile = CopyFileA;
typedef
DWORD
( *LPPROGRESS_ROUTINE)(
    LARGE_INTEGER TotalFileSize,
    LARGE_INTEGER TotalBytesTransferred,
    LARGE_INTEGER StreamSize,
    LARGE_INTEGER StreamBytesTransferred,
    DWORD dwStreamNumber,
    DWORD dwCallbackReason,
    HANDLE hSourceFile,
    HANDLE hDestinationFile,
    LPVOID lpData
    );
BOOL
CopyFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags
    );
BOOL
CopyFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags
    );
static const int CopyFileEx = CopyFileExA;
BOOL
CopyFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags,
    HANDLE hTransaction
    );
BOOL
CopyFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    DWORD dwCopyFlags,
    HANDLE hTransaction
    );
static const int CopyFileTransacted = CopyFileTransactedA;
BOOL
MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );
BOOL
MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );
static const int MoveFile = MoveFileA;
BOOL
MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    DWORD dwFlags
    );
BOOL
MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    DWORD dwFlags
    );
static const int MoveFileEx = MoveFileExA;
BOOL
MoveFileWithProgressA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags
    );
BOOL
MoveFileWithProgressW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags
    );
static const int MoveFileWithProgress = MoveFileWithProgressA;
BOOL
MoveFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOL
MoveFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
static const int MoveFileTransacted = MoveFileTransactedA;
static const int MOVEFILE_REPLACE_EXISTING = 0x00000001;
static const int MOVEFILE_COPY_ALLOWED = 0x00000002;
static const int MOVEFILE_DELAY_UNTIL_REBOOT = 0x00000004;
static const int MOVEFILE_WRITE_THROUGH = 0x00000008;
static const int MOVEFILE_CREATE_HARDLINK = 0x00000010;
static const int MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x00000020;
BOOL
ReplaceFileA(
    LPCSTR lpReplacedFileName,
    LPCSTR lpReplacementFileName,
    LPCSTR lpBackupFileName,
    DWORD dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved
    );
BOOL
ReplaceFileW(
    LPCWSTR lpReplacedFileName,
    LPCWSTR lpReplacementFileName,
    LPCWSTR lpBackupFileName,
    DWORD dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved
    );
static const int ReplaceFile = ReplaceFileA;
BOOL
CreateHardLinkA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
BOOL
CreateHardLinkW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateHardLink = CreateHardLinkA;
BOOL
CreateHardLinkTransactedA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
BOOL
CreateHardLinkTransactedW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction
    );
static const int CreateHardLinkTransacted = CreateHardLinkTransactedA;
typedef enum _STREAM_INFO_LEVELS {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
} STREAM_INFO_LEVELS;
typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];
} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;
HANDLE
FindFirstStreamW(
    LPCWSTR lpFileName,
    STREAM_INFO_LEVELS InfoLevel,
    LPVOID lpFindStreamData,
    DWORD dwFlags
    );
HANDLE
FindFirstStreamTransactedW (
    LPCWSTR lpFileName,
    STREAM_INFO_LEVELS InfoLevel,
    LPVOID lpFindStreamData,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOL
FindNextStreamW(
    HANDLE hFindStream,
    LPVOID lpFindStreamData
    );
HANDLE
FindFirstFileNameW (
    LPCWSTR lpFileName,
    DWORD dwFlags,
    LPDWORD StringLength,
    PWCHAR LinkName
    );
BOOL
FindNextFileNameW (
    HANDLE hFindStream,
    LPDWORD StringLength,
    PWCHAR LinkName
    );
HANDLE
FindFirstFileNameTransactedW (
    LPCWSTR lpFileName,
    DWORD dwFlags,
    LPDWORD StringLength,
    PWCHAR LinkName,
    HANDLE hTransaction
    );
HANDLE
CreateNamedPipeA(
    LPCSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
HANDLE
CreateNamedPipeW(
    LPCWSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int CreateNamedPipe = CreateNamedPipeA;
BOOL
GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    DWORD nMaxUserNameSize
    );
BOOL
GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    DWORD nMaxUserNameSize
    );
static const int GetNamedPipeHandleState = GetNamedPipeHandleStateA;
BOOL
CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
BOOL
CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
static const int CallNamedPipe = CallNamedPipeA;
BOOL
WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    DWORD nTimeOut
    );
BOOL
WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    DWORD nTimeOut
    );
static const int WaitNamedPipe = WaitNamedPipeA;
typedef enum {
    PipeAttribute,
    PipeConnectionAttribute,
    PipeHandleAttribute
} PIPE_ATTRIBUTE_TYPE;
BOOL
GetNamedPipeAttribute(
    HANDLE Pipe,
    PIPE_ATTRIBUTE_TYPE AttributeType,
    PSTR AttributeName,
    PVOID AttributeValue,
    PSIZE_T AttributeValueLength
    );
BOOL
SetNamedPipeAttribute(
    HANDLE Pipe,
    PIPE_ATTRIBUTE_TYPE AttributeType,
    PSTR AttributeName,
    PVOID AttributeValue,
    SIZE_T AttributeValueLength
    );
BOOL
GetNamedPipeClientComputerNameA(
    HANDLE Pipe,
    LPSTR ClientComputerName,
    ULONG ClientComputerNameLength
    );
BOOL
GetNamedPipeClientComputerNameW(
    HANDLE Pipe,
    LPWSTR ClientComputerName,
    ULONG ClientComputerNameLength
    );
static const int GetNamedPipeClientComputerName = GetNamedPipeClientComputerNameA;
BOOL
GetNamedPipeClientProcessId(
    HANDLE Pipe,
    PULONG ClientProcessId
    );
BOOL
GetNamedPipeClientSessionId(
    HANDLE Pipe,
    PULONG ClientSessionId
    );
BOOL
GetNamedPipeServerProcessId(
    HANDLE Pipe,
    PULONG ServerProcessId
    );
BOOL
GetNamedPipeServerSessionId(
    HANDLE Pipe,
    PULONG ServerSessionId
    );
BOOL
SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName
    );
BOOL
SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName
    );
static const int SetVolumeLabel = SetVolumeLabelA;
void
SetFileApisToOEM( void );
void
SetFileApisToANSI( void );
BOOL
AreFileApisANSI( void );
BOOL
GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
BOOL
GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
static const int GetVolumeInformation = GetVolumeInformationA;
BOOL
GetVolumeInformationByHandleW(
    HANDLE hFile,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
BOOL
CancelSynchronousIo(
    HANDLE hThread
    );
BOOL
CancelIoEx(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped
    );
BOOL
CancelIo(
    HANDLE hFile
    );
BOOL
SetFileBandwidthReservation(
    HANDLE hFile,
    DWORD nPeriodMilliseconds,
    DWORD nBytesPerPeriod,
    BOOL bDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests
    );
BOOL
GetFileBandwidthReservation(
    HANDLE hFile,
    LPDWORD lpPeriodMilliseconds,
    LPDWORD lpBytesPerPeriod,
    LPBOOL pDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests
    );
BOOL
ClearEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
BOOL
ClearEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );
static const int ClearEventLog = ClearEventLogA;
BOOL
BackupEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
BOOL
BackupEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );
static const int BackupEventLog = BackupEventLogA;
BOOL
CloseEventLog (
    HANDLE hEventLog
    );
BOOL
DeregisterEventSource (
    HANDLE hEventLog
    );
BOOL
NotifyChangeEventLog(
    HANDLE hEventLog,
    HANDLE hEvent
    );
BOOL
GetNumberOfEventLogRecords (
    HANDLE hEventLog,
    PDWORD NumberOfRecords
    );
BOOL
GetOldestEventLogRecord (
    HANDLE hEventLog,
    PDWORD OldestRecord
    );
HANDLE
OpenEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
HANDLE
OpenEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );
static const int OpenEventLog = OpenEventLogA;
HANDLE
RegisterEventSourceA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
HANDLE
RegisterEventSourceW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );
static const int RegisterEventSource = RegisterEventSourceA;
HANDLE
OpenBackupEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName
    );
HANDLE
OpenBackupEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName
    );
static const int OpenBackupEventLog = OpenBackupEventLogA;
BOOL
ReadEventLogA (
    HANDLE hEventLog,
    DWORD dwReadFlags,
    DWORD dwRecordOffset,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    DWORD *pnBytesRead,
    DWORD *pnMinNumberOfBytesNeeded
    );
BOOL
ReadEventLogW (
    HANDLE hEventLog,
    DWORD dwReadFlags,
    DWORD dwRecordOffset,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    DWORD *pnBytesRead,
    DWORD *pnMinNumberOfBytesNeeded
    );
static const int ReadEventLog = ReadEventLogA;
BOOL
ReportEventA (
    HANDLE hEventLog,
    WORD wType,
    WORD wCategory,
    DWORD dwEventID,
    PSID lpUserSid,
    WORD wNumStrings,
    DWORD dwDataSize,
    LPCSTR *lpStrings,
    LPVOID lpRawData
    );
BOOL
ReportEventW (
    HANDLE hEventLog,
    WORD wType,
    WORD wCategory,
    DWORD dwEventID,
    PSID lpUserSid,
    WORD wNumStrings,
    DWORD dwDataSize,
    LPCWSTR *lpStrings,
    LPVOID lpRawData
    );
static const int ReportEvent = ReportEventA;
static const int EVENTLOG_FULL_INFO = 0;
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;
BOOL
GetEventLogInformation (
    HANDLE hEventLog,
    DWORD dwInfoLevel,
    LPVOID lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
DuplicateToken(
    HANDLE ExistingTokenHandle,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    PHANDLE DuplicateTokenHandle
    );
BOOL
GetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
BOOL
ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    );
BOOL
ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
BOOL
RevertToSelf (
    void
    );
BOOL
SetThreadToken (
    PHANDLE Thread,
    HANDLE Token
    );
BOOL
AccessCheck (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );
BOOL
AccessCheckByType (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );
BOOL
AccessCheckByTypeResultList (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccessList,
    LPDWORD AccessStatusList
    );
BOOL
OpenProcessToken (
    HANDLE ProcessHandle,
    DWORD DesiredAccess,
    PHANDLE TokenHandle
    );
BOOL
OpenThreadToken (
    HANDLE ThreadHandle,
    DWORD DesiredAccess,
    BOOL OpenAsSelf,
    PHANDLE TokenHandle
    );
BOOL
GetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength,
    PDWORD ReturnLength
    );
BOOL
SetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength
    );
BOOL
AdjustTokenPrivileges (
    HANDLE TokenHandle,
    BOOL DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    DWORD BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength
    );
BOOL
AdjustTokenGroups (
    HANDLE TokenHandle,
    BOOL ResetToDefault,
    PTOKEN_GROUPS NewState,
    DWORD BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength
    );
BOOL
PrivilegeCheck (
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult
    );
BOOL
AccessCheckAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmA;
BOOL
AccessCheckByTypeAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmA;
BOOL
AccessCheckByTypeResultListAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeResultListAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmA;
BOOL
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
BOOL
AccessCheckByTypeResultListAndAuditAlarmByHandleW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    DWORD DesiredAccess,
    AUDIT_EVENT_TYPE AuditType,
    DWORD Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    DWORD ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose
    );
static const int AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleA;
BOOL
ObjectOpenAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
BOOL
ObjectOpenAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
static const int ObjectOpenAuditAlarm = ObjectOpenAuditAlarmA;
BOOL
ObjectPrivilegeAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
BOOL
ObjectPrivilegeAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
static const int ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmA;
BOOL
ObjectCloseAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
BOOL
ObjectCloseAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
static const int ObjectCloseAuditAlarm = ObjectCloseAuditAlarmA;
BOOL
ObjectDeleteAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
BOOL
ObjectDeleteAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
static const int ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmA;
BOOL
PrivilegedServiceAuditAlarmA (
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
BOOL
PrivilegedServiceAuditAlarmW (
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
static const int PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmA;
BOOL
IsWellKnownSid (
    PSID pSid,
    WELL_KNOWN_SID_TYPE WellKnownSidType
    );
 BOOL
CreateWellKnownSid(
    WELL_KNOWN_SID_TYPE WellKnownSidType,
    PSID DomainSid,
    PSID pSid,
    DWORD *cbSid
    );
 BOOL
EqualDomainSid(
    PSID pSid1,
    PSID pSid2,
    BOOL *pfEqual
    );
 BOOL
GetWindowsAccountDomainSid(
    PSID pSid,
    PSID pDomainSid,
    DWORD* cbDomainSid
    );
BOOL
IsValidSid (
    PSID pSid
    );
BOOL
EqualSid (
    PSID pSid1,
    PSID pSid2
    );
BOOL
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );
DWORD
GetSidLengthRequired (
    UCHAR nSubAuthorityCount
    );
BOOL
AllocateAndInitializeSid (
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount,
    DWORD nSubAuthority0,
    DWORD nSubAuthority1,
    DWORD nSubAuthority2,
    DWORD nSubAuthority3,
    DWORD nSubAuthority4,
    DWORD nSubAuthority5,
    DWORD nSubAuthority6,
    DWORD nSubAuthority7,
    PSID *pSid
    );
PVOID
FreeSid(
    PSID pSid
    );
BOOL
InitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount
    );
PSID_IDENTIFIER_AUTHORITY
GetSidIdentifierAuthority (
    PSID pSid
    );
PDWORD
GetSidSubAuthority (
    PSID pSid,
    DWORD nSubAuthority
    );
PUCHAR
GetSidSubAuthorityCount (
    PSID pSid
    );
DWORD
GetLengthSid (
    PSID pSid
    );
BOOL
CopySid (
    DWORD nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid
    );
BOOL
AreAllAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );
BOOL
AreAnyAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );
void
MapGenericMask (
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
IsValidAcl (
    PACL pAcl
    );
BOOL
InitializeAcl (
    PACL pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
    );
BOOL
GetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );
BOOL
SetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );
BOOL
AddAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwStartingAceIndex,
    LPVOID pAceList,
    DWORD nAceListLength
    );
BOOL
DeleteAce (
    PACL pAcl,
    DWORD dwAceIndex
    );
BOOL
GetAce (
    PACL pAcl,
    DWORD dwAceIndex,
    LPVOID *pAce
    );
BOOL
AddAccessAllowedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAccessAllowedAceEx (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddMandatoryAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD MandatoryPolicy,
    PSID pLabelSid
    );
BOOL
AddConditionalAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    UCHAR AceType,
    DWORD AccessMask,
    PSID pSid,
    PWCHAR ConditionStr,
    DWORD *ReturnLength
    );
BOOL
AddAccessDeniedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAccessDeniedAceEx (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    PSID pSid
    );
BOOL
AddAuditAccessAce(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
AddAuditAccessAceEx(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
AddAccessAllowedObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid
    );
BOOL
AddAccessDeniedObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid
    );
BOOL
AddAuditAccessObjectAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AceFlags,
    DWORD AccessMask,
    GUID *ObjectTypeGuid,
    GUID *InheritedObjectTypeGuid,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );
BOOL
FindFirstFreeAce (
    PACL pAcl,
    LPVOID *pAce
    );
BOOL
InitializeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD dwRevision
    );
BOOL
IsValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
IsValidRelativeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    ULONG SecurityDescriptorLength,
    SECURITY_INFORMATION RequiredInformation
    );
DWORD
GetSecurityDescriptorLength (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
GetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision
    );
BOOL
SetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
    SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );
BOOL
SetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bDaclPresent,
    PACL pDacl,
    BOOL bDaclDefaulted
    );
BOOL
GetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    PACL *pDacl,
    LPBOOL lpbDaclDefaulted
    );
BOOL
SetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bSaclPresent,
    PACL pSacl,
    BOOL bSaclDefaulted
    );
BOOL
GetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    PACL *pSacl,
    LPBOOL lpbSaclDefaulted
    );
BOOL
SetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    BOOL bOwnerDefaulted
    );
BOOL
GetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pOwner,
    LPBOOL lpbOwnerDefaulted
    );
BOOL
SetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    BOOL bGroupDefaulted
    );
BOOL
GetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pGroup,
    LPBOOL lpbGroupDefaulted
    );
DWORD
SetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl
    );
DWORD
GetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl
    );
BOOL
CreatePrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOL IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
ConvertToAutoInheritPrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
    PSECURITY_DESCRIPTOR *NewSecurityDescriptor,
    GUID *ObjectType,
    BOOLEAN IsDirectoryObject,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
CreatePrivateObjectSecurityEx (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    GUID *ObjectType,
    BOOL IsContainerObject,
    ULONG AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
CreatePrivateObjectSecurityWithMultipleInheritance (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    GUID **ObjectTypes,
    ULONG GuidCount,
    BOOL IsContainerObject,
    ULONG AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );
BOOL
SetPrivateObjectSecurity (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );
BOOL
SetPrivateObjectSecurityEx (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    ULONG AutoInheritFlags,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );
 BOOL
GetPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    DWORD DescriptorLength,
    PDWORD ReturnLength
    );
BOOL
DestroyPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );
 BOOL
MakeSelfRelativeSD (
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength
    );
 BOOL
MakeAbsoluteSD (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize
    );
 BOOL
MakeAbsoluteSD2 (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferSize
    );
void
QuerySecurityAccessMask(
    SECURITY_INFORMATION SecurityInformation,
    LPDWORD DesiredAccess
    );
void
SetSecurityAccessMask(
    SECURITY_INFORMATION SecurityInformation,
    LPDWORD DesiredAccess
    );
BOOL
SetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
BOOL
SetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
static const int SetFileSecurity = SetFileSecurityA;
BOOL
GetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
BOOL
GetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
static const int GetFileSecurity = GetFileSecurityA;
BOOL
SetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );
HANDLE
FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
HANDLE
FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
static const int FindFirstChangeNotification = FindFirstChangeNotificationA;
BOOL
FindNextChangeNotification(
    HANDLE hChangeHandle
    );
BOOL
FindCloseChangeNotification(
    HANDLE hChangeHandle
    );
BOOL
ReadDirectoryChangesW(
    HANDLE hDirectory,
    LPVOID lpBuffer,
    DWORD nBufferLength,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
VirtualLock(
    LPVOID lpAddress,
    SIZE_T dwSize
    );
BOOL
VirtualUnlock(
    LPVOID lpAddress,
    SIZE_T dwSize
    );
LPVOID
MapViewOfFileEx(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap,
    LPVOID lpBaseAddress
    );
LPVOID
MapViewOfFileExNuma(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    SIZE_T dwNumberOfBytesToMap,
    LPVOID lpBaseAddress,
    DWORD nndPreferred
    );
BOOL
SetPriorityClass(
    HANDLE hProcess,
    DWORD dwPriorityClass
    );
DWORD
GetPriorityClass(
    HANDLE hProcess
    );
BOOL
IsBadReadPtr(
    const void *lp,
    UINT_PTR ucb
    );
BOOL
IsBadWritePtr(
    LPVOID lp,
    UINT_PTR ucb
    );
BOOL
IsBadHugeReadPtr(
    const void *lp,
    UINT_PTR ucb
    );
BOOL
IsBadHugeWritePtr(
    LPVOID lp,
    UINT_PTR ucb
    );
BOOL
IsBadCodePtr(
    lpfn
    );
BOOL
IsBadStringPtrA(
    LPCSTR lpsz,
    UINT_PTR ucchMax
    );
BOOL
IsBadStringPtrW(
    LPCWSTR lpsz,
    UINT_PTR ucchMax
    );
static const int IsBadStringPtr = IsBadStringPtrA;
 BOOL
LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
 BOOL
LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountSid = LookupAccountSidA;
 BOOL
LookupAccountSidLocalA(
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
 BOOL
LookupAccountSidLocalW(
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountSidLocal = LookupAccountSidLocalA;
 BOOL
LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
 BOOL
LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountName = LookupAccountNameA;
 BOOL
LookupAccountNameLocalA(
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
 BOOL
LookupAccountNameLocalW(
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse
    );
static const int LookupAccountNameLocal = LookupAccountNameLocalA;
BOOL
LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID lpLuid
    );
BOOL
LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID lpLuid
    );
static const int LookupPrivilegeValue = LookupPrivilegeValueA;
 BOOL
LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID lpLuid,
    LPSTR lpName,
    LPDWORD cchName
    );
 BOOL
LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID lpLuid,
    LPWSTR lpName,
    LPDWORD cchName
    );
static const int LookupPrivilegeName = LookupPrivilegeNameA;
 BOOL
LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId
    );
 BOOL
LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId
    );
static const int LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameA;
BOOL
AllocateLocallyUniqueId(
    PLUID Luid
    );
BOOL
BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB
    );
BOOL
BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB
    );
static const int BuildCommDCB = BuildCommDCBA;
BOOL
BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
BOOL
BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
static const int BuildCommDCBAndTimeouts = BuildCommDCBAndTimeoutsA;
BOOL
CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
BOOL
CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
static const int CommConfigDialog = CommConfigDialogA;
BOOL
GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
BOOL
GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
static const int GetDefaultCommConfig = GetDefaultCommConfigA;
BOOL
SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
BOOL
SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
static const int SetDefaultCommConfig = SetDefaultCommConfigA;
static const int MAX_COMPUTERNAME_LENGTH = 15;
BOOL
GetComputerNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
BOOL
GetComputerNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );
static const int GetComputerName = GetComputerNameA;
BOOL
SetComputerNameA (
    LPCSTR lpComputerName
    );
BOOL
SetComputerNameW (
    LPCWSTR lpComputerName
    );
static const int SetComputerName = SetComputerNameA;
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;
BOOL
GetComputerNameExA (
    COMPUTER_NAME_FORMAT NameType,
    LPSTR lpBuffer,
    LPDWORD nSize
    );
BOOL
GetComputerNameExW (
    COMPUTER_NAME_FORMAT NameType,
    LPWSTR lpBuffer,
    LPDWORD nSize
    );
static const int GetComputerNameEx = GetComputerNameExA;
BOOL
SetComputerNameExA (
    COMPUTER_NAME_FORMAT NameType,
    LPCSTR lpBuffer
    );
BOOL
SetComputerNameExW (
    COMPUTER_NAME_FORMAT NameType,
    LPCWSTR lpBuffer
    );
static const int SetComputerNameEx = SetComputerNameExA;
BOOL
DnsHostnameToComputerNameA (
    LPCSTR Hostname,
    LPSTR ComputerName,
    LPDWORD nSize
    );
BOOL
DnsHostnameToComputerNameW (
    LPCWSTR Hostname,
    LPWSTR ComputerName,
    LPDWORD nSize
    );
static const int DnsHostnameToComputerName = DnsHostnameToComputerNameA;
BOOL
GetUserNameA (
    LPSTR lpBuffer,
    LPDWORD pcbBuffer
    );
BOOL
GetUserNameW (
    LPWSTR lpBuffer,
    LPDWORD pcbBuffer
    );
static const int GetUserName = GetUserNameA;
static const int LOGON32_LOGON_INTERACTIVE = 2;
static const int LOGON32_LOGON_NETWORK = 3;
static const int LOGON32_LOGON_BATCH = 4;
static const int LOGON32_LOGON_SERVICE = 5;
static const int LOGON32_LOGON_UNLOCK = 7;
static const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8;
static const int LOGON32_LOGON_NEW_CREDENTIALS = 9;
static const int LOGON32_PROVIDER_DEFAULT = 0;
static const int LOGON32_PROVIDER_WINNT35 = 1;
static const int LOGON32_PROVIDER_WINNT40 = 2;
static const int LOGON32_PROVIDER_WINNT50 = 3;
static const int LOGON32_PROVIDER_VIRTUAL = 4;
BOOL
LogonUserA (
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
BOOL
LogonUserW (
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
static const int LogonUser = LogonUserA;
BOOL
LogonUserExA (
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken,
    PSID *ppLogonSid,
    PVOID *ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits
    );
BOOL
LogonUserExW (
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken,
    PSID *ppLogonSid,
    PVOID *ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits
    );
static const int LogonUserEx = LogonUserExA;
BOOL
ImpersonateLoggedOnUser(
    HANDLE hToken
    );
BOOL
CreateProcessAsUserA (
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
BOOL
CreateProcessAsUserW (
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
static const int CreateProcessAsUser = CreateProcessAsUserA;
static const int LOGON_WITH_PROFILE = 0x00000001;
static const int LOGON_NETCREDENTIALS_ONLY = 0x00000002;
static const int LOGON_ZERO_PASSWORD_BUFFER = 0x80000000;
 BOOL
CreateProcessWithLogonW(
    LPCWSTR lpUsername,
    LPCWSTR lpDomain,
    LPCWSTR lpPassword,
    DWORD dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
      );
 BOOL
CreateProcessWithTokenW(
    HANDLE hToken,
    DWORD dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
      );
BOOL
ImpersonateAnonymousToken(
    HANDLE ThreadHandle
    );
BOOL
DuplicateTokenEx(
    HANDLE hExistingToken,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    TOKEN_TYPE TokenType,
    PHANDLE phNewToken);
BOOL
CreateRestrictedToken(
    HANDLE ExistingTokenHandle,
    DWORD Flags,
    DWORD DisableSidCount,
    PSID_AND_ATTRIBUTES SidsToDisable,
    DWORD DeletePrivilegeCount,
    PLUID_AND_ATTRIBUTES PrivilegesToDelete,
    DWORD RestrictedSidCount,
    PSID_AND_ATTRIBUTES SidsToRestrict,
    PHANDLE NewTokenHandle
    );
BOOL
IsTokenRestricted(
    HANDLE TokenHandle
    );
BOOL
IsTokenUntrusted(
    HANDLE TokenHandle
    );
BOOL
CheckTokenMembership(
    HANDLE TokenHandle,
    PSID SidToCheck,
    PBOOL IsMember
    );
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK ;
BOOL
RegisterWaitForSingleObject(
    PHANDLE phNewWaitObject,
    HANDLE hObject,
    WAITORTIMERCALLBACK Callback,
    PVOID Context,
    ULONG dwMilliseconds,
    ULONG dwFlags
    );
HANDLE
RegisterWaitForSingleObjectEx(
    HANDLE hObject,
    WAITORTIMERCALLBACK Callback,
    PVOID Context,
    ULONG dwMilliseconds,
    ULONG dwFlags
    );
BOOL
UnregisterWait(
    HANDLE WaitHandle
    );
BOOL
UnregisterWaitEx(
    HANDLE WaitHandle,
    HANDLE CompletionEvent
    );
BOOL
QueueUserWorkItem(
    LPTHREAD_START_ROUTINE Function,
    PVOID Context,
    ULONG Flags
    );
BOOL
BindIoCompletionCallback (
    HANDLE FileHandle,
    LPOVERLAPPED_COMPLETION_ROUTINE Function,
    ULONG Flags
    );
HANDLE
CreateTimerQueue(
    void
    );
BOOL
CreateTimerQueueTimer(
    PHANDLE phNewTimer,
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    DWORD DueTime,
    DWORD Period,
    ULONG Flags
    );
BOOL
ChangeTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    ULONG DueTime,
    ULONG Period
    );
BOOL
DeleteTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    HANDLE CompletionEvent
    );
BOOL
DeleteTimerQueueEx(
    HANDLE TimerQueue,
    HANDLE CompletionEvent
    );
HANDLE
SetTimerQueueTimer(
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    DWORD DueTime,
    DWORD Period,
    BOOL PreferIo
    );
BOOL
CancelTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer
    );
BOOL
DeleteTimerQueue(
    HANDLE TimerQueue
    );
typedef void ( *PTP_WIN32_IO_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PVOID Overlapped,
    ULONG IoResult,
    ULONG_PTR NumberOfBytesTransferred,
    PTP_IO Io
    );
PTP_POOL
CreateThreadpool(
    PVOID reserved
    );
void
SetThreadpoolThreadMaximum(
    PTP_POOL ptpp,
    DWORD cthrdMost
    );
BOOL
SetThreadpoolThreadMinimum(
    PTP_POOL ptpp,
    DWORD cthrdMic
    );
BOOL
SetThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi
    );
BOOL
QueryThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi
    );
void
CloseThreadpool(
    PTP_POOL ptpp
    );
PTP_CLEANUP_GROUP
CreateThreadpoolCleanupGroup(
    void
    );
void
CloseThreadpoolCleanupGroupMembers(
    PTP_CLEANUP_GROUP ptpcg,
    BOOL fCancelPendingCallbacks,
    PVOID pvCleanupContext
    );
void
CloseThreadpoolCleanupGroup(
    PTP_CLEANUP_GROUP ptpcg
    );
void
InitializeThreadpoolEnvironment(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}
void
SetThreadpoolCallbackPool(
    PTP_CALLBACK_ENVIRON pcbe,
    PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}
void
SetThreadpoolCallbackCleanupGroup(
    PTP_CALLBACK_ENVIRON pcbe,
    PTP_CLEANUP_GROUP ptpcg,
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}
void
SetThreadpoolCallbackRunsLong(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}
void
SetThreadpoolCallbackLibrary(
    PTP_CALLBACK_ENVIRON pcbe,
    PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}
void
SetThreadpoolCallbackPriority(
    PTP_CALLBACK_ENVIRON pcbe,
    TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}
void
SetThreadpoolCallbackPersistent(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}
void
DestroyThreadpoolEnvironment(
    PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}
void
SetEventWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE evt
    );
void
ReleaseSemaphoreWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE sem,
    DWORD crel
    );
void
ReleaseMutexWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE mut
    );
void
LeaveCriticalSectionWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    PCRITICAL_SECTION pcs
    );
void
FreeLibraryWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HMODULE mod
    );
BOOL
CallbackMayRunLong(
    PTP_CALLBACK_INSTANCE pci
    );
void
DisassociateCurrentThreadFromCallback(
    PTP_CALLBACK_INSTANCE pci
    );
BOOL
TrySubmitThreadpoolCallback(
    PTP_SIMPLE_CALLBACK pfns,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
PTP_WORK
CreateThreadpoolWork(
    PTP_WORK_CALLBACK pfnwk,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
void
SubmitThreadpoolWork(
    PTP_WORK pwk
    );
void
WaitForThreadpoolWorkCallbacks(
    PTP_WORK pwk,
    BOOL fCancelPendingCallbacks
    );
void
CloseThreadpoolWork(
    PTP_WORK pwk
    );
PTP_TIMER
CreateThreadpoolTimer(
    PTP_TIMER_CALLBACK pfnti,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
void
SetThreadpoolTimer(
    PTP_TIMER pti,
    PFILETIME pftDueTime,
    DWORD msPeriod,
    DWORD msWindowLength
    );
BOOL
IsThreadpoolTimerSet(
    PTP_TIMER pti
    );
void
WaitForThreadpoolTimerCallbacks(
    PTP_TIMER pti,
    BOOL fCancelPendingCallbacks
    );
void
CloseThreadpoolTimer(
    PTP_TIMER pti
    );
PTP_WAIT
CreateThreadpoolWait(
    PTP_WAIT_CALLBACK pfnwa,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
void
SetThreadpoolWait(
    PTP_WAIT pwa,
    HANDLE h,
    PFILETIME pftTimeout
    );
void
WaitForThreadpoolWaitCallbacks(
    PTP_WAIT pwa,
    BOOL fCancelPendingCallbacks
    );
void
CloseThreadpoolWait(
    PTP_WAIT pwa
    );
PTP_IO
CreateThreadpoolIo(
    HANDLE fl,
    PTP_WIN32_IO_CALLBACK pfnio,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe
    );
void
StartThreadpoolIo(
    PTP_IO pio
    );
void
CancelThreadpoolIo(
    PTP_IO pio
    );
void
WaitForThreadpoolIoCallbacks(
    PTP_IO pio,
    BOOL fCancelPendingCallbacks
    );
void
CloseThreadpoolIo(
    PTP_IO pio
    );
HANDLE
CreatePrivateNamespaceA(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix
    );
HANDLE
CreatePrivateNamespaceW(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix
    );
static const int CreatePrivateNamespace = CreatePrivateNamespaceA;
HANDLE
OpenPrivateNamespaceA(
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix
    );
HANDLE
OpenPrivateNamespaceW(
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix
    );
static const int OpenPrivateNamespace = OpenPrivateNamespaceA;
static const int PRIVATE_NAMESPACE_FLAG_DESTROY = 0x00000001;
BOOLEAN
ClosePrivateNamespace(
    HANDLE Handle,
    ULONG Flags
    );
HANDLE
CreateBoundaryDescriptorA(
    LPCSTR Name,
    ULONG Flags
    );
HANDLE
CreateBoundaryDescriptorW(
    LPCWSTR Name,
    ULONG Flags
    );
static const int CreateBoundaryDescriptor = CreateBoundaryDescriptorA;
BOOL
AddSIDToBoundaryDescriptor(
    HANDLE * BoundaryDescriptor,
    PSID RequiredSid
    );
BOOL
AddIntegrityLabelToBoundaryDescriptor(
    HANDLE * BoundaryDescriptor,
    PSID IntegrityLabel
    );
void
DeleteBoundaryDescriptor(
    HANDLE BoundaryDescriptor
    );
static const int HW_PROFILE_GUIDLEN = 39;
static const int MAX_PROFILE_LEN = 80;
static const int DOCKINFO_UNDOCKED = (0x1);
static const int DOCKINFO_DOCKED = (0x2);
static const int DOCKINFO_USER_SUPPLIED = (0x4);
static const int DOCKINFO_USER_UNDOCKED = (DOCKINFO_USER_SUPPLIED | DOCKINFO_UNDOCKED);
static const int DOCKINFO_USER_DOCKED = (DOCKINFO_USER_SUPPLIED | DOCKINFO_DOCKED);
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
BOOL
GetCurrentHwProfileA (
    LPHW_PROFILE_INFOA lpHwProfileInfo
    );
BOOL
GetCurrentHwProfileW (
    LPHW_PROFILE_INFOW lpHwProfileInfo
    );
static const int GetCurrentHwProfile = GetCurrentHwProfileA;
BOOL
QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );
BOOL
QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );
BOOL
GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
BOOL
GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );
static const int GetVersionEx = GetVersionExA;
BOOL
VerifyVersionInfoA(
    LPOSVERSIONINFOEXA lpVersionInformation,
    DWORD dwTypeMask,
    DWORDLONG dwlConditionMask
    );
BOOL
VerifyVersionInfoW(
    LPOSVERSIONINFOEXW lpVersionInformation,
    DWORD dwTypeMask,
    DWORDLONG dwlConditionMask
    );
static const int VerifyVersionInfo = VerifyVersionInfoA;
BOOL
GetProductInfo(
    DWORD dwOSMajorVersion,
    DWORD dwOSMinorVersion,
    DWORD dwSpMajorVersion,
    DWORD dwSpMinorVersion,
    PDWORD pdwReturnedProductType
    );
static const int FACILITY_XPS = 82;
static const int FACILITY_WINRM = 51;
static const int FACILITY_WINDOWSUPDATE = 36;
static const int FACILITY_WINDOWS_DEFENDER = 80;
static const int FACILITY_WINDOWS_CE = 24;
static const int FACILITY_WINDOWS = 8;
static const int FACILITY_USERMODE_VOLMGR = 56;
static const int FACILITY_USERMODE_VIRTUALIZATION = 55;
static const int FACILITY_USERMODE_VHD = 58;
static const int FACILITY_URT = 19;
static const int FACILITY_UMI = 22;
static const int FACILITY_UI = 42;
static const int FACILITY_TPM_SOFTWARE = 41;
static const int FACILITY_TPM_SERVICES = 40;
static const int FACILITY_SXS = 23;
static const int FACILITY_STORAGE = 3;
static const int FACILITY_STATE_MANAGEMENT = 34;
static const int FACILITY_SSPI = 9;
static const int FACILITY_SCARD = 16;
static const int FACILITY_SHELL = 39;
static const int FACILITY_SETUPAPI = 15;
static const int FACILITY_SECURITY = 9;
static const int FACILITY_SDIAG = 60;
static const int FACILITY_RPC = 1;
static const int FACILITY_RAS = 83;
static const int FACILITY_PLA = 48;
static const int FACILITY_OPC = 81;
static const int FACILITY_WIN32 = 7;
static const int FACILITY_CONTROL = 10;
static const int FACILITY_WEBSERVICES = 61;
static const int FACILITY_NULL = 0;
static const int FACILITY_NDIS = 52;
static const int FACILITY_METADIRECTORY = 35;
static const int FACILITY_MSMQ = 14;
static const int FACILITY_MEDIASERVER = 13;
static const int FACILITY_MBN = 84;
static const int FACILITY_INTERNET = 12;
static const int FACILITY_ITF = 4;
static const int FACILITY_USERMODE_HYPERVISOR = 53;
static const int FACILITY_HTTP = 25;
static const int FACILITY_GRAPHICS = 38;
static const int FACILITY_FWP = 50;
static const int FACILITY_FVE = 49;
static const int FACILITY_USERMODE_FILTER_MANAGER = 31;
static const int FACILITY_DPLAY = 21;
static const int FACILITY_DISPATCH = 2;
static const int FACILITY_DIRECTORYSERVICE = 37;
static const int FACILITY_CONFIGURATION = 33;
static const int FACILITY_COMPLUS = 17;
static const int FACILITY_USERMODE_COMMONLOG = 26;
static const int FACILITY_CMI = 54;
static const int FACILITY_CERT = 11;
static const int FACILITY_BCD = 57;
static const int FACILITY_BACKGROUNDCOPY = 32;
static const int FACILITY_ACS = 20;
static const int FACILITY_AAF = 18;
static const long ERROR_SUCCESS = 0L;
static const long NO_ERROR = 0L;
static const int SEC_E_OK = ((HRESULT)0x00000000L);
static const long ERROR_INVALID_FUNCTION = 1L;
static const long ERROR_FILE_NOT_FOUND = 2L;
static const long ERROR_PATH_NOT_FOUND = 3L;
static const long ERROR_TOO_MANY_OPEN_FILES = 4L;
static const long ERROR_ACCESS_DENIED = 5L;
static const long ERROR_INVALID_HANDLE = 6L;
static const long ERROR_ARENA_TRASHED = 7L;
static const long ERROR_NOT_ENOUGH_MEMORY = 8L;
static const long ERROR_INVALID_BLOCK = 9L;
static const long ERROR_BAD_ENVIRONMENT = 10L;
static const long ERROR_BAD_FORMAT = 11L;
static const long ERROR_INVALID_ACCESS = 12L;
static const long ERROR_INVALID_DATA = 13L;
static const long ERROR_OUTOFMEMORY = 14L;
static const long ERROR_INVALID_DRIVE = 15L;
static const long ERROR_CURRENT_DIRECTORY = 16L;
static const long ERROR_NOT_SAME_DEVICE = 17L;
static const long ERROR_NO_MORE_FILES = 18L;
static const long ERROR_WRITE_PROTECT = 19L;
static const long ERROR_BAD_UNIT = 20L;
static const long ERROR_NOT_READY = 21L;
static const long ERROR_BAD_COMMAND = 22L;
static const long ERROR_CRC = 23L;
static const long ERROR_BAD_LENGTH = 24L;
static const long ERROR_SEEK = 25L;
static const long ERROR_NOT_DOS_DISK = 26L;
static const long ERROR_SECTOR_NOT_FOUND = 27L;
static const long ERROR_OUT_OF_PAPER = 28L;
static const long ERROR_WRITE_FAULT = 29L;
static const long ERROR_READ_FAULT = 30L;
static const long ERROR_GEN_FAILURE = 31L;
static const long ERROR_SHARING_VIOLATION = 32L;
static const long ERROR_LOCK_VIOLATION = 33L;
static const long ERROR_WRONG_DISK = 34L;
static const long ERROR_SHARING_BUFFER_EXCEEDED = 36L;
static const long ERROR_HANDLE_EOF = 38L;
static const long ERROR_HANDLE_DISK_FULL = 39L;
static const long ERROR_NOT_SUPPORTED = 50L;
static const long ERROR_REM_NOT_LIST = 51L;
static const long ERROR_DUP_NAME = 52L;
static const long ERROR_BAD_NETPATH = 53L;
static const long ERROR_NETWORK_BUSY = 54L;
static const long ERROR_DEV_NOT_EXIST = 55L;
static const long ERROR_TOO_MANY_CMDS = 56L;
static const long ERROR_ADAP_HDW_ERR = 57L;
static const long ERROR_BAD_NET_RESP = 58L;
static const long ERROR_UNEXP_NET_ERR = 59L;
static const long ERROR_BAD_REM_ADAP = 60L;
static const long ERROR_PRINTQ_FULL = 61L;
static const long ERROR_NO_SPOOL_SPACE = 62L;
static const long ERROR_PRINT_CANCELLED = 63L;
static const long ERROR_NETNAME_DELETED = 64L;
static const long ERROR_NETWORK_ACCESS_DENIED = 65L;
static const long ERROR_BAD_DEV_TYPE = 66L;
static const long ERROR_BAD_NET_NAME = 67L;
static const long ERROR_TOO_MANY_NAMES = 68L;
static const long ERROR_TOO_MANY_SESS = 69L;
static const long ERROR_SHARING_PAUSED = 70L;
static const long ERROR_REQ_NOT_ACCEP = 71L;
static const long ERROR_REDIR_PAUSED = 72L;
static const long ERROR_FILE_EXISTS = 80L;
static const long ERROR_CANNOT_MAKE = 82L;
static const long ERROR_FAIL_I24 = 83L;
static const long ERROR_OUT_OF_STRUCTURES = 84L;
static const long ERROR_ALREADY_ASSIGNED = 85L;
static const long ERROR_INVALID_PASSWORD = 86L;
static const long ERROR_INVALID_PARAMETER = 87L;
static const long ERROR_NET_WRITE_FAULT = 88L;
static const long ERROR_NO_PROC_SLOTS = 89L;
static const long ERROR_TOO_MANY_SEMAPHORES = 100L;
static const long ERROR_EXCL_SEM_ALREADY_OWNED = 101L;
static const long ERROR_SEM_IS_SET = 102L;
static const long ERROR_TOO_MANY_SEM_REQUESTS = 103L;
static const long ERROR_INVALID_AT_INTERRUPT_TIME = 104L;
static const long ERROR_SEM_OWNER_DIED = 105L;
static const long ERROR_SEM_USER_LIMIT = 106L;
static const long ERROR_DISK_CHANGE = 107L;
static const long ERROR_DRIVE_LOCKED = 108L;
static const long ERROR_BROKEN_PIPE = 109L;
static const long ERROR_OPEN_FAILED = 110L;
static const long ERROR_BUFFER_OVERFLOW = 111L;
static const long ERROR_DISK_FULL = 112L;
static const long ERROR_NO_MORE_SEARCH_HANDLES = 113L;
static const long ERROR_INVALID_TARGET_HANDLE = 114L;
static const long ERROR_INVALID_CATEGORY = 117L;
static const long ERROR_INVALID_VERIFY_SWITCH = 118L;
static const long ERROR_BAD_DRIVER_LEVEL = 119L;
static const long ERROR_CALL_NOT_IMPLEMENTED = 120L;
static const long ERROR_SEM_TIMEOUT = 121L;
static const long ERROR_INSUFFICIENT_BUFFER = 122L;
static const long ERROR_INVALID_NAME = 123L;
static const long ERROR_INVALID_LEVEL = 124L;
static const long ERROR_NO_VOLUME_LABEL = 125L;
static const long ERROR_MOD_NOT_FOUND = 126L;
static const long ERROR_PROC_NOT_FOUND = 127L;
static const long ERROR_WAIT_NO_CHILDREN = 128L;
static const long ERROR_CHILD_NOT_COMPLETE = 129L;
static const long ERROR_DIRECT_ACCESS_HANDLE = 130L;
static const long ERROR_NEGATIVE_SEEK = 131L;
static const long ERROR_SEEK_ON_DEVICE = 132L;
static const long ERROR_IS_JOIN_TARGET = 133L;
static const long ERROR_IS_JOINED = 134L;
static const long ERROR_IS_SUBSTED = 135L;
static const long ERROR_NOT_JOINED = 136L;
static const long ERROR_NOT_SUBSTED = 137L;
static const long ERROR_JOIN_TO_JOIN = 138L;
static const long ERROR_SUBST_TO_SUBST = 139L;
static const long ERROR_JOIN_TO_SUBST = 140L;
static const long ERROR_SUBST_TO_JOIN = 141L;
static const long ERROR_BUSY_DRIVE = 142L;
static const long ERROR_SAME_DRIVE = 143L;
static const long ERROR_DIR_NOT_ROOT = 144L;
static const long ERROR_DIR_NOT_EMPTY = 145L;
static const long ERROR_IS_SUBST_PATH = 146L;
static const long ERROR_IS_JOIN_PATH = 147L;
static const long ERROR_PATH_BUSY = 148L;
static const long ERROR_IS_SUBST_TARGET = 149L;
static const long ERROR_SYSTEM_TRACE = 150L;
static const long ERROR_INVALID_EVENT_COUNT = 151L;
static const long ERROR_TOO_MANY_MUXWAITERS = 152L;
static const long ERROR_INVALID_LIST_FORMAT = 153L;
static const long ERROR_LABEL_TOO_LONG = 154L;
static const long ERROR_TOO_MANY_TCBS = 155L;
static const long ERROR_SIGNAL_REFUSED = 156L;
static const long ERROR_DISCARDED = 157L;
static const long ERROR_NOT_LOCKED = 158L;
static const long ERROR_BAD_THREADID_ADDR = 159L;
static const long ERROR_BAD_ARGUMENTS = 160L;
static const long ERROR_BAD_PATHNAME = 161L;
static const long ERROR_SIGNAL_PENDING = 162L;
static const long ERROR_MAX_THRDS_REACHED = 164L;
static const long ERROR_LOCK_FAILED = 167L;
static const long ERROR_BUSY = 170L;
static const long ERROR_CANCEL_VIOLATION = 173L;
static const long ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174L;
static const long ERROR_INVALID_SEGMENT_NUMBER = 180L;
static const long ERROR_INVALID_ORDINAL = 182L;
static const long ERROR_ALREADY_EXISTS = 183L;
static const long ERROR_INVALID_FLAG_NUMBER = 186L;
static const long ERROR_SEM_NOT_FOUND = 187L;
static const long ERROR_INVALID_STARTING_CODESEG = 188L;
static const long ERROR_INVALID_STACKSEG = 189L;
static const long ERROR_INVALID_MODULETYPE = 190L;
static const long ERROR_INVALID_EXE_SIGNATURE = 191L;
static const long ERROR_EXE_MARKED_INVALID = 192L;
static const long ERROR_BAD_EXE_FORMAT = 193L;
static const long ERROR_ITERATED_DATA_EXCEEDS_64k = 194L;
static const long ERROR_INVALID_MINALLOCSIZE = 195L;
static const long ERROR_DYNLINK_FROM_INVALID_RING = 196L;
static const long ERROR_IOPL_NOT_ENABLED = 197L;
static const long ERROR_INVALID_SEGDPL = 198L;
static const long ERROR_AUTODATASEG_EXCEEDS_64k = 199L;
static const long ERROR_RING2SEG_MUST_BE_MOVABLE = 200L;
static const long ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201L;
static const long ERROR_INFLOOP_IN_RELOC_CHAIN = 202L;
static const long ERROR_ENVVAR_NOT_FOUND = 203L;
static const long ERROR_NO_SIGNAL_SENT = 205L;
static const long ERROR_FILENAME_EXCED_RANGE = 206L;
static const long ERROR_RING2_STACK_IN_USE = 207L;
static const long ERROR_META_EXPANSION_TOO_LONG = 208L;
static const long ERROR_INVALID_SIGNAL_NUMBER = 209L;
static const long ERROR_THREAD_1_INACTIVE = 210L;
static const long ERROR_LOCKED = 212L;
static const long ERROR_TOO_MANY_MODULES = 214L;
static const long ERROR_NESTING_NOT_ALLOWED = 215L;
static const long ERROR_EXE_MACHINE_TYPE_MISMATCH = 216L;
static const long ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217L;
static const long ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218L;
static const long ERROR_FILE_CHECKED_OUT = 220L;
static const long ERROR_CHECKOUT_REQUIRED = 221L;
static const long ERROR_BAD_FILE_TYPE = 222L;
static const long ERROR_FILE_TOO_LARGE = 223L;
static const long ERROR_FORMS_AUTH_REQUIRED = 224L;
static const long ERROR_VIRUS_INFECTED = 225L;
static const long ERROR_VIRUS_DELETED = 226L;
static const long ERROR_PIPE_LOCAL = 229L;
static const long ERROR_BAD_PIPE = 230L;
static const long ERROR_PIPE_BUSY = 231L;
static const long ERROR_NO_DATA = 232L;
static const long ERROR_PIPE_NOT_CONNECTED = 233L;
static const long ERROR_MORE_DATA = 234L;
static const long ERROR_VC_DISCONNECTED = 240L;
static const long ERROR_INVALID_EA_NAME = 254L;
static const long ERROR_EA_LIST_INCONSISTENT = 255L;
static const long WAIT_TIMEOUT = 258L;
static const long ERROR_NO_MORE_ITEMS = 259L;
static const long ERROR_CANNOT_COPY = 266L;
static const long ERROR_DIRECTORY = 267L;
static const long ERROR_EAS_DIDNT_FIT = 275L;
static const long ERROR_EA_FILE_CORRUPT = 276L;
static const long ERROR_EA_TABLE_FULL = 277L;
static const long ERROR_INVALID_EA_HANDLE = 278L;
static const long ERROR_EAS_NOT_SUPPORTED = 282L;
static const long ERROR_NOT_OWNER = 288L;
static const long ERROR_TOO_MANY_POSTS = 298L;
static const long ERROR_PARTIAL_COPY = 299L;
static const long ERROR_OPLOCK_NOT_GRANTED = 300L;
static const long ERROR_INVALID_OPLOCK_PROTOCOL = 301L;
static const long ERROR_DISK_TOO_FRAGMENTED = 302L;
static const long ERROR_DELETE_PENDING = 303L;
static const long ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304L;
static const long ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305L;
static const long ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306L;
static const long ERROR_INVALID_LOCK_RANGE = 307L;
static const long ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308L;
static const long ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309L;
static const long ERROR_MR_MID_NOT_FOUND = 317L;
static const long ERROR_SCOPE_NOT_FOUND = 318L;
static const long ERROR_FAIL_NOACTION_REBOOT = 350L;
static const long ERROR_FAIL_SHUTDOWN = 351L;
static const long ERROR_FAIL_RESTART = 352L;
static const long ERROR_MAX_SESSIONS_REACHED = 353L;
static const long ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400L;
static const long ERROR_THREAD_MODE_NOT_BACKGROUND = 401L;
static const long ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402L;
static const long ERROR_PROCESS_MODE_NOT_BACKGROUND = 403L;
static const long ERROR_INVALID_ADDRESS = 487L;
static const long ERROR_USER_PROFILE_LOAD = 500L;
static const long ERROR_ARITHMETIC_OVERFLOW = 534L;
static const long ERROR_PIPE_CONNECTED = 535L;
static const long ERROR_PIPE_LISTENING = 536L;
static const long ERROR_VERIFIER_STOP = 537L;
static const long ERROR_ABIOS_ERROR = 538L;
static const long ERROR_WX86_WARNING = 539L;
static const long ERROR_WX86_ERROR = 540L;
static const long ERROR_TIMER_NOT_CANCELED = 541L;
static const long ERROR_UNWIND = 542L;
static const long ERROR_BAD_STACK = 543L;
static const long ERROR_INVALID_UNWIND_TARGET = 544L;
static const long ERROR_INVALID_PORT_ATTRIBUTES = 545L;
static const long ERROR_PORT_MESSAGE_TOO_LONG = 546L;
static const long ERROR_INVALID_QUOTA_LOWER = 547L;
static const long ERROR_DEVICE_ALREADY_ATTACHED = 548L;
static const long ERROR_INSTRUCTION_MISALIGNMENT = 549L;
static const long ERROR_PROFILING_NOT_STARTED = 550L;
static const long ERROR_PROFILING_NOT_STOPPED = 551L;
static const long ERROR_COULD_NOT_INTERPRET = 552L;
static const long ERROR_PROFILING_AT_LIMIT = 553L;
static const long ERROR_CANT_WAIT = 554L;
static const long ERROR_CANT_TERMINATE_SELF = 555L;
static const long ERROR_UNEXPECTED_MM_CREATE_ERR = 556L;
static const long ERROR_UNEXPECTED_MM_MAP_ERROR = 557L;
static const long ERROR_UNEXPECTED_MM_EXTEND_ERR = 558L;
static const long ERROR_BAD_FUNCTION_TABLE = 559L;
static const long ERROR_NO_GUID_TRANSLATION = 560L;
static const long ERROR_INVALID_LDT_SIZE = 561L;
static const long ERROR_INVALID_LDT_OFFSET = 563L;
static const long ERROR_INVALID_LDT_DESCRIPTOR = 564L;
static const long ERROR_TOO_MANY_THREADS = 565L;
static const long ERROR_THREAD_NOT_IN_PROCESS = 566L;
static const long ERROR_PAGEFILE_QUOTA_EXCEEDED = 567L;
static const long ERROR_LOGON_SERVER_CONFLICT = 568L;
static const long ERROR_SYNCHRONIZATION_REQUIRED = 569L;
static const long ERROR_NET_OPEN_FAILED = 570L;
static const long ERROR_IO_PRIVILEGE_FAILED = 571L;
static const long ERROR_CONTROL_C_EXIT = 572L;
static const long ERROR_MISSING_SYSTEMFILE = 573L;
static const long ERROR_UNHANDLED_EXCEPTION = 574L;
static const long ERROR_APP_INIT_FAILURE = 575L;
static const long ERROR_PAGEFILE_CREATE_FAILED = 576L;
static const long ERROR_INVALID_IMAGE_HASH = 577L;
static const long ERROR_NO_PAGEFILE = 578L;
static const long ERROR_ILLEGAL_FLOAT_CONTEXT = 579L;
static const long ERROR_NO_EVENT_PAIR = 580L;
static const long ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581L;
static const long ERROR_ILLEGAL_CHARACTER = 582L;
static const long ERROR_UNDEFINED_CHARACTER = 583L;
static const long ERROR_FLOPPY_VOLUME = 584L;
static const long ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585L;
static const long ERROR_BACKUP_CONTROLLER = 586L;
static const long ERROR_MUTANT_LIMIT_EXCEEDED = 587L;
static const long ERROR_FS_DRIVER_REQUIRED = 588L;
static const long ERROR_CANNOT_LOAD_REGISTRY_FILE = 589L;
static const long ERROR_DEBUG_ATTACH_FAILED = 590L;
static const long ERROR_SYSTEM_PROCESS_TERMINATED = 591L;
static const long ERROR_DATA_NOT_ACCEPTED = 592L;
static const long ERROR_VDM_HARD_ERROR = 593L;
static const long ERROR_DRIVER_CANCEL_TIMEOUT = 594L;
static const long ERROR_REPLY_MESSAGE_MISMATCH = 595L;
static const long ERROR_LOST_WRITEBEHIND_DATA = 596L;
static const long ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597L;
static const long ERROR_NOT_TINY_STREAM = 598L;
static const long ERROR_STACK_OVERFLOW_READ = 599L;
static const long ERROR_CONVERT_TO_LARGE = 600L;
static const long ERROR_FOUND_OUT_OF_SCOPE = 601L;
static const long ERROR_ALLOCATE_BUCKET = 602L;
static const long ERROR_MARSHALL_OVERFLOW = 603L;
static const long ERROR_INVALID_VARIANT = 604L;
static const long ERROR_BAD_COMPRESSION_BUFFER = 605L;
static const long ERROR_AUDIT_FAILED = 606L;
static const long ERROR_TIMER_RESOLUTION_NOT_SET = 607L;
static const long ERROR_INSUFFICIENT_LOGON_INFO = 608L;
static const long ERROR_BAD_DLL_ENTRYPOINT = 609L;
static const long ERROR_BAD_SERVICE_ENTRYPOINT = 610L;
static const long ERROR_IP_ADDRESS_CONFLICT1 = 611L;
static const long ERROR_IP_ADDRESS_CONFLICT2 = 612L;
static const long ERROR_REGISTRY_QUOTA_LIMIT = 613L;
static const long ERROR_NO_CALLBACK_ACTIVE = 614L;
static const long ERROR_PWD_TOO_SHORT = 615L;
static const long ERROR_PWD_TOO_RECENT = 616L;
static const long ERROR_PWD_HISTORY_CONFLICT = 617L;
static const long ERROR_UNSUPPORTED_COMPRESSION = 618L;
static const long ERROR_INVALID_HW_PROFILE = 619L;
static const long ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620L;
static const long ERROR_QUOTA_LIST_INCONSISTENT = 621L;
static const long ERROR_EVALUATION_EXPIRATION = 622L;
static const long ERROR_ILLEGAL_DLL_RELOCATION = 623L;
static const long ERROR_DLL_INIT_FAILED_LOGOFF = 624L;
static const long ERROR_VALIDATE_CONTINUE = 625L;
static const long ERROR_NO_MORE_MATCHES = 626L;
static const long ERROR_RANGE_LIST_CONFLICT = 627L;
static const long ERROR_SERVER_SID_MISMATCH = 628L;
static const long ERROR_CANT_ENABLE_DENY_ONLY = 629L;
static const long ERROR_FLOAT_MULTIPLE_FAULTS = 630L;
static const long ERROR_FLOAT_MULTIPLE_TRAPS = 631L;
static const long ERROR_NOINTERFACE = 632L;
static const long ERROR_DRIVER_FAILED_SLEEP = 633L;
static const long ERROR_CORRUPT_SYSTEM_FILE = 634L;
static const long ERROR_COMMITMENT_MINIMUM = 635L;
static const long ERROR_PNP_RESTART_ENUMERATION = 636L;
static const long ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637L;
static const long ERROR_PNP_REBOOT_REQUIRED = 638L;
static const long ERROR_INSUFFICIENT_POWER = 639L;
static const long ERROR_MULTIPLE_FAULT_VIOLATION = 640L;
static const long ERROR_SYSTEM_SHUTDOWN = 641L;
static const long ERROR_PORT_NOT_SET = 642L;
static const long ERROR_DS_VERSION_CHECK_FAILURE = 643L;
static const long ERROR_RANGE_NOT_FOUND = 644L;
static const long ERROR_NOT_SAFE_MODE_DRIVER = 646L;
static const long ERROR_FAILED_DRIVER_ENTRY = 647L;
static const long ERROR_DEVICE_ENUMERATION_ERROR = 648L;
static const long ERROR_MOUNT_POINT_NOT_RESOLVED = 649L;
static const long ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650L;
static const long ERROR_MCA_OCCURED = 651L;
static const long ERROR_DRIVER_DATABASE_ERROR = 652L;
static const long ERROR_SYSTEM_HIVE_TOO_LARGE = 653L;
static const long ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654L;
static const long ERROR_VOLSNAP_PREPARE_HIBERNATE = 655L;
static const long ERROR_HIBERNATION_FAILURE = 656L;
static const long ERROR_FILE_SYSTEM_LIMITATION = 665L;
static const long ERROR_ASSERTION_FAILURE = 668L;
static const long ERROR_ACPI_ERROR = 669L;
static const long ERROR_WOW_ASSERTION = 670L;
static const long ERROR_PNP_BAD_MPS_TABLE = 671L;
static const long ERROR_PNP_TRANSLATION_FAILED = 672L;
static const long ERROR_PNP_IRQ_TRANSLATION_FAILED = 673L;
static const long ERROR_PNP_INVALID_ID = 674L;
static const long ERROR_WAKE_SYSTEM_DEBUGGER = 675L;
static const long ERROR_HANDLES_CLOSED = 676L;
static const long ERROR_EXTRANEOUS_INFORMATION = 677L;
static const long ERROR_RXACT_COMMIT_NECESSARY = 678L;
static const long ERROR_MEDIA_CHECK = 679L;
static const long ERROR_GUID_SUBSTITUTION_MADE = 680L;
static const long ERROR_STOPPED_ON_SYMLINK = 681L;
static const long ERROR_LONGJUMP = 682L;
static const long ERROR_PLUGPLAY_QUERY_VETOED = 683L;
static const long ERROR_UNWIND_CONSOLIDATE = 684L;
static const long ERROR_REGISTRY_HIVE_RECOVERED = 685L;
static const long ERROR_DLL_MIGHT_BE_INSECURE = 686L;
static const long ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687L;
static const long ERROR_DBG_EXCEPTION_NOT_HANDLED = 688L;
static const long ERROR_DBG_REPLY_LATER = 689L;
static const long ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690L;
static const long ERROR_DBG_TERMINATE_THREAD = 691L;
static const long ERROR_DBG_TERMINATE_PROCESS = 692L;
static const long ERROR_DBG_CONTROL_C = 693L;
static const long ERROR_DBG_PRINTEXCEPTION_C = 694L;
static const long ERROR_DBG_RIPEXCEPTION = 695L;
static const long ERROR_DBG_CONTROL_BREAK = 696L;
static const long ERROR_DBG_COMMAND_EXCEPTION = 697L;
static const long ERROR_OBJECT_NAME_EXISTS = 698L;
static const long ERROR_THREAD_WAS_SUSPENDED = 699L;
static const long ERROR_IMAGE_NOT_AT_BASE = 700L;
static const long ERROR_RXACT_STATE_CREATED = 701L;
static const long ERROR_SEGMENT_NOTIFICATION = 702L;
static const long ERROR_BAD_CURRENT_DIRECTORY = 703L;
static const long ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704L;
static const long ERROR_FT_WRITE_RECOVERY = 705L;
static const long ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706L;
static const long ERROR_RECEIVE_PARTIAL = 707L;
static const long ERROR_RECEIVE_EXPEDITED = 708L;
static const long ERROR_RECEIVE_PARTIAL_EXPEDITED = 709L;
static const long ERROR_EVENT_DONE = 710L;
static const long ERROR_EVENT_PENDING = 711L;
static const long ERROR_CHECKING_FILE_SYSTEM = 712L;
static const long ERROR_FATAL_APP_EXIT = 713L;
static const long ERROR_PREDEFINED_HANDLE = 714L;
static const long ERROR_WAS_UNLOCKED = 715L;
static const long ERROR_SERVICE_NOTIFICATION = 716L;
static const long ERROR_WAS_LOCKED = 717L;
static const long ERROR_LOG_HARD_ERROR = 718L;
static const long ERROR_ALREADY_WIN32 = 719L;
static const long ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720L;
static const long ERROR_NO_YIELD_PERFORMED = 721L;
static const long ERROR_TIMER_RESUME_IGNORED = 722L;
static const long ERROR_ARBITRATION_UNHANDLED = 723L;
static const long ERROR_CARDBUS_NOT_SUPPORTED = 724L;
static const long ERROR_MP_PROCESSOR_MISMATCH = 725L;
static const long ERROR_HIBERNATED = 726L;
static const long ERROR_RESUME_HIBERNATION = 727L;
static const long ERROR_FIRMWARE_UPDATED = 728L;
static const long ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729L;
static const long ERROR_WAKE_SYSTEM = 730L;
static const long ERROR_WAIT_1 = 731L;
static const long ERROR_WAIT_2 = 732L;
static const long ERROR_WAIT_3 = 733L;
static const long ERROR_WAIT_63 = 734L;
static const long ERROR_ABANDONED_WAIT_0 = 735L;
static const long ERROR_ABANDONED_WAIT_63 = 736L;
static const long ERROR_USER_APC = 737L;
static const long ERROR_KERNEL_APC = 738L;
static const long ERROR_ALERTED = 739L;
static const long ERROR_ELEVATION_REQUIRED = 740L;
static const long ERROR_REPARSE = 741L;
static const long ERROR_OPLOCK_BREAK_IN_PROGRESS = 742L;
static const long ERROR_VOLUME_MOUNTED = 743L;
static const long ERROR_RXACT_COMMITTED = 744L;
static const long ERROR_NOTIFY_CLEANUP = 745L;
static const long ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746L;
static const long ERROR_PAGE_FAULT_TRANSITION = 747L;
static const long ERROR_PAGE_FAULT_DEMAND_ZERO = 748L;
static const long ERROR_PAGE_FAULT_COPY_ON_WRITE = 749L;
static const long ERROR_PAGE_FAULT_GUARD_PAGE = 750L;
static const long ERROR_PAGE_FAULT_PAGING_FILE = 751L;
static const long ERROR_CACHE_PAGE_LOCKED = 752L;
static const long ERROR_CRASH_DUMP = 753L;
static const long ERROR_BUFFER_ALL_ZEROS = 754L;
static const long ERROR_REPARSE_OBJECT = 755L;
static const long ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756L;
static const long ERROR_TRANSLATION_COMPLETE = 757L;
static const long ERROR_NOTHING_TO_TERMINATE = 758L;
static const long ERROR_PROCESS_NOT_IN_JOB = 759L;
static const long ERROR_PROCESS_IN_JOB = 760L;
static const long ERROR_VOLSNAP_HIBERNATE_READY = 761L;
static const long ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762L;
static const long ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763L;
static const long ERROR_INTERRUPT_STILL_CONNECTED = 764L;
static const long ERROR_WAIT_FOR_OPLOCK = 765L;
static const long ERROR_DBG_EXCEPTION_HANDLED = 766L;
static const long ERROR_DBG_CONTINUE = 767L;
static const long ERROR_CALLBACK_POP_STACK = 768L;
static const long ERROR_COMPRESSION_DISABLED = 769L;
static const long ERROR_CANTFETCHBACKWARDS = 770L;
static const long ERROR_CANTSCROLLBACKWARDS = 771L;
static const long ERROR_ROWSNOTRELEASED = 772L;
static const long ERROR_BAD_ACCESSOR_FLAGS = 773L;
static const long ERROR_ERRORS_ENCOUNTERED = 774L;
static const long ERROR_NOT_CAPABLE = 775L;
static const long ERROR_REQUEST_OUT_OF_SEQUENCE = 776L;
static const long ERROR_VERSION_PARSE_ERROR = 777L;
static const long ERROR_BADSTARTPOSITION = 778L;
static const long ERROR_MEMORY_HARDWARE = 779L;
static const long ERROR_DISK_REPAIR_DISABLED = 780L;
static const long ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781L;
static const long ERROR_SYSTEM_POWERSTATE_TRANSITION = 782L;
static const long ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783L;
static const long ERROR_MCA_EXCEPTION = 784L;
static const long ERROR_ACCESS_AUDIT_BY_POLICY = 785L;
static const long ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786L;
static const long ERROR_ABANDON_HIBERFILE = 787L;
static const long ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788L;
static const long ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789L;
static const long ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790L;
static const long ERROR_BAD_MCFG_TABLE = 791L;
static const long ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800L;
static const long ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801L;
static const long ERROR_CANNOT_BREAK_OPLOCK = 802L;
static const long ERROR_OPLOCK_HANDLE_CLOSED = 803L;
static const long ERROR_NO_ACE_CONDITION = 804L;
static const long ERROR_INVALID_ACE_CONDITION = 805L;
static const long ERROR_EA_ACCESS_DENIED = 994L;
static const long ERROR_OPERATION_ABORTED = 995L;
static const long ERROR_IO_INCOMPLETE = 996L;
static const long ERROR_IO_PENDING = 997L;
static const long ERROR_NOACCESS = 998L;
static const long ERROR_SWAPERROR = 999L;
static const long ERROR_STACK_OVERFLOW = 1001L;
static const long ERROR_INVALID_MESSAGE = 1002L;
static const long ERROR_CAN_NOT_COMPLETE = 1003L;
static const long ERROR_INVALID_FLAGS = 1004L;
static const long ERROR_UNRECOGNIZED_VOLUME = 1005L;
static const long ERROR_FILE_INVALID = 1006L;
static const long ERROR_FULLSCREEN_MODE = 1007L;
static const long ERROR_NO_TOKEN = 1008L;
static const long ERROR_BADDB = 1009L;
static const long ERROR_BADKEY = 1010L;
static const long ERROR_CANTOPEN = 1011L;
static const long ERROR_CANTREAD = 1012L;
static const long ERROR_CANTWRITE = 1013L;
static const long ERROR_REGISTRY_RECOVERED = 1014L;
static const long ERROR_REGISTRY_CORRUPT = 1015L;
static const long ERROR_REGISTRY_IO_FAILED = 1016L;
static const long ERROR_NOT_REGISTRY_FILE = 1017L;
static const long ERROR_KEY_DELETED = 1018L;
static const long ERROR_NO_LOG_SPACE = 1019L;
static const long ERROR_KEY_HAS_CHILDREN = 1020L;
static const long ERROR_CHILD_MUST_BE_VOLATILE = 1021L;
static const long ERROR_NOTIFY_ENUM_DIR = 1022L;
static const long ERROR_DEPENDENT_SERVICES_RUNNING = 1051L;
static const long ERROR_INVALID_SERVICE_CONTROL = 1052L;
static const long ERROR_SERVICE_REQUEST_TIMEOUT = 1053L;
static const long ERROR_SERVICE_NO_THREAD = 1054L;
static const long ERROR_SERVICE_DATABASE_LOCKED = 1055L;
static const long ERROR_SERVICE_ALREADY_RUNNING = 1056L;
static const long ERROR_INVALID_SERVICE_ACCOUNT = 1057L;
static const long ERROR_SERVICE_DISABLED = 1058L;
static const long ERROR_CIRCULAR_DEPENDENCY = 1059L;
static const long ERROR_SERVICE_DOES_NOT_EXIST = 1060L;
static const long ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061L;
static const long ERROR_SERVICE_NOT_ACTIVE = 1062L;
static const long ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063L;
static const long ERROR_EXCEPTION_IN_SERVICE = 1064L;
static const long ERROR_DATABASE_DOES_NOT_EXIST = 1065L;
static const long ERROR_SERVICE_SPECIFIC_ERROR = 1066L;
static const long ERROR_PROCESS_ABORTED = 1067L;
static const long ERROR_SERVICE_DEPENDENCY_FAIL = 1068L;
static const long ERROR_SERVICE_LOGON_FAILED = 1069L;
static const long ERROR_SERVICE_START_HANG = 1070L;
static const long ERROR_INVALID_SERVICE_LOCK = 1071L;
static const long ERROR_SERVICE_MARKED_FOR_DELETE = 1072L;
static const long ERROR_SERVICE_EXISTS = 1073L;
static const long ERROR_ALREADY_RUNNING_LKG = 1074L;
static const long ERROR_SERVICE_DEPENDENCY_DELETED = 1075L;
static const long ERROR_BOOT_ALREADY_ACCEPTED = 1076L;
static const long ERROR_SERVICE_NEVER_STARTED = 1077L;
static const long ERROR_DUPLICATE_SERVICE_NAME = 1078L;
static const long ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079L;
static const long ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080L;
static const long ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081L;
static const long ERROR_NO_RECOVERY_PROGRAM = 1082L;
static const long ERROR_SERVICE_NOT_IN_EXE = 1083L;
static const long ERROR_NOT_SAFEBOOT_SERVICE = 1084L;
static const long ERROR_END_OF_MEDIA = 1100L;
static const long ERROR_FILEMARK_DETECTED = 1101L;
static const long ERROR_BEGINNING_OF_MEDIA = 1102L;
static const long ERROR_SETMARK_DETECTED = 1103L;
static const long ERROR_NO_DATA_DETECTED = 1104L;
static const long ERROR_PARTITION_FAILURE = 1105L;
static const long ERROR_INVALID_BLOCK_LENGTH = 1106L;
static const long ERROR_DEVICE_NOT_PARTITIONED = 1107L;
static const long ERROR_UNABLE_TO_LOCK_MEDIA = 1108L;
static const long ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109L;
static const long ERROR_MEDIA_CHANGED = 1110L;
static const long ERROR_BUS_RESET = 1111L;
static const long ERROR_NO_MEDIA_IN_DRIVE = 1112L;
static const long ERROR_NO_UNICODE_TRANSLATION = 1113L;
static const long ERROR_DLL_INIT_FAILED = 1114L;
static const long ERROR_SHUTDOWN_IN_PROGRESS = 1115L;
static const long ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116L;
static const long ERROR_IO_DEVICE = 1117L;
static const long ERROR_SERIAL_NO_DEVICE = 1118L;
static const long ERROR_IRQ_BUSY = 1119L;
static const long ERROR_MORE_WRITES = 1120L;
static const long ERROR_COUNTER_TIMEOUT = 1121L;
static const long ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122L;
static const long ERROR_FLOPPY_WRONG_CYLINDER = 1123L;
static const long ERROR_FLOPPY_UNKNOWN_ERROR = 1124L;
static const long ERROR_FLOPPY_BAD_REGISTERS = 1125L;
static const long ERROR_DISK_RECALIBRATE_FAILED = 1126L;
static const long ERROR_DISK_OPERATION_FAILED = 1127L;
static const long ERROR_DISK_RESET_FAILED = 1128L;
static const long ERROR_EOM_OVERFLOW = 1129L;
static const long ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130L;
static const long ERROR_POSSIBLE_DEADLOCK = 1131L;
static const long ERROR_MAPPED_ALIGNMENT = 1132L;
static const long ERROR_SET_POWER_STATE_VETOED = 1140L;
static const long ERROR_SET_POWER_STATE_FAILED = 1141L;
static const long ERROR_TOO_MANY_LINKS = 1142L;
static const long ERROR_OLD_WIN_VERSION = 1150L;
static const long ERROR_APP_WRONG_OS = 1151L;
static const long ERROR_SINGLE_INSTANCE_APP = 1152L;
static const long ERROR_RMODE_APP = 1153L;
static const long ERROR_INVALID_DLL = 1154L;
static const long ERROR_NO_ASSOCIATION = 1155L;
static const long ERROR_DDE_FAIL = 1156L;
static const long ERROR_DLL_NOT_FOUND = 1157L;
static const long ERROR_NO_MORE_USER_HANDLES = 1158L;
static const long ERROR_MESSAGE_SYNC_ONLY = 1159L;
static const long ERROR_SOURCE_ELEMENT_EMPTY = 1160L;
static const long ERROR_DESTINATION_ELEMENT_FULL = 1161L;
static const long ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162L;
static const long ERROR_MAGAZINE_NOT_PRESENT = 1163L;
static const long ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164L;
static const long ERROR_DEVICE_REQUIRES_CLEANING = 1165L;
static const long ERROR_DEVICE_DOOR_OPEN = 1166L;
static const long ERROR_DEVICE_NOT_CONNECTED = 1167L;
static const long ERROR_NOT_FOUND = 1168L;
static const long ERROR_NO_MATCH = 1169L;
static const long ERROR_SET_NOT_FOUND = 1170L;
static const long ERROR_POINT_NOT_FOUND = 1171L;
static const long ERROR_NO_TRACKING_SERVICE = 1172L;
static const long ERROR_NO_VOLUME_ID = 1173L;
static const long ERROR_UNABLE_TO_REMOVE_REPLACED = 1175L;
static const long ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176L;
static const long ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177L;
static const long ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178L;
static const long ERROR_JOURNAL_NOT_ACTIVE = 1179L;
static const long ERROR_POTENTIAL_FILE_FOUND = 1180L;
static const long ERROR_JOURNAL_ENTRY_DELETED = 1181L;
static const long ERROR_SHUTDOWN_IS_SCHEDULED = 1190L;
static const long ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191L;
static const long ERROR_BAD_DEVICE = 1200L;
static const long ERROR_CONNECTION_UNAVAIL = 1201L;
static const long ERROR_DEVICE_ALREADY_REMEMBERED = 1202L;
static const long ERROR_NO_NET_OR_BAD_PATH = 1203L;
static const long ERROR_BAD_PROVIDER = 1204L;
static const long ERROR_CANNOT_OPEN_PROFILE = 1205L;
static const long ERROR_BAD_PROFILE = 1206L;
static const long ERROR_NOT_CONTAINER = 1207L;
static const long ERROR_EXTENDED_ERROR = 1208L;
static const long ERROR_INVALID_GROUPNAME = 1209L;
static const long ERROR_INVALID_COMPUTERNAME = 1210L;
static const long ERROR_INVALID_EVENTNAME = 1211L;
static const long ERROR_INVALID_DOMAINNAME = 1212L;
static const long ERROR_INVALID_SERVICENAME = 1213L;
static const long ERROR_INVALID_NETNAME = 1214L;
static const long ERROR_INVALID_SHARENAME = 1215L;
static const long ERROR_INVALID_PASSWORDNAME = 1216L;
static const long ERROR_INVALID_MESSAGENAME = 1217L;
static const long ERROR_INVALID_MESSAGEDEST = 1218L;
static const long ERROR_SESSION_CREDENTIAL_CONFLICT = 1219L;
static const long ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220L;
static const long ERROR_DUP_DOMAINNAME = 1221L;
static const long ERROR_NO_NETWORK = 1222L;
static const long ERROR_CANCELLED = 1223L;
static const long ERROR_USER_MAPPED_FILE = 1224L;
static const long ERROR_CONNECTION_REFUSED = 1225L;
static const long ERROR_GRACEFUL_DISCONNECT = 1226L;
static const long ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227L;
static const long ERROR_ADDRESS_NOT_ASSOCIATED = 1228L;
static const long ERROR_CONNECTION_INVALID = 1229L;
static const long ERROR_CONNECTION_ACTIVE = 1230L;
static const long ERROR_NETWORK_UNREACHABLE = 1231L;
static const long ERROR_HOST_UNREACHABLE = 1232L;
static const long ERROR_PROTOCOL_UNREACHABLE = 1233L;
static const long ERROR_PORT_UNREACHABLE = 1234L;
static const long ERROR_REQUEST_ABORTED = 1235L;
static const long ERROR_CONNECTION_ABORTED = 1236L;
static const long ERROR_RETRY = 1237L;
static const long ERROR_CONNECTION_COUNT_LIMIT = 1238L;
static const long ERROR_LOGIN_TIME_RESTRICTION = 1239L;
static const long ERROR_LOGIN_WKSTA_RESTRICTION = 1240L;
static const long ERROR_INCORRECT_ADDRESS = 1241L;
static const long ERROR_ALREADY_REGISTERED = 1242L;
static const long ERROR_SERVICE_NOT_FOUND = 1243L;
static const long ERROR_NOT_AUTHENTICATED = 1244L;
static const long ERROR_NOT_LOGGED_ON = 1245L;
static const long ERROR_CONTINUE = 1246L;
static const long ERROR_ALREADY_INITIALIZED = 1247L;
static const long ERROR_NO_MORE_DEVICES = 1248L;
static const long ERROR_NO_SUCH_SITE = 1249L;
static const long ERROR_DOMAIN_CONTROLLER_EXISTS = 1250L;
static const long ERROR_ONLY_IF_CONNECTED = 1251L;
static const long ERROR_OVERRIDE_NOCHANGES = 1252L;
static const long ERROR_BAD_USER_PROFILE = 1253L;
static const long ERROR_NOT_SUPPORTED_ON_SBS = 1254L;
static const long ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255L;
static const long ERROR_HOST_DOWN = 1256L;
static const long ERROR_NON_ACCOUNT_SID = 1257L;
static const long ERROR_NON_DOMAIN_SID = 1258L;
static const long ERROR_APPHELP_BLOCK = 1259L;
static const long ERROR_ACCESS_DISABLED_BY_POLICY = 1260L;
static const long ERROR_REG_NAT_CONSUMPTION = 1261L;
static const long ERROR_CSCSHARE_OFFLINE = 1262L;
static const long ERROR_PKINIT_FAILURE = 1263L;
static const long ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264L;
static const long ERROR_DOWNGRADE_DETECTED = 1265L;
static const long ERROR_MACHINE_LOCKED = 1271L;
static const long ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273L;
static const long ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274L;
static const long ERROR_DRIVER_BLOCKED = 1275L;
static const long ERROR_INVALID_IMPORT_OF_NON_DLL = 1276L;
static const long ERROR_ACCESS_DISABLED_WEBBLADE = 1277L;
static const long ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278L;
static const long ERROR_RECOVERY_FAILURE = 1279L;
static const long ERROR_ALREADY_FIBER = 1280L;
static const long ERROR_ALREADY_THREAD = 1281L;
static const long ERROR_STACK_BUFFER_OVERRUN = 1282L;
static const long ERROR_PARAMETER_QUOTA_EXCEEDED = 1283L;
static const long ERROR_DEBUGGER_INACTIVE = 1284L;
static const long ERROR_DELAY_LOAD_FAILED = 1285L;
static const long ERROR_VDM_DISALLOWED = 1286L;
static const long ERROR_UNIDENTIFIED_ERROR = 1287L;
static const long ERROR_INVALID_CRUNTIME_PARAMETER = 1288L;
static const long ERROR_BEYOND_VDL = 1289L;
static const long ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290L;
static const long ERROR_DRIVER_PROCESS_TERMINATED = 1291L;
static const long ERROR_IMPLEMENTATION_LIMIT = 1292L;
static const long ERROR_PROCESS_IS_PROTECTED = 1293L;
static const long ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294L;
static const long ERROR_DISK_QUOTA_EXCEEDED = 1295L;
static const long ERROR_CONTENT_BLOCKED = 1296L;
static const long ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297L;
static const long ERROR_APP_HANG = 1298L;
static const long ERROR_INVALID_LABEL = 1299L;
static const long ERROR_NOT_ALL_ASSIGNED = 1300L;
static const long ERROR_SOME_NOT_MAPPED = 1301L;
static const long ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302L;
static const long ERROR_LOCAL_USER_SESSION_KEY = 1303L;
static const long ERROR_NULL_LM_PASSWORD = 1304L;
static const long ERROR_UNKNOWN_REVISION = 1305L;
static const long ERROR_REVISION_MISMATCH = 1306L;
static const long ERROR_INVALID_OWNER = 1307L;
static const long ERROR_INVALID_PRIMARY_GROUP = 1308L;
static const long ERROR_NO_IMPERSONATION_TOKEN = 1309L;
static const long ERROR_CANT_DISABLE_MANDATORY = 1310L;
static const long ERROR_NO_LOGON_SERVERS = 1311L;
static const long ERROR_NO_SUCH_LOGON_SESSION = 1312L;
static const long ERROR_NO_SUCH_PRIVILEGE = 1313L;
static const long ERROR_PRIVILEGE_NOT_HELD = 1314L;
static const long ERROR_INVALID_ACCOUNT_NAME = 1315L;
static const long ERROR_USER_EXISTS = 1316L;
static const long ERROR_NO_SUCH_USER = 1317L;
static const long ERROR_GROUP_EXISTS = 1318L;
static const long ERROR_NO_SUCH_GROUP = 1319L;
static const long ERROR_MEMBER_IN_GROUP = 1320L;
static const long ERROR_MEMBER_NOT_IN_GROUP = 1321L;
static const long ERROR_LAST_ADMIN = 1322L;
static const long ERROR_WRONG_PASSWORD = 1323L;
static const long ERROR_ILL_FORMED_PASSWORD = 1324L;
static const long ERROR_PASSWORD_RESTRICTION = 1325L;
static const long ERROR_LOGON_FAILURE = 1326L;
static const long ERROR_ACCOUNT_RESTRICTION = 1327L;
static const long ERROR_INVALID_LOGON_HOURS = 1328L;
static const long ERROR_INVALID_WORKSTATION = 1329L;
static const long ERROR_PASSWORD_EXPIRED = 1330L;
static const long ERROR_ACCOUNT_DISABLED = 1331L;
static const long ERROR_NONE_MAPPED = 1332L;
static const long ERROR_TOO_MANY_LUIDS_REQUESTED = 1333L;
static const long ERROR_LUIDS_EXHAUSTED = 1334L;
static const long ERROR_INVALID_SUB_AUTHORITY = 1335L;
static const long ERROR_INVALID_ACL = 1336L;
static const long ERROR_INVALID_SID = 1337L;
static const long ERROR_INVALID_SECURITY_DESCR = 1338L;
static const long ERROR_BAD_INHERITANCE_ACL = 1340L;
static const long ERROR_SERVER_DISABLED = 1341L;
static const long ERROR_SERVER_NOT_DISABLED = 1342L;
static const long ERROR_INVALID_ID_AUTHORITY = 1343L;
static const long ERROR_ALLOTTED_SPACE_EXCEEDED = 1344L;
static const long ERROR_INVALID_GROUP_ATTRIBUTES = 1345L;
static const long ERROR_BAD_IMPERSONATION_LEVEL = 1346L;
static const long ERROR_CANT_OPEN_ANONYMOUS = 1347L;
static const long ERROR_BAD_VALIDATION_CLASS = 1348L;
static const long ERROR_BAD_TOKEN_TYPE = 1349L;
static const long ERROR_NO_SECURITY_ON_OBJECT = 1350L;
static const long ERROR_CANT_ACCESS_DOMAIN_INFO = 1351L;
static const long ERROR_INVALID_SERVER_STATE = 1352L;
static const long ERROR_INVALID_DOMAIN_STATE = 1353L;
static const long ERROR_INVALID_DOMAIN_ROLE = 1354L;
static const long ERROR_NO_SUCH_DOMAIN = 1355L;
static const long ERROR_DOMAIN_EXISTS = 1356L;
static const long ERROR_DOMAIN_LIMIT_EXCEEDED = 1357L;
static const long ERROR_INTERNAL_DB_CORRUPTION = 1358L;
static const long ERROR_INTERNAL_ERROR = 1359L;
static const long ERROR_GENERIC_NOT_MAPPED = 1360L;
static const long ERROR_BAD_DESCRIPTOR_FORMAT = 1361L;
static const long ERROR_NOT_LOGON_PROCESS = 1362L;
static const long ERROR_LOGON_SESSION_EXISTS = 1363L;
static const long ERROR_NO_SUCH_PACKAGE = 1364L;
static const long ERROR_BAD_LOGON_SESSION_STATE = 1365L;
static const long ERROR_LOGON_SESSION_COLLISION = 1366L;
static const long ERROR_INVALID_LOGON_TYPE = 1367L;
static const long ERROR_CANNOT_IMPERSONATE = 1368L;
static const long ERROR_RXACT_INVALID_STATE = 1369L;
static const long ERROR_RXACT_COMMIT_FAILURE = 1370L;
static const long ERROR_SPECIAL_ACCOUNT = 1371L;
static const long ERROR_SPECIAL_GROUP = 1372L;
static const long ERROR_SPECIAL_USER = 1373L;
static const long ERROR_MEMBERS_PRIMARY_GROUP = 1374L;
static const long ERROR_TOKEN_ALREADY_IN_USE = 1375L;
static const long ERROR_NO_SUCH_ALIAS = 1376L;
static const long ERROR_MEMBER_NOT_IN_ALIAS = 1377L;
static const long ERROR_MEMBER_IN_ALIAS = 1378L;
static const long ERROR_ALIAS_EXISTS = 1379L;
static const long ERROR_LOGON_NOT_GRANTED = 1380L;
static const long ERROR_TOO_MANY_SECRETS = 1381L;
static const long ERROR_SECRET_TOO_LONG = 1382L;
static const long ERROR_INTERNAL_DB_ERROR = 1383L;
static const long ERROR_TOO_MANY_CONTEXT_IDS = 1384L;
static const long ERROR_LOGON_TYPE_NOT_GRANTED = 1385L;
static const long ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386L;
static const long ERROR_NO_SUCH_MEMBER = 1387L;
static const long ERROR_INVALID_MEMBER = 1388L;
static const long ERROR_TOO_MANY_SIDS = 1389L;
static const long ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390L;
static const long ERROR_NO_INHERITANCE = 1391L;
static const long ERROR_FILE_CORRUPT = 1392L;
static const long ERROR_DISK_CORRUPT = 1393L;
static const long ERROR_NO_USER_SESSION_KEY = 1394L;
static const long ERROR_LICENSE_QUOTA_EXCEEDED = 1395L;
static const long ERROR_WRONG_TARGET_NAME = 1396L;
static const long ERROR_MUTUAL_AUTH_FAILED = 1397L;
static const long ERROR_TIME_SKEW = 1398L;
static const long ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399L;
static const long ERROR_INVALID_WINDOW_HANDLE = 1400L;
static const long ERROR_INVALID_MENU_HANDLE = 1401L;
static const long ERROR_INVALID_CURSOR_HANDLE = 1402L;
static const long ERROR_INVALID_ACCEL_HANDLE = 1403L;
static const long ERROR_INVALID_HOOK_HANDLE = 1404L;
static const long ERROR_INVALID_DWP_HANDLE = 1405L;
static const long ERROR_TLW_WITH_WSCHILD = 1406L;
static const long ERROR_CANNOT_FIND_WND_CLASS = 1407L;
static const long ERROR_WINDOW_OF_OTHER_THREAD = 1408L;
static const long ERROR_HOTKEY_ALREADY_REGISTERED = 1409L;
static const long ERROR_CLASS_ALREADY_EXISTS = 1410L;
static const long ERROR_CLASS_DOES_NOT_EXIST = 1411L;
static const long ERROR_CLASS_HAS_WINDOWS = 1412L;
static const long ERROR_INVALID_INDEX = 1413L;
static const long ERROR_INVALID_ICON_HANDLE = 1414L;
static const long ERROR_PRIVATE_DIALOG_INDEX = 1415L;
static const long ERROR_LISTBOX_ID_NOT_FOUND = 1416L;
static const long ERROR_NO_WILDCARD_CHARACTERS = 1417L;
static const long ERROR_CLIPBOARD_NOT_OPEN = 1418L;
static const long ERROR_HOTKEY_NOT_REGISTERED = 1419L;
static const long ERROR_WINDOW_NOT_DIALOG = 1420L;
static const long ERROR_CONTROL_ID_NOT_FOUND = 1421L;
static const long ERROR_INVALID_COMBOBOX_MESSAGE = 1422L;
static const long ERROR_WINDOW_NOT_COMBOBOX = 1423L;
static const long ERROR_INVALID_EDIT_HEIGHT = 1424L;
static const long ERROR_DC_NOT_FOUND = 1425L;
static const long ERROR_INVALID_HOOK_FILTER = 1426L;
static const long ERROR_INVALID_FILTER_PROC = 1427L;
static const long ERROR_HOOK_NEEDS_HMOD = 1428L;
static const long ERROR_GLOBAL_ONLY_HOOK = 1429L;
static const long ERROR_JOURNAL_HOOK_SET = 1430L;
static const long ERROR_HOOK_NOT_INSTALLED = 1431L;
static const long ERROR_INVALID_LB_MESSAGE = 1432L;
static const long ERROR_SETCOUNT_ON_BAD_LB = 1433L;
static const long ERROR_LB_WITHOUT_TABSTOPS = 1434L;
static const long ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435L;
static const long ERROR_CHILD_WINDOW_MENU = 1436L;
static const long ERROR_NO_SYSTEM_MENU = 1437L;
static const long ERROR_INVALID_MSGBOX_STYLE = 1438L;
static const long ERROR_INVALID_SPI_VALUE = 1439L;
static const long ERROR_SCREEN_ALREADY_LOCKED = 1440L;
static const long ERROR_HWNDS_HAVE_DIFF_PARENT = 1441L;
static const long ERROR_NOT_CHILD_WINDOW = 1442L;
static const long ERROR_INVALID_GW_COMMAND = 1443L;
static const long ERROR_INVALID_THREAD_ID = 1444L;
static const long ERROR_NON_MDICHILD_WINDOW = 1445L;
static const long ERROR_POPUP_ALREADY_ACTIVE = 1446L;
static const long ERROR_NO_SCROLLBARS = 1447L;
static const long ERROR_INVALID_SCROLLBAR_RANGE = 1448L;
static const long ERROR_INVALID_SHOWWIN_COMMAND = 1449L;
static const long ERROR_NO_SYSTEM_RESOURCES = 1450L;
static const long ERROR_NONPAGED_SYSTEM_RESOURCES = 1451L;
static const long ERROR_PAGED_SYSTEM_RESOURCES = 1452L;
static const long ERROR_WORKING_SET_QUOTA = 1453L;
static const long ERROR_PAGEFILE_QUOTA = 1454L;
static const long ERROR_COMMITMENT_LIMIT = 1455L;
static const long ERROR_MENU_ITEM_NOT_FOUND = 1456L;
static const long ERROR_INVALID_KEYBOARD_HANDLE = 1457L;
static const long ERROR_HOOK_TYPE_NOT_ALLOWED = 1458L;
static const long ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459L;
static const long ERROR_TIMEOUT = 1460L;
static const long ERROR_INVALID_MONITOR_HANDLE = 1461L;
static const long ERROR_INCORRECT_SIZE = 1462L;
static const long ERROR_SYMLINK_CLASS_DISABLED = 1463L;
static const long ERROR_SYMLINK_NOT_SUPPORTED = 1464L;
static const long ERROR_XML_PARSE_ERROR = 1465L;
static const long ERROR_XMLDSIG_ERROR = 1466L;
static const long ERROR_RESTART_APPLICATION = 1467L;
static const long ERROR_WRONG_COMPARTMENT = 1468L;
static const long ERROR_AUTHIP_FAILURE = 1469L;
static const long ERROR_NO_NVRAM_RESOURCES = 1470L;
static const long ERROR_EVENTLOG_FILE_CORRUPT = 1500L;
static const long ERROR_EVENTLOG_CANT_START = 1501L;
static const long ERROR_LOG_FILE_FULL = 1502L;
static const long ERROR_EVENTLOG_FILE_CHANGED = 1503L;
static const long ERROR_INVALID_TASK_NAME = 1550L;
static const long ERROR_INVALID_TASK_INDEX = 1551L;
static const long ERROR_THREAD_ALREADY_IN_TASK = 1552L;
static const long ERROR_INSTALL_SERVICE_FAILURE = 1601L;
static const long ERROR_INSTALL_USEREXIT = 1602L;
static const long ERROR_INSTALL_FAILURE = 1603L;
static const long ERROR_INSTALL_SUSPEND = 1604L;
static const long ERROR_UNKNOWN_PRODUCT = 1605L;
static const long ERROR_UNKNOWN_FEATURE = 1606L;
static const long ERROR_UNKNOWN_COMPONENT = 1607L;
static const long ERROR_UNKNOWN_PROPERTY = 1608L;
static const long ERROR_INVALID_HANDLE_STATE = 1609L;
static const long ERROR_BAD_CONFIGURATION = 1610L;
static const long ERROR_INDEX_ABSENT = 1611L;
static const long ERROR_INSTALL_SOURCE_ABSENT = 1612L;
static const long ERROR_INSTALL_PACKAGE_VERSION = 1613L;
static const long ERROR_PRODUCT_UNINSTALLED = 1614L;
static const long ERROR_BAD_QUERY_SYNTAX = 1615L;
static const long ERROR_INVALID_FIELD = 1616L;
static const long ERROR_DEVICE_REMOVED = 1617L;
static const long ERROR_INSTALL_ALREADY_RUNNING = 1618L;
static const long ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619L;
static const long ERROR_INSTALL_PACKAGE_INVALID = 1620L;
static const long ERROR_INSTALL_UI_FAILURE = 1621L;
static const long ERROR_INSTALL_LOG_FAILURE = 1622L;
static const long ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623L;
static const long ERROR_INSTALL_TRANSFORM_FAILURE = 1624L;
static const long ERROR_INSTALL_PACKAGE_REJECTED = 1625L;
static const long ERROR_FUNCTION_NOT_CALLED = 1626L;
static const long ERROR_FUNCTION_FAILED = 1627L;
static const long ERROR_INVALID_TABLE = 1628L;
static const long ERROR_DATATYPE_MISMATCH = 1629L;
static const long ERROR_UNSUPPORTED_TYPE = 1630L;
static const long ERROR_CREATE_FAILED = 1631L;
static const long ERROR_INSTALL_TEMP_UNWRITABLE = 1632L;
static const long ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633L;
static const long ERROR_INSTALL_NOTUSED = 1634L;
static const long ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635L;
static const long ERROR_PATCH_PACKAGE_INVALID = 1636L;
static const long ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637L;
static const long ERROR_PRODUCT_VERSION = 1638L;
static const long ERROR_INVALID_COMMAND_LINE = 1639L;
static const long ERROR_INSTALL_REMOTE_DISALLOWED = 1640L;
static const long ERROR_SUCCESS_REBOOT_INITIATED = 1641L;
static const long ERROR_PATCH_TARGET_NOT_FOUND = 1642L;
static const long ERROR_PATCH_PACKAGE_REJECTED = 1643L;
static const long ERROR_INSTALL_TRANSFORM_REJECTED = 1644L;
static const long ERROR_INSTALL_REMOTE_PROHIBITED = 1645L;
static const long ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646L;
static const long ERROR_UNKNOWN_PATCH = 1647L;
static const long ERROR_PATCH_NO_SEQUENCE = 1648L;
static const long ERROR_PATCH_REMOVAL_DISALLOWED = 1649L;
static const long ERROR_INVALID_PATCH_XML = 1650L;
static const long ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651L;
static const long ERROR_INSTALL_SERVICE_SAFEBOOT = 1652L;
static const long ERROR_FAIL_FAST_EXCEPTION = 1653L;
static const long RPC_S_INVALID_STRING_BINDING = 1700L;
static const long RPC_S_WRONG_KIND_OF_BINDING = 1701L;
static const long RPC_S_INVALID_BINDING = 1702L;
static const long RPC_S_PROTSEQ_NOT_SUPPORTED = 1703L;
static const long RPC_S_INVALID_RPC_PROTSEQ = 1704L;
static const long RPC_S_INVALID_STRING_UUID = 1705L;
static const long RPC_S_INVALID_ENDPOINT_FORMAT = 1706L;
static const long RPC_S_INVALID_NET_ADDR = 1707L;
static const long RPC_S_NO_ENDPOINT_FOUND = 1708L;
static const long RPC_S_INVALID_TIMEOUT = 1709L;
static const long RPC_S_OBJECT_NOT_FOUND = 1710L;
static const long RPC_S_ALREADY_REGISTERED = 1711L;
static const long RPC_S_TYPE_ALREADY_REGISTERED = 1712L;
static const long RPC_S_ALREADY_LISTENING = 1713L;
static const long RPC_S_NO_PROTSEQS_REGISTERED = 1714L;
static const long RPC_S_NOT_LISTENING = 1715L;
static const long RPC_S_UNKNOWN_MGR_TYPE = 1716L;
static const long RPC_S_UNKNOWN_IF = 1717L;
static const long RPC_S_NO_BINDINGS = 1718L;
static const long RPC_S_NO_PROTSEQS = 1719L;
static const long RPC_S_CANT_CREATE_ENDPOINT = 1720L;
static const long RPC_S_OUT_OF_RESOURCES = 1721L;
static const long RPC_S_SERVER_UNAVAILABLE = 1722L;
static const long RPC_S_SERVER_TOO_BUSY = 1723L;
static const long RPC_S_INVALID_NETWORK_OPTIONS = 1724L;
static const long RPC_S_NO_CALL_ACTIVE = 1725L;
static const long RPC_S_CALL_FAILED = 1726L;
static const long RPC_S_CALL_FAILED_DNE = 1727L;
static const long RPC_S_PROTOCOL_ERROR = 1728L;
static const long RPC_S_PROXY_ACCESS_DENIED = 1729L;
static const long RPC_S_UNSUPPORTED_TRANS_SYN = 1730L;
static const long RPC_S_UNSUPPORTED_TYPE = 1732L;
static const long RPC_S_INVALID_TAG = 1733L;
static const long RPC_S_INVALID_BOUND = 1734L;
static const long RPC_S_NO_ENTRY_NAME = 1735L;
static const long RPC_S_INVALID_NAME_SYNTAX = 1736L;
static const long RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737L;
static const long RPC_S_UUID_NO_ADDRESS = 1739L;
static const long RPC_S_DUPLICATE_ENDPOINT = 1740L;
static const long RPC_S_UNKNOWN_AUTHN_TYPE = 1741L;
static const long RPC_S_MAX_CALLS_TOO_SMALL = 1742L;
static const long RPC_S_STRING_TOO_LONG = 1743L;
static const long RPC_S_PROTSEQ_NOT_FOUND = 1744L;
static const long RPC_S_PROCNUM_OUT_OF_RANGE = 1745L;
static const long RPC_S_BINDING_HAS_NO_AUTH = 1746L;
static const long RPC_S_UNKNOWN_AUTHN_SERVICE = 1747L;
static const long RPC_S_UNKNOWN_AUTHN_LEVEL = 1748L;
static const long RPC_S_INVALID_AUTH_IDENTITY = 1749L;
static const long RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750L;
static const long EPT_S_INVALID_ENTRY = 1751L;
static const long EPT_S_CANT_PERFORM_OP = 1752L;
static const long EPT_S_NOT_REGISTERED = 1753L;
static const long RPC_S_NOTHING_TO_EXPORT = 1754L;
static const long RPC_S_INCOMPLETE_NAME = 1755L;
static const long RPC_S_INVALID_VERS_OPTION = 1756L;
static const long RPC_S_NO_MORE_MEMBERS = 1757L;
static const long RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758L;
static const long RPC_S_INTERFACE_NOT_FOUND = 1759L;
static const long RPC_S_ENTRY_ALREADY_EXISTS = 1760L;
static const long RPC_S_ENTRY_NOT_FOUND = 1761L;
static const long RPC_S_NAME_SERVICE_UNAVAILABLE = 1762L;
static const long RPC_S_INVALID_NAF_ID = 1763L;
static const long RPC_S_CANNOT_SUPPORT = 1764L;
static const long RPC_S_NO_CONTEXT_AVAILABLE = 1765L;
static const long RPC_S_INTERNAL_ERROR = 1766L;
static const long RPC_S_ZERO_DIVIDE = 1767L;
static const long RPC_S_ADDRESS_ERROR = 1768L;
static const long RPC_S_FP_DIV_ZERO = 1769L;
static const long RPC_S_FP_UNDERFLOW = 1770L;
static const long RPC_S_FP_OVERFLOW = 1771L;
static const long RPC_X_NO_MORE_ENTRIES = 1772L;
static const long RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773L;
static const long RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774L;
static const long RPC_X_SS_IN_NULL_CONTEXT = 1775L;
static const long RPC_X_SS_CONTEXT_DAMAGED = 1777L;
static const long RPC_X_SS_HANDLES_MISMATCH = 1778L;
static const long RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779L;
static const long RPC_X_NULL_REF_POINTER = 1780L;
static const long RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781L;
static const long RPC_X_BYTE_COUNT_TOO_SMALL = 1782L;
static const long RPC_X_BAD_STUB_DATA = 1783L;
static const long ERROR_INVALID_USER_BUFFER = 1784L;
static const long ERROR_UNRECOGNIZED_MEDIA = 1785L;
static const long ERROR_NO_TRUST_LSA_SECRET = 1786L;
static const long ERROR_NO_TRUST_SAM_ACCOUNT = 1787L;
static const long ERROR_TRUSTED_DOMAIN_FAILURE = 1788L;
static const long ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789L;
static const long ERROR_TRUST_FAILURE = 1790L;
static const long RPC_S_CALL_IN_PROGRESS = 1791L;
static const long ERROR_NETLOGON_NOT_STARTED = 1792L;
static const long ERROR_ACCOUNT_EXPIRED = 1793L;
static const long ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794L;
static const long ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795L;
static const long ERROR_UNKNOWN_PORT = 1796L;
static const long ERROR_UNKNOWN_PRINTER_DRIVER = 1797L;
static const long ERROR_UNKNOWN_PRINTPROCESSOR = 1798L;
static const long ERROR_INVALID_SEPARATOR_FILE = 1799L;
static const long ERROR_INVALID_PRIORITY = 1800L;
static const long ERROR_INVALID_PRINTER_NAME = 1801L;
static const long ERROR_PRINTER_ALREADY_EXISTS = 1802L;
static const long ERROR_INVALID_PRINTER_COMMAND = 1803L;
static const long ERROR_INVALID_DATATYPE = 1804L;
static const long ERROR_INVALID_ENVIRONMENT = 1805L;
static const long RPC_S_NO_MORE_BINDINGS = 1806L;
static const long ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807L;
static const long ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808L;
static const long ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809L;
static const long ERROR_DOMAIN_TRUST_INCONSISTENT = 1810L;
static const long ERROR_SERVER_HAS_OPEN_HANDLES = 1811L;
static const long ERROR_RESOURCE_DATA_NOT_FOUND = 1812L;
static const long ERROR_RESOURCE_TYPE_NOT_FOUND = 1813L;
static const long ERROR_RESOURCE_NAME_NOT_FOUND = 1814L;
static const long ERROR_RESOURCE_LANG_NOT_FOUND = 1815L;
static const long ERROR_NOT_ENOUGH_QUOTA = 1816L;
static const long RPC_S_NO_INTERFACES = 1817L;
static const long RPC_S_CALL_CANCELLED = 1818L;
static const long RPC_S_BINDING_INCOMPLETE = 1819L;
static const long RPC_S_COMM_FAILURE = 1820L;
static const long RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821L;
static const long RPC_S_NO_PRINC_NAME = 1822L;
static const long RPC_S_NOT_RPC_ERROR = 1823L;
static const long RPC_S_UUID_LOCAL_ONLY = 1824L;
static const long RPC_S_SEC_PKG_ERROR = 1825L;
static const long RPC_S_NOT_CANCELLED = 1826L;
static const long RPC_X_INVALID_ES_ACTION = 1827L;
static const long RPC_X_WRONG_ES_VERSION = 1828L;
static const long RPC_X_WRONG_STUB_VERSION = 1829L;
static const long RPC_X_INVALID_PIPE_OBJECT = 1830L;
static const long RPC_X_WRONG_PIPE_ORDER = 1831L;
static const long RPC_X_WRONG_PIPE_VERSION = 1832L;
static const long RPC_S_COOKIE_AUTH_FAILED = 1833L;
static const long RPC_S_GROUP_MEMBER_NOT_FOUND = 1898L;
static const long EPT_S_CANT_CREATE = 1899L;
static const long RPC_S_INVALID_OBJECT = 1900L;
static const long ERROR_INVALID_TIME = 1901L;
static const long ERROR_INVALID_FORM_NAME = 1902L;
static const long ERROR_INVALID_FORM_SIZE = 1903L;
static const long ERROR_ALREADY_WAITING = 1904L;
static const long ERROR_PRINTER_DELETED = 1905L;
static const long ERROR_INVALID_PRINTER_STATE = 1906L;
static const long ERROR_PASSWORD_MUST_CHANGE = 1907L;
static const long ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908L;
static const long ERROR_ACCOUNT_LOCKED_OUT = 1909L;
static const long OR_INVALID_OXID = 1910L;
static const long OR_INVALID_OID = 1911L;
static const long OR_INVALID_SET = 1912L;
static const long RPC_S_SEND_INCOMPLETE = 1913L;
static const long RPC_S_INVALID_ASYNC_HANDLE = 1914L;
static const long RPC_S_INVALID_ASYNC_CALL = 1915L;
static const long RPC_X_PIPE_CLOSED = 1916L;
static const long RPC_X_PIPE_DISCIPLINE_ERROR = 1917L;
static const long RPC_X_PIPE_EMPTY = 1918L;
static const long ERROR_NO_SITENAME = 1919L;
static const long ERROR_CANT_ACCESS_FILE = 1920L;
static const long ERROR_CANT_RESOLVE_FILENAME = 1921L;
static const long RPC_S_ENTRY_TYPE_MISMATCH = 1922L;
static const long RPC_S_NOT_ALL_OBJS_EXPORTED = 1923L;
static const long RPC_S_INTERFACE_NOT_EXPORTED = 1924L;
static const long RPC_S_PROFILE_NOT_ADDED = 1925L;
static const long RPC_S_PRF_ELT_NOT_ADDED = 1926L;
static const long RPC_S_PRF_ELT_NOT_REMOVED = 1927L;
static const long RPC_S_GRP_ELT_NOT_ADDED = 1928L;
static const long RPC_S_GRP_ELT_NOT_REMOVED = 1929L;
static const long ERROR_KM_DRIVER_BLOCKED = 1930L;
static const long ERROR_CONTEXT_EXPIRED = 1931L;
static const long ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932L;
static const long ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933L;
static const long ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934L;
static const long ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935L;
static const long ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936L;
static const long ERROR_NTLM_BLOCKED = 1937L;
static const long ERROR_INVALID_PIXEL_FORMAT = 2000L;
static const long ERROR_BAD_DRIVER = 2001L;
static const long ERROR_INVALID_WINDOW_STYLE = 2002L;
static const long ERROR_METAFILE_NOT_SUPPORTED = 2003L;
static const long ERROR_TRANSFORM_NOT_SUPPORTED = 2004L;
static const long ERROR_CLIPPING_NOT_SUPPORTED = 2005L;
static const long ERROR_INVALID_CMM = 2010L;
static const long ERROR_INVALID_PROFILE = 2011L;
static const long ERROR_TAG_NOT_FOUND = 2012L;
static const long ERROR_TAG_NOT_PRESENT = 2013L;
static const long ERROR_DUPLICATE_TAG = 2014L;
static const long ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015L;
static const long ERROR_PROFILE_NOT_FOUND = 2016L;
static const long ERROR_INVALID_COLORSPACE = 2017L;
static const long ERROR_ICM_NOT_ENABLED = 2018L;
static const long ERROR_DELETING_ICM_XFORM = 2019L;
static const long ERROR_INVALID_TRANSFORM = 2020L;
static const long ERROR_COLORSPACE_MISMATCH = 2021L;
static const long ERROR_INVALID_COLORINDEX = 2022L;
static const long ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023L;
static const long ERROR_CONNECTED_OTHER_PASSWORD = 2108L;
static const long ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109L;
static const long ERROR_BAD_USERNAME = 2202L;
static const long ERROR_NOT_CONNECTED = 2250L;
static const long ERROR_OPEN_FILES = 2401L;
static const long ERROR_ACTIVE_CONNECTIONS = 2402L;
static const long ERROR_DEVICE_IN_USE = 2404L;
static const long ERROR_UNKNOWN_PRINT_MONITOR = 3000L;
static const long ERROR_PRINTER_DRIVER_IN_USE = 3001L;
static const long ERROR_SPOOL_FILE_NOT_FOUND = 3002L;
static const long ERROR_SPL_NO_STARTDOC = 3003L;
static const long ERROR_SPL_NO_ADDJOB = 3004L;
static const long ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005L;
static const long ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006L;
static const long ERROR_INVALID_PRINT_MONITOR = 3007L;
static const long ERROR_PRINT_MONITOR_IN_USE = 3008L;
static const long ERROR_PRINTER_HAS_JOBS_QUEUED = 3009L;
static const long ERROR_SUCCESS_REBOOT_REQUIRED = 3010L;
static const long ERROR_SUCCESS_RESTART_REQUIRED = 3011L;
static const long ERROR_PRINTER_NOT_FOUND = 3012L;
static const long ERROR_PRINTER_DRIVER_WARNED = 3013L;
static const long ERROR_PRINTER_DRIVER_BLOCKED = 3014L;
static const long ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015L;
static const long ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016L;
static const long ERROR_FAIL_REBOOT_REQUIRED = 3017L;
static const long ERROR_FAIL_REBOOT_INITIATED = 3018L;
static const long ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019L;
static const long ERROR_PRINT_JOB_RESTART_REQUIRED = 3020L;
static const long ERROR_IO_REISSUE_AS_CACHED = 3950L;
static const long ERROR_WINS_INTERNAL = 4000L;
static const long ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001L;
static const long ERROR_STATIC_INIT = 4002L;
static const long ERROR_INC_BACKUP = 4003L;
static const long ERROR_FULL_BACKUP = 4004L;
static const long ERROR_REC_NON_EXISTENT = 4005L;
static const long ERROR_RPL_NOT_ALLOWED = 4006L;
static const long PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = 4050L;
static const long PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = 4051L;
static const long PEERDIST_ERROR_MISSING_DATA = 4052L;
static const long PEERDIST_ERROR_NO_MORE = 4053L;
static const long PEERDIST_ERROR_NOT_INITIALIZED = 4054L;
static const long PEERDIST_ERROR_ALREADY_INITIALIZED = 4055L;
static const long PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = 4056L;
static const long PEERDIST_ERROR_INVALIDATED = 4057L;
static const long PEERDIST_ERROR_ALREADY_EXISTS = 4058L;
static const long PEERDIST_ERROR_OPERATION_NOTFOUND = 4059L;
static const long PEERDIST_ERROR_ALREADY_COMPLETED = 4060L;
static const long PEERDIST_ERROR_OUT_OF_BOUNDS = 4061L;
static const long PEERDIST_ERROR_VERSION_UNSUPPORTED = 4062L;
static const long PEERDIST_ERROR_INVALID_CONFIGURATION = 4063L;
static const long PEERDIST_ERROR_NOT_LICENSED = 4064L;
static const long PEERDIST_ERROR_SERVICE_UNAVAILABLE = 4065L;
static const long ERROR_DHCP_ADDRESS_CONFLICT = 4100L;
static const long ERROR_WMI_GUID_NOT_FOUND = 4200L;
static const long ERROR_WMI_INSTANCE_NOT_FOUND = 4201L;
static const long ERROR_WMI_ITEMID_NOT_FOUND = 4202L;
static const long ERROR_WMI_TRY_AGAIN = 4203L;
static const long ERROR_WMI_DP_NOT_FOUND = 4204L;
static const long ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205L;
static const long ERROR_WMI_ALREADY_ENABLED = 4206L;
static const long ERROR_WMI_GUID_DISCONNECTED = 4207L;
static const long ERROR_WMI_SERVER_UNAVAILABLE = 4208L;
static const long ERROR_WMI_DP_FAILED = 4209L;
static const long ERROR_WMI_INVALID_MOF = 4210L;
static const long ERROR_WMI_INVALID_REGINFO = 4211L;
static const long ERROR_WMI_ALREADY_DISABLED = 4212L;
static const long ERROR_WMI_READ_ONLY = 4213L;
static const long ERROR_WMI_SET_FAILURE = 4214L;
static const long ERROR_INVALID_MEDIA = 4300L;
static const long ERROR_INVALID_LIBRARY = 4301L;
static const long ERROR_INVALID_MEDIA_POOL = 4302L;
static const long ERROR_DRIVE_MEDIA_MISMATCH = 4303L;
static const long ERROR_MEDIA_OFFLINE = 4304L;
static const long ERROR_LIBRARY_OFFLINE = 4305L;
static const long ERROR_EMPTY = 4306L;
static const long ERROR_NOT_EMPTY = 4307L;
static const long ERROR_MEDIA_UNAVAILABLE = 4308L;
static const long ERROR_RESOURCE_DISABLED = 4309L;
static const long ERROR_INVALID_CLEANER = 4310L;
static const long ERROR_UNABLE_TO_CLEAN = 4311L;
static const long ERROR_OBJECT_NOT_FOUND = 4312L;
static const long ERROR_DATABASE_FAILURE = 4313L;
static const long ERROR_DATABASE_FULL = 4314L;
static const long ERROR_MEDIA_INCOMPATIBLE = 4315L;
static const long ERROR_RESOURCE_NOT_PRESENT = 4316L;
static const long ERROR_INVALID_OPERATION = 4317L;
static const long ERROR_MEDIA_NOT_AVAILABLE = 4318L;
static const long ERROR_DEVICE_NOT_AVAILABLE = 4319L;
static const long ERROR_REQUEST_REFUSED = 4320L;
static const long ERROR_INVALID_DRIVE_OBJECT = 4321L;
static const long ERROR_LIBRARY_FULL = 4322L;
static const long ERROR_MEDIUM_NOT_ACCESSIBLE = 4323L;
static const long ERROR_UNABLE_TO_LOAD_MEDIUM = 4324L;
static const long ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325L;
static const long ERROR_UNABLE_TO_INVENTORY_SLOT = 4326L;
static const long ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327L;
static const long ERROR_TRANSPORT_FULL = 4328L;
static const long ERROR_CONTROLLING_IEPORT = 4329L;
static const long ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330L;
static const long ERROR_CLEANER_SLOT_SET = 4331L;
static const long ERROR_CLEANER_SLOT_NOT_SET = 4332L;
static const long ERROR_CLEANER_CARTRIDGE_SPENT = 4333L;
static const long ERROR_UNEXPECTED_OMID = 4334L;
static const long ERROR_CANT_DELETE_LAST_ITEM = 4335L;
static const long ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336L;
static const long ERROR_VOLUME_CONTAINS_SYS_FILES = 4337L;
static const long ERROR_INDIGENOUS_TYPE = 4338L;
static const long ERROR_NO_SUPPORTING_DRIVES = 4339L;
static const long ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340L;
static const long ERROR_IEPORT_FULL = 4341L;
static const long ERROR_FILE_OFFLINE = 4350L;
static const long ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351L;
static const long ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352L;
static const long ERROR_NOT_A_REPARSE_POINT = 4390L;
static const long ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391L;
static const long ERROR_INVALID_REPARSE_DATA = 4392L;
static const long ERROR_REPARSE_TAG_INVALID = 4393L;
static const long ERROR_REPARSE_TAG_MISMATCH = 4394L;
static const long ERROR_VOLUME_NOT_SIS_ENABLED = 4500L;
static const long ERROR_DEPENDENT_RESOURCE_EXISTS = 5001L;
static const long ERROR_DEPENDENCY_NOT_FOUND = 5002L;
static const long ERROR_DEPENDENCY_ALREADY_EXISTS = 5003L;
static const long ERROR_RESOURCE_NOT_ONLINE = 5004L;
static const long ERROR_HOST_NODE_NOT_AVAILABLE = 5005L;
static const long ERROR_RESOURCE_NOT_AVAILABLE = 5006L;
static const long ERROR_RESOURCE_NOT_FOUND = 5007L;
static const long ERROR_SHUTDOWN_CLUSTER = 5008L;
static const long ERROR_CANT_EVICT_ACTIVE_NODE = 5009L;
static const long ERROR_OBJECT_ALREADY_EXISTS = 5010L;
static const long ERROR_OBJECT_IN_LIST = 5011L;
static const long ERROR_GROUP_NOT_AVAILABLE = 5012L;
static const long ERROR_GROUP_NOT_FOUND = 5013L;
static const long ERROR_GROUP_NOT_ONLINE = 5014L;
static const long ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015L;
static const long ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016L;
static const long ERROR_RESMON_CREATE_FAILED = 5017L;
static const long ERROR_RESMON_ONLINE_FAILED = 5018L;
static const long ERROR_RESOURCE_ONLINE = 5019L;
static const long ERROR_QUORUM_RESOURCE = 5020L;
static const long ERROR_NOT_QUORUM_CAPABLE = 5021L;
static const long ERROR_CLUSTER_SHUTTING_DOWN = 5022L;
static const long ERROR_INVALID_STATE = 5023L;
static const long ERROR_RESOURCE_PROPERTIES_STORED = 5024L;
static const long ERROR_NOT_QUORUM_CLASS = 5025L;
static const long ERROR_CORE_RESOURCE = 5026L;
static const long ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027L;
static const long ERROR_QUORUMLOG_OPEN_FAILED = 5028L;
static const long ERROR_CLUSTERLOG_CORRUPT = 5029L;
static const long ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030L;
static const long ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031L;
static const long ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032L;
static const long ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033L;
static const long ERROR_QUORUM_OWNER_ALIVE = 5034L;
static const long ERROR_NETWORK_NOT_AVAILABLE = 5035L;
static const long ERROR_NODE_NOT_AVAILABLE = 5036L;
static const long ERROR_ALL_NODES_NOT_AVAILABLE = 5037L;
static const long ERROR_RESOURCE_FAILED = 5038L;
static const long ERROR_CLUSTER_INVALID_NODE = 5039L;
static const long ERROR_CLUSTER_NODE_EXISTS = 5040L;
static const long ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041L;
static const long ERROR_CLUSTER_NODE_NOT_FOUND = 5042L;
static const long ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043L;
static const long ERROR_CLUSTER_NETWORK_EXISTS = 5044L;
static const long ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045L;
static const long ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046L;
static const long ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047L;
static const long ERROR_CLUSTER_INVALID_REQUEST = 5048L;
static const long ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049L;
static const long ERROR_CLUSTER_NODE_DOWN = 5050L;
static const long ERROR_CLUSTER_NODE_UNREACHABLE = 5051L;
static const long ERROR_CLUSTER_NODE_NOT_MEMBER = 5052L;
static const long ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053L;
static const long ERROR_CLUSTER_INVALID_NETWORK = 5054L;
static const long ERROR_CLUSTER_NODE_UP = 5056L;
static const long ERROR_CLUSTER_IPADDR_IN_USE = 5057L;
static const long ERROR_CLUSTER_NODE_NOT_PAUSED = 5058L;
static const long ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059L;
static const long ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060L;
static const long ERROR_CLUSTER_NODE_ALREADY_UP = 5061L;
static const long ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062L;
static const long ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063L;
static const long ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064L;
static const long ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065L;
static const long ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066L;
static const long ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067L;
static const long ERROR_INVALID_OPERATION_ON_QUORUM = 5068L;
static const long ERROR_DEPENDENCY_NOT_ALLOWED = 5069L;
static const long ERROR_CLUSTER_NODE_PAUSED = 5070L;
static const long ERROR_NODE_CANT_HOST_RESOURCE = 5071L;
static const long ERROR_CLUSTER_NODE_NOT_READY = 5072L;
static const long ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073L;
static const long ERROR_CLUSTER_JOIN_ABORTED = 5074L;
static const long ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075L;
static const long ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076L;
static const long ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077L;
static const long ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078L;
static const long ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079L;
static const long ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080L;
static const long ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081L;
static const long ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082L;
static const long ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083L;
static const long ERROR_RESMON_INVALID_STATE = 5084L;
static const long ERROR_CLUSTER_GUM_NOT_LOCKER = 5085L;
static const long ERROR_QUORUM_DISK_NOT_FOUND = 5086L;
static const long ERROR_DATABASE_BACKUP_CORRUPT = 5087L;
static const long ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088L;
static const long ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089L;
static const long ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890L;
static const long ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891L;
static const long ERROR_CLUSTER_MEMBERSHIP_HALT = 5892L;
static const long ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893L;
static const long ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894L;
static const long ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895L;
static const long ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896L;
static const long ERROR_CLUSTER_PARAMETER_MISMATCH = 5897L;
static const long ERROR_NODE_CANNOT_BE_CLUSTERED = 5898L;
static const long ERROR_CLUSTER_WRONG_OS_VERSION = 5899L;
static const long ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900L;
static const long ERROR_CLUSCFG_ALREADY_COMMITTED = 5901L;
static const long ERROR_CLUSCFG_ROLLBACK_FAILED = 5902L;
static const long ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903L;
static const long ERROR_CLUSTER_OLD_VERSION = 5904L;
static const long ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905L;
static const long ERROR_CLUSTER_NO_NET_ADAPTERS = 5906L;
static const long ERROR_CLUSTER_POISONED = 5907L;
static const long ERROR_CLUSTER_GROUP_MOVING = 5908L;
static const long ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909L;
static const long ERROR_RESOURCE_CALL_TIMED_OUT = 5910L;
static const long ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911L;
static const long ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912L;
static const long ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913L;
static const long ERROR_CLUSTER_PARTIAL_SEND = 5914L;
static const long ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915L;
static const long ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916L;
static const long ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917L;
static const long ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918L;
static const long ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919L;
static const long ERROR_CLUSTER_NULL_DATA = 5920L;
static const long ERROR_CLUSTER_PARTIAL_READ = 5921L;
static const long ERROR_CLUSTER_PARTIAL_WRITE = 5922L;
static const long ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923L;
static const long ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924L;
static const long ERROR_CLUSTER_NO_QUORUM = 5925L;
static const long ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926L;
static const long ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927L;
static const long ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928L;
static const long ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929L;
static const long ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930L;
static const long ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931L;
static const long ERROR_CLUSTER_NOT_INSTALLED = 5932L;
static const long ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933L;
static const long ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934L;
static const long ERROR_CLUSTER_TOO_MANY_NODES = 5935L;
static const long ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936L;
static const long ERROR_NONCORE_GROUPS_FOUND = 5937L;
static const long ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938L;
static const long ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939L;
static const long ERROR_CLUSTER_SINGLETON_RESOURCE = 5940L;
static const long ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941L;
static const long ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942L;
static const long ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943L;
static const long ERROR_CLUSTER_GROUP_BUSY = 5944L;
static const long ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945L;
static const long ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946L;
static const long ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947L;
static const long ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948L;
static const long ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949L;
static const long ERROR_NON_CSV_PATH = 5950L;
static const long ERROR_CSV_VOLUME_NOT_LOCAL = 5951L;
static const long ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952L;
static const long ERROR_ENCRYPTION_FAILED = 6000L;
static const long ERROR_DECRYPTION_FAILED = 6001L;
static const long ERROR_FILE_ENCRYPTED = 6002L;
static const long ERROR_NO_RECOVERY_POLICY = 6003L;
static const long ERROR_NO_EFS = 6004L;
static const long ERROR_WRONG_EFS = 6005L;
static const long ERROR_NO_USER_KEYS = 6006L;
static const long ERROR_FILE_NOT_ENCRYPTED = 6007L;
static const long ERROR_NOT_EXPORT_FORMAT = 6008L;
static const long ERROR_FILE_READ_ONLY = 6009L;
static const long ERROR_DIR_EFS_DISALLOWED = 6010L;
static const long ERROR_EFS_SERVER_NOT_TRUSTED = 6011L;
static const long ERROR_BAD_RECOVERY_POLICY = 6012L;
static const long ERROR_EFS_ALG_BLOB_TOO_BIG = 6013L;
static const long ERROR_VOLUME_NOT_SUPPORT_EFS = 6014L;
static const long ERROR_EFS_DISABLED = 6015L;
static const long ERROR_EFS_VERSION_NOT_SUPPORT = 6016L;
static const long ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017L;
static const long ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018L;
static const long ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019L;
static const long ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020L;
static const long ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021L;
static const long ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022L;
static const long ERROR_NO_BROWSER_SERVERS_FOUND = 6118L;
static const long SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200L;
static const long ERROR_LOG_SECTOR_INVALID = 6600L;
static const long ERROR_LOG_SECTOR_PARITY_INVALID = 6601L;
static const long ERROR_LOG_SECTOR_REMAPPED = 6602L;
static const long ERROR_LOG_BLOCK_INCOMPLETE = 6603L;
static const long ERROR_LOG_INVALID_RANGE = 6604L;
static const long ERROR_LOG_BLOCKS_EXHAUSTED = 6605L;
static const long ERROR_LOG_READ_CONTEXT_INVALID = 6606L;
static const long ERROR_LOG_RESTART_INVALID = 6607L;
static const long ERROR_LOG_BLOCK_VERSION = 6608L;
static const long ERROR_LOG_BLOCK_INVALID = 6609L;
static const long ERROR_LOG_READ_MODE_INVALID = 6610L;
static const long ERROR_LOG_NO_RESTART = 6611L;
static const long ERROR_LOG_METADATA_CORRUPT = 6612L;
static const long ERROR_LOG_METADATA_INVALID = 6613L;
static const long ERROR_LOG_METADATA_INCONSISTENT = 6614L;
static const long ERROR_LOG_RESERVATION_INVALID = 6615L;
static const long ERROR_LOG_CANT_DELETE = 6616L;
static const long ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617L;
static const long ERROR_LOG_START_OF_LOG = 6618L;
static const long ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619L;
static const long ERROR_LOG_POLICY_NOT_INSTALLED = 6620L;
static const long ERROR_LOG_POLICY_INVALID = 6621L;
static const long ERROR_LOG_POLICY_CONFLICT = 6622L;
static const long ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623L;
static const long ERROR_LOG_RECORD_NONEXISTENT = 6624L;
static const long ERROR_LOG_RECORDS_RESERVED_INVALID = 6625L;
static const long ERROR_LOG_SPACE_RESERVED_INVALID = 6626L;
static const long ERROR_LOG_TAIL_INVALID = 6627L;
static const long ERROR_LOG_FULL = 6628L;
static const long ERROR_COULD_NOT_RESIZE_LOG = 6629L;
static const long ERROR_LOG_MULTIPLEXED = 6630L;
static const long ERROR_LOG_DEDICATED = 6631L;
static const long ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632L;
static const long ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633L;
static const long ERROR_LOG_EPHEMERAL = 6634L;
static const long ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635L;
static const long ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636L;
static const long ERROR_LOG_CLIENT_NOT_REGISTERED = 6637L;
static const long ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638L;
static const long ERROR_LOG_CONTAINER_READ_FAILED = 6639L;
static const long ERROR_LOG_CONTAINER_WRITE_FAILED = 6640L;
static const long ERROR_LOG_CONTAINER_OPEN_FAILED = 6641L;
static const long ERROR_LOG_CONTAINER_STATE_INVALID = 6642L;
static const long ERROR_LOG_STATE_INVALID = 6643L;
static const long ERROR_LOG_PINNED = 6644L;
static const long ERROR_LOG_METADATA_FLUSH_FAILED = 6645L;
static const long ERROR_LOG_INCONSISTENT_SECURITY = 6646L;
static const long ERROR_LOG_APPENDED_FLUSH_FAILED = 6647L;
static const long ERROR_LOG_PINNED_RESERVATION = 6648L;
static const long ERROR_INVALID_TRANSACTION = 6700L;
static const long ERROR_TRANSACTION_NOT_ACTIVE = 6701L;
static const long ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702L;
static const long ERROR_TRANSACTION_NOT_REQUESTED = 6703L;
static const long ERROR_TRANSACTION_ALREADY_ABORTED = 6704L;
static const long ERROR_TRANSACTION_ALREADY_COMMITTED = 6705L;
static const long ERROR_TM_INITIALIZATION_FAILED = 6706L;
static const long ERROR_RESOURCEMANAGER_READ_ONLY = 6707L;
static const long ERROR_TRANSACTION_NOT_JOINED = 6708L;
static const long ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709L;
static const long ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710L;
static const long ERROR_TRANSACTION_PROPAGATION_FAILED = 6711L;
static const long ERROR_CRM_PROTOCOL_NOT_FOUND = 6712L;
static const long ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713L;
static const long ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714L;
static const long ERROR_TRANSACTION_NOT_FOUND = 6715L;
static const long ERROR_RESOURCEMANAGER_NOT_FOUND = 6716L;
static const long ERROR_ENLISTMENT_NOT_FOUND = 6717L;
static const long ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718L;
static const long ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719L;
static const long ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720L;
static const long ERROR_TRANSACTION_NOT_ROOT = 6721L;
static const long ERROR_TRANSACTION_OBJECT_EXPIRED = 6722L;
static const long ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723L;
static const long ERROR_TRANSACTION_RECORD_TOO_LONG = 6724L;
static const long ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725L;
static const long ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726L;
static const long ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727L;
static const long ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728L;
static const long ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729L;
static const long ERROR_TRANSACTION_NO_SUPERIOR = 6730L;
static const long ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731L;
static const long ERROR_TRANSACTIONAL_CONFLICT = 6800L;
static const long ERROR_RM_NOT_ACTIVE = 6801L;
static const long ERROR_RM_METADATA_CORRUPT = 6802L;
static const long ERROR_DIRECTORY_NOT_RM = 6803L;
static const long ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805L;
static const long ERROR_LOG_RESIZE_INVALID_SIZE = 6806L;
static const long ERROR_OBJECT_NO_LONGER_EXISTS = 6807L;
static const long ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808L;
static const long ERROR_STREAM_MINIVERSION_NOT_VALID = 6809L;
static const long ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810L;
static const long ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811L;
static const long ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812L;
static const long ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814L;
static const long ERROR_HANDLE_NO_LONGER_VALID = 6815L;
static const long ERROR_NO_TXF_METADATA = 6816L;
static const long ERROR_LOG_CORRUPTION_DETECTED = 6817L;
static const long ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818L;
static const long ERROR_RM_DISCONNECTED = 6819L;
static const long ERROR_ENLISTMENT_NOT_SUPERIOR = 6820L;
static const long ERROR_RECOVERY_NOT_NEEDED = 6821L;
static const long ERROR_RM_ALREADY_STARTED = 6822L;
static const long ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823L;
static const long ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824L;
static const long ERROR_CANT_CROSS_RM_BOUNDARY = 6825L;
static const long ERROR_TXF_DIR_NOT_EMPTY = 6826L;
static const long ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827L;
static const long ERROR_TM_VOLATILE = 6828L;
static const long ERROR_ROLLBACK_TIMER_EXPIRED = 6829L;
static const long ERROR_TXF_ATTRIBUTE_CORRUPT = 6830L;
static const long ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831L;
static const long ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832L;
static const long ERROR_LOG_GROWTH_FAILED = 6833L;
static const long ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834L;
static const long ERROR_TXF_METADATA_ALREADY_PRESENT = 6835L;
static const long ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836L;
static const long ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837L;
static const long ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838L;
static const long ERROR_TRANSACTIONS_NOT_FROZEN = 6839L;
static const long ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840L;
static const long ERROR_NOT_SNAPSHOT_VOLUME = 6841L;
static const long ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842L;
static const long ERROR_DATA_LOST_REPAIR = 6843L;
static const long ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844L;
static const long ERROR_TM_IDENTITY_MISMATCH = 6845L;
static const long ERROR_FLOATED_SECTION = 6846L;
static const long ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847L;
static const long ERROR_CANNOT_ABORT_TRANSACTIONS = 6848L;
static const long ERROR_BAD_CLUSTERS = 6849L;
static const long ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850L;
static const long ERROR_VOLUME_DIRTY = 6851L;
static const long ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852L;
static const long ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853L;
static const long ERROR_EXPIRED_HANDLE = 6854L;
static const long ERROR_TRANSACTION_NOT_ENLISTED = 6855L;
static const long ERROR_CTX_WINSTATION_NAME_INVALID = 7001L;
static const long ERROR_CTX_INVALID_PD = 7002L;
static const long ERROR_CTX_PD_NOT_FOUND = 7003L;
static const long ERROR_CTX_WD_NOT_FOUND = 7004L;
static const long ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005L;
static const long ERROR_CTX_SERVICE_NAME_COLLISION = 7006L;
static const long ERROR_CTX_CLOSE_PENDING = 7007L;
static const long ERROR_CTX_NO_OUTBUF = 7008L;
static const long ERROR_CTX_MODEM_INF_NOT_FOUND = 7009L;
static const long ERROR_CTX_INVALID_MODEMNAME = 7010L;
static const long ERROR_CTX_MODEM_RESPONSE_ERROR = 7011L;
static const long ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012L;
static const long ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013L;
static const long ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014L;
static const long ERROR_CTX_MODEM_RESPONSE_BUSY = 7015L;
static const long ERROR_CTX_MODEM_RESPONSE_VOICE = 7016L;
static const long ERROR_CTX_TD_ERROR = 7017L;
static const long ERROR_CTX_WINSTATION_NOT_FOUND = 7022L;
static const long ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023L;
static const long ERROR_CTX_WINSTATION_BUSY = 7024L;
static const long ERROR_CTX_BAD_VIDEO_MODE = 7025L;
static const long ERROR_CTX_GRAPHICS_INVALID = 7035L;
static const long ERROR_CTX_LOGON_DISABLED = 7037L;
static const long ERROR_CTX_NOT_CONSOLE = 7038L;
static const long ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040L;
static const long ERROR_CTX_CONSOLE_DISCONNECT = 7041L;
static const long ERROR_CTX_CONSOLE_CONNECT = 7042L;
static const long ERROR_CTX_SHADOW_DENIED = 7044L;
static const long ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045L;
static const long ERROR_CTX_INVALID_WD = 7049L;
static const long ERROR_CTX_SHADOW_INVALID = 7050L;
static const long ERROR_CTX_SHADOW_DISABLED = 7051L;
static const long ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052L;
static const long ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053L;
static const long ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054L;
static const long ERROR_CTX_LICENSE_CLIENT_INVALID = 7055L;
static const long ERROR_CTX_LICENSE_EXPIRED = 7056L;
static const long ERROR_CTX_SHADOW_NOT_RUNNING = 7057L;
static const long ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058L;
static const long ERROR_ACTIVATION_COUNT_EXCEEDED = 7059L;
static const long ERROR_CTX_WINSTATIONS_DISABLED = 7060L;
static const long ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061L;
static const long ERROR_CTX_SESSION_IN_USE = 7062L;
static const long ERROR_CTX_NO_FORCE_LOGOFF = 7063L;
static const long ERROR_CTX_ACCOUNT_RESTRICTION = 7064L;
static const long ERROR_RDP_PROTOCOL_ERROR = 7065L;
static const long ERROR_CTX_CDM_CONNECT = 7066L;
static const long ERROR_CTX_CDM_DISCONNECT = 7067L;
static const long ERROR_CTX_SECURITY_LAYER_ERROR = 7068L;
static const long ERROR_TS_INCOMPATIBLE_SESSIONS = 7069L;
static const long ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070L;
static const long FRS_ERR_INVALID_API_SEQUENCE = 8001L;
static const long FRS_ERR_STARTING_SERVICE = 8002L;
static const long FRS_ERR_STOPPING_SERVICE = 8003L;
static const long FRS_ERR_INTERNAL_API = 8004L;
static const long FRS_ERR_INTERNAL = 8005L;
static const long FRS_ERR_SERVICE_COMM = 8006L;
static const long FRS_ERR_INSUFFICIENT_PRIV = 8007L;
static const long FRS_ERR_AUTHENTICATION = 8008L;
static const long FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009L;
static const long FRS_ERR_PARENT_AUTHENTICATION = 8010L;
static const long FRS_ERR_CHILD_TO_PARENT_COMM = 8011L;
static const long FRS_ERR_PARENT_TO_CHILD_COMM = 8012L;
static const long FRS_ERR_SYSVOL_POPULATE = 8013L;
static const long FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014L;
static const long FRS_ERR_SYSVOL_IS_BUSY = 8015L;
static const long FRS_ERR_SYSVOL_DEMOTE = 8016L;
static const long FRS_ERR_INVALID_SERVICE_PARAMETER = 8017L;
static const int DS_S_SUCCESS = NO_ERROR;
static const long ERROR_DS_NOT_INSTALLED = 8200L;
static const long ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201L;
static const long ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202L;
static const long ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203L;
static const long ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204L;
static const long ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205L;
static const long ERROR_DS_BUSY = 8206L;
static const long ERROR_DS_UNAVAILABLE = 8207L;
static const long ERROR_DS_NO_RIDS_ALLOCATED = 8208L;
static const long ERROR_DS_NO_MORE_RIDS = 8209L;
static const long ERROR_DS_INCORRECT_ROLE_OWNER = 8210L;
static const long ERROR_DS_RIDMGR_INIT_ERROR = 8211L;
static const long ERROR_DS_OBJ_CLASS_VIOLATION = 8212L;
static const long ERROR_DS_CANT_ON_NON_LEAF = 8213L;
static const long ERROR_DS_CANT_ON_RDN = 8214L;
static const long ERROR_DS_CANT_MOD_OBJ_CLASS = 8215L;
static const long ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216L;
static const long ERROR_DS_GC_NOT_AVAILABLE = 8217L;
static const long ERROR_SHARED_POLICY = 8218L;
static const long ERROR_POLICY_OBJECT_NOT_FOUND = 8219L;
static const long ERROR_POLICY_ONLY_IN_DS = 8220L;
static const long ERROR_PROMOTION_ACTIVE = 8221L;
static const long ERROR_NO_PROMOTION_ACTIVE = 8222L;
static const long ERROR_DS_OPERATIONS_ERROR = 8224L;
static const long ERROR_DS_PROTOCOL_ERROR = 8225L;
static const long ERROR_DS_TIMELIMIT_EXCEEDED = 8226L;
static const long ERROR_DS_SIZELIMIT_EXCEEDED = 8227L;
static const long ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228L;
static const long ERROR_DS_COMPARE_FALSE = 8229L;
static const long ERROR_DS_COMPARE_TRUE = 8230L;
static const long ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231L;
static const long ERROR_DS_STRONG_AUTH_REQUIRED = 8232L;
static const long ERROR_DS_INAPPROPRIATE_AUTH = 8233L;
static const long ERROR_DS_AUTH_UNKNOWN = 8234L;
static const long ERROR_DS_REFERRAL = 8235L;
static const long ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236L;
static const long ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237L;
static const long ERROR_DS_INAPPROPRIATE_MATCHING = 8238L;
static const long ERROR_DS_CONSTRAINT_VIOLATION = 8239L;
static const long ERROR_DS_NO_SUCH_OBJECT = 8240L;
static const long ERROR_DS_ALIAS_PROBLEM = 8241L;
static const long ERROR_DS_INVALID_DN_SYNTAX = 8242L;
static const long ERROR_DS_IS_LEAF = 8243L;
static const long ERROR_DS_ALIAS_DEREF_PROBLEM = 8244L;
static const long ERROR_DS_UNWILLING_TO_PERFORM = 8245L;
static const long ERROR_DS_LOOP_DETECT = 8246L;
static const long ERROR_DS_NAMING_VIOLATION = 8247L;
static const long ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248L;
static const long ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249L;
static const long ERROR_DS_SERVER_DOWN = 8250L;
static const long ERROR_DS_LOCAL_ERROR = 8251L;
static const long ERROR_DS_ENCODING_ERROR = 8252L;
static const long ERROR_DS_DECODING_ERROR = 8253L;
static const long ERROR_DS_FILTER_UNKNOWN = 8254L;
static const long ERROR_DS_PARAM_ERROR = 8255L;
static const long ERROR_DS_NOT_SUPPORTED = 8256L;
static const long ERROR_DS_NO_RESULTS_RETURNED = 8257L;
static const long ERROR_DS_CONTROL_NOT_FOUND = 8258L;
static const long ERROR_DS_CLIENT_LOOP = 8259L;
static const long ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260L;
static const long ERROR_DS_SORT_CONTROL_MISSING = 8261L;
static const long ERROR_DS_OFFSET_RANGE_ERROR = 8262L;
static const long ERROR_DS_ROOT_MUST_BE_NC = 8301L;
static const long ERROR_DS_ADD_REPLICA_INHIBITED = 8302L;
static const long ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303L;
static const long ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304L;
static const long ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305L;
static const long ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306L;
static const long ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307L;
static const long ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308L;
static const long ERROR_DS_USER_BUFFER_TO_SMALL = 8309L;
static const long ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310L;
static const long ERROR_DS_ILLEGAL_MOD_OPERATION = 8311L;
static const long ERROR_DS_OBJ_TOO_LARGE = 8312L;
static const long ERROR_DS_BAD_INSTANCE_TYPE = 8313L;
static const long ERROR_DS_MASTERDSA_REQUIRED = 8314L;
static const long ERROR_DS_OBJECT_CLASS_REQUIRED = 8315L;
static const long ERROR_DS_MISSING_REQUIRED_ATT = 8316L;
static const long ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317L;
static const long ERROR_DS_ATT_ALREADY_EXISTS = 8318L;
static const long ERROR_DS_CANT_ADD_ATT_VALUES = 8320L;
static const long ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321L;
static const long ERROR_DS_RANGE_CONSTRAINT = 8322L;
static const long ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323L;
static const long ERROR_DS_CANT_REM_MISSING_ATT = 8324L;
static const long ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325L;
static const long ERROR_DS_ROOT_CANT_BE_SUBREF = 8326L;
static const long ERROR_DS_NO_CHAINING = 8327L;
static const long ERROR_DS_NO_CHAINED_EVAL = 8328L;
static const long ERROR_DS_NO_PARENT_OBJECT = 8329L;
static const long ERROR_DS_PARENT_IS_AN_ALIAS = 8330L;
static const long ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331L;
static const long ERROR_DS_CHILDREN_EXIST = 8332L;
static const long ERROR_DS_OBJ_NOT_FOUND = 8333L;
static const long ERROR_DS_ALIASED_OBJ_MISSING = 8334L;
static const long ERROR_DS_BAD_NAME_SYNTAX = 8335L;
static const long ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336L;
static const long ERROR_DS_CANT_DEREF_ALIAS = 8337L;
static const long ERROR_DS_OUT_OF_SCOPE = 8338L;
static const long ERROR_DS_OBJECT_BEING_REMOVED = 8339L;
static const long ERROR_DS_CANT_DELETE_DSA_OBJ = 8340L;
static const long ERROR_DS_GENERIC_ERROR = 8341L;
static const long ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342L;
static const long ERROR_DS_CLASS_NOT_DSA = 8343L;
static const long ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344L;
static const long ERROR_DS_ILLEGAL_SUPERIOR = 8345L;
static const long ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346L;
static const long ERROR_DS_NAME_TOO_MANY_PARTS = 8347L;
static const long ERROR_DS_NAME_TOO_LONG = 8348L;
static const long ERROR_DS_NAME_VALUE_TOO_LONG = 8349L;
static const long ERROR_DS_NAME_UNPARSEABLE = 8350L;
static const long ERROR_DS_NAME_TYPE_UNKNOWN = 8351L;
static const long ERROR_DS_NOT_AN_OBJECT = 8352L;
static const long ERROR_DS_SEC_DESC_TOO_SHORT = 8353L;
static const long ERROR_DS_SEC_DESC_INVALID = 8354L;
static const long ERROR_DS_NO_DELETED_NAME = 8355L;
static const long ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356L;
static const long ERROR_DS_NCNAME_MUST_BE_NC = 8357L;
static const long ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358L;
static const long ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359L;
static const long ERROR_DS_INVALID_DMD = 8360L;
static const long ERROR_DS_OBJ_GUID_EXISTS = 8361L;
static const long ERROR_DS_NOT_ON_BACKLINK = 8362L;
static const long ERROR_DS_NO_CROSSREF_FOR_NC = 8363L;
static const long ERROR_DS_SHUTTING_DOWN = 8364L;
static const long ERROR_DS_UNKNOWN_OPERATION = 8365L;
static const long ERROR_DS_INVALID_ROLE_OWNER = 8366L;
static const long ERROR_DS_COULDNT_CONTACT_FSMO = 8367L;
static const long ERROR_DS_CROSS_NC_DN_RENAME = 8368L;
static const long ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369L;
static const long ERROR_DS_REPLICATOR_ONLY = 8370L;
static const long ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371L;
static const long ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372L;
static const long ERROR_DS_NAME_REFERENCE_INVALID = 8373L;
static const long ERROR_DS_CROSS_REF_EXISTS = 8374L;
static const long ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375L;
static const long ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376L;
static const long ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377L;
static const long ERROR_DS_DUP_RDN = 8378L;
static const long ERROR_DS_DUP_OID = 8379L;
static const long ERROR_DS_DUP_MAPI_ID = 8380L;
static const long ERROR_DS_DUP_SCHEMA_ID_GUID = 8381L;
static const long ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382L;
static const long ERROR_DS_SEMANTIC_ATT_TEST = 8383L;
static const long ERROR_DS_SYNTAX_MISMATCH = 8384L;
static const long ERROR_DS_EXISTS_IN_MUST_HAVE = 8385L;
static const long ERROR_DS_EXISTS_IN_MAY_HAVE = 8386L;
static const long ERROR_DS_NONEXISTENT_MAY_HAVE = 8387L;
static const long ERROR_DS_NONEXISTENT_MUST_HAVE = 8388L;
static const long ERROR_DS_AUX_CLS_TEST_FAIL = 8389L;
static const long ERROR_DS_NONEXISTENT_POSS_SUP = 8390L;
static const long ERROR_DS_SUB_CLS_TEST_FAIL = 8391L;
static const long ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392L;
static const long ERROR_DS_EXISTS_IN_AUX_CLS = 8393L;
static const long ERROR_DS_EXISTS_IN_SUB_CLS = 8394L;
static const long ERROR_DS_EXISTS_IN_POSS_SUP = 8395L;
static const long ERROR_DS_RECALCSCHEMA_FAILED = 8396L;
static const long ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397L;
static const long ERROR_DS_CANT_DELETE = 8398L;
static const long ERROR_DS_ATT_SCHEMA_REQ_ID = 8399L;
static const long ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400L;
static const long ERROR_DS_CANT_CACHE_ATT = 8401L;
static const long ERROR_DS_CANT_CACHE_CLASS = 8402L;
static const long ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403L;
static const long ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404L;
static const long ERROR_DS_CANT_RETRIEVE_DN = 8405L;
static const long ERROR_DS_MISSING_SUPREF = 8406L;
static const long ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407L;
static const long ERROR_DS_CODE_INCONSISTENCY = 8408L;
static const long ERROR_DS_DATABASE_ERROR = 8409L;
static const long ERROR_DS_GOVERNSID_MISSING = 8410L;
static const long ERROR_DS_MISSING_EXPECTED_ATT = 8411L;
static const long ERROR_DS_NCNAME_MISSING_CR_REF = 8412L;
static const long ERROR_DS_SECURITY_CHECKING_ERROR = 8413L;
static const long ERROR_DS_SCHEMA_NOT_LOADED = 8414L;
static const long ERROR_DS_SCHEMA_ALLOC_FAILED = 8415L;
static const long ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416L;
static const long ERROR_DS_GCVERIFY_ERROR = 8417L;
static const long ERROR_DS_DRA_SCHEMA_MISMATCH = 8418L;
static const long ERROR_DS_CANT_FIND_DSA_OBJ = 8419L;
static const long ERROR_DS_CANT_FIND_EXPECTED_NC = 8420L;
static const long ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421L;
static const long ERROR_DS_CANT_RETRIEVE_CHILD = 8422L;
static const long ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423L;
static const long ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424L;
static const long ERROR_DS_BAD_HIERARCHY_FILE = 8425L;
static const long ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426L;
static const long ERROR_DS_CONFIG_PARAM_MISSING = 8427L;
static const long ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428L;
static const long ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429L;
static const long ERROR_DS_INTERNAL_FAILURE = 8430L;
static const long ERROR_DS_UNKNOWN_ERROR = 8431L;
static const long ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432L;
static const long ERROR_DS_REFUSING_FSMO_ROLES = 8433L;
static const long ERROR_DS_MISSING_FSMO_SETTINGS = 8434L;
static const long ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435L;
static const long ERROR_DS_DRA_GENERIC = 8436L;
static const long ERROR_DS_DRA_INVALID_PARAMETER = 8437L;
static const long ERROR_DS_DRA_BUSY = 8438L;
static const long ERROR_DS_DRA_BAD_DN = 8439L;
static const long ERROR_DS_DRA_BAD_NC = 8440L;
static const long ERROR_DS_DRA_DN_EXISTS = 8441L;
static const long ERROR_DS_DRA_INTERNAL_ERROR = 8442L;
static const long ERROR_DS_DRA_INCONSISTENT_DIT = 8443L;
static const long ERROR_DS_DRA_CONNECTION_FAILED = 8444L;
static const long ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445L;
static const long ERROR_DS_DRA_OUT_OF_MEM = 8446L;
static const long ERROR_DS_DRA_MAIL_PROBLEM = 8447L;
static const long ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448L;
static const long ERROR_DS_DRA_REF_NOT_FOUND = 8449L;
static const long ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450L;
static const long ERROR_DS_DRA_DB_ERROR = 8451L;
static const long ERROR_DS_DRA_NO_REPLICA = 8452L;
static const long ERROR_DS_DRA_ACCESS_DENIED = 8453L;
static const long ERROR_DS_DRA_NOT_SUPPORTED = 8454L;
static const long ERROR_DS_DRA_RPC_CANCELLED = 8455L;
static const long ERROR_DS_DRA_SOURCE_DISABLED = 8456L;
static const long ERROR_DS_DRA_SINK_DISABLED = 8457L;
static const long ERROR_DS_DRA_NAME_COLLISION = 8458L;
static const long ERROR_DS_DRA_SOURCE_REINSTALLED = 8459L;
static const long ERROR_DS_DRA_MISSING_PARENT = 8460L;
static const long ERROR_DS_DRA_PREEMPTED = 8461L;
static const long ERROR_DS_DRA_ABANDON_SYNC = 8462L;
static const long ERROR_DS_DRA_SHUTDOWN = 8463L;
static const long ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464L;
static const long ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465L;
static const long ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466L;
static const long ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467L;
static const long ERROR_DS_DUP_LINK_ID = 8468L;
static const long ERROR_DS_NAME_ERROR_RESOLVING = 8469L;
static const long ERROR_DS_NAME_ERROR_NOT_FOUND = 8470L;
static const long ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471L;
static const long ERROR_DS_NAME_ERROR_NO_MAPPING = 8472L;
static const long ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473L;
static const long ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474L;
static const long ERROR_DS_CONSTRUCTED_ATT_MOD = 8475L;
static const long ERROR_DS_WRONG_OM_OBJ_CLASS = 8476L;
static const long ERROR_DS_DRA_REPL_PENDING = 8477L;
static const long ERROR_DS_DS_REQUIRED = 8478L;
static const long ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479L;
static const long ERROR_DS_NON_BASE_SEARCH = 8480L;
static const long ERROR_DS_CANT_RETRIEVE_ATTS = 8481L;
static const long ERROR_DS_BACKLINK_WITHOUT_LINK = 8482L;
static const long ERROR_DS_EPOCH_MISMATCH = 8483L;
static const long ERROR_DS_SRC_NAME_MISMATCH = 8484L;
static const long ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485L;
static const long ERROR_DS_DST_NC_MISMATCH = 8486L;
static const long ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487L;
static const long ERROR_DS_SRC_GUID_MISMATCH = 8488L;
static const long ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489L;
static const long ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490L;
static const long ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491L;
static const long ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492L;
static const long ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493L;
static const long ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494L;
static const long ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495L;
static const long ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496L;
static const long ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497L;
static const long ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498L;
static const long ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499L;
static const long ERROR_DS_INVALID_SEARCH_FLAG = 8500L;
static const long ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501L;
static const long ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502L;
static const long ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503L;
static const long ERROR_DS_SAM_INIT_FAILURE = 8504L;
static const long ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505L;
static const long ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506L;
static const long ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507L;
static const long ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508L;
static const long ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509L;
static const long ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510L;
static const long ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511L;
static const long ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512L;
static const long ERROR_DS_INVALID_GROUP_TYPE = 8513L;
static const long ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514L;
static const long ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517L;
static const long ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518L;
static const long ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519L;
static const long ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520L;
static const long ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521L;
static const long ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522L;
static const long ERROR_DS_NAMING_MASTER_GC = 8523L;
static const long ERROR_DS_DNS_LOOKUP_FAILURE = 8524L;
static const long ERROR_DS_COULDNT_UPDATE_SPNS = 8525L;
static const long ERROR_DS_CANT_RETRIEVE_SD = 8526L;
static const long ERROR_DS_KEY_NOT_UNIQUE = 8527L;
static const long ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528L;
static const long ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529L;
static const long ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530L;
static const long ERROR_DS_CANT_START = 8531L;
static const long ERROR_DS_INIT_FAILURE = 8532L;
static const long ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533L;
static const long ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534L;
static const long ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535L;
static const long ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536L;
static const long ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537L;
static const long ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538L;
static const long ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539L;
static const long ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540L;
static const long ERROR_SAM_INIT_FAILURE = 8541L;
static const long ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542L;
static const long ERROR_DS_DRA_SCHEMA_CONFLICT = 8543L;
static const long ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544L;
static const long ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545L;
static const long ERROR_DS_NC_STILL_HAS_DSAS = 8546L;
static const long ERROR_DS_GC_REQUIRED = 8547L;
static const long ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548L;
static const long ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549L;
static const long ERROR_DS_CANT_ADD_TO_GC = 8550L;
static const long ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551L;
static const long ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552L;
static const long ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553L;
static const long ERROR_DS_INVALID_NAME_FOR_SPN = 8554L;
static const long ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555L;
static const long ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556L;
static const long ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557L;
static const long ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558L;
static const long ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559L;
static const long ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560L;
static const long ERROR_DS_INIT_FAILURE_CONSOLE = 8561L;
static const long ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562L;
static const long ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563L;
static const long ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564L;
static const long ERROR_DS_FOREST_VERSION_TOO_LOW = 8565L;
static const long ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566L;
static const long ERROR_DS_INCOMPATIBLE_VERSION = 8567L;
static const long ERROR_DS_LOW_DSA_VERSION = 8568L;
static const long ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569L;
static const long ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570L;
static const long ERROR_DS_NAME_NOT_UNIQUE = 8571L;
static const long ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572L;
static const long ERROR_DS_OUT_OF_VERSION_STORE = 8573L;
static const long ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574L;
static const long ERROR_DS_NO_REF_DOMAIN = 8575L;
static const long ERROR_DS_RESERVED_LINK_ID = 8576L;
static const long ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577L;
static const long ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578L;
static const long ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579L;
static const long ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580L;
static const long ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581L;
static const long ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582L;
static const long ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583L;
static const long ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584L;
static const long ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585L;
static const long ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586L;
static const long ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587L;
static const long ERROR_DS_NOT_CLOSEST = 8588L;
static const long ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589L;
static const long ERROR_DS_SINGLE_USER_MODE_FAILED = 8590L;
static const long ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591L;
static const long ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592L;
static const long ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593L;
static const long ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594L;
static const long ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595L;
static const long ERROR_DS_NO_MSDS_INTID = 8596L;
static const long ERROR_DS_DUP_MSDS_INTID = 8597L;
static const long ERROR_DS_EXISTS_IN_RDNATTID = 8598L;
static const long ERROR_DS_AUTHORIZATION_FAILED = 8599L;
static const long ERROR_DS_INVALID_SCRIPT = 8600L;
static const long ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601L;
static const long ERROR_DS_CROSS_REF_BUSY = 8602L;
static const long ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603L;
static const long ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604L;
static const long ERROR_DS_DUPLICATE_ID_FOUND = 8605L;
static const long ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606L;
static const long ERROR_DS_GROUP_CONVERSION_ERROR = 8607L;
static const long ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608L;
static const long ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609L;
static const long ERROR_DS_ROLE_NOT_VERIFIED = 8610L;
static const long ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611L;
static const long ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612L;
static const long ERROR_DS_EXISTING_AD_CHILD_NC = 8613L;
static const long ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614L;
static const long ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615L;
static const long ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616L;
static const long ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617L;
static const long ERROR_DS_POLICY_NOT_KNOWN = 8618L;
static const long ERROR_NO_SITE_SETTINGS_OBJECT = 8619L;
static const long ERROR_NO_SECRETS = 8620L;
static const long ERROR_NO_WRITABLE_DC_FOUND = 8621L;
static const long ERROR_DS_NO_SERVER_OBJECT = 8622L;
static const long ERROR_DS_NO_NTDSA_OBJECT = 8623L;
static const long ERROR_DS_NON_ASQ_SEARCH = 8624L;
static const long ERROR_DS_AUDIT_FAILURE = 8625L;
static const long ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626L;
static const long ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627L;
static const long ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628L;
static const long ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629L;
static const long ERROR_DS_DRA_SECRETS_DENIED = 8630L;
static const long ERROR_DS_RESERVED_MAPI_ID = 8631L;
static const long ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632L;
static const long ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633L;
static const long ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634L;
static const long ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635L;
static const long ERROR_INVALID_USER_PRINCIPAL_NAME = 8636L;
static const long ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637L;
static const long ERROR_DS_OID_NOT_FOUND = 8638L;
static const long ERROR_DS_DRA_RECYCLED_TARGET = 8639L;
static const int DNS_ERROR_RESPONSE_CODES_BASE = 9000;
static const int DNS_ERROR_RCODE_NO_ERROR = NO_ERROR;
static const int DNS_ERROR_MASK = 0x00002328;
static const long DNS_ERROR_RCODE_FORMAT_ERROR = 9001L;
static const long DNS_ERROR_RCODE_SERVER_FAILURE = 9002L;
static const long DNS_ERROR_RCODE_NAME_ERROR = 9003L;
static const long DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004L;
static const long DNS_ERROR_RCODE_REFUSED = 9005L;
static const long DNS_ERROR_RCODE_YXDOMAIN = 9006L;
static const long DNS_ERROR_RCODE_YXRRSET = 9007L;
static const long DNS_ERROR_RCODE_NXRRSET = 9008L;
static const long DNS_ERROR_RCODE_NOTAUTH = 9009L;
static const long DNS_ERROR_RCODE_NOTZONE = 9010L;
static const long DNS_ERROR_RCODE_BADSIG = 9016L;
static const long DNS_ERROR_RCODE_BADKEY = 9017L;
static const long DNS_ERROR_RCODE_BADTIME = 9018L;
static const int DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME;
static const int DNS_ERROR_PACKET_FMT_BASE = 9500;
static const long DNS_INFO_NO_RECORDS = 9501L;
static const long DNS_ERROR_BAD_PACKET = 9502L;
static const long DNS_ERROR_NO_PACKET = 9503L;
static const long DNS_ERROR_RCODE = 9504L;
static const long DNS_ERROR_UNSECURE_PACKET = 9505L;
static const int DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET;
static const int DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY;
static const int DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME;
static const int DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA;
static const int DNS_ERROR_GENERAL_API_BASE = 9550;
static const long DNS_ERROR_INVALID_TYPE = 9551L;
static const long DNS_ERROR_INVALID_IP_ADDRESS = 9552L;
static const long DNS_ERROR_INVALID_PROPERTY = 9553L;
static const long DNS_ERROR_TRY_AGAIN_LATER = 9554L;
static const long DNS_ERROR_NOT_UNIQUE = 9555L;
static const long DNS_ERROR_NON_RFC_NAME = 9556L;
static const long DNS_STATUS_FQDN = 9557L;
static const long DNS_STATUS_DOTTED_NAME = 9558L;
static const long DNS_STATUS_SINGLE_PART_NAME = 9559L;
static const long DNS_ERROR_INVALID_NAME_CHAR = 9560L;
static const long DNS_ERROR_NUMERIC_NAME = 9561L;
static const long DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562L;
static const long DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563L;
static const long DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564L;
static const long DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565L;
static const long DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566L;
static const long DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567L;
static const long DNS_ERROR_BACKGROUND_LOADING = 9568L;
static const long DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569L;
static const long DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570L;
static const long DNS_ERROR_DELEGATION_REQUIRED = 9571L;
static const long DNS_ERROR_INVALID_POLICY_TABLE = 9572L;
static const int DNS_ERROR_ZONE_BASE = 9600;
static const long DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601L;
static const long DNS_ERROR_NO_ZONE_INFO = 9602L;
static const long DNS_ERROR_INVALID_ZONE_OPERATION = 9603L;
static const long DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604L;
static const long DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605L;
static const long DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606L;
static const long DNS_ERROR_ZONE_LOCKED = 9607L;
static const long DNS_ERROR_ZONE_CREATION_FAILED = 9608L;
static const long DNS_ERROR_ZONE_ALREADY_EXISTS = 9609L;
static const long DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610L;
static const long DNS_ERROR_INVALID_ZONE_TYPE = 9611L;
static const long DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612L;
static const long DNS_ERROR_ZONE_NOT_SECONDARY = 9613L;
static const long DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614L;
static const long DNS_ERROR_WINS_INIT_FAILED = 9615L;
static const long DNS_ERROR_NEED_WINS_SERVERS = 9616L;
static const long DNS_ERROR_NBSTAT_INIT_FAILED = 9617L;
static const long DNS_ERROR_SOA_DELETE_INVALID = 9618L;
static const long DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619L;
static const long DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620L;
static const long DNS_ERROR_ZONE_IS_SHUTDOWN = 9621L;
static const int DNS_ERROR_DATAFILE_BASE = 9650;
static const long DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651L;
static const long DNS_ERROR_INVALID_DATAFILE_NAME = 9652L;
static const long DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653L;
static const long DNS_ERROR_FILE_WRITEBACK_FAILED = 9654L;
static const long DNS_ERROR_DATAFILE_PARSING = 9655L;
static const int DNS_ERROR_DATABASE_BASE = 9700;
static const long DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701L;
static const long DNS_ERROR_RECORD_FORMAT = 9702L;
static const long DNS_ERROR_NODE_CREATION_FAILED = 9703L;
static const long DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704L;
static const long DNS_ERROR_RECORD_TIMED_OUT = 9705L;
static const long DNS_ERROR_NAME_NOT_IN_ZONE = 9706L;
static const long DNS_ERROR_CNAME_LOOP = 9707L;
static const long DNS_ERROR_NODE_IS_CNAME = 9708L;
static const long DNS_ERROR_CNAME_COLLISION = 9709L;
static const long DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710L;
static const long DNS_ERROR_RECORD_ALREADY_EXISTS = 9711L;
static const long DNS_ERROR_SECONDARY_DATA = 9712L;
static const long DNS_ERROR_NO_CREATE_CACHE_DATA = 9713L;
static const long DNS_ERROR_NAME_DOES_NOT_EXIST = 9714L;
static const long DNS_WARNING_PTR_CREATE_FAILED = 9715L;
static const long DNS_WARNING_DOMAIN_UNDELETED = 9716L;
static const long DNS_ERROR_DS_UNAVAILABLE = 9717L;
static const long DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718L;
static const long DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719L;
static const long DNS_ERROR_NODE_IS_DNAME = 9720L;
static const long DNS_ERROR_DNAME_COLLISION = 9721L;
static const long DNS_ERROR_ALIAS_LOOP = 9722L;
static const int DNS_ERROR_OPERATION_BASE = 9750;
static const long DNS_INFO_AXFR_COMPLETE = 9751L;
static const long DNS_ERROR_AXFR = 9752L;
static const long DNS_INFO_ADDED_LOCAL_WINS = 9753L;
static const int DNS_ERROR_SECURE_BASE = 9800;
static const long DNS_STATUS_CONTINUE_NEEDED = 9801L;
static const int DNS_ERROR_SETUP_BASE = 9850;
static const long DNS_ERROR_NO_TCPIP = 9851L;
static const long DNS_ERROR_NO_DNS_SERVERS = 9852L;
static const int DNS_ERROR_DP_BASE = 9900;
static const long DNS_ERROR_DP_DOES_NOT_EXIST = 9901L;
static const long DNS_ERROR_DP_ALREADY_EXISTS = 9902L;
static const long DNS_ERROR_DP_NOT_ENLISTED = 9903L;
static const long DNS_ERROR_DP_ALREADY_ENLISTED = 9904L;
static const long DNS_ERROR_DP_NOT_AVAILABLE = 9905L;
static const long DNS_ERROR_DP_FSMO_ERROR = 9906L;
static const int WSABASEERR = 10000;
static const long WSAEINTR = 10004L;
static const long WSAEBADF = 10009L;
static const long WSAEACCES = 10013L;
static const long WSAEFAULT = 10014L;
static const long WSAEINVAL = 10022L;
static const long WSAEMFILE = 10024L;
static const long WSAEWOULDBLOCK = 10035L;
static const long WSAEINPROGRESS = 10036L;
static const long WSAEALREADY = 10037L;
static const long WSAENOTSOCK = 10038L;
static const long WSAEDESTADDRREQ = 10039L;
static const long WSAEMSGSIZE = 10040L;
static const long WSAEPROTOTYPE = 10041L;
static const long WSAENOPROTOOPT = 10042L;
static const long WSAEPROTONOSUPPORT = 10043L;
static const long WSAESOCKTNOSUPPORT = 10044L;
static const long WSAEOPNOTSUPP = 10045L;
static const long WSAEPFNOSUPPORT = 10046L;
static const long WSAEAFNOSUPPORT = 10047L;
static const long WSAEADDRINUSE = 10048L;
static const long WSAEADDRNOTAVAIL = 10049L;
static const long WSAENETDOWN = 10050L;
static const long WSAENETUNREACH = 10051L;
static const long WSAENETRESET = 10052L;
static const long WSAECONNABORTED = 10053L;
static const long WSAECONNRESET = 10054L;
static const long WSAENOBUFS = 10055L;
static const long WSAEISCONN = 10056L;
static const long WSAENOTCONN = 10057L;
static const long WSAESHUTDOWN = 10058L;
static const long WSAETOOMANYREFS = 10059L;
static const long WSAETIMEDOUT = 10060L;
static const long WSAECONNREFUSED = 10061L;
static const long WSAELOOP = 10062L;
static const long WSAENAMETOOLONG = 10063L;
static const long WSAEHOSTDOWN = 10064L;
static const long WSAEHOSTUNREACH = 10065L;
static const long WSAENOTEMPTY = 10066L;
static const long WSAEPROCLIM = 10067L;
static const long WSAEUSERS = 10068L;
static const long WSAEDQUOT = 10069L;
static const long WSAESTALE = 10070L;
static const long WSAEREMOTE = 10071L;
static const long WSASYSNOTREADY = 10091L;
static const long WSAVERNOTSUPPORTED = 10092L;
static const long WSANOTINITIALISED = 10093L;
static const long WSAEDISCON = 10101L;
static const long WSAENOMORE = 10102L;
static const long WSAECANCELLED = 10103L;
static const long WSAEINVALIDPROCTABLE = 10104L;
static const long WSAEINVALIDPROVIDER = 10105L;
static const long WSAEPROVIDERFAILEDINIT = 10106L;
static const long WSASYSCALLFAILURE = 10107L;
static const long WSASERVICE_NOT_FOUND = 10108L;
static const long WSATYPE_NOT_FOUND = 10109L;
static const long WSA_E_NO_MORE = 10110L;
static const long WSA_E_CANCELLED = 10111L;
static const long WSAEREFUSED = 10112L;
static const long WSAHOST_NOT_FOUND = 11001L;
static const long WSATRY_AGAIN = 11002L;
static const long WSANO_RECOVERY = 11003L;
static const long WSANO_DATA = 11004L;
static const long WSA_QOS_RECEIVERS = 11005L;
static const long WSA_QOS_SENDERS = 11006L;
static const long WSA_QOS_NO_SENDERS = 11007L;
static const long WSA_QOS_NO_RECEIVERS = 11008L;
static const long WSA_QOS_REQUEST_CONFIRMED = 11009L;
static const long WSA_QOS_ADMISSION_FAILURE = 11010L;
static const long WSA_QOS_POLICY_FAILURE = 11011L;
static const long WSA_QOS_BAD_STYLE = 11012L;
static const long WSA_QOS_BAD_OBJECT = 11013L;
static const long WSA_QOS_TRAFFIC_CTRL_ERROR = 11014L;
static const long WSA_QOS_GENERIC_ERROR = 11015L;
static const long WSA_QOS_ESERVICETYPE = 11016L;
static const long WSA_QOS_EFLOWSPEC = 11017L;
static const long WSA_QOS_EPROVSPECBUF = 11018L;
static const long WSA_QOS_EFILTERSTYLE = 11019L;
static const long WSA_QOS_EFILTERTYPE = 11020L;
static const long WSA_QOS_EFILTERCOUNT = 11021L;
static const long WSA_QOS_EOBJLENGTH = 11022L;
static const long WSA_QOS_EFLOWCOUNT = 11023L;
static const long WSA_QOS_EUNKOWNPSOBJ = 11024L;
static const long WSA_QOS_EPOLICYOBJ = 11025L;
static const long WSA_QOS_EFLOWDESC = 11026L;
static const long WSA_QOS_EPSFLOWSPEC = 11027L;
static const long WSA_QOS_EPSFILTERSPEC = 11028L;
static const long WSA_QOS_ESDMODEOBJ = 11029L;
static const long WSA_QOS_ESHAPERATEOBJ = 11030L;
static const long WSA_QOS_RESERVED_PETYPE = 11031L;
static const long WSA_SECURE_HOST_NOT_FOUND = 11032L;
static const long WSA_IPSEC_NAME_POLICY_ERROR = 11033L;
static const long ERROR_IPSEC_QM_POLICY_EXISTS = 13000L;
static const long ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001L;
static const long ERROR_IPSEC_QM_POLICY_IN_USE = 13002L;
static const long ERROR_IPSEC_MM_POLICY_EXISTS = 13003L;
static const long ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004L;
static const long ERROR_IPSEC_MM_POLICY_IN_USE = 13005L;
static const long ERROR_IPSEC_MM_FILTER_EXISTS = 13006L;
static const long ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009L;
static const long ERROR_IPSEC_MM_AUTH_EXISTS = 13010L;
static const long ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011L;
static const long ERROR_IPSEC_MM_AUTH_IN_USE = 13012L;
static const long ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013L;
static const long ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014L;
static const long ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015L;
static const long ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016L;
static const long ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017L;
static const long ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018L;
static const long ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019L;
static const long ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020L;
static const long ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021L;
static const long ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022L;
static const long ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023L;
static const long WARNING_IPSEC_MM_POLICY_PRUNED = 13024L;
static const long WARNING_IPSEC_QM_POLICY_PRUNED = 13025L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800L;
static const long ERROR_IPSEC_IKE_AUTH_FAIL = 13801L;
static const long ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802L;
static const long ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803L;
static const long ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804L;
static const long ERROR_IPSEC_IKE_TIMED_OUT = 13805L;
static const long ERROR_IPSEC_IKE_NO_CERT = 13806L;
static const long ERROR_IPSEC_IKE_SA_DELETED = 13807L;
static const long ERROR_IPSEC_IKE_SA_REAPED = 13808L;
static const long ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809L;
static const long ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810L;
static const long ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811L;
static const long ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812L;
static const long ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813L;
static const long ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814L;
static const long ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815L;
static const long ERROR_IPSEC_IKE_ERROR = 13816L;
static const long ERROR_IPSEC_IKE_CRL_FAILED = 13817L;
static const long ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818L;
static const long ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819L;
static const long ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820L;
static const long ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821L;
static const long ERROR_IPSEC_IKE_DH_FAIL = 13822L;
static const long ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823L;
static const long ERROR_IPSEC_IKE_INVALID_HEADER = 13824L;
static const long ERROR_IPSEC_IKE_NO_POLICY = 13825L;
static const long ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826L;
static const long ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827L;
static const long ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR = 13829L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842L;
static const long ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843L;
static const long ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844L;
static const long ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845L;
static const long ERROR_IPSEC_IKE_INVALID_COOKIE = 13846L;
static const long ERROR_IPSEC_IKE_NO_PEER_CERT = 13847L;
static const long ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848L;
static const long ERROR_IPSEC_IKE_POLICY_CHANGE = 13849L;
static const long ERROR_IPSEC_IKE_NO_MM_POLICY = 13850L;
static const long ERROR_IPSEC_IKE_NOTCBPRIV = 13851L;
static const long ERROR_IPSEC_IKE_SECLOADFAIL = 13852L;
static const long ERROR_IPSEC_IKE_FAILSSPINIT = 13853L;
static const long ERROR_IPSEC_IKE_FAILQUERYSSP = 13854L;
static const long ERROR_IPSEC_IKE_SRVACQFAIL = 13855L;
static const long ERROR_IPSEC_IKE_SRVQUERYCRED = 13856L;
static const long ERROR_IPSEC_IKE_GETSPIFAIL = 13857L;
static const long ERROR_IPSEC_IKE_INVALID_FILTER = 13858L;
static const long ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859L;
static const long ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860L;
static const long ERROR_IPSEC_IKE_INVALID_POLICY = 13861L;
static const long ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862L;
static const long ERROR_IPSEC_IKE_INVALID_SITUATION = 13863L;
static const long ERROR_IPSEC_IKE_DH_FAILURE = 13864L;
static const long ERROR_IPSEC_IKE_INVALID_GROUP = 13865L;
static const long ERROR_IPSEC_IKE_ENCRYPT = 13866L;
static const long ERROR_IPSEC_IKE_DECRYPT = 13867L;
static const long ERROR_IPSEC_IKE_POLICY_MATCH = 13868L;
static const long ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869L;
static const long ERROR_IPSEC_IKE_INVALID_HASH = 13870L;
static const long ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871L;
static const long ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872L;
static const long ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873L;
static const long ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874L;
static const long ERROR_IPSEC_IKE_INVALID_SIG = 13875L;
static const long ERROR_IPSEC_IKE_LOAD_FAILED = 13876L;
static const long ERROR_IPSEC_IKE_RPC_DELETE = 13877L;
static const long ERROR_IPSEC_IKE_BENIGN_REINIT = 13878L;
static const long ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879L;
static const long ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880L;
static const long ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881L;
static const long ERROR_IPSEC_IKE_MM_LIMIT = 13882L;
static const long ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883L;
static const long ERROR_IPSEC_IKE_QM_LIMIT = 13884L;
static const long ERROR_IPSEC_IKE_MM_EXPIRED = 13885L;
static const long ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886L;
static const long ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887L;
static const long ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888L;
static const long ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889L;
static const long ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890L;
static const long ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891L;
static const long ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892L;
static const long ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893L;
static const long ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894L;
static const long ERROR_IPSEC_IKE_QM_EXPIRED = 13895L;
static const long ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_END = 13897L;
static const long ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898L;
static const long ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899L;
static const long ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900L;
static const long ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901L;
static const long ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902L;
static const long ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903L;
static const long ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904L;
static const long ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905L;
static const long ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906L;
static const long ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907L;
static const long ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908L;
static const long ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909L;
static const long ERROR_IPSEC_BAD_SPI = 13910L;
static const long ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911L;
static const long ERROR_IPSEC_WRONG_SA = 13912L;
static const long ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913L;
static const long ERROR_IPSEC_INVALID_PACKET = 13914L;
static const long ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915L;
static const long ERROR_IPSEC_CLEAR_TEXT_DROP = 13916L;
static const long ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917L;
static const long ERROR_IPSEC_THROTTLE_DROP = 13918L;
static const long ERROR_IPSEC_DOSP_BLOCK = 13925L;
static const long ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926L;
static const long ERROR_IPSEC_DOSP_INVALID_PACKET = 13927L;
static const long ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928L;
static const long ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929L;
static const long ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930L;
static const long ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931L;
static const long ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932L;
static const long ERROR_SXS_SECTION_NOT_FOUND = 14000L;
static const long ERROR_SXS_CANT_GEN_ACTCTX = 14001L;
static const long ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002L;
static const long ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003L;
static const long ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004L;
static const long ERROR_SXS_MANIFEST_PARSE_ERROR = 14005L;
static const long ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006L;
static const long ERROR_SXS_KEY_NOT_FOUND = 14007L;
static const long ERROR_SXS_VERSION_CONFLICT = 14008L;
static const long ERROR_SXS_WRONG_SECTION_TYPE = 14009L;
static const long ERROR_SXS_THREAD_QUERIES_DISABLED = 14010L;
static const long ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011L;
static const long ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012L;
static const long ERROR_SXS_UNKNOWN_ENCODING = 14013L;
static const long ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014L;
static const long ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015L;
static const long ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016L;
static const long ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017L;
static const long ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018L;
static const long ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019L;
static const long ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020L;
static const long ERROR_SXS_DUPLICATE_DLL_NAME = 14021L;
static const long ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022L;
static const long ERROR_SXS_DUPLICATE_CLSID = 14023L;
static const long ERROR_SXS_DUPLICATE_IID = 14024L;
static const long ERROR_SXS_DUPLICATE_TLBID = 14025L;
static const long ERROR_SXS_DUPLICATE_PROGID = 14026L;
static const long ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027L;
static const long ERROR_SXS_FILE_HASH_MISMATCH = 14028L;
static const long ERROR_SXS_POLICY_PARSE_ERROR = 14029L;
static const long ERROR_SXS_XML_E_MISSINGQUOTE = 14030L;
static const long ERROR_SXS_XML_E_COMMENTSYNTAX = 14031L;
static const long ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032L;
static const long ERROR_SXS_XML_E_BADNAMECHAR = 14033L;
static const long ERROR_SXS_XML_E_BADCHARINSTRING = 14034L;
static const long ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035L;
static const long ERROR_SXS_XML_E_BADCHARDATA = 14036L;
static const long ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037L;
static const long ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038L;
static const long ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039L;
static const long ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040L;
static const long ERROR_SXS_XML_E_INTERNALERROR = 14041L;
static const long ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042L;
static const long ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043L;
static const long ERROR_SXS_XML_E_MISSING_PAREN = 14044L;
static const long ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045L;
static const long ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046L;
static const long ERROR_SXS_XML_E_INVALID_DECIMAL = 14047L;
static const long ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048L;
static const long ERROR_SXS_XML_E_INVALID_UNICODE = 14049L;
static const long ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050L;
static const long ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051L;
static const long ERROR_SXS_XML_E_UNCLOSEDTAG = 14052L;
static const long ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053L;
static const long ERROR_SXS_XML_E_MULTIPLEROOTS = 14054L;
static const long ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055L;
static const long ERROR_SXS_XML_E_BADXMLDECL = 14056L;
static const long ERROR_SXS_XML_E_MISSINGROOT = 14057L;
static const long ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058L;
static const long ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059L;
static const long ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060L;
static const long ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061L;
static const long ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062L;
static const long ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063L;
static const long ERROR_SXS_XML_E_UNCLOSEDDECL = 14064L;
static const long ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065L;
static const long ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066L;
static const long ERROR_SXS_XML_E_INVALIDENCODING = 14067L;
static const long ERROR_SXS_XML_E_INVALIDSWITCH = 14068L;
static const long ERROR_SXS_XML_E_BADXMLCASE = 14069L;
static const long ERROR_SXS_XML_E_INVALID_STANDALONE = 14070L;
static const long ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071L;
static const long ERROR_SXS_XML_E_INVALID_VERSION = 14072L;
static const long ERROR_SXS_XML_E_MISSINGEQUALS = 14073L;
static const long ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074L;
static const long ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075L;
static const long ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076L;
static const long ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077L;
static const long ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078L;
static const long ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079L;
static const long ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080L;
static const long ERROR_SXS_ASSEMBLY_MISSING = 14081L;
static const long ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082L;
static const long ERROR_SXS_CORRUPTION = 14083L;
static const long ERROR_SXS_EARLY_DEACTIVATION = 14084L;
static const long ERROR_SXS_INVALID_DEACTIVATION = 14085L;
static const long ERROR_SXS_MULTIPLE_DEACTIVATION = 14086L;
static const long ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087L;
static const long ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088L;
static const long ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089L;
static const long ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090L;
static const long ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091L;
static const long ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092L;
static const long ERROR_SXS_IDENTITY_PARSE_ERROR = 14093L;
static const long ERROR_MALFORMED_SUBSTITUTION_STRING = 14094L;
static const long ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095L;
static const long ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096L;
static const long ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097L;
static const long ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098L;
static const long ERROR_ADVANCED_INSTALLER_FAILED = 14099L;
static const long ERROR_XML_ENCODING_MISMATCH = 14100L;
static const long ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101L;
static const long ERROR_SXS_IDENTITIES_DIFFERENT = 14102L;
static const long ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103L;
static const long ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104L;
static const long ERROR_SXS_MANIFEST_TOO_BIG = 14105L;
static const long ERROR_SXS_SETTING_NOT_REGISTERED = 14106L;
static const long ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107L;
static const long ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108L;
static const long ERROR_GENERIC_COMMAND_FAILED = 14109L;
static const long ERROR_SXS_FILE_HASH_MISSING = 14110L;
static const long ERROR_EVT_INVALID_CHANNEL_PATH = 15000L;
static const long ERROR_EVT_INVALID_QUERY = 15001L;
static const long ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002L;
static const long ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003L;
static const long ERROR_EVT_INVALID_PUBLISHER_NAME = 15004L;
static const long ERROR_EVT_INVALID_EVENT_DATA = 15005L;
static const long ERROR_EVT_CHANNEL_NOT_FOUND = 15007L;
static const long ERROR_EVT_MALFORMED_XML_TEXT = 15008L;
static const long ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009L;
static const long ERROR_EVT_CONFIGURATION_ERROR = 15010L;
static const long ERROR_EVT_QUERY_RESULT_STALE = 15011L;
static const long ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012L;
static const long ERROR_EVT_NON_VALIDATING_MSXML = 15013L;
static const long ERROR_EVT_FILTER_ALREADYSCOPED = 15014L;
static const long ERROR_EVT_FILTER_NOTELTSET = 15015L;
static const long ERROR_EVT_FILTER_INVARG = 15016L;
static const long ERROR_EVT_FILTER_INVTEST = 15017L;
static const long ERROR_EVT_FILTER_INVTYPE = 15018L;
static const long ERROR_EVT_FILTER_PARSEERR = 15019L;
static const long ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020L;
static const long ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021L;
static const long ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022L;
static const long ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023L;
static const long ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024L;
static const long ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025L;
static const long ERROR_EVT_FILTER_TOO_COMPLEX = 15026L;
static const long ERROR_EVT_MESSAGE_NOT_FOUND = 15027L;
static const long ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028L;
static const long ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029L;
static const long ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030L;
static const long ERROR_EVT_MAX_INSERTS_REACHED = 15031L;
static const long ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032L;
static const long ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033L;
static const long ERROR_EVT_VERSION_TOO_OLD = 15034L;
static const long ERROR_EVT_VERSION_TOO_NEW = 15035L;
static const long ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036L;
static const long ERROR_EVT_PUBLISHER_DISABLED = 15037L;
static const long ERROR_EVT_FILTER_OUT_OF_RANGE = 15038L;
static const long ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080L;
static const long ERROR_EC_LOG_DISABLED = 15081L;
static const long ERROR_EC_CIRCULAR_FORWARDING = 15082L;
static const long ERROR_EC_CREDSTORE_FULL = 15083L;
static const long ERROR_EC_CRED_NOT_FOUND = 15084L;
static const long ERROR_EC_NO_ACTIVE_CHANNEL = 15085L;
static const long ERROR_MUI_FILE_NOT_FOUND = 15100L;
static const long ERROR_MUI_INVALID_FILE = 15101L;
static const long ERROR_MUI_INVALID_RC_CONFIG = 15102L;
static const long ERROR_MUI_INVALID_LOCALE_NAME = 15103L;
static const long ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104L;
static const long ERROR_MUI_FILE_NOT_LOADED = 15105L;
static const long ERROR_RESOURCE_ENUM_USER_STOP = 15106L;
static const long ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107L;
static const long ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108L;
static const long ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200L;
static const long ERROR_MCA_INVALID_VCP_VERSION = 15201L;
static const long ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202L;
static const long ERROR_MCA_MCCS_VERSION_MISMATCH = 15203L;
static const long ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204L;
static const long ERROR_MCA_INTERNAL_ERROR = 15205L;
static const long ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206L;
static const long ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207L;
static const long ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250L;
static const long ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299L;
static const long ERROR_HASH_NOT_SUPPORTED = 15300L;
static const long ERROR_HASH_NOT_PRESENT = 15301L;
static const int SEVERITY_SUCCESS = 0;
static const int SEVERITY_ERROR = 1;
static const int SUCCEEDED(hr) = (((HRESULT)(hr)) >= 0);
static const int FAILED(hr) = (((HRESULT)(hr)) < 0);
static const int IS_ERROR(Status) = (((unsigned long)(Status)) >> 31 == SEVERITY_ERROR);
static const int HRESULT_CODE(hr) = ((hr) & 0xFFFF);
static const int SCODE_CODE(sc) = ((sc) & 0xFFFF);
static const int HRESULT_FACILITY(hr) = (((hr) >> 16) & 0x1fff);
static const int SCODE_FACILITY(sc) = (((sc) >> 16) & 0x1fff);
static const int HRESULT_SEVERITY(hr) = (((hr) >> 31) & 0x1);
static const int SCODE_SEVERITY(sc) = (((sc) >> 31) & 0x1);
static const int MAKE_HRESULT(sev,fac,code) = ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) );
static const int MAKE_SCODE(sev,fac,code) = ((SCODE) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) );
static const int FACILITY_NT_BIT = 0x10000000;
static const int __HRESULT_FROM_WIN32(x) = ((HRESULT)(x) <= 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000)));
HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
static const int HRESULT_FROM_NT(x) = ((HRESULT) ((x) | FACILITY_NT_BIT));
static const int GetScode(hr) = ((SCODE) (hr));
static const int ResultFromScode(sc) = ((HRESULT) (sc));
static const int PropagateResult(hrPrevious,scBase) = ((HRESULT) scBase);
static const int E_NOT_SET = HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
static const int E_NOT_VALID_STATE = HRESULT_FROM_WIN32(ERROR_INVALID_STATE);
static const int E_NOT_SUFFICIENT_BUFFER = HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER);
static const int _HRESULT_TYPEDEF_(_sc) = ((HRESULT)_sc);
static const int NOERROR = 0;
static const int E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8000FFFFL);
static const int E_NOTIMPL = _HRESULT_TYPEDEF_(0x80004001L);
static const int E_OUTOFMEMORY = _HRESULT_TYPEDEF_(0x8007000EL);
static const int E_INVALIDARG = _HRESULT_TYPEDEF_(0x80070057L);
static const int E_NOINTERFACE = _HRESULT_TYPEDEF_(0x80004002L);
static const int E_POINTER = _HRESULT_TYPEDEF_(0x80004003L);
static const int E_HANDLE = _HRESULT_TYPEDEF_(0x80070006L);
static const int E_ABORT = _HRESULT_TYPEDEF_(0x80004004L);
static const int E_FAIL = _HRESULT_TYPEDEF_(0x80004005L);
static const int E_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80070005L);
static const int E_PENDING = _HRESULT_TYPEDEF_(0x8000000AL);
static const int CO_E_INIT_TLS = _HRESULT_TYPEDEF_(0x80004006L);
static const int CO_E_INIT_SHARED_ALLOCATOR = _HRESULT_TYPEDEF_(0x80004007L);
static const int CO_E_INIT_MEMORY_ALLOCATOR = _HRESULT_TYPEDEF_(0x80004008L);
static const int CO_E_INIT_CLASS_CACHE = _HRESULT_TYPEDEF_(0x80004009L);
static const int CO_E_INIT_RPC_CHANNEL = _HRESULT_TYPEDEF_(0x8000400AL);
static const int CO_E_INIT_TLS_SET_CHANNEL_CONTROL = _HRESULT_TYPEDEF_(0x8000400BL);
static const int CO_E_INIT_TLS_CHANNEL_CONTROL = _HRESULT_TYPEDEF_(0x8000400CL);
static const int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = _HRESULT_TYPEDEF_(0x8000400DL);
static const int CO_E_INIT_SCM_MUTEX_EXISTS = _HRESULT_TYPEDEF_(0x8000400EL);
static const int CO_E_INIT_SCM_FILE_MAPPING_EXISTS = _HRESULT_TYPEDEF_(0x8000400FL);
static const int CO_E_INIT_SCM_MAP_VIEW_OF_FILE = _HRESULT_TYPEDEF_(0x80004010L);
static const int CO_E_INIT_SCM_EXEC_FAILURE = _HRESULT_TYPEDEF_(0x80004011L);
static const int CO_E_INIT_ONLY_SINGLE_THREADED = _HRESULT_TYPEDEF_(0x80004012L);
static const int CO_E_CANT_REMOTE = _HRESULT_TYPEDEF_(0x80004013L);
static const int CO_E_BAD_SERVER_NAME = _HRESULT_TYPEDEF_(0x80004014L);
static const int CO_E_WRONG_SERVER_IDENTITY = _HRESULT_TYPEDEF_(0x80004015L);
static const int CO_E_OLE1DDE_DISABLED = _HRESULT_TYPEDEF_(0x80004016L);
static const int CO_E_RUNAS_SYNTAX = _HRESULT_TYPEDEF_(0x80004017L);
static const int CO_E_CREATEPROCESS_FAILURE = _HRESULT_TYPEDEF_(0x80004018L);
static const int CO_E_RUNAS_CREATEPROCESS_FAILURE = _HRESULT_TYPEDEF_(0x80004019L);
static const int CO_E_RUNAS_LOGON_FAILURE = _HRESULT_TYPEDEF_(0x8000401AL);
static const int CO_E_LAUNCH_PERMSSION_DENIED = _HRESULT_TYPEDEF_(0x8000401BL);
static const int CO_E_START_SERVICE_FAILURE = _HRESULT_TYPEDEF_(0x8000401CL);
static const int CO_E_REMOTE_COMMUNICATION_FAILURE = _HRESULT_TYPEDEF_(0x8000401DL);
static const int CO_E_SERVER_START_TIMEOUT = _HRESULT_TYPEDEF_(0x8000401EL);
static const int CO_E_CLSREG_INCONSISTENT = _HRESULT_TYPEDEF_(0x8000401FL);
static const int CO_E_IIDREG_INCONSISTENT = _HRESULT_TYPEDEF_(0x80004020L);
static const int CO_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80004021L);
static const int CO_E_RELOAD_DLL = _HRESULT_TYPEDEF_(0x80004022L);
static const int CO_E_MSI_ERROR = _HRESULT_TYPEDEF_(0x80004023L);
static const int CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = _HRESULT_TYPEDEF_(0x80004024L);
static const int CO_E_SERVER_PAUSED = _HRESULT_TYPEDEF_(0x80004025L);
static const int CO_E_SERVER_NOT_PAUSED = _HRESULT_TYPEDEF_(0x80004026L);
static const int CO_E_CLASS_DISABLED = _HRESULT_TYPEDEF_(0x80004027L);
static const int CO_E_CLRNOTAVAILABLE = _HRESULT_TYPEDEF_(0x80004028L);
static const int CO_E_ASYNC_WORK_REJECTED = _HRESULT_TYPEDEF_(0x80004029L);
static const int CO_E_SERVER_INIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8000402AL);
static const int CO_E_NO_SECCTX_IN_ACTIVATE = _HRESULT_TYPEDEF_(0x8000402BL);
static const int CO_E_TRACKER_CONFIG = _HRESULT_TYPEDEF_(0x80004030L);
static const int CO_E_THREADPOOL_CONFIG = _HRESULT_TYPEDEF_(0x80004031L);
static const int CO_E_SXS_CONFIG = _HRESULT_TYPEDEF_(0x80004032L);
static const int CO_E_MALFORMED_SPN = _HRESULT_TYPEDEF_(0x80004033L);
static const int S_OK = ((HRESULT)0L);
static const int S_FALSE = ((HRESULT)1L);
static const int OLE_E_FIRST = ((HRESULT)0x80040000L);
static const int OLE_E_LAST = ((HRESULT)0x800400FFL);
static const int OLE_S_FIRST = ((HRESULT)0x00040000L);
static const int OLE_S_LAST = ((HRESULT)0x000400FFL);
static const int OLE_E_OLEVERB = _HRESULT_TYPEDEF_(0x80040000L);
static const int OLE_E_ADVF = _HRESULT_TYPEDEF_(0x80040001L);
static const int OLE_E_ENUM_NOMORE = _HRESULT_TYPEDEF_(0x80040002L);
static const int OLE_E_ADVISENOTSUPPORTED = _HRESULT_TYPEDEF_(0x80040003L);
static const int OLE_E_NOCONNECTION = _HRESULT_TYPEDEF_(0x80040004L);
static const int OLE_E_NOTRUNNING = _HRESULT_TYPEDEF_(0x80040005L);
static const int OLE_E_NOCACHE = _HRESULT_TYPEDEF_(0x80040006L);
static const int OLE_E_BLANK = _HRESULT_TYPEDEF_(0x80040007L);
static const int OLE_E_CLASSDIFF = _HRESULT_TYPEDEF_(0x80040008L);
static const int OLE_E_CANT_GETMONIKER = _HRESULT_TYPEDEF_(0x80040009L);
static const int OLE_E_CANT_BINDTOSOURCE = _HRESULT_TYPEDEF_(0x8004000AL);
static const int OLE_E_STATIC = _HRESULT_TYPEDEF_(0x8004000BL);
static const int OLE_E_PROMPTSAVECANCELLED = _HRESULT_TYPEDEF_(0x8004000CL);
static const int OLE_E_INVALIDRECT = _HRESULT_TYPEDEF_(0x8004000DL);
static const int OLE_E_WRONGCOMPOBJ = _HRESULT_TYPEDEF_(0x8004000EL);
static const int OLE_E_INVALIDHWND = _HRESULT_TYPEDEF_(0x8004000FL);
static const int OLE_E_NOT_INPLACEACTIVE = _HRESULT_TYPEDEF_(0x80040010L);
static const int OLE_E_CANTCONVERT = _HRESULT_TYPEDEF_(0x80040011L);
static const int OLE_E_NOSTORAGE = _HRESULT_TYPEDEF_(0x80040012L);
static const int DV_E_FORMATETC = _HRESULT_TYPEDEF_(0x80040064L);
static const int DV_E_DVTARGETDEVICE = _HRESULT_TYPEDEF_(0x80040065L);
static const int DV_E_STGMEDIUM = _HRESULT_TYPEDEF_(0x80040066L);
static const int DV_E_STATDATA = _HRESULT_TYPEDEF_(0x80040067L);
static const int DV_E_LINDEX = _HRESULT_TYPEDEF_(0x80040068L);
static const int DV_E_TYMED = _HRESULT_TYPEDEF_(0x80040069L);
static const int DV_E_CLIPFORMAT = _HRESULT_TYPEDEF_(0x8004006AL);
static const int DV_E_DVASPECT = _HRESULT_TYPEDEF_(0x8004006BL);
static const int DV_E_DVTARGETDEVICE_SIZE = _HRESULT_TYPEDEF_(0x8004006CL);
static const int DV_E_NOIVIEWOBJECT = _HRESULT_TYPEDEF_(0x8004006DL);
static const long DRAGDROP_E_FIRST = 0x80040100L;
static const int DRAGDROP_E_LAST = 0x8004010FL;
static const long DRAGDROP_S_FIRST = 0x00040100L;
static const int DRAGDROP_S_LAST = 0x0004010FL;
static const int DRAGDROP_E_NOTREGISTERED = _HRESULT_TYPEDEF_(0x80040100L);
static const int DRAGDROP_E_ALREADYREGISTERED = _HRESULT_TYPEDEF_(0x80040101L);
static const int DRAGDROP_E_INVALIDHWND = _HRESULT_TYPEDEF_(0x80040102L);
static const long CLASSFACTORY_E_FIRST = 0x80040110L;
static const int CLASSFACTORY_E_LAST = 0x8004011FL;
static const long CLASSFACTORY_S_FIRST = 0x00040110L;
static const int CLASSFACTORY_S_LAST = 0x0004011FL;
static const int CLASS_E_NOAGGREGATION = _HRESULT_TYPEDEF_(0x80040110L);
static const int CLASS_E_CLASSNOTAVAILABLE = _HRESULT_TYPEDEF_(0x80040111L);
static const int CLASS_E_NOTLICENSED = _HRESULT_TYPEDEF_(0x80040112L);
static const long MARSHAL_E_FIRST = 0x80040120L;
static const int MARSHAL_E_LAST = 0x8004012FL;
static const long MARSHAL_S_FIRST = 0x00040120L;
static const int MARSHAL_S_LAST = 0x0004012FL;
static const long DATA_E_FIRST = 0x80040130L;
static const int DATA_E_LAST = 0x8004013FL;
static const long DATA_S_FIRST = 0x00040130L;
static const int DATA_S_LAST = 0x0004013FL;
static const long VIEW_E_FIRST = 0x80040140L;
static const int VIEW_E_LAST = 0x8004014FL;
static const long VIEW_S_FIRST = 0x00040140L;
static const int VIEW_S_LAST = 0x0004014FL;
static const int VIEW_E_DRAW = _HRESULT_TYPEDEF_(0x80040140L);
static const long REGDB_E_FIRST = 0x80040150L;
static const int REGDB_E_LAST = 0x8004015FL;
static const long REGDB_S_FIRST = 0x00040150L;
static const int REGDB_S_LAST = 0x0004015FL;
static const int REGDB_E_READREGDB = _HRESULT_TYPEDEF_(0x80040150L);
static const int REGDB_E_WRITEREGDB = _HRESULT_TYPEDEF_(0x80040151L);
static const int REGDB_E_KEYMISSING = _HRESULT_TYPEDEF_(0x80040152L);
static const int REGDB_E_INVALIDVALUE = _HRESULT_TYPEDEF_(0x80040153L);
static const int REGDB_E_CLASSNOTREG = _HRESULT_TYPEDEF_(0x80040154L);
static const int REGDB_E_IIDNOTREG = _HRESULT_TYPEDEF_(0x80040155L);
static const int REGDB_E_BADTHREADINGMODEL = _HRESULT_TYPEDEF_(0x80040156L);
static const long CAT_E_FIRST = 0x80040160L;
static const long CAT_E_LAST = 0x80040161L;
static const int CAT_E_CATIDNOEXIST = _HRESULT_TYPEDEF_(0x80040160L);
static const int CAT_E_NODESCRIPTION = _HRESULT_TYPEDEF_(0x80040161L);
static const long CS_E_FIRST = 0x80040164L;
static const int CS_E_LAST = 0x8004016FL;
static const int CS_E_PACKAGE_NOTFOUND = _HRESULT_TYPEDEF_(0x80040164L);
static const int CS_E_NOT_DELETABLE = _HRESULT_TYPEDEF_(0x80040165L);
static const int CS_E_CLASS_NOTFOUND = _HRESULT_TYPEDEF_(0x80040166L);
static const int CS_E_INVALID_VERSION = _HRESULT_TYPEDEF_(0x80040167L);
static const int CS_E_NO_CLASSSTORE = _HRESULT_TYPEDEF_(0x80040168L);
static const int CS_E_OBJECT_NOTFOUND = _HRESULT_TYPEDEF_(0x80040169L);
static const int CS_E_OBJECT_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x8004016AL);
static const int CS_E_INVALID_PATH = _HRESULT_TYPEDEF_(0x8004016BL);
static const int CS_E_NETWORK_ERROR = _HRESULT_TYPEDEF_(0x8004016CL);
static const int CS_E_ADMIN_LIMIT_EXCEEDED = _HRESULT_TYPEDEF_(0x8004016DL);
static const int CS_E_SCHEMA_MISMATCH = _HRESULT_TYPEDEF_(0x8004016EL);
static const int CS_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x8004016FL);
static const long CACHE_E_FIRST = 0x80040170L;
static const int CACHE_E_LAST = 0x8004017FL;
static const long CACHE_S_FIRST = 0x00040170L;
static const int CACHE_S_LAST = 0x0004017FL;
static const int CACHE_E_NOCACHE_UPDATED = _HRESULT_TYPEDEF_(0x80040170L);
static const long OLEOBJ_E_FIRST = 0x80040180L;
static const int OLEOBJ_E_LAST = 0x8004018FL;
static const long OLEOBJ_S_FIRST = 0x00040180L;
static const int OLEOBJ_S_LAST = 0x0004018FL;
static const int OLEOBJ_E_NOVERBS = _HRESULT_TYPEDEF_(0x80040180L);
static const int OLEOBJ_E_INVALIDVERB = _HRESULT_TYPEDEF_(0x80040181L);
static const long CLIENTSITE_E_FIRST = 0x80040190L;
static const int CLIENTSITE_E_LAST = 0x8004019FL;
static const long CLIENTSITE_S_FIRST = 0x00040190L;
static const int CLIENTSITE_S_LAST = 0x0004019FL;
static const int INPLACE_E_NOTUNDOABLE = _HRESULT_TYPEDEF_(0x800401A0L);
static const int INPLACE_E_NOTOOLSPACE = _HRESULT_TYPEDEF_(0x800401A1L);
static const long INPLACE_E_FIRST = 0x800401A0L;
static const int INPLACE_E_LAST = 0x800401AFL;
static const long INPLACE_S_FIRST = 0x000401A0L;
static const int INPLACE_S_LAST = 0x000401AFL;
static const long ENUM_E_FIRST = 0x800401B0L;
static const int ENUM_E_LAST = 0x800401BFL;
static const long ENUM_S_FIRST = 0x000401B0L;
static const int ENUM_S_LAST = 0x000401BFL;
static const long CONVERT10_E_FIRST = 0x800401C0L;
static const int CONVERT10_E_LAST = 0x800401CFL;
static const long CONVERT10_S_FIRST = 0x000401C0L;
static const int CONVERT10_S_LAST = 0x000401CFL;
static const int CONVERT10_E_OLESTREAM_GET = _HRESULT_TYPEDEF_(0x800401C0L);
static const int CONVERT10_E_OLESTREAM_PUT = _HRESULT_TYPEDEF_(0x800401C1L);
static const int CONVERT10_E_OLESTREAM_FMT = _HRESULT_TYPEDEF_(0x800401C2L);
static const int CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = _HRESULT_TYPEDEF_(0x800401C3L);
static const int CONVERT10_E_STG_FMT = _HRESULT_TYPEDEF_(0x800401C4L);
static const int CONVERT10_E_STG_NO_STD_STREAM = _HRESULT_TYPEDEF_(0x800401C5L);
static const int CONVERT10_E_STG_DIB_TO_BITMAP = _HRESULT_TYPEDEF_(0x800401C6L);
static const long CLIPBRD_E_FIRST = 0x800401D0L;
static const int CLIPBRD_E_LAST = 0x800401DFL;
static const long CLIPBRD_S_FIRST = 0x000401D0L;
static const int CLIPBRD_S_LAST = 0x000401DFL;
static const int CLIPBRD_E_CANT_OPEN = _HRESULT_TYPEDEF_(0x800401D0L);
static const int CLIPBRD_E_CANT_EMPTY = _HRESULT_TYPEDEF_(0x800401D1L);
static const int CLIPBRD_E_CANT_SET = _HRESULT_TYPEDEF_(0x800401D2L);
static const int CLIPBRD_E_BAD_DATA = _HRESULT_TYPEDEF_(0x800401D3L);
static const int CLIPBRD_E_CANT_CLOSE = _HRESULT_TYPEDEF_(0x800401D4L);
static const long MK_E_FIRST = 0x800401E0L;
static const int MK_E_LAST = 0x800401EFL;
static const long MK_S_FIRST = 0x000401E0L;
static const int MK_S_LAST = 0x000401EFL;
static const int MK_E_CONNECTMANUALLY = _HRESULT_TYPEDEF_(0x800401E0L);
static const int MK_E_EXCEEDEDDEADLINE = _HRESULT_TYPEDEF_(0x800401E1L);
static const int MK_E_NEEDGENERIC = _HRESULT_TYPEDEF_(0x800401E2L);
static const int MK_E_UNAVAILABLE = _HRESULT_TYPEDEF_(0x800401E3L);
static const int MK_E_SYNTAX = _HRESULT_TYPEDEF_(0x800401E4L);
static const int MK_E_NOOBJECT = _HRESULT_TYPEDEF_(0x800401E5L);
static const int MK_E_INVALIDEXTENSION = _HRESULT_TYPEDEF_(0x800401E6L);
static const int MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = _HRESULT_TYPEDEF_(0x800401E7L);
static const int MK_E_NOTBINDABLE = _HRESULT_TYPEDEF_(0x800401E8L);
static const int MK_E_NOTBOUND = _HRESULT_TYPEDEF_(0x800401E9L);
static const int MK_E_CANTOPENFILE = _HRESULT_TYPEDEF_(0x800401EAL);
static const int MK_E_MUSTBOTHERUSER = _HRESULT_TYPEDEF_(0x800401EBL);
static const int MK_E_NOINVERSE = _HRESULT_TYPEDEF_(0x800401ECL);
static const int MK_E_NOSTORAGE = _HRESULT_TYPEDEF_(0x800401EDL);
static const int MK_E_NOPREFIX = _HRESULT_TYPEDEF_(0x800401EEL);
static const int MK_E_ENUMERATION_FAILED = _HRESULT_TYPEDEF_(0x800401EFL);
static const long CO_E_FIRST = 0x800401F0L;
static const int CO_E_LAST = 0x800401FFL;
static const long CO_S_FIRST = 0x000401F0L;
static const int CO_S_LAST = 0x000401FFL;
static const int CO_E_NOTINITIALIZED = _HRESULT_TYPEDEF_(0x800401F0L);
static const int CO_E_ALREADYINITIALIZED = _HRESULT_TYPEDEF_(0x800401F1L);
static const int CO_E_CANTDETERMINECLASS = _HRESULT_TYPEDEF_(0x800401F2L);
static const int CO_E_CLASSSTRING = _HRESULT_TYPEDEF_(0x800401F3L);
static const int CO_E_IIDSTRING = _HRESULT_TYPEDEF_(0x800401F4L);
static const int CO_E_APPNOTFOUND = _HRESULT_TYPEDEF_(0x800401F5L);
static const int CO_E_APPSINGLEUSE = _HRESULT_TYPEDEF_(0x800401F6L);
static const int CO_E_ERRORINAPP = _HRESULT_TYPEDEF_(0x800401F7L);
static const int CO_E_DLLNOTFOUND = _HRESULT_TYPEDEF_(0x800401F8L);
static const int CO_E_ERRORINDLL = _HRESULT_TYPEDEF_(0x800401F9L);
static const int CO_E_WRONGOSFORAPP = _HRESULT_TYPEDEF_(0x800401FAL);
static const int CO_E_OBJNOTREG = _HRESULT_TYPEDEF_(0x800401FBL);
static const int CO_E_OBJISREG = _HRESULT_TYPEDEF_(0x800401FCL);
static const int CO_E_OBJNOTCONNECTED = _HRESULT_TYPEDEF_(0x800401FDL);
static const int CO_E_APPDIDNTREG = _HRESULT_TYPEDEF_(0x800401FEL);
static const int CO_E_RELEASED = _HRESULT_TYPEDEF_(0x800401FFL);
static const long EVENT_E_FIRST = 0x80040200L;
static const int EVENT_E_LAST = 0x8004021FL;
static const long EVENT_S_FIRST = 0x00040200L;
static const int EVENT_S_LAST = 0x0004021FL;
static const int EVENT_S_SOME_SUBSCRIBERS_FAILED = _HRESULT_TYPEDEF_(0x00040200L);
static const int EVENT_E_ALL_SUBSCRIBERS_FAILED = _HRESULT_TYPEDEF_(0x80040201L);
static const int EVENT_S_NOSUBSCRIBERS = _HRESULT_TYPEDEF_(0x00040202L);
static const int EVENT_E_QUERYSYNTAX = _HRESULT_TYPEDEF_(0x80040203L);
static const int EVENT_E_QUERYFIELD = _HRESULT_TYPEDEF_(0x80040204L);
static const int EVENT_E_INTERNALEXCEPTION = _HRESULT_TYPEDEF_(0x80040205L);
static const int EVENT_E_INTERNALERROR = _HRESULT_TYPEDEF_(0x80040206L);
static const int EVENT_E_INVALID_PER_USER_SID = _HRESULT_TYPEDEF_(0x80040207L);
static const int EVENT_E_USER_EXCEPTION = _HRESULT_TYPEDEF_(0x80040208L);
static const int EVENT_E_TOO_MANY_METHODS = _HRESULT_TYPEDEF_(0x80040209L);
static const int EVENT_E_MISSING_EVENTCLASS = _HRESULT_TYPEDEF_(0x8004020AL);
static const int EVENT_E_NOT_ALL_REMOVED = _HRESULT_TYPEDEF_(0x8004020BL);
static const int EVENT_E_COMPLUS_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8004020CL);
static const int EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = _HRESULT_TYPEDEF_(0x8004020DL);
static const int EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = _HRESULT_TYPEDEF_(0x8004020EL);
static const int EVENT_E_INVALID_EVENT_CLASS_PARTITION = _HRESULT_TYPEDEF_(0x8004020FL);
static const int EVENT_E_PER_USER_SID_NOT_LOGGED_ON = _HRESULT_TYPEDEF_(0x80040210L);
static const int XACT_E_FIRST = 0x8004D000;
static const int XACT_E_LAST = 0x8004D02B;
static const int XACT_S_FIRST = 0x0004D000;
static const int XACT_S_LAST = 0x0004D010;
static const int XACT_E_ALREADYOTHERSINGLEPHASE = _HRESULT_TYPEDEF_(0x8004D000L);
static const int XACT_E_CANTRETAIN = _HRESULT_TYPEDEF_(0x8004D001L);
static const int XACT_E_COMMITFAILED = _HRESULT_TYPEDEF_(0x8004D002L);
static const int XACT_E_COMMITPREVENTED = _HRESULT_TYPEDEF_(0x8004D003L);
static const int XACT_E_HEURISTICABORT = _HRESULT_TYPEDEF_(0x8004D004L);
static const int XACT_E_HEURISTICCOMMIT = _HRESULT_TYPEDEF_(0x8004D005L);
static const int XACT_E_HEURISTICDAMAGE = _HRESULT_TYPEDEF_(0x8004D006L);
static const int XACT_E_HEURISTICDANGER = _HRESULT_TYPEDEF_(0x8004D007L);
static const int XACT_E_ISOLATIONLEVEL = _HRESULT_TYPEDEF_(0x8004D008L);
static const int XACT_E_NOASYNC = _HRESULT_TYPEDEF_(0x8004D009L);
static const int XACT_E_NOENLIST = _HRESULT_TYPEDEF_(0x8004D00AL);
static const int XACT_E_NOISORETAIN = _HRESULT_TYPEDEF_(0x8004D00BL);
static const int XACT_E_NORESOURCE = _HRESULT_TYPEDEF_(0x8004D00CL);
static const int XACT_E_NOTCURRENT = _HRESULT_TYPEDEF_(0x8004D00DL);
static const int XACT_E_NOTRANSACTION = _HRESULT_TYPEDEF_(0x8004D00EL);
static const int XACT_E_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x8004D00FL);
static const int XACT_E_UNKNOWNRMGRID = _HRESULT_TYPEDEF_(0x8004D010L);
static const int XACT_E_WRONGSTATE = _HRESULT_TYPEDEF_(0x8004D011L);
static const int XACT_E_WRONGUOW = _HRESULT_TYPEDEF_(0x8004D012L);
static const int XACT_E_XTIONEXISTS = _HRESULT_TYPEDEF_(0x8004D013L);
static const int XACT_E_NOIMPORTOBJECT = _HRESULT_TYPEDEF_(0x8004D014L);
static const int XACT_E_INVALIDCOOKIE = _HRESULT_TYPEDEF_(0x8004D015L);
static const int XACT_E_INDOUBT = _HRESULT_TYPEDEF_(0x8004D016L);
static const int XACT_E_NOTIMEOUT = _HRESULT_TYPEDEF_(0x8004D017L);
static const int XACT_E_ALREADYINPROGRESS = _HRESULT_TYPEDEF_(0x8004D018L);
static const int XACT_E_ABORTED = _HRESULT_TYPEDEF_(0x8004D019L);
static const int XACT_E_LOGFULL = _HRESULT_TYPEDEF_(0x8004D01AL);
static const int XACT_E_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004D01BL);
static const int XACT_E_CONNECTION_DOWN = _HRESULT_TYPEDEF_(0x8004D01CL);
static const int XACT_E_CONNECTION_DENIED = _HRESULT_TYPEDEF_(0x8004D01DL);
static const int XACT_E_REENLISTTIMEOUT = _HRESULT_TYPEDEF_(0x8004D01EL);
static const int XACT_E_TIP_CONNECT_FAILED = _HRESULT_TYPEDEF_(0x8004D01FL);
static const int XACT_E_TIP_PROTOCOL_ERROR = _HRESULT_TYPEDEF_(0x8004D020L);
static const int XACT_E_TIP_PULL_FAILED = _HRESULT_TYPEDEF_(0x8004D021L);
static const int XACT_E_DEST_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004D022L);
static const int XACT_E_TIP_DISABLED = _HRESULT_TYPEDEF_(0x8004D023L);
static const int XACT_E_NETWORK_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D024L);
static const int XACT_E_PARTNER_NETWORK_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D025L);
static const int XACT_E_XA_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D026L);
static const int XACT_E_UNABLE_TO_READ_DTC_CONFIG = _HRESULT_TYPEDEF_(0x8004D027L);
static const int XACT_E_UNABLE_TO_LOAD_DTC_PROXY = _HRESULT_TYPEDEF_(0x8004D028L);
static const int XACT_E_ABORTING = _HRESULT_TYPEDEF_(0x8004D029L);
static const int XACT_E_PUSH_COMM_FAILURE = _HRESULT_TYPEDEF_(0x8004D02AL);
static const int XACT_E_PULL_COMM_FAILURE = _HRESULT_TYPEDEF_(0x8004D02BL);
static const int XACT_E_LU_TX_DISABLED = _HRESULT_TYPEDEF_(0x8004D02CL);
static const int XACT_E_CLERKNOTFOUND = _HRESULT_TYPEDEF_(0x8004D080L);
static const int XACT_E_CLERKEXISTS = _HRESULT_TYPEDEF_(0x8004D081L);
static const int XACT_E_RECOVERYINPROGRESS = _HRESULT_TYPEDEF_(0x8004D082L);
static const int XACT_E_TRANSACTIONCLOSED = _HRESULT_TYPEDEF_(0x8004D083L);
static const int XACT_E_INVALIDLSN = _HRESULT_TYPEDEF_(0x8004D084L);
static const int XACT_E_REPLAYREQUEST = _HRESULT_TYPEDEF_(0x8004D085L);
static const int XACT_S_ASYNC = _HRESULT_TYPEDEF_(0x0004D000L);
static const int XACT_S_DEFECT = _HRESULT_TYPEDEF_(0x0004D001L);
static const int XACT_S_READONLY = _HRESULT_TYPEDEF_(0x0004D002L);
static const int XACT_S_SOMENORETAIN = _HRESULT_TYPEDEF_(0x0004D003L);
static const int XACT_S_OKINFORM = _HRESULT_TYPEDEF_(0x0004D004L);
static const int XACT_S_MADECHANGESCONTENT = _HRESULT_TYPEDEF_(0x0004D005L);
static const int XACT_S_MADECHANGESINFORM = _HRESULT_TYPEDEF_(0x0004D006L);
static const int XACT_S_ALLNORETAIN = _HRESULT_TYPEDEF_(0x0004D007L);
static const int XACT_S_ABORTING = _HRESULT_TYPEDEF_(0x0004D008L);
static const int XACT_S_SINGLEPHASE = _HRESULT_TYPEDEF_(0x0004D009L);
static const int XACT_S_LOCALLY_OK = _HRESULT_TYPEDEF_(0x0004D00AL);
static const int XACT_S_LASTRESOURCEMANAGER = _HRESULT_TYPEDEF_(0x0004D010L);
static const long CONTEXT_E_FIRST = 0x8004E000L;
static const int CONTEXT_E_LAST = 0x8004E02FL;
static const long CONTEXT_S_FIRST = 0x0004E000L;
static const int CONTEXT_S_LAST = 0x0004E02FL;
static const int CONTEXT_E_ABORTED = _HRESULT_TYPEDEF_(0x8004E002L);
static const int CONTEXT_E_ABORTING = _HRESULT_TYPEDEF_(0x8004E003L);
static const int CONTEXT_E_NOCONTEXT = _HRESULT_TYPEDEF_(0x8004E004L);
static const int CONTEXT_E_WOULD_DEADLOCK = _HRESULT_TYPEDEF_(0x8004E005L);
static const int CONTEXT_E_SYNCH_TIMEOUT = _HRESULT_TYPEDEF_(0x8004E006L);
static const int CONTEXT_E_OLDREF = _HRESULT_TYPEDEF_(0x8004E007L);
static const int CONTEXT_E_ROLENOTFOUND = _HRESULT_TYPEDEF_(0x8004E00CL);
static const int CONTEXT_E_TMNOTAVAILABLE = _HRESULT_TYPEDEF_(0x8004E00FL);
static const int CO_E_ACTIVATIONFAILED = _HRESULT_TYPEDEF_(0x8004E021L);
static const int CO_E_ACTIVATIONFAILED_EVENTLOGGED = _HRESULT_TYPEDEF_(0x8004E022L);
static const int CO_E_ACTIVATIONFAILED_CATALOGERROR = _HRESULT_TYPEDEF_(0x8004E023L);
static const int CO_E_ACTIVATIONFAILED_TIMEOUT = _HRESULT_TYPEDEF_(0x8004E024L);
static const int CO_E_INITIALIZATIONFAILED = _HRESULT_TYPEDEF_(0x8004E025L);
static const int CONTEXT_E_NOJIT = _HRESULT_TYPEDEF_(0x8004E026L);
static const int CONTEXT_E_NOTRANSACTION = _HRESULT_TYPEDEF_(0x8004E027L);
static const int CO_E_THREADINGMODEL_CHANGED = _HRESULT_TYPEDEF_(0x8004E028L);
static const int CO_E_NOIISINTRINSICS = _HRESULT_TYPEDEF_(0x8004E029L);
static const int CO_E_NOCOOKIES = _HRESULT_TYPEDEF_(0x8004E02AL);
static const int CO_E_DBERROR = _HRESULT_TYPEDEF_(0x8004E02BL);
static const int CO_E_NOTPOOLED = _HRESULT_TYPEDEF_(0x8004E02CL);
static const int CO_E_NOTCONSTRUCTED = _HRESULT_TYPEDEF_(0x8004E02DL);
static const int CO_E_NOSYNCHRONIZATION = _HRESULT_TYPEDEF_(0x8004E02EL);
static const int CO_E_ISOLEVELMISMATCH = _HRESULT_TYPEDEF_(0x8004E02FL);
static const int CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8004E030L);
static const int CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = _HRESULT_TYPEDEF_(0x8004E031L);
static const int OLE_S_USEREG = _HRESULT_TYPEDEF_(0x00040000L);
static const int OLE_S_STATIC = _HRESULT_TYPEDEF_(0x00040001L);
static const int OLE_S_MAC_CLIPFORMAT = _HRESULT_TYPEDEF_(0x00040002L);
static const int DRAGDROP_S_DROP = _HRESULT_TYPEDEF_(0x00040100L);
static const int DRAGDROP_S_CANCEL = _HRESULT_TYPEDEF_(0x00040101L);
static const int DRAGDROP_S_USEDEFAULTCURSORS = _HRESULT_TYPEDEF_(0x00040102L);
static const int DATA_S_SAMEFORMATETC = _HRESULT_TYPEDEF_(0x00040130L);
static const int VIEW_S_ALREADY_FROZEN = _HRESULT_TYPEDEF_(0x00040140L);
static const int CACHE_S_FORMATETC_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x00040170L);
static const int CACHE_S_SAMECACHE = _HRESULT_TYPEDEF_(0x00040171L);
static const int CACHE_S_SOMECACHES_NOTUPDATED = _HRESULT_TYPEDEF_(0x00040172L);
static const int OLEOBJ_S_INVALIDVERB = _HRESULT_TYPEDEF_(0x00040180L);
static const int OLEOBJ_S_CANNOT_DOVERB_NOW = _HRESULT_TYPEDEF_(0x00040181L);
static const int OLEOBJ_S_INVALIDHWND = _HRESULT_TYPEDEF_(0x00040182L);
static const int INPLACE_S_TRUNCATED = _HRESULT_TYPEDEF_(0x000401A0L);
static const int CONVERT10_S_NO_PRESENTATION = _HRESULT_TYPEDEF_(0x000401C0L);
static const int MK_S_REDUCED_TO_SELF = _HRESULT_TYPEDEF_(0x000401E2L);
static const int MK_S_ME = _HRESULT_TYPEDEF_(0x000401E4L);
static const int MK_S_HIM = _HRESULT_TYPEDEF_(0x000401E5L);
static const int MK_S_US = _HRESULT_TYPEDEF_(0x000401E6L);
static const int MK_S_MONIKERALREADYREGISTERED = _HRESULT_TYPEDEF_(0x000401E7L);
static const int SCHED_S_TASK_READY = _HRESULT_TYPEDEF_(0x00041300L);
static const int SCHED_S_TASK_RUNNING = _HRESULT_TYPEDEF_(0x00041301L);
static const int SCHED_S_TASK_DISABLED = _HRESULT_TYPEDEF_(0x00041302L);
static const int SCHED_S_TASK_HAS_NOT_RUN = _HRESULT_TYPEDEF_(0x00041303L);
static const int SCHED_S_TASK_NO_MORE_RUNS = _HRESULT_TYPEDEF_(0x00041304L);
static const int SCHED_S_TASK_NOT_SCHEDULED = _HRESULT_TYPEDEF_(0x00041305L);
static const int SCHED_S_TASK_TERMINATED = _HRESULT_TYPEDEF_(0x00041306L);
static const int SCHED_S_TASK_NO_VALID_TRIGGERS = _HRESULT_TYPEDEF_(0x00041307L);
static const int SCHED_S_EVENT_TRIGGER = _HRESULT_TYPEDEF_(0x00041308L);
static const int SCHED_E_TRIGGER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80041309L);
static const int SCHED_E_TASK_NOT_READY = _HRESULT_TYPEDEF_(0x8004130AL);
static const int SCHED_E_TASK_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8004130BL);
static const int SCHED_E_SERVICE_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8004130CL);
static const int SCHED_E_CANNOT_OPEN_TASK = _HRESULT_TYPEDEF_(0x8004130DL);
static const int SCHED_E_INVALID_TASK = _HRESULT_TYPEDEF_(0x8004130EL);
static const int SCHED_E_ACCOUNT_INFORMATION_NOT_SET = _HRESULT_TYPEDEF_(0x8004130FL);
static const int SCHED_E_ACCOUNT_NAME_NOT_FOUND = _HRESULT_TYPEDEF_(0x80041310L);
static const int SCHED_E_ACCOUNT_DBASE_CORRUPT = _HRESULT_TYPEDEF_(0x80041311L);
static const int SCHED_E_NO_SECURITY_SERVICES = _HRESULT_TYPEDEF_(0x80041312L);
static const int SCHED_E_UNKNOWN_OBJECT_VERSION = _HRESULT_TYPEDEF_(0x80041313L);
static const int SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = _HRESULT_TYPEDEF_(0x80041314L);
static const int SCHED_E_SERVICE_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80041315L);
static const int SCHED_E_UNEXPECTEDNODE = _HRESULT_TYPEDEF_(0x80041316L);
static const int SCHED_E_NAMESPACE = _HRESULT_TYPEDEF_(0x80041317L);
static const int SCHED_E_INVALIDVALUE = _HRESULT_TYPEDEF_(0x80041318L);
static const int SCHED_E_MISSINGNODE = _HRESULT_TYPEDEF_(0x80041319L);
static const int SCHED_E_MALFORMEDXML = _HRESULT_TYPEDEF_(0x8004131AL);
static const int SCHED_S_SOME_TRIGGERS_FAILED = _HRESULT_TYPEDEF_(0x0004131BL);
static const int SCHED_S_BATCH_LOGON_PROBLEM = _HRESULT_TYPEDEF_(0x0004131CL);
static const int SCHED_E_TOO_MANY_NODES = _HRESULT_TYPEDEF_(0x8004131DL);
static const int SCHED_E_PAST_END_BOUNDARY = _HRESULT_TYPEDEF_(0x8004131EL);
static const int SCHED_E_ALREADY_RUNNING = _HRESULT_TYPEDEF_(0x8004131FL);
static const int SCHED_E_USER_NOT_LOGGED_ON = _HRESULT_TYPEDEF_(0x80041320L);
static const int SCHED_E_INVALID_TASK_HASH = _HRESULT_TYPEDEF_(0x80041321L);
static const int SCHED_E_SERVICE_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80041322L);
static const int SCHED_E_SERVICE_TOO_BUSY = _HRESULT_TYPEDEF_(0x80041323L);
static const int SCHED_E_TASK_ATTEMPTED = _HRESULT_TYPEDEF_(0x80041324L);
static const int SCHED_S_TASK_QUEUED = _HRESULT_TYPEDEF_(0x00041325L);
static const int SCHED_E_TASK_DISABLED = _HRESULT_TYPEDEF_(0x80041326L);
static const int SCHED_E_TASK_NOT_V1_COMPAT = _HRESULT_TYPEDEF_(0x80041327L);
static const int SCHED_E_START_ON_DEMAND = _HRESULT_TYPEDEF_(0x80041328L);
static const int CO_E_CLASS_CREATE_FAILED = _HRESULT_TYPEDEF_(0x80080001L);
static const int CO_E_SCM_ERROR = _HRESULT_TYPEDEF_(0x80080002L);
static const int CO_E_SCM_RPC_FAILURE = _HRESULT_TYPEDEF_(0x80080003L);
static const int CO_E_BAD_PATH = _HRESULT_TYPEDEF_(0x80080004L);
static const int CO_E_SERVER_EXEC_FAILURE = _HRESULT_TYPEDEF_(0x80080005L);
static const int CO_E_OBJSRV_RPC_FAILURE = _HRESULT_TYPEDEF_(0x80080006L);
static const int MK_E_NO_NORMALIZED = _HRESULT_TYPEDEF_(0x80080007L);
static const int CO_E_SERVER_STOPPING = _HRESULT_TYPEDEF_(0x80080008L);
static const int MEM_E_INVALID_ROOT = _HRESULT_TYPEDEF_(0x80080009L);
static const int MEM_E_INVALID_LINK = _HRESULT_TYPEDEF_(0x80080010L);
static const int MEM_E_INVALID_SIZE = _HRESULT_TYPEDEF_(0x80080011L);
static const int CO_S_NOTALLINTERFACES = _HRESULT_TYPEDEF_(0x00080012L);
static const int CO_S_MACHINENAMENOTFOUND = _HRESULT_TYPEDEF_(0x00080013L);
static const int CO_E_MISSING_DISPLAYNAME = _HRESULT_TYPEDEF_(0x80080015L);
static const int CO_E_RUNAS_VALUE_MUST_BE_AAA = _HRESULT_TYPEDEF_(0x80080016L);
static const int CO_E_ELEVATION_DISABLED = _HRESULT_TYPEDEF_(0x80080017L);
static const int DISP_E_UNKNOWNINTERFACE = _HRESULT_TYPEDEF_(0x80020001L);
static const int DISP_E_MEMBERNOTFOUND = _HRESULT_TYPEDEF_(0x80020003L);
static const int DISP_E_PARAMNOTFOUND = _HRESULT_TYPEDEF_(0x80020004L);
static const int DISP_E_TYPEMISMATCH = _HRESULT_TYPEDEF_(0x80020005L);
static const int DISP_E_UNKNOWNNAME = _HRESULT_TYPEDEF_(0x80020006L);
static const int DISP_E_NONAMEDARGS = _HRESULT_TYPEDEF_(0x80020007L);
static const int DISP_E_BADVARTYPE = _HRESULT_TYPEDEF_(0x80020008L);
static const int DISP_E_EXCEPTION = _HRESULT_TYPEDEF_(0x80020009L);
static const int DISP_E_OVERFLOW = _HRESULT_TYPEDEF_(0x8002000AL);
static const int DISP_E_BADINDEX = _HRESULT_TYPEDEF_(0x8002000BL);
static const int DISP_E_UNKNOWNLCID = _HRESULT_TYPEDEF_(0x8002000CL);
static const int DISP_E_ARRAYISLOCKED = _HRESULT_TYPEDEF_(0x8002000DL);
static const int DISP_E_BADPARAMCOUNT = _HRESULT_TYPEDEF_(0x8002000EL);
static const int DISP_E_PARAMNOTOPTIONAL = _HRESULT_TYPEDEF_(0x8002000FL);
static const int DISP_E_BADCALLEE = _HRESULT_TYPEDEF_(0x80020010L);
static const int DISP_E_NOTACOLLECTION = _HRESULT_TYPEDEF_(0x80020011L);
static const int DISP_E_DIVBYZERO = _HRESULT_TYPEDEF_(0x80020012L);
static const int DISP_E_BUFFERTOOSMALL = _HRESULT_TYPEDEF_(0x80020013L);
static const int TYPE_E_BUFFERTOOSMALL = _HRESULT_TYPEDEF_(0x80028016L);
static const int TYPE_E_FIELDNOTFOUND = _HRESULT_TYPEDEF_(0x80028017L);
static const int TYPE_E_INVDATAREAD = _HRESULT_TYPEDEF_(0x80028018L);
static const int TYPE_E_UNSUPFORMAT = _HRESULT_TYPEDEF_(0x80028019L);
static const int TYPE_E_REGISTRYACCESS = _HRESULT_TYPEDEF_(0x8002801CL);
static const int TYPE_E_LIBNOTREGISTERED = _HRESULT_TYPEDEF_(0x8002801DL);
static const int TYPE_E_UNDEFINEDTYPE = _HRESULT_TYPEDEF_(0x80028027L);
static const int TYPE_E_QUALIFIEDNAMEDISALLOWED = _HRESULT_TYPEDEF_(0x80028028L);
static const int TYPE_E_INVALIDSTATE = _HRESULT_TYPEDEF_(0x80028029L);
static const int TYPE_E_WRONGTYPEKIND = _HRESULT_TYPEDEF_(0x8002802AL);
static const int TYPE_E_ELEMENTNOTFOUND = _HRESULT_TYPEDEF_(0x8002802BL);
static const int TYPE_E_AMBIGUOUSNAME = _HRESULT_TYPEDEF_(0x8002802CL);
static const int TYPE_E_NAMECONFLICT = _HRESULT_TYPEDEF_(0x8002802DL);
static const int TYPE_E_UNKNOWNLCID = _HRESULT_TYPEDEF_(0x8002802EL);
static const int TYPE_E_DLLFUNCTIONNOTFOUND = _HRESULT_TYPEDEF_(0x8002802FL);
static const int TYPE_E_BADMODULEKIND = _HRESULT_TYPEDEF_(0x800288BDL);
static const int TYPE_E_SIZETOOBIG = _HRESULT_TYPEDEF_(0x800288C5L);
static const int TYPE_E_DUPLICATEID = _HRESULT_TYPEDEF_(0x800288C6L);
static const int TYPE_E_INVALIDID = _HRESULT_TYPEDEF_(0x800288CFL);
static const int TYPE_E_TYPEMISMATCH = _HRESULT_TYPEDEF_(0x80028CA0L);
static const int TYPE_E_OUTOFBOUNDS = _HRESULT_TYPEDEF_(0x80028CA1L);
static const int TYPE_E_IOERROR = _HRESULT_TYPEDEF_(0x80028CA2L);
static const int TYPE_E_CANTCREATETMPFILE = _HRESULT_TYPEDEF_(0x80028CA3L);
static const int TYPE_E_CANTLOADLIBRARY = _HRESULT_TYPEDEF_(0x80029C4AL);
static const int TYPE_E_INCONSISTENTPROPFUNCS = _HRESULT_TYPEDEF_(0x80029C83L);
static const int TYPE_E_CIRCULARTYPE = _HRESULT_TYPEDEF_(0x80029C84L);
static const int STG_E_INVALIDFUNCTION = _HRESULT_TYPEDEF_(0x80030001L);
static const int STG_E_FILENOTFOUND = _HRESULT_TYPEDEF_(0x80030002L);
static const int STG_E_PATHNOTFOUND = _HRESULT_TYPEDEF_(0x80030003L);
static const int STG_E_TOOMANYOPENFILES = _HRESULT_TYPEDEF_(0x80030004L);
static const int STG_E_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80030005L);
static const int STG_E_INVALIDHANDLE = _HRESULT_TYPEDEF_(0x80030006L);
static const int STG_E_INSUFFICIENTMEMORY = _HRESULT_TYPEDEF_(0x80030008L);
static const int STG_E_INVALIDPOINTER = _HRESULT_TYPEDEF_(0x80030009L);
static const int STG_E_NOMOREFILES = _HRESULT_TYPEDEF_(0x80030012L);
static const int STG_E_DISKISWRITEPROTECTED = _HRESULT_TYPEDEF_(0x80030013L);
static const int STG_E_SEEKERROR = _HRESULT_TYPEDEF_(0x80030019L);
static const int STG_E_WRITEFAULT = _HRESULT_TYPEDEF_(0x8003001DL);
static const int STG_E_READFAULT = _HRESULT_TYPEDEF_(0x8003001EL);
static const int STG_E_SHAREVIOLATION = _HRESULT_TYPEDEF_(0x80030020L);
static const int STG_E_LOCKVIOLATION = _HRESULT_TYPEDEF_(0x80030021L);
static const int STG_E_FILEALREADYEXISTS = _HRESULT_TYPEDEF_(0x80030050L);
static const int STG_E_INVALIDPARAMETER = _HRESULT_TYPEDEF_(0x80030057L);
static const int STG_E_MEDIUMFULL = _HRESULT_TYPEDEF_(0x80030070L);
static const int STG_E_PROPSETMISMATCHED = _HRESULT_TYPEDEF_(0x800300F0L);
static const int STG_E_ABNORMALAPIEXIT = _HRESULT_TYPEDEF_(0x800300FAL);
static const int STG_E_INVALIDHEADER = _HRESULT_TYPEDEF_(0x800300FBL);
static const int STG_E_INVALIDNAME = _HRESULT_TYPEDEF_(0x800300FCL);
static const int STG_E_UNKNOWN = _HRESULT_TYPEDEF_(0x800300FDL);
static const int STG_E_UNIMPLEMENTEDFUNCTION = _HRESULT_TYPEDEF_(0x800300FEL);
static const int STG_E_INVALIDFLAG = _HRESULT_TYPEDEF_(0x800300FFL);
static const int STG_E_INUSE = _HRESULT_TYPEDEF_(0x80030100L);
static const int STG_E_NOTCURRENT = _HRESULT_TYPEDEF_(0x80030101L);
static const int STG_E_REVERTED = _HRESULT_TYPEDEF_(0x80030102L);
static const int STG_E_CANTSAVE = _HRESULT_TYPEDEF_(0x80030103L);
static const int STG_E_OLDFORMAT = _HRESULT_TYPEDEF_(0x80030104L);
static const int STG_E_OLDDLL = _HRESULT_TYPEDEF_(0x80030105L);
static const int STG_E_SHAREREQUIRED = _HRESULT_TYPEDEF_(0x80030106L);
static const int STG_E_NOTFILEBASEDSTORAGE = _HRESULT_TYPEDEF_(0x80030107L);
static const int STG_E_EXTANTMARSHALLINGS = _HRESULT_TYPEDEF_(0x80030108L);
static const int STG_E_DOCFILECORRUPT = _HRESULT_TYPEDEF_(0x80030109L);
static const int STG_E_BADBASEADDRESS = _HRESULT_TYPEDEF_(0x80030110L);
static const int STG_E_DOCFILETOOLARGE = _HRESULT_TYPEDEF_(0x80030111L);
static const int STG_E_NOTSIMPLEFORMAT = _HRESULT_TYPEDEF_(0x80030112L);
static const int STG_E_INCOMPLETE = _HRESULT_TYPEDEF_(0x80030201L);
static const int STG_E_TERMINATED = _HRESULT_TYPEDEF_(0x80030202L);
static const int STG_S_CONVERTED = _HRESULT_TYPEDEF_(0x00030200L);
static const int STG_S_BLOCK = _HRESULT_TYPEDEF_(0x00030201L);
static const int STG_S_RETRYNOW = _HRESULT_TYPEDEF_(0x00030202L);
static const int STG_S_MONITORING = _HRESULT_TYPEDEF_(0x00030203L);
static const int STG_S_MULTIPLEOPENS = _HRESULT_TYPEDEF_(0x00030204L);
static const int STG_S_CONSOLIDATIONFAILED = _HRESULT_TYPEDEF_(0x00030205L);
static const int STG_S_CANNOTCONSOLIDATE = _HRESULT_TYPEDEF_(0x00030206L);
static const int STG_E_STATUS_COPY_PROTECTION_FAILURE = _HRESULT_TYPEDEF_(0x80030305L);
static const int STG_E_CSS_AUTHENTICATION_FAILURE = _HRESULT_TYPEDEF_(0x80030306L);
static const int STG_E_CSS_KEY_NOT_PRESENT = _HRESULT_TYPEDEF_(0x80030307L);
static const int STG_E_CSS_KEY_NOT_ESTABLISHED = _HRESULT_TYPEDEF_(0x80030308L);
static const int STG_E_CSS_SCRAMBLED_SECTOR = _HRESULT_TYPEDEF_(0x80030309L);
static const int STG_E_CSS_REGION_MISMATCH = _HRESULT_TYPEDEF_(0x8003030AL);
static const int STG_E_RESETS_EXHAUSTED = _HRESULT_TYPEDEF_(0x8003030BL);
static const int RPC_E_CALL_REJECTED = _HRESULT_TYPEDEF_(0x80010001L);
static const int RPC_E_CALL_CANCELED = _HRESULT_TYPEDEF_(0x80010002L);
static const int RPC_E_CANTPOST_INSENDCALL = _HRESULT_TYPEDEF_(0x80010003L);
static const int RPC_E_CANTCALLOUT_INASYNCCALL = _HRESULT_TYPEDEF_(0x80010004L);
static const int RPC_E_CANTCALLOUT_INEXTERNALCALL = _HRESULT_TYPEDEF_(0x80010005L);
static const int RPC_E_CONNECTION_TERMINATED = _HRESULT_TYPEDEF_(0x80010006L);
static const int RPC_E_SERVER_DIED = _HRESULT_TYPEDEF_(0x80010007L);
static const int RPC_E_CLIENT_DIED = _HRESULT_TYPEDEF_(0x80010008L);
static const int RPC_E_INVALID_DATAPACKET = _HRESULT_TYPEDEF_(0x80010009L);
static const int RPC_E_CANTTRANSMIT_CALL = _HRESULT_TYPEDEF_(0x8001000AL);
static const int RPC_E_CLIENT_CANTMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000BL);
static const int RPC_E_CLIENT_CANTUNMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000CL);
static const int RPC_E_SERVER_CANTMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000DL);
static const int RPC_E_SERVER_CANTUNMARSHAL_DATA = _HRESULT_TYPEDEF_(0x8001000EL);
static const int RPC_E_INVALID_DATA = _HRESULT_TYPEDEF_(0x8001000FL);
static const int RPC_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80010010L);
static const int RPC_E_CANTCALLOUT_AGAIN = _HRESULT_TYPEDEF_(0x80010011L);
static const int RPC_E_SERVER_DIED_DNE = _HRESULT_TYPEDEF_(0x80010012L);
static const int RPC_E_SYS_CALL_FAILED = _HRESULT_TYPEDEF_(0x80010100L);
static const int RPC_E_OUT_OF_RESOURCES = _HRESULT_TYPEDEF_(0x80010101L);
static const int RPC_E_ATTEMPTED_MULTITHREAD = _HRESULT_TYPEDEF_(0x80010102L);
static const int RPC_E_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x80010103L);
static const int RPC_E_FAULT = _HRESULT_TYPEDEF_(0x80010104L);
static const int RPC_E_SERVERFAULT = _HRESULT_TYPEDEF_(0x80010105L);
static const int RPC_E_CHANGED_MODE = _HRESULT_TYPEDEF_(0x80010106L);
static const int RPC_E_INVALIDMETHOD = _HRESULT_TYPEDEF_(0x80010107L);
static const int RPC_E_DISCONNECTED = _HRESULT_TYPEDEF_(0x80010108L);
static const int RPC_E_RETRY = _HRESULT_TYPEDEF_(0x80010109L);
static const int RPC_E_SERVERCALL_RETRYLATER = _HRESULT_TYPEDEF_(0x8001010AL);
static const int RPC_E_SERVERCALL_REJECTED = _HRESULT_TYPEDEF_(0x8001010BL);
static const int RPC_E_INVALID_CALLDATA = _HRESULT_TYPEDEF_(0x8001010CL);
static const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL = _HRESULT_TYPEDEF_(0x8001010DL);
static const int RPC_E_WRONG_THREAD = _HRESULT_TYPEDEF_(0x8001010EL);
static const int RPC_E_THREAD_NOT_INIT = _HRESULT_TYPEDEF_(0x8001010FL);
static const int RPC_E_VERSION_MISMATCH = _HRESULT_TYPEDEF_(0x80010110L);
static const int RPC_E_INVALID_HEADER = _HRESULT_TYPEDEF_(0x80010111L);
static const int RPC_E_INVALID_EXTENSION = _HRESULT_TYPEDEF_(0x80010112L);
static const int RPC_E_INVALID_IPID = _HRESULT_TYPEDEF_(0x80010113L);
static const int RPC_E_INVALID_OBJECT = _HRESULT_TYPEDEF_(0x80010114L);
static const int RPC_S_CALLPENDING = _HRESULT_TYPEDEF_(0x80010115L);
static const int RPC_S_WAITONTIMER = _HRESULT_TYPEDEF_(0x80010116L);
static const int RPC_E_CALL_COMPLETE = _HRESULT_TYPEDEF_(0x80010117L);
static const int RPC_E_UNSECURE_CALL = _HRESULT_TYPEDEF_(0x80010118L);
static const int RPC_E_TOO_LATE = _HRESULT_TYPEDEF_(0x80010119L);
static const int RPC_E_NO_GOOD_SECURITY_PACKAGES = _HRESULT_TYPEDEF_(0x8001011AL);
static const int RPC_E_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x8001011BL);
static const int RPC_E_REMOTE_DISABLED = _HRESULT_TYPEDEF_(0x8001011CL);
static const int RPC_E_INVALID_OBJREF = _HRESULT_TYPEDEF_(0x8001011DL);
static const int RPC_E_NO_CONTEXT = _HRESULT_TYPEDEF_(0x8001011EL);
static const int RPC_E_TIMEOUT = _HRESULT_TYPEDEF_(0x8001011FL);
static const int RPC_E_NO_SYNC = _HRESULT_TYPEDEF_(0x80010120L);
static const int RPC_E_FULLSIC_REQUIRED = _HRESULT_TYPEDEF_(0x80010121L);
static const int RPC_E_INVALID_STD_NAME = _HRESULT_TYPEDEF_(0x80010122L);
static const int CO_E_FAILEDTOIMPERSONATE = _HRESULT_TYPEDEF_(0x80010123L);
static const int CO_E_FAILEDTOGETSECCTX = _HRESULT_TYPEDEF_(0x80010124L);
static const int CO_E_FAILEDTOOPENTHREADTOKEN = _HRESULT_TYPEDEF_(0x80010125L);
static const int CO_E_FAILEDTOGETTOKENINFO = _HRESULT_TYPEDEF_(0x80010126L);
static const int CO_E_TRUSTEEDOESNTMATCHCLIENT = _HRESULT_TYPEDEF_(0x80010127L);
static const int CO_E_FAILEDTOQUERYCLIENTBLANKET = _HRESULT_TYPEDEF_(0x80010128L);
static const int CO_E_FAILEDTOSETDACL = _HRESULT_TYPEDEF_(0x80010129L);
static const int CO_E_ACCESSCHECKFAILED = _HRESULT_TYPEDEF_(0x8001012AL);
static const int CO_E_NETACCESSAPIFAILED = _HRESULT_TYPEDEF_(0x8001012BL);
static const int CO_E_WRONGTRUSTEENAMESYNTAX = _HRESULT_TYPEDEF_(0x8001012CL);
static const int CO_E_INVALIDSID = _HRESULT_TYPEDEF_(0x8001012DL);
static const int CO_E_CONVERSIONFAILED = _HRESULT_TYPEDEF_(0x8001012EL);
static const int CO_E_NOMATCHINGSIDFOUND = _HRESULT_TYPEDEF_(0x8001012FL);
static const int CO_E_LOOKUPACCSIDFAILED = _HRESULT_TYPEDEF_(0x80010130L);
static const int CO_E_NOMATCHINGNAMEFOUND = _HRESULT_TYPEDEF_(0x80010131L);
static const int CO_E_LOOKUPACCNAMEFAILED = _HRESULT_TYPEDEF_(0x80010132L);
static const int CO_E_SETSERLHNDLFAILED = _HRESULT_TYPEDEF_(0x80010133L);
static const int CO_E_FAILEDTOGETWINDIR = _HRESULT_TYPEDEF_(0x80010134L);
static const int CO_E_PATHTOOLONG = _HRESULT_TYPEDEF_(0x80010135L);
static const int CO_E_FAILEDTOGENUUID = _HRESULT_TYPEDEF_(0x80010136L);
static const int CO_E_FAILEDTOCREATEFILE = _HRESULT_TYPEDEF_(0x80010137L);
static const int CO_E_FAILEDTOCLOSEHANDLE = _HRESULT_TYPEDEF_(0x80010138L);
static const int CO_E_EXCEEDSYSACLLIMIT = _HRESULT_TYPEDEF_(0x80010139L);
static const int CO_E_ACESINWRONGORDER = _HRESULT_TYPEDEF_(0x8001013AL);
static const int CO_E_INCOMPATIBLESTREAMVERSION = _HRESULT_TYPEDEF_(0x8001013BL);
static const int CO_E_FAILEDTOOPENPROCESSTOKEN = _HRESULT_TYPEDEF_(0x8001013CL);
static const int CO_E_DECODEFAILED = _HRESULT_TYPEDEF_(0x8001013DL);
static const int CO_E_ACNOTINITIALIZED = _HRESULT_TYPEDEF_(0x8001013FL);
static const int CO_E_CANCEL_DISABLED = _HRESULT_TYPEDEF_(0x80010140L);
static const int RPC_E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8001FFFFL);
static const int ERROR_AUDITING_DISABLED = _HRESULT_TYPEDEF_(0xC0090001L);
static const int ERROR_ALL_SIDS_FILTERED = _HRESULT_TYPEDEF_(0xC0090002L);
static const int ERROR_BIZRULES_NOT_ENABLED = _HRESULT_TYPEDEF_(0xC0090003L);
static const int NTE_BAD_UID = _HRESULT_TYPEDEF_(0x80090001L);
static const int NTE_BAD_HASH = _HRESULT_TYPEDEF_(0x80090002L);
static const int NTE_BAD_KEY = _HRESULT_TYPEDEF_(0x80090003L);
static const int NTE_BAD_LEN = _HRESULT_TYPEDEF_(0x80090004L);
static const int NTE_BAD_DATA = _HRESULT_TYPEDEF_(0x80090005L);
static const int NTE_BAD_SIGNATURE = _HRESULT_TYPEDEF_(0x80090006L);
static const int NTE_BAD_VER = _HRESULT_TYPEDEF_(0x80090007L);
static const int NTE_BAD_ALGID = _HRESULT_TYPEDEF_(0x80090008L);
static const int NTE_BAD_FLAGS = _HRESULT_TYPEDEF_(0x80090009L);
static const int NTE_BAD_TYPE = _HRESULT_TYPEDEF_(0x8009000AL);
static const int NTE_BAD_KEY_STATE = _HRESULT_TYPEDEF_(0x8009000BL);
static const int NTE_BAD_HASH_STATE = _HRESULT_TYPEDEF_(0x8009000CL);
static const int NTE_NO_KEY = _HRESULT_TYPEDEF_(0x8009000DL);
static const int NTE_NO_MEMORY = _HRESULT_TYPEDEF_(0x8009000EL);
static const int NTE_EXISTS = _HRESULT_TYPEDEF_(0x8009000FL);
static const int NTE_PERM = _HRESULT_TYPEDEF_(0x80090010L);
static const int NTE_NOT_FOUND = _HRESULT_TYPEDEF_(0x80090011L);
static const int NTE_DOUBLE_ENCRYPT = _HRESULT_TYPEDEF_(0x80090012L);
static const int NTE_BAD_PROVIDER = _HRESULT_TYPEDEF_(0x80090013L);
static const int NTE_BAD_PROV_TYPE = _HRESULT_TYPEDEF_(0x80090014L);
static const int NTE_BAD_PUBLIC_KEY = _HRESULT_TYPEDEF_(0x80090015L);
static const int NTE_BAD_KEYSET = _HRESULT_TYPEDEF_(0x80090016L);
static const int NTE_PROV_TYPE_NOT_DEF = _HRESULT_TYPEDEF_(0x80090017L);
static const int NTE_PROV_TYPE_ENTRY_BAD = _HRESULT_TYPEDEF_(0x80090018L);
static const int NTE_KEYSET_NOT_DEF = _HRESULT_TYPEDEF_(0x80090019L);
static const int NTE_KEYSET_ENTRY_BAD = _HRESULT_TYPEDEF_(0x8009001AL);
static const int NTE_PROV_TYPE_NO_MATCH = _HRESULT_TYPEDEF_(0x8009001BL);
static const int NTE_SIGNATURE_FILE_BAD = _HRESULT_TYPEDEF_(0x8009001CL);
static const int NTE_PROVIDER_DLL_FAIL = _HRESULT_TYPEDEF_(0x8009001DL);
static const int NTE_PROV_DLL_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009001EL);
static const int NTE_BAD_KEYSET_PARAM = _HRESULT_TYPEDEF_(0x8009001FL);
static const int NTE_FAIL = _HRESULT_TYPEDEF_(0x80090020L);
static const int NTE_SYS_ERR = _HRESULT_TYPEDEF_(0x80090021L);
static const int NTE_SILENT_CONTEXT = _HRESULT_TYPEDEF_(0x80090022L);
static const int NTE_TOKEN_KEYSET_STORAGE_FULL = _HRESULT_TYPEDEF_(0x80090023L);
static const int NTE_TEMPORARY_PROFILE = _HRESULT_TYPEDEF_(0x80090024L);
static const int NTE_FIXEDPARAMETER = _HRESULT_TYPEDEF_(0x80090025L);
static const int NTE_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80090026L);
static const int NTE_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80090027L);
static const int NTE_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80090028L);
static const int NTE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80090029L);
static const int NTE_NO_MORE_ITEMS = _HRESULT_TYPEDEF_(0x8009002AL);
static const int NTE_BUFFERS_OVERLAP = _HRESULT_TYPEDEF_(0x8009002BL);
static const int NTE_DECRYPTION_FAILURE = _HRESULT_TYPEDEF_(0x8009002CL);
static const int NTE_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x8009002DL);
static const int NTE_UI_REQUIRED = _HRESULT_TYPEDEF_(0x8009002EL);
static const int NTE_HMAC_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009002FL);
static const int SEC_E_INSUFFICIENT_MEMORY = _HRESULT_TYPEDEF_(0x80090300L);
static const int SEC_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80090301L);
static const int SEC_E_UNSUPPORTED_FUNCTION = _HRESULT_TYPEDEF_(0x80090302L);
static const int SEC_E_TARGET_UNKNOWN = _HRESULT_TYPEDEF_(0x80090303L);
static const int SEC_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80090304L);
static const int SEC_E_SECPKG_NOT_FOUND = _HRESULT_TYPEDEF_(0x80090305L);
static const int SEC_E_NOT_OWNER = _HRESULT_TYPEDEF_(0x80090306L);
static const int SEC_E_CANNOT_INSTALL = _HRESULT_TYPEDEF_(0x80090307L);
static const int SEC_E_INVALID_TOKEN = _HRESULT_TYPEDEF_(0x80090308L);
static const int SEC_E_CANNOT_PACK = _HRESULT_TYPEDEF_(0x80090309L);
static const int SEC_E_QOP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009030AL);
static const int SEC_E_NO_IMPERSONATION = _HRESULT_TYPEDEF_(0x8009030BL);
static const int SEC_E_LOGON_DENIED = _HRESULT_TYPEDEF_(0x8009030CL);
static const int SEC_E_UNKNOWN_CREDENTIALS = _HRESULT_TYPEDEF_(0x8009030DL);
static const int SEC_E_NO_CREDENTIALS = _HRESULT_TYPEDEF_(0x8009030EL);
static const int SEC_E_MESSAGE_ALTERED = _HRESULT_TYPEDEF_(0x8009030FL);
static const int SEC_E_OUT_OF_SEQUENCE = _HRESULT_TYPEDEF_(0x80090310L);
static const int SEC_E_NO_AUTHENTICATING_AUTHORITY = _HRESULT_TYPEDEF_(0x80090311L);
static const int SEC_I_CONTINUE_NEEDED = _HRESULT_TYPEDEF_(0x00090312L);
static const int SEC_I_COMPLETE_NEEDED = _HRESULT_TYPEDEF_(0x00090313L);
static const int SEC_I_COMPLETE_AND_CONTINUE = _HRESULT_TYPEDEF_(0x00090314L);
static const int SEC_I_LOCAL_LOGON = _HRESULT_TYPEDEF_(0x00090315L);
static const int SEC_E_BAD_PKGID = _HRESULT_TYPEDEF_(0x80090316L);
static const int SEC_E_CONTEXT_EXPIRED = _HRESULT_TYPEDEF_(0x80090317L);
static const int SEC_I_CONTEXT_EXPIRED = _HRESULT_TYPEDEF_(0x00090317L);
static const int SEC_E_INCOMPLETE_MESSAGE = _HRESULT_TYPEDEF_(0x80090318L);
static const int SEC_E_INCOMPLETE_CREDENTIALS = _HRESULT_TYPEDEF_(0x80090320L);
static const int SEC_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80090321L);
static const int SEC_I_INCOMPLETE_CREDENTIALS = _HRESULT_TYPEDEF_(0x00090320L);
static const int SEC_I_RENEGOTIATE = _HRESULT_TYPEDEF_(0x00090321L);
static const int SEC_E_WRONG_PRINCIPAL = _HRESULT_TYPEDEF_(0x80090322L);
static const int SEC_I_NO_LSA_CONTEXT = _HRESULT_TYPEDEF_(0x00090323L);
static const int SEC_E_TIME_SKEW = _HRESULT_TYPEDEF_(0x80090324L);
static const int SEC_E_UNTRUSTED_ROOT = _HRESULT_TYPEDEF_(0x80090325L);
static const int SEC_E_ILLEGAL_MESSAGE = _HRESULT_TYPEDEF_(0x80090326L);
static const int SEC_E_CERT_UNKNOWN = _HRESULT_TYPEDEF_(0x80090327L);
static const int SEC_E_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x80090328L);
static const int SEC_E_ENCRYPT_FAILURE = _HRESULT_TYPEDEF_(0x80090329L);
static const int SEC_E_DECRYPT_FAILURE = _HRESULT_TYPEDEF_(0x80090330L);
static const int SEC_E_ALGORITHM_MISMATCH = _HRESULT_TYPEDEF_(0x80090331L);
static const int SEC_E_SECURITY_QOS_FAILED = _HRESULT_TYPEDEF_(0x80090332L);
static const int SEC_E_UNFINISHED_CONTEXT_DELETED = _HRESULT_TYPEDEF_(0x80090333L);
static const int SEC_E_NO_TGT_REPLY = _HRESULT_TYPEDEF_(0x80090334L);
static const int SEC_E_NO_IP_ADDRESSES = _HRESULT_TYPEDEF_(0x80090335L);
static const int SEC_E_WRONG_CREDENTIAL_HANDLE = _HRESULT_TYPEDEF_(0x80090336L);
static const int SEC_E_CRYPTO_SYSTEM_INVALID = _HRESULT_TYPEDEF_(0x80090337L);
static const int SEC_E_MAX_REFERRALS_EXCEEDED = _HRESULT_TYPEDEF_(0x80090338L);
static const int SEC_E_MUST_BE_KDC = _HRESULT_TYPEDEF_(0x80090339L);
static const int SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009033AL);
static const int SEC_E_TOO_MANY_PRINCIPALS = _HRESULT_TYPEDEF_(0x8009033BL);
static const int SEC_E_NO_PA_DATA = _HRESULT_TYPEDEF_(0x8009033CL);
static const int SEC_E_PKINIT_NAME_MISMATCH = _HRESULT_TYPEDEF_(0x8009033DL);
static const int SEC_E_SMARTCARD_LOGON_REQUIRED = _HRESULT_TYPEDEF_(0x8009033EL);
static const int SEC_E_SHUTDOWN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8009033FL);
static const int SEC_E_KDC_INVALID_REQUEST = _HRESULT_TYPEDEF_(0x80090340L);
static const int SEC_E_KDC_UNABLE_TO_REFER = _HRESULT_TYPEDEF_(0x80090341L);
static const int SEC_E_KDC_UNKNOWN_ETYPE = _HRESULT_TYPEDEF_(0x80090342L);
static const int SEC_E_UNSUPPORTED_PREAUTH = _HRESULT_TYPEDEF_(0x80090343L);
static const int SEC_E_DELEGATION_REQUIRED = _HRESULT_TYPEDEF_(0x80090345L);
static const int SEC_E_BAD_BINDINGS = _HRESULT_TYPEDEF_(0x80090346L);
static const int SEC_E_MULTIPLE_ACCOUNTS = _HRESULT_TYPEDEF_(0x80090347L);
static const int SEC_E_NO_KERB_KEY = _HRESULT_TYPEDEF_(0x80090348L);
static const int SEC_E_CERT_WRONG_USAGE = _HRESULT_TYPEDEF_(0x80090349L);
static const int SEC_E_DOWNGRADE_DETECTED = _HRESULT_TYPEDEF_(0x80090350L);
static const int SEC_E_SMARTCARD_CERT_REVOKED = _HRESULT_TYPEDEF_(0x80090351L);
static const int SEC_E_ISSUING_CA_UNTRUSTED = _HRESULT_TYPEDEF_(0x80090352L);
static const int SEC_E_REVOCATION_OFFLINE_C = _HRESULT_TYPEDEF_(0x80090353L);
static const int SEC_E_PKINIT_CLIENT_FAILURE = _HRESULT_TYPEDEF_(0x80090354L);
static const int SEC_E_SMARTCARD_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x80090355L);
static const int SEC_E_NO_S4U_PROT_SUPPORT = _HRESULT_TYPEDEF_(0x80090356L);
static const int SEC_E_CROSSREALM_DELEGATION_FAILURE = _HRESULT_TYPEDEF_(0x80090357L);
static const int SEC_E_REVOCATION_OFFLINE_KDC = _HRESULT_TYPEDEF_(0x80090358L);
static const int SEC_E_ISSUING_CA_UNTRUSTED_KDC = _HRESULT_TYPEDEF_(0x80090359L);
static const int SEC_E_KDC_CERT_EXPIRED = _HRESULT_TYPEDEF_(0x8009035AL);
static const int SEC_E_KDC_CERT_REVOKED = _HRESULT_TYPEDEF_(0x8009035BL);
static const int SEC_I_SIGNATURE_NEEDED = _HRESULT_TYPEDEF_(0x0009035CL);
static const int SEC_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x8009035DL);
static const int SEC_E_DELEGATION_POLICY = _HRESULT_TYPEDEF_(0x8009035EL);
static const int SEC_E_POLICY_NLTM_ONLY = _HRESULT_TYPEDEF_(0x8009035FL);
static const int SEC_I_NO_RENEGOTIATION = _HRESULT_TYPEDEF_(0x00090360L);
static const int SEC_E_NO_CONTEXT = _HRESULT_TYPEDEF_(0x80090361L);
static const int SEC_E_PKU2U_CERT_FAILURE = _HRESULT_TYPEDEF_(0x80090362L);
static const int SEC_E_MUTUAL_AUTH_FAILED = _HRESULT_TYPEDEF_(0x80090363L);
static const int SEC_E_NO_SPM = SEC_E_INTERNAL_ERROR;
static const int SEC_E_NOT_SUPPORTED = SEC_E_UNSUPPORTED_FUNCTION;
static const int CRYPT_E_MSG_ERROR = _HRESULT_TYPEDEF_(0x80091001L);
static const int CRYPT_E_UNKNOWN_ALGO = _HRESULT_TYPEDEF_(0x80091002L);
static const int CRYPT_E_OID_FORMAT = _HRESULT_TYPEDEF_(0x80091003L);
static const int CRYPT_E_INVALID_MSG_TYPE = _HRESULT_TYPEDEF_(0x80091004L);
static const int CRYPT_E_UNEXPECTED_ENCODING = _HRESULT_TYPEDEF_(0x80091005L);
static const int CRYPT_E_AUTH_ATTR_MISSING = _HRESULT_TYPEDEF_(0x80091006L);
static const int CRYPT_E_HASH_VALUE = _HRESULT_TYPEDEF_(0x80091007L);
static const int CRYPT_E_INVALID_INDEX = _HRESULT_TYPEDEF_(0x80091008L);
static const int CRYPT_E_ALREADY_DECRYPTED = _HRESULT_TYPEDEF_(0x80091009L);
static const int CRYPT_E_NOT_DECRYPTED = _HRESULT_TYPEDEF_(0x8009100AL);
static const int CRYPT_E_RECIPIENT_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009100BL);
static const int CRYPT_E_CONTROL_TYPE = _HRESULT_TYPEDEF_(0x8009100CL);
static const int CRYPT_E_ISSUER_SERIALNUMBER = _HRESULT_TYPEDEF_(0x8009100DL);
static const int CRYPT_E_SIGNER_NOT_FOUND = _HRESULT_TYPEDEF_(0x8009100EL);
static const int CRYPT_E_ATTRIBUTES_MISSING = _HRESULT_TYPEDEF_(0x8009100FL);
static const int CRYPT_E_STREAM_MSG_NOT_READY = _HRESULT_TYPEDEF_(0x80091010L);
static const int CRYPT_E_STREAM_INSUFFICIENT_DATA = _HRESULT_TYPEDEF_(0x80091011L);
static const int CRYPT_I_NEW_PROTECTION_REQUIRED = _HRESULT_TYPEDEF_(0x00091012L);
static const int CRYPT_E_BAD_LEN = _HRESULT_TYPEDEF_(0x80092001L);
static const int CRYPT_E_BAD_ENCODE = _HRESULT_TYPEDEF_(0x80092002L);
static const int CRYPT_E_FILE_ERROR = _HRESULT_TYPEDEF_(0x80092003L);
static const int CRYPT_E_NOT_FOUND = _HRESULT_TYPEDEF_(0x80092004L);
static const int CRYPT_E_EXISTS = _HRESULT_TYPEDEF_(0x80092005L);
static const int CRYPT_E_NO_PROVIDER = _HRESULT_TYPEDEF_(0x80092006L);
static const int CRYPT_E_SELF_SIGNED = _HRESULT_TYPEDEF_(0x80092007L);
static const int CRYPT_E_DELETED_PREV = _HRESULT_TYPEDEF_(0x80092008L);
static const int CRYPT_E_NO_MATCH = _HRESULT_TYPEDEF_(0x80092009L);
static const int CRYPT_E_UNEXPECTED_MSG_TYPE = _HRESULT_TYPEDEF_(0x8009200AL);
static const int CRYPT_E_NO_KEY_PROPERTY = _HRESULT_TYPEDEF_(0x8009200BL);
static const int CRYPT_E_NO_DECRYPT_CERT = _HRESULT_TYPEDEF_(0x8009200CL);
static const int CRYPT_E_BAD_MSG = _HRESULT_TYPEDEF_(0x8009200DL);
static const int CRYPT_E_NO_SIGNER = _HRESULT_TYPEDEF_(0x8009200EL);
static const int CRYPT_E_PENDING_CLOSE = _HRESULT_TYPEDEF_(0x8009200FL);
static const int CRYPT_E_REVOKED = _HRESULT_TYPEDEF_(0x80092010L);
static const int CRYPT_E_NO_REVOCATION_DLL = _HRESULT_TYPEDEF_(0x80092011L);
static const int CRYPT_E_NO_REVOCATION_CHECK = _HRESULT_TYPEDEF_(0x80092012L);
static const int CRYPT_E_REVOCATION_OFFLINE = _HRESULT_TYPEDEF_(0x80092013L);
static const int CRYPT_E_NOT_IN_REVOCATION_DATABASE = _HRESULT_TYPEDEF_(0x80092014L);
static const int CRYPT_E_INVALID_NUMERIC_STRING = _HRESULT_TYPEDEF_(0x80092020L);
static const int CRYPT_E_INVALID_PRINTABLE_STRING = _HRESULT_TYPEDEF_(0x80092021L);
static const int CRYPT_E_INVALID_IA5_STRING = _HRESULT_TYPEDEF_(0x80092022L);
static const int CRYPT_E_INVALID_X500_STRING = _HRESULT_TYPEDEF_(0x80092023L);
static const int CRYPT_E_NOT_CHAR_STRING = _HRESULT_TYPEDEF_(0x80092024L);
static const int CRYPT_E_FILERESIZED = _HRESULT_TYPEDEF_(0x80092025L);
static const int CRYPT_E_SECURITY_SETTINGS = _HRESULT_TYPEDEF_(0x80092026L);
static const int CRYPT_E_NO_VERIFY_USAGE_DLL = _HRESULT_TYPEDEF_(0x80092027L);
static const int CRYPT_E_NO_VERIFY_USAGE_CHECK = _HRESULT_TYPEDEF_(0x80092028L);
static const int CRYPT_E_VERIFY_USAGE_OFFLINE = _HRESULT_TYPEDEF_(0x80092029L);
static const int CRYPT_E_NOT_IN_CTL = _HRESULT_TYPEDEF_(0x8009202AL);
static const int CRYPT_E_NO_TRUSTED_SIGNER = _HRESULT_TYPEDEF_(0x8009202BL);
static const int CRYPT_E_MISSING_PUBKEY_PARA = _HRESULT_TYPEDEF_(0x8009202CL);
static const int CRYPT_E_OSS_ERROR = _HRESULT_TYPEDEF_(0x80093000L);
static const int OSS_MORE_BUF = _HRESULT_TYPEDEF_(0x80093001L);
static const int OSS_NEGATIVE_UINTEGER = _HRESULT_TYPEDEF_(0x80093002L);
static const int OSS_PDU_RANGE = _HRESULT_TYPEDEF_(0x80093003L);
static const int OSS_MORE_INPUT = _HRESULT_TYPEDEF_(0x80093004L);
static const int OSS_DATA_ERROR = _HRESULT_TYPEDEF_(0x80093005L);
static const int OSS_BAD_ARG = _HRESULT_TYPEDEF_(0x80093006L);
static const int OSS_BAD_VERSION = _HRESULT_TYPEDEF_(0x80093007L);
static const int OSS_OUT_MEMORY = _HRESULT_TYPEDEF_(0x80093008L);
static const int OSS_PDU_MISMATCH = _HRESULT_TYPEDEF_(0x80093009L);
static const int OSS_LIMITED = _HRESULT_TYPEDEF_(0x8009300AL);
static const int OSS_BAD_PTR = _HRESULT_TYPEDEF_(0x8009300BL);
static const int OSS_BAD_TIME = _HRESULT_TYPEDEF_(0x8009300CL);
static const int OSS_INDEFINITE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009300DL);
static const int OSS_MEM_ERROR = _HRESULT_TYPEDEF_(0x8009300EL);
static const int OSS_BAD_TABLE = _HRESULT_TYPEDEF_(0x8009300FL);
static const int OSS_TOO_LONG = _HRESULT_TYPEDEF_(0x80093010L);
static const int OSS_CONSTRAINT_VIOLATED = _HRESULT_TYPEDEF_(0x80093011L);
static const int OSS_FATAL_ERROR = _HRESULT_TYPEDEF_(0x80093012L);
static const int OSS_ACCESS_SERIALIZATION_ERROR = _HRESULT_TYPEDEF_(0x80093013L);
static const int OSS_NULL_TBL = _HRESULT_TYPEDEF_(0x80093014L);
static const int OSS_NULL_FCN = _HRESULT_TYPEDEF_(0x80093015L);
static const int OSS_BAD_ENCRULES = _HRESULT_TYPEDEF_(0x80093016L);
static const int OSS_UNAVAIL_ENCRULES = _HRESULT_TYPEDEF_(0x80093017L);
static const int OSS_CANT_OPEN_TRACE_WINDOW = _HRESULT_TYPEDEF_(0x80093018L);
static const int OSS_UNIMPLEMENTED = _HRESULT_TYPEDEF_(0x80093019L);
static const int OSS_OID_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009301AL);
static const int OSS_CANT_OPEN_TRACE_FILE = _HRESULT_TYPEDEF_(0x8009301BL);
static const int OSS_TRACE_FILE_ALREADY_OPEN = _HRESULT_TYPEDEF_(0x8009301CL);
static const int OSS_TABLE_MISMATCH = _HRESULT_TYPEDEF_(0x8009301DL);
static const int OSS_TYPE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8009301EL);
static const int OSS_REAL_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009301FL);
static const int OSS_REAL_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093020L);
static const int OSS_OUT_OF_RANGE = _HRESULT_TYPEDEF_(0x80093021L);
static const int OSS_COPIER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093022L);
static const int OSS_CONSTRAINT_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093023L);
static const int OSS_COMPARATOR_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093024L);
static const int OSS_COMPARATOR_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093025L);
static const int OSS_MEM_MGR_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093026L);
static const int OSS_PDV_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093027L);
static const int OSS_PDV_CODE_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093028L);
static const int OSS_API_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x80093029L);
static const int OSS_BERDER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009302AL);
static const int OSS_PER_DLL_NOT_LINKED = _HRESULT_TYPEDEF_(0x8009302BL);
static const int OSS_OPEN_TYPE_ERROR = _HRESULT_TYPEDEF_(0x8009302CL);
static const int OSS_MUTEX_NOT_CREATED = _HRESULT_TYPEDEF_(0x8009302DL);
static const int OSS_CANT_CLOSE_TRACE_FILE = _HRESULT_TYPEDEF_(0x8009302EL);
static const int CRYPT_E_ASN1_ERROR = _HRESULT_TYPEDEF_(0x80093100L);
static const int CRYPT_E_ASN1_INTERNAL = _HRESULT_TYPEDEF_(0x80093101L);
static const int CRYPT_E_ASN1_EOD = _HRESULT_TYPEDEF_(0x80093102L);
static const int CRYPT_E_ASN1_CORRUPT = _HRESULT_TYPEDEF_(0x80093103L);
static const int CRYPT_E_ASN1_LARGE = _HRESULT_TYPEDEF_(0x80093104L);
static const int CRYPT_E_ASN1_CONSTRAINT = _HRESULT_TYPEDEF_(0x80093105L);
static const int CRYPT_E_ASN1_MEMORY = _HRESULT_TYPEDEF_(0x80093106L);
static const int CRYPT_E_ASN1_OVERFLOW = _HRESULT_TYPEDEF_(0x80093107L);
static const int CRYPT_E_ASN1_BADPDU = _HRESULT_TYPEDEF_(0x80093108L);
static const int CRYPT_E_ASN1_BADARGS = _HRESULT_TYPEDEF_(0x80093109L);
static const int CRYPT_E_ASN1_BADREAL = _HRESULT_TYPEDEF_(0x8009310AL);
static const int CRYPT_E_ASN1_BADTAG = _HRESULT_TYPEDEF_(0x8009310BL);
static const int CRYPT_E_ASN1_CHOICE = _HRESULT_TYPEDEF_(0x8009310CL);
static const int CRYPT_E_ASN1_RULE = _HRESULT_TYPEDEF_(0x8009310DL);
static const int CRYPT_E_ASN1_UTF8 = _HRESULT_TYPEDEF_(0x8009310EL);
static const int CRYPT_E_ASN1_PDU_TYPE = _HRESULT_TYPEDEF_(0x80093133L);
static const int CRYPT_E_ASN1_NYI = _HRESULT_TYPEDEF_(0x80093134L);
static const int CRYPT_E_ASN1_EXTENDED = _HRESULT_TYPEDEF_(0x80093201L);
static const int CRYPT_E_ASN1_NOEOD = _HRESULT_TYPEDEF_(0x80093202L);
static const int CERTSRV_E_BAD_REQUESTSUBJECT = _HRESULT_TYPEDEF_(0x80094001L);
static const int CERTSRV_E_NO_REQUEST = _HRESULT_TYPEDEF_(0x80094002L);
static const int CERTSRV_E_BAD_REQUESTSTATUS = _HRESULT_TYPEDEF_(0x80094003L);
static const int CERTSRV_E_PROPERTY_EMPTY = _HRESULT_TYPEDEF_(0x80094004L);
static const int CERTSRV_E_INVALID_CA_CERTIFICATE = _HRESULT_TYPEDEF_(0x80094005L);
static const int CERTSRV_E_SERVER_SUSPENDED = _HRESULT_TYPEDEF_(0x80094006L);
static const int CERTSRV_E_ENCODING_LENGTH = _HRESULT_TYPEDEF_(0x80094007L);
static const int CERTSRV_E_ROLECONFLICT = _HRESULT_TYPEDEF_(0x80094008L);
static const int CERTSRV_E_RESTRICTEDOFFICER = _HRESULT_TYPEDEF_(0x80094009L);
static const int CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = _HRESULT_TYPEDEF_(0x8009400AL);
static const int CERTSRV_E_NO_VALID_KRA = _HRESULT_TYPEDEF_(0x8009400BL);
static const int CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = _HRESULT_TYPEDEF_(0x8009400CL);
static const int CERTSRV_E_NO_CAADMIN_DEFINED = _HRESULT_TYPEDEF_(0x8009400DL);
static const int CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = _HRESULT_TYPEDEF_(0x8009400EL);
static const int CERTSRV_E_NO_DB_SESSIONS = _HRESULT_TYPEDEF_(0x8009400FL);
static const int CERTSRV_E_ALIGNMENT_FAULT = _HRESULT_TYPEDEF_(0x80094010L);
static const int CERTSRV_E_ENROLL_DENIED = _HRESULT_TYPEDEF_(0x80094011L);
static const int CERTSRV_E_TEMPLATE_DENIED = _HRESULT_TYPEDEF_(0x80094012L);
static const int CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = _HRESULT_TYPEDEF_(0x80094013L);
static const int CERTSRV_E_ADMIN_DENIED_REQUEST = _HRESULT_TYPEDEF_(0x80094014L);
static const int CERTSRV_E_NO_POLICY_SERVER = _HRESULT_TYPEDEF_(0x80094015L);
static const int CERTSRV_E_UNSUPPORTED_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094800L);
static const int CERTSRV_E_NO_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094801L);
static const int CERTSRV_E_TEMPLATE_CONFLICT = _HRESULT_TYPEDEF_(0x80094802L);
static const int CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = _HRESULT_TYPEDEF_(0x80094803L);
static const int CERTSRV_E_ARCHIVED_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80094804L);
static const int CERTSRV_E_SMIME_REQUIRED = _HRESULT_TYPEDEF_(0x80094805L);
static const int CERTSRV_E_BAD_RENEWAL_SUBJECT = _HRESULT_TYPEDEF_(0x80094806L);
static const int CERTSRV_E_BAD_TEMPLATE_VERSION = _HRESULT_TYPEDEF_(0x80094807L);
static const int CERTSRV_E_TEMPLATE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x80094808L);
static const int CERTSRV_E_SIGNATURE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x80094809L);
static const int CERTSRV_E_SIGNATURE_COUNT = _HRESULT_TYPEDEF_(0x8009480AL);
static const int CERTSRV_E_SIGNATURE_REJECTED = _HRESULT_TYPEDEF_(0x8009480BL);
static const int CERTSRV_E_ISSUANCE_POLICY_REQUIRED = _HRESULT_TYPEDEF_(0x8009480CL);
static const int CERTSRV_E_SUBJECT_UPN_REQUIRED = _HRESULT_TYPEDEF_(0x8009480DL);
static const int CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = _HRESULT_TYPEDEF_(0x8009480EL);
static const int CERTSRV_E_SUBJECT_DNS_REQUIRED = _HRESULT_TYPEDEF_(0x8009480FL);
static const int CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = _HRESULT_TYPEDEF_(0x80094810L);
static const int CERTSRV_E_KEY_LENGTH = _HRESULT_TYPEDEF_(0x80094811L);
static const int CERTSRV_E_SUBJECT_EMAIL_REQUIRED = _HRESULT_TYPEDEF_(0x80094812L);
static const int CERTSRV_E_UNKNOWN_CERT_TYPE = _HRESULT_TYPEDEF_(0x80094813L);
static const int CERTSRV_E_CERT_TYPE_OVERLAP = _HRESULT_TYPEDEF_(0x80094814L);
static const int CERTSRV_E_TOO_MANY_SIGNATURES = _HRESULT_TYPEDEF_(0x80094815L);
static const int XENROLL_E_KEY_NOT_EXPORTABLE = _HRESULT_TYPEDEF_(0x80095000L);
static const int XENROLL_E_CANNOT_ADD_ROOT_CERT = _HRESULT_TYPEDEF_(0x80095001L);
static const int XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = _HRESULT_TYPEDEF_(0x80095002L);
static const int XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = _HRESULT_TYPEDEF_(0x80095003L);
static const int XENROLL_E_RESPONSE_KA_HASH_MISMATCH = _HRESULT_TYPEDEF_(0x80095004L);
static const int XENROLL_E_KEYSPEC_SMIME_MISMATCH = _HRESULT_TYPEDEF_(0x80095005L);
static const int TRUST_E_SYSTEM_ERROR = _HRESULT_TYPEDEF_(0x80096001L);
static const int TRUST_E_NO_SIGNER_CERT = _HRESULT_TYPEDEF_(0x80096002L);
static const int TRUST_E_COUNTER_SIGNER = _HRESULT_TYPEDEF_(0x80096003L);
static const int TRUST_E_CERT_SIGNATURE = _HRESULT_TYPEDEF_(0x80096004L);
static const int TRUST_E_TIME_STAMP = _HRESULT_TYPEDEF_(0x80096005L);
static const int TRUST_E_BAD_DIGEST = _HRESULT_TYPEDEF_(0x80096010L);
static const int TRUST_E_BASIC_CONSTRAINTS = _HRESULT_TYPEDEF_(0x80096019L);
static const int TRUST_E_FINANCIAL_CRITERIA = _HRESULT_TYPEDEF_(0x8009601EL);
static const int MSSIPOTF_E_OUTOFMEMRANGE = _HRESULT_TYPEDEF_(0x80097001L);
static const int MSSIPOTF_E_CANTGETOBJECT = _HRESULT_TYPEDEF_(0x80097002L);
static const int MSSIPOTF_E_NOHEADTABLE = _HRESULT_TYPEDEF_(0x80097003L);
static const int MSSIPOTF_E_BAD_MAGICNUMBER = _HRESULT_TYPEDEF_(0x80097004L);
static const int MSSIPOTF_E_BAD_OFFSET_TABLE = _HRESULT_TYPEDEF_(0x80097005L);
static const int MSSIPOTF_E_TABLE_TAGORDER = _HRESULT_TYPEDEF_(0x80097006L);
static const int MSSIPOTF_E_TABLE_LONGWORD = _HRESULT_TYPEDEF_(0x80097007L);
static const int MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = _HRESULT_TYPEDEF_(0x80097008L);
static const int MSSIPOTF_E_TABLES_OVERLAP = _HRESULT_TYPEDEF_(0x80097009L);
static const int MSSIPOTF_E_TABLE_PADBYTES = _HRESULT_TYPEDEF_(0x8009700AL);
static const int MSSIPOTF_E_FILETOOSMALL = _HRESULT_TYPEDEF_(0x8009700BL);
static const int MSSIPOTF_E_TABLE_CHECKSUM = _HRESULT_TYPEDEF_(0x8009700CL);
static const int MSSIPOTF_E_FILE_CHECKSUM = _HRESULT_TYPEDEF_(0x8009700DL);
static const int MSSIPOTF_E_FAILED_POLICY = _HRESULT_TYPEDEF_(0x80097010L);
static const int MSSIPOTF_E_FAILED_HINTS_CHECK = _HRESULT_TYPEDEF_(0x80097011L);
static const int MSSIPOTF_E_NOT_OPENTYPE = _HRESULT_TYPEDEF_(0x80097012L);
static const int MSSIPOTF_E_FILE = _HRESULT_TYPEDEF_(0x80097013L);
static const int MSSIPOTF_E_CRYPT = _HRESULT_TYPEDEF_(0x80097014L);
static const int MSSIPOTF_E_BADVERSION = _HRESULT_TYPEDEF_(0x80097015L);
static const int MSSIPOTF_E_DSIG_STRUCTURE = _HRESULT_TYPEDEF_(0x80097016L);
static const int MSSIPOTF_E_PCONST_CHECK = _HRESULT_TYPEDEF_(0x80097017L);
static const int MSSIPOTF_E_STRUCTURE = _HRESULT_TYPEDEF_(0x80097018L);
static const int ERROR_CRED_REQUIRES_CONFIRMATION = _HRESULT_TYPEDEF_(0x80097019L);
static const int NTE_OP_OK = 0;
static const int TRUST_E_PROVIDER_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0001L);
static const int TRUST_E_ACTION_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0002L);
static const int TRUST_E_SUBJECT_FORM_UNKNOWN = _HRESULT_TYPEDEF_(0x800B0003L);
static const int TRUST_E_SUBJECT_NOT_TRUSTED = _HRESULT_TYPEDEF_(0x800B0004L);
static const int DIGSIG_E_ENCODE = _HRESULT_TYPEDEF_(0x800B0005L);
static const int DIGSIG_E_DECODE = _HRESULT_TYPEDEF_(0x800B0006L);
static const int DIGSIG_E_EXTENSIBILITY = _HRESULT_TYPEDEF_(0x800B0007L);
static const int DIGSIG_E_CRYPTO = _HRESULT_TYPEDEF_(0x800B0008L);
static const int PERSIST_E_SIZEDEFINITE = _HRESULT_TYPEDEF_(0x800B0009L);
static const int PERSIST_E_SIZEINDEFINITE = _HRESULT_TYPEDEF_(0x800B000AL);
static const int PERSIST_E_NOTSELFSIZING = _HRESULT_TYPEDEF_(0x800B000BL);
static const int TRUST_E_NOSIGNATURE = _HRESULT_TYPEDEF_(0x800B0100L);
static const int CERT_E_EXPIRED = _HRESULT_TYPEDEF_(0x800B0101L);
static const int CERT_E_VALIDITYPERIODNESTING = _HRESULT_TYPEDEF_(0x800B0102L);
static const int CERT_E_ROLE = _HRESULT_TYPEDEF_(0x800B0103L);
static const int CERT_E_PATHLEN= _HRESULT_TYPEDEF_(0x800B0104L);
static const int CERT_E_CRITICAL = _HRESULT_TYPEDEF_(0x800B0105L);
static const int CERT_E_PURPOSE = _HRESULT_TYPEDEF_(0x800B0106L);
static const int CERT_E_ISSUERCHAINING = _HRESULT_TYPEDEF_(0x800B0107L);
static const int CERT_E_MALFORMED = _HRESULT_TYPEDEF_(0x800B0108L);
static const int CERT_E_UNTRUSTEDROOT = _HRESULT_TYPEDEF_(0x800B0109L);
static const int CERT_E_CHAINING = _HRESULT_TYPEDEF_(0x800B010AL);
static const int TRUST_E_FAIL = _HRESULT_TYPEDEF_(0x800B010BL);
static const int CERT_E_REVOKED = _HRESULT_TYPEDEF_(0x800B010CL);
static const int CERT_E_UNTRUSTEDTESTROOT = _HRESULT_TYPEDEF_(0x800B010DL);
static const int CERT_E_REVOCATION_FAILURE = _HRESULT_TYPEDEF_(0x800B010EL);
static const int CERT_E_CN_NO_MATCH = _HRESULT_TYPEDEF_(0x800B010FL);
static const int CERT_E_WRONG_USAGE = _HRESULT_TYPEDEF_(0x800B0110L);
static const int TRUST_E_EXPLICIT_DISTRUST = _HRESULT_TYPEDEF_(0x800B0111L);
static const int CERT_E_UNTRUSTEDCA = _HRESULT_TYPEDEF_(0x800B0112L);
static const int CERT_E_INVALID_POLICY = _HRESULT_TYPEDEF_(0x800B0113L);
static const int CERT_E_INVALID_NAME = _HRESULT_TYPEDEF_(0x800B0114L);
static const int HRESULT_FROM_SETUPAPI(x) = ((((x) & (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR)) == (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR)) ? ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_SETUPAPI << 16) | 0x80000000)) : HRESULT_FROM_WIN32(x));
static const int SPAPI_E_EXPECTED_SECTION_NAME = _HRESULT_TYPEDEF_(0x800F0000L);
static const int SPAPI_E_BAD_SECTION_NAME_LINE = _HRESULT_TYPEDEF_(0x800F0001L);
static const int SPAPI_E_SECTION_NAME_TOO_LONG = _HRESULT_TYPEDEF_(0x800F0002L);
static const int SPAPI_E_GENERAL_SYNTAX = _HRESULT_TYPEDEF_(0x800F0003L);
static const int SPAPI_E_WRONG_INF_STYLE = _HRESULT_TYPEDEF_(0x800F0100L);
static const int SPAPI_E_SECTION_NOT_FOUND = _HRESULT_TYPEDEF_(0x800F0101L);
static const int SPAPI_E_LINE_NOT_FOUND = _HRESULT_TYPEDEF_(0x800F0102L);
static const int SPAPI_E_NO_BACKUP = _HRESULT_TYPEDEF_(0x800F0103L);
static const int SPAPI_E_NO_ASSOCIATED_CLASS = _HRESULT_TYPEDEF_(0x800F0200L);
static const int SPAPI_E_CLASS_MISMATCH = _HRESULT_TYPEDEF_(0x800F0201L);
static const int SPAPI_E_DUPLICATE_FOUND = _HRESULT_TYPEDEF_(0x800F0202L);
static const int SPAPI_E_NO_DRIVER_SELECTED = _HRESULT_TYPEDEF_(0x800F0203L);
static const int SPAPI_E_KEY_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x800F0204L);
static const int SPAPI_E_INVALID_DEVINST_NAME = _HRESULT_TYPEDEF_(0x800F0205L);
static const int SPAPI_E_INVALID_CLASS = _HRESULT_TYPEDEF_(0x800F0206L);
static const int SPAPI_E_DEVINST_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x800F0207L);
static const int SPAPI_E_DEVINFO_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x800F0208L);
static const int SPAPI_E_INVALID_REG_PROPERTY = _HRESULT_TYPEDEF_(0x800F0209L);
static const int SPAPI_E_NO_INF = _HRESULT_TYPEDEF_(0x800F020AL);
static const int SPAPI_E_NO_SUCH_DEVINST = _HRESULT_TYPEDEF_(0x800F020BL);
static const int SPAPI_E_CANT_LOAD_CLASS_ICON = _HRESULT_TYPEDEF_(0x800F020CL);
static const int SPAPI_E_INVALID_CLASS_INSTALLER = _HRESULT_TYPEDEF_(0x800F020DL);
static const int SPAPI_E_DI_DO_DEFAULT = _HRESULT_TYPEDEF_(0x800F020EL);
static const int SPAPI_E_DI_NOFILECOPY = _HRESULT_TYPEDEF_(0x800F020FL);
static const int SPAPI_E_INVALID_HWPROFILE = _HRESULT_TYPEDEF_(0x800F0210L);
static const int SPAPI_E_NO_DEVICE_SELECTED = _HRESULT_TYPEDEF_(0x800F0211L);
static const int SPAPI_E_DEVINFO_LIST_LOCKED = _HRESULT_TYPEDEF_(0x800F0212L);
static const int SPAPI_E_DEVINFO_DATA_LOCKED = _HRESULT_TYPEDEF_(0x800F0213L);
static const int SPAPI_E_DI_BAD_PATH = _HRESULT_TYPEDEF_(0x800F0214L);
static const int SPAPI_E_NO_CLASSINSTALL_PARAMS = _HRESULT_TYPEDEF_(0x800F0215L);
static const int SPAPI_E_FILEQUEUE_LOCKED = _HRESULT_TYPEDEF_(0x800F0216L);
static const int SPAPI_E_BAD_SERVICE_INSTALLSECT = _HRESULT_TYPEDEF_(0x800F0217L);
static const int SPAPI_E_NO_CLASS_DRIVER_LIST = _HRESULT_TYPEDEF_(0x800F0218L);
static const int SPAPI_E_NO_ASSOCIATED_SERVICE = _HRESULT_TYPEDEF_(0x800F0219L);
static const int SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = _HRESULT_TYPEDEF_(0x800F021AL);
static const int SPAPI_E_DEVICE_INTERFACE_ACTIVE = _HRESULT_TYPEDEF_(0x800F021BL);
static const int SPAPI_E_DEVICE_INTERFACE_REMOVED = _HRESULT_TYPEDEF_(0x800F021CL);
static const int SPAPI_E_BAD_INTERFACE_INSTALLSECT = _HRESULT_TYPEDEF_(0x800F021DL);
static const int SPAPI_E_NO_SUCH_INTERFACE_CLASS = _HRESULT_TYPEDEF_(0x800F021EL);
static const int SPAPI_E_INVALID_REFERENCE_STRING = _HRESULT_TYPEDEF_(0x800F021FL);
static const int SPAPI_E_INVALID_MACHINENAME = _HRESULT_TYPEDEF_(0x800F0220L);
static const int SPAPI_E_REMOTE_COMM_FAILURE = _HRESULT_TYPEDEF_(0x800F0221L);
static const int SPAPI_E_MACHINE_UNAVAILABLE = _HRESULT_TYPEDEF_(0x800F0222L);
static const int SPAPI_E_NO_CONFIGMGR_SERVICES = _HRESULT_TYPEDEF_(0x800F0223L);
static const int SPAPI_E_INVALID_PROPPAGE_PROVIDER = _HRESULT_TYPEDEF_(0x800F0224L);
static const int SPAPI_E_NO_SUCH_DEVICE_INTERFACE = _HRESULT_TYPEDEF_(0x800F0225L);
static const int SPAPI_E_DI_POSTPROCESSING_REQUIRED = _HRESULT_TYPEDEF_(0x800F0226L);
static const int SPAPI_E_INVALID_COINSTALLER = _HRESULT_TYPEDEF_(0x800F0227L);
static const int SPAPI_E_NO_COMPAT_DRIVERS = _HRESULT_TYPEDEF_(0x800F0228L);
static const int SPAPI_E_NO_DEVICE_ICON = _HRESULT_TYPEDEF_(0x800F0229L);
static const int SPAPI_E_INVALID_INF_LOGCONFIG = _HRESULT_TYPEDEF_(0x800F022AL);
static const int SPAPI_E_DI_DONT_INSTALL = _HRESULT_TYPEDEF_(0x800F022BL);
static const int SPAPI_E_INVALID_FILTER_DRIVER = _HRESULT_TYPEDEF_(0x800F022CL);
static const int SPAPI_E_NON_WINDOWS_NT_DRIVER = _HRESULT_TYPEDEF_(0x800F022DL);
static const int SPAPI_E_NON_WINDOWS_DRIVER = _HRESULT_TYPEDEF_(0x800F022EL);
static const int SPAPI_E_NO_CATALOG_FOR_OEM_INF = _HRESULT_TYPEDEF_(0x800F022FL);
static const int SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = _HRESULT_TYPEDEF_(0x800F0230L);
static const int SPAPI_E_NOT_DISABLEABLE = _HRESULT_TYPEDEF_(0x800F0231L);
static const int SPAPI_E_CANT_REMOVE_DEVINST = _HRESULT_TYPEDEF_(0x800F0232L);
static const int SPAPI_E_INVALID_TARGET = _HRESULT_TYPEDEF_(0x800F0233L);
static const int SPAPI_E_DRIVER_NONNATIVE = _HRESULT_TYPEDEF_(0x800F0234L);
static const int SPAPI_E_IN_WOW64 = _HRESULT_TYPEDEF_(0x800F0235L);
static const int SPAPI_E_SET_SYSTEM_RESTORE_POINT = _HRESULT_TYPEDEF_(0x800F0236L);
static const int SPAPI_E_INCORRECTLY_COPIED_INF = _HRESULT_TYPEDEF_(0x800F0237L);
static const int SPAPI_E_SCE_DISABLED = _HRESULT_TYPEDEF_(0x800F0238L);
static const int SPAPI_E_UNKNOWN_EXCEPTION = _HRESULT_TYPEDEF_(0x800F0239L);
static const int SPAPI_E_PNP_REGISTRY_ERROR = _HRESULT_TYPEDEF_(0x800F023AL);
static const int SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = _HRESULT_TYPEDEF_(0x800F023BL);
static const int SPAPI_E_NOT_AN_INSTALLED_OEM_INF = _HRESULT_TYPEDEF_(0x800F023CL);
static const int SPAPI_E_INF_IN_USE_BY_DEVICES = _HRESULT_TYPEDEF_(0x800F023DL);
static const int SPAPI_E_DI_FUNCTION_OBSOLETE = _HRESULT_TYPEDEF_(0x800F023EL);
static const int SPAPI_E_NO_AUTHENTICODE_CATALOG = _HRESULT_TYPEDEF_(0x800F023FL);
static const int SPAPI_E_AUTHENTICODE_DISALLOWED = _HRESULT_TYPEDEF_(0x800F0240L);
static const int SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = _HRESULT_TYPEDEF_(0x800F0241L);
static const int SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = _HRESULT_TYPEDEF_(0x800F0242L);
static const int SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = _HRESULT_TYPEDEF_(0x800F0243L);
static const int SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = _HRESULT_TYPEDEF_(0x800F0244L);
static const int SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = _HRESULT_TYPEDEF_(0x800F0245L);
static const int SPAPI_E_DEVICE_INSTALLER_NOT_READY = _HRESULT_TYPEDEF_(0x800F0246L);
static const int SPAPI_E_DRIVER_STORE_ADD_FAILED = _HRESULT_TYPEDEF_(0x800F0247L);
static const int SPAPI_E_DEVICE_INSTALL_BLOCKED = _HRESULT_TYPEDEF_(0x800F0248L);
static const int SPAPI_E_DRIVER_INSTALL_BLOCKED = _HRESULT_TYPEDEF_(0x800F0249L);
static const int SPAPI_E_WRONG_INF_TYPE = _HRESULT_TYPEDEF_(0x800F024AL);
static const int SPAPI_E_FILE_HASH_NOT_IN_CATALOG = _HRESULT_TYPEDEF_(0x800F024BL);
static const int SPAPI_E_DRIVER_STORE_DELETE_FAILED = _HRESULT_TYPEDEF_(0x800F024CL);
static const int SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = _HRESULT_TYPEDEF_(0x800F0300L);
static const int SPAPI_E_ERROR_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x800F1000L);
static const int SCARD_S_SUCCESS = NO_ERROR;
static const int SCARD_F_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80100001L);
static const int SCARD_E_CANCELLED = _HRESULT_TYPEDEF_(0x80100002L);
static const int SCARD_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80100003L);
static const int SCARD_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80100004L);
static const int SCARD_E_INVALID_TARGET = _HRESULT_TYPEDEF_(0x80100005L);
static const int SCARD_E_NO_MEMORY = _HRESULT_TYPEDEF_(0x80100006L);
static const int SCARD_F_WAITED_TOO_LONG = _HRESULT_TYPEDEF_(0x80100007L);
static const int SCARD_E_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x80100008L);
static const int SCARD_E_UNKNOWN_READER = _HRESULT_TYPEDEF_(0x80100009L);
static const int SCARD_E_TIMEOUT = _HRESULT_TYPEDEF_(0x8010000AL);
static const int SCARD_E_SHARING_VIOLATION = _HRESULT_TYPEDEF_(0x8010000BL);
static const int SCARD_E_NO_SMARTCARD = _HRESULT_TYPEDEF_(0x8010000CL);
static const int SCARD_E_UNKNOWN_CARD = _HRESULT_TYPEDEF_(0x8010000DL);
static const int SCARD_E_CANT_DISPOSE = _HRESULT_TYPEDEF_(0x8010000EL);
static const int SCARD_E_PROTO_MISMATCH = _HRESULT_TYPEDEF_(0x8010000FL);
static const int SCARD_E_NOT_READY = _HRESULT_TYPEDEF_(0x80100010L);
static const int SCARD_E_INVALID_VALUE = _HRESULT_TYPEDEF_(0x80100011L);
static const int SCARD_E_SYSTEM_CANCELLED = _HRESULT_TYPEDEF_(0x80100012L);
static const int SCARD_F_COMM_ERROR = _HRESULT_TYPEDEF_(0x80100013L);
static const int SCARD_F_UNKNOWN_ERROR = _HRESULT_TYPEDEF_(0x80100014L);
static const int SCARD_E_INVALID_ATR = _HRESULT_TYPEDEF_(0x80100015L);
static const int SCARD_E_NOT_TRANSACTED = _HRESULT_TYPEDEF_(0x80100016L);
static const int SCARD_E_READER_UNAVAILABLE = _HRESULT_TYPEDEF_(0x80100017L);
static const int SCARD_P_SHUTDOWN = _HRESULT_TYPEDEF_(0x80100018L);
static const int SCARD_E_PCI_TOO_SMALL = _HRESULT_TYPEDEF_(0x80100019L);
static const int SCARD_E_READER_UNSUPPORTED = _HRESULT_TYPEDEF_(0x8010001AL);
static const int SCARD_E_DUPLICATE_READER = _HRESULT_TYPEDEF_(0x8010001BL);
static const int SCARD_E_CARD_UNSUPPORTED = _HRESULT_TYPEDEF_(0x8010001CL);
static const int SCARD_E_NO_SERVICE = _HRESULT_TYPEDEF_(0x8010001DL);
static const int SCARD_E_SERVICE_STOPPED = _HRESULT_TYPEDEF_(0x8010001EL);
static const int SCARD_E_UNEXPECTED = _HRESULT_TYPEDEF_(0x8010001FL);
static const int SCARD_E_ICC_INSTALLATION = _HRESULT_TYPEDEF_(0x80100020L);
static const int SCARD_E_ICC_CREATEORDER = _HRESULT_TYPEDEF_(0x80100021L);
static const int SCARD_E_UNSUPPORTED_FEATURE = _HRESULT_TYPEDEF_(0x80100022L);
static const int SCARD_E_DIR_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100023L);
static const int SCARD_E_FILE_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100024L);
static const int SCARD_E_NO_DIR = _HRESULT_TYPEDEF_(0x80100025L);
static const int SCARD_E_NO_FILE = _HRESULT_TYPEDEF_(0x80100026L);
static const int SCARD_E_NO_ACCESS = _HRESULT_TYPEDEF_(0x80100027L);
static const int SCARD_E_WRITE_TOO_MANY = _HRESULT_TYPEDEF_(0x80100028L);
static const int SCARD_E_BAD_SEEK = _HRESULT_TYPEDEF_(0x80100029L);
static const int SCARD_E_INVALID_CHV = _HRESULT_TYPEDEF_(0x8010002AL);
static const int SCARD_E_UNKNOWN_RES_MNG = _HRESULT_TYPEDEF_(0x8010002BL);
static const int SCARD_E_NO_SUCH_CERTIFICATE = _HRESULT_TYPEDEF_(0x8010002CL);
static const int SCARD_E_CERTIFICATE_UNAVAILABLE = _HRESULT_TYPEDEF_(0x8010002DL);
static const int SCARD_E_NO_READERS_AVAILABLE = _HRESULT_TYPEDEF_(0x8010002EL);
static const int SCARD_E_COMM_DATA_LOST = _HRESULT_TYPEDEF_(0x8010002FL);
static const int SCARD_E_NO_KEY_CONTAINER = _HRESULT_TYPEDEF_(0x80100030L);
static const int SCARD_E_SERVER_TOO_BUSY = _HRESULT_TYPEDEF_(0x80100031L);
static const int SCARD_E_PIN_CACHE_EXPIRED = _HRESULT_TYPEDEF_(0x80100032L);
static const int SCARD_E_NO_PIN_CACHE = _HRESULT_TYPEDEF_(0x80100033L);
static const int SCARD_E_READ_ONLY_CARD = _HRESULT_TYPEDEF_(0x80100034L);
static const int SCARD_W_UNSUPPORTED_CARD = _HRESULT_TYPEDEF_(0x80100065L);
static const int SCARD_W_UNRESPONSIVE_CARD = _HRESULT_TYPEDEF_(0x80100066L);
static const int SCARD_W_UNPOWERED_CARD = _HRESULT_TYPEDEF_(0x80100067L);
static const int SCARD_W_RESET_CARD = _HRESULT_TYPEDEF_(0x80100068L);
static const int SCARD_W_REMOVED_CARD = _HRESULT_TYPEDEF_(0x80100069L);
static const int SCARD_W_SECURITY_VIOLATION = _HRESULT_TYPEDEF_(0x8010006AL);
static const int SCARD_W_WRONG_CHV = _HRESULT_TYPEDEF_(0x8010006BL);
static const int SCARD_W_CHV_BLOCKED = _HRESULT_TYPEDEF_(0x8010006CL);
static const int SCARD_W_EOF = _HRESULT_TYPEDEF_(0x8010006DL);
static const int SCARD_W_CANCELLED_BY_USER = _HRESULT_TYPEDEF_(0x8010006EL);
static const int SCARD_W_CARD_NOT_AUTHENTICATED = _HRESULT_TYPEDEF_(0x8010006FL);
static const int SCARD_W_CACHE_ITEM_NOT_FOUND = _HRESULT_TYPEDEF_(0x80100070L);
static const int SCARD_W_CACHE_ITEM_STALE = _HRESULT_TYPEDEF_(0x80100071L);
static const int SCARD_W_CACHE_ITEM_TOO_BIG = _HRESULT_TYPEDEF_(0x80100072L);
static const int COMADMIN_E_OBJECTERRORS = _HRESULT_TYPEDEF_(0x80110401L);
static const int COMADMIN_E_OBJECTINVALID = _HRESULT_TYPEDEF_(0x80110402L);
static const int COMADMIN_E_KEYMISSING = _HRESULT_TYPEDEF_(0x80110403L);
static const int COMADMIN_E_ALREADYINSTALLED = _HRESULT_TYPEDEF_(0x80110404L);
static const int COMADMIN_E_APP_FILE_WRITEFAIL = _HRESULT_TYPEDEF_(0x80110407L);
static const int COMADMIN_E_APP_FILE_READFAIL = _HRESULT_TYPEDEF_(0x80110408L);
static const int COMADMIN_E_APP_FILE_VERSION = _HRESULT_TYPEDEF_(0x80110409L);
static const int COMADMIN_E_BADPATH = _HRESULT_TYPEDEF_(0x8011040AL);
static const int COMADMIN_E_APPLICATIONEXISTS = _HRESULT_TYPEDEF_(0x8011040BL);
static const int COMADMIN_E_ROLEEXISTS = _HRESULT_TYPEDEF_(0x8011040CL);
static const int COMADMIN_E_CANTCOPYFILE = _HRESULT_TYPEDEF_(0x8011040DL);
static const int COMADMIN_E_NOUSER = _HRESULT_TYPEDEF_(0x8011040FL);
static const int COMADMIN_E_INVALIDUSERIDS = _HRESULT_TYPEDEF_(0x80110410L);
static const int COMADMIN_E_NOREGISTRYCLSID = _HRESULT_TYPEDEF_(0x80110411L);
static const int COMADMIN_E_BADREGISTRYPROGID = _HRESULT_TYPEDEF_(0x80110412L);
static const int COMADMIN_E_AUTHENTICATIONLEVEL = _HRESULT_TYPEDEF_(0x80110413L);
static const int COMADMIN_E_USERPASSWDNOTVALID = _HRESULT_TYPEDEF_(0x80110414L);
static const int COMADMIN_E_CLSIDORIIDMISMATCH = _HRESULT_TYPEDEF_(0x80110418L);
static const int COMADMIN_E_REMOTEINTERFACE = _HRESULT_TYPEDEF_(0x80110419L);
static const int COMADMIN_E_DLLREGISTERSERVER = _HRESULT_TYPEDEF_(0x8011041AL);
static const int COMADMIN_E_NOSERVERSHARE = _HRESULT_TYPEDEF_(0x8011041BL);
static const int COMADMIN_E_DLLLOADFAILED = _HRESULT_TYPEDEF_(0x8011041DL);
static const int COMADMIN_E_BADREGISTRYLIBID = _HRESULT_TYPEDEF_(0x8011041EL);
static const int COMADMIN_E_APPDIRNOTFOUND = _HRESULT_TYPEDEF_(0x8011041FL);
static const int COMADMIN_E_REGISTRARFAILED = _HRESULT_TYPEDEF_(0x80110423L);
static const int COMADMIN_E_COMPFILE_DOESNOTEXIST = _HRESULT_TYPEDEF_(0x80110424L);
static const int COMADMIN_E_COMPFILE_LOADDLLFAIL = _HRESULT_TYPEDEF_(0x80110425L);
static const int COMADMIN_E_COMPFILE_GETCLASSOBJ = _HRESULT_TYPEDEF_(0x80110426L);
static const int COMADMIN_E_COMPFILE_CLASSNOTAVAIL = _HRESULT_TYPEDEF_(0x80110427L);
static const int COMADMIN_E_COMPFILE_BADTLB = _HRESULT_TYPEDEF_(0x80110428L);
static const int COMADMIN_E_COMPFILE_NOTINSTALLABLE = _HRESULT_TYPEDEF_(0x80110429L);
static const int COMADMIN_E_NOTCHANGEABLE = _HRESULT_TYPEDEF_(0x8011042AL);
static const int COMADMIN_E_NOTDELETEABLE = _HRESULT_TYPEDEF_(0x8011042BL);
static const int COMADMIN_E_SESSION = _HRESULT_TYPEDEF_(0x8011042CL);
static const int COMADMIN_E_COMP_MOVE_LOCKED = _HRESULT_TYPEDEF_(0x8011042DL);
static const int COMADMIN_E_COMP_MOVE_BAD_DEST = _HRESULT_TYPEDEF_(0x8011042EL);
static const int COMADMIN_E_REGISTERTLB = _HRESULT_TYPEDEF_(0x80110430L);
static const int COMADMIN_E_SYSTEMAPP = _HRESULT_TYPEDEF_(0x80110433L);
static const int COMADMIN_E_COMPFILE_NOREGISTRAR = _HRESULT_TYPEDEF_(0x80110434L);
static const int COMADMIN_E_COREQCOMPINSTALLED = _HRESULT_TYPEDEF_(0x80110435L);
static const int COMADMIN_E_SERVICENOTINSTALLED = _HRESULT_TYPEDEF_(0x80110436L);
static const int COMADMIN_E_PROPERTYSAVEFAILED = _HRESULT_TYPEDEF_(0x80110437L);
static const int COMADMIN_E_OBJECTEXISTS = _HRESULT_TYPEDEF_(0x80110438L);
static const int COMADMIN_E_COMPONENTEXISTS = _HRESULT_TYPEDEF_(0x80110439L);
static const int COMADMIN_E_REGFILE_CORRUPT = _HRESULT_TYPEDEF_(0x8011043BL);
static const int COMADMIN_E_PROPERTY_OVERFLOW = _HRESULT_TYPEDEF_(0x8011043CL);
static const int COMADMIN_E_NOTINREGISTRY = _HRESULT_TYPEDEF_(0x8011043EL);
static const int COMADMIN_E_OBJECTNOTPOOLABLE = _HRESULT_TYPEDEF_(0x8011043FL);
static const int COMADMIN_E_APPLID_MATCHES_CLSID = _HRESULT_TYPEDEF_(0x80110446L);
static const int COMADMIN_E_ROLE_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x80110447L);
static const int COMADMIN_E_START_APP_NEEDS_COMPONENTS = _HRESULT_TYPEDEF_(0x80110448L);
static const int COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = _HRESULT_TYPEDEF_(0x80110449L);
static const int COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = _HRESULT_TYPEDEF_(0x8011044AL);
static const int COMADMIN_E_CAN_NOT_START_APP = _HRESULT_TYPEDEF_(0x8011044BL);
static const int COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = _HRESULT_TYPEDEF_(0x8011044CL);
static const int COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = _HRESULT_TYPEDEF_(0x8011044DL);
static const int COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = _HRESULT_TYPEDEF_(0x8011044EL);
static const int COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = _HRESULT_TYPEDEF_(0x8011044FL);
static const int COMADMIN_E_BASE_PARTITION_ONLY = _HRESULT_TYPEDEF_(0x80110450L);
static const int COMADMIN_E_START_APP_DISABLED = _HRESULT_TYPEDEF_(0x80110451L);
static const int COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = _HRESULT_TYPEDEF_(0x80110457L);
static const int COMADMIN_E_CAT_INVALID_PARTITION_NAME = _HRESULT_TYPEDEF_(0x80110458L);
static const int COMADMIN_E_CAT_PARTITION_IN_USE = _HRESULT_TYPEDEF_(0x80110459L);
static const int COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = _HRESULT_TYPEDEF_(0x8011045AL);
static const int COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8011045BL);
static const int COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = _HRESULT_TYPEDEF_(0x8011045CL);
static const int COMADMIN_E_AMBIGUOUS_PARTITION_NAME = _HRESULT_TYPEDEF_(0x8011045DL);
static const int COMADMIN_E_REGDB_NOTINITIALIZED = _HRESULT_TYPEDEF_(0x80110472L);
static const int COMADMIN_E_REGDB_NOTOPEN = _HRESULT_TYPEDEF_(0x80110473L);
static const int COMADMIN_E_REGDB_SYSTEMERR = _HRESULT_TYPEDEF_(0x80110474L);
static const int COMADMIN_E_REGDB_ALREADYRUNNING = _HRESULT_TYPEDEF_(0x80110475L);
static const int COMADMIN_E_MIG_VERSIONNOTSUPPORTED = _HRESULT_TYPEDEF_(0x80110480L);
static const int COMADMIN_E_MIG_SCHEMANOTFOUND = _HRESULT_TYPEDEF_(0x80110481L);
static const int COMADMIN_E_CAT_BITNESSMISMATCH = _HRESULT_TYPEDEF_(0x80110482L);
static const int COMADMIN_E_CAT_UNACCEPTABLEBITNESS = _HRESULT_TYPEDEF_(0x80110483L);
static const int COMADMIN_E_CAT_WRONGAPPBITNESS = _HRESULT_TYPEDEF_(0x80110484L);
static const int COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80110485L);
static const int COMADMIN_E_CAT_SERVERFAULT = _HRESULT_TYPEDEF_(0x80110486L);
static const int COMQC_E_APPLICATION_NOT_QUEUED = _HRESULT_TYPEDEF_(0x80110600L);
static const int COMQC_E_NO_QUEUEABLE_INTERFACES = _HRESULT_TYPEDEF_(0x80110601L);
static const int COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80110602L);
static const int COMQC_E_NO_IPERSISTSTREAM = _HRESULT_TYPEDEF_(0x80110603L);
static const int COMQC_E_BAD_MESSAGE = _HRESULT_TYPEDEF_(0x80110604L);
static const int COMQC_E_UNAUTHENTICATED = _HRESULT_TYPEDEF_(0x80110605L);
static const int COMQC_E_UNTRUSTED_ENQUEUER = _HRESULT_TYPEDEF_(0x80110606L);
static const int MSDTC_E_DUPLICATE_RESOURCE = _HRESULT_TYPEDEF_(0x80110701L);
static const int COMADMIN_E_OBJECT_PARENT_MISSING = _HRESULT_TYPEDEF_(0x80110808L);
static const int COMADMIN_E_OBJECT_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0x80110809L);
static const int COMADMIN_E_APP_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8011080AL);
static const int COMADMIN_E_INVALID_PARTITION = _HRESULT_TYPEDEF_(0x8011080BL);
static const int COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = _HRESULT_TYPEDEF_(0x8011080DL);
static const int COMADMIN_E_USER_IN_SET = _HRESULT_TYPEDEF_(0x8011080EL);
static const int COMADMIN_E_CANTRECYCLELIBRARYAPPS = _HRESULT_TYPEDEF_(0x8011080FL);
static const int COMADMIN_E_CANTRECYCLESERVICEAPPS = _HRESULT_TYPEDEF_(0x80110811L);
static const int COMADMIN_E_PROCESSALREADYRECYCLED = _HRESULT_TYPEDEF_(0x80110812L);
static const int COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = _HRESULT_TYPEDEF_(0x80110813L);
static const int COMADMIN_E_CANTMAKEINPROCSERVICE = _HRESULT_TYPEDEF_(0x80110814L);
static const int COMADMIN_E_PROGIDINUSEBYCLSID = _HRESULT_TYPEDEF_(0x80110815L);
static const int COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = _HRESULT_TYPEDEF_(0x80110816L);
static const int COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = _HRESULT_TYPEDEF_(0x80110817L);
static const int COMADMIN_E_PARTITION_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110818L);
static const int COMADMIN_E_PARTITION_MSI_ONLY = _HRESULT_TYPEDEF_(0x80110819L);
static const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = _HRESULT_TYPEDEF_(0x8011081AL);
static const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = _HRESULT_TYPEDEF_(0x8011081BL);
static const int COMADMIN_E_COMP_MOVE_SOURCE = _HRESULT_TYPEDEF_(0x8011081CL);
static const int COMADMIN_E_COMP_MOVE_DEST = _HRESULT_TYPEDEF_(0x8011081DL);
static const int COMADMIN_E_COMP_MOVE_PRIVATE = _HRESULT_TYPEDEF_(0x8011081EL);
static const int COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = _HRESULT_TYPEDEF_(0x8011081FL);
static const int COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = _HRESULT_TYPEDEF_(0x80110820L);
static const int COMADMIN_E_PRIVATE_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110821L);
static const int COMADMIN_E_SAFERINVALID = _HRESULT_TYPEDEF_(0x80110822L);
static const int COMADMIN_E_REGISTRY_ACCESSDENIED = _HRESULT_TYPEDEF_(0x80110823L);
static const int COMADMIN_E_PARTITIONS_DISABLED = _HRESULT_TYPEDEF_(0x80110824L);
static const int FILTER_HRESULT_FROM_FLT_NTSTATUS(x) = (ASSERT((x & 0xfff0000) == 0x001c0000),(HRESULT) (((x) & 0x8000FFFF) | (FACILITY_USERMODE_FILTER_MANAGER << 16)));
static const int ERROR_FLT_IO_COMPLETE = _HRESULT_TYPEDEF_(0x001F0001L);
static const int ERROR_FLT_NO_HANDLER_DEFINED = _HRESULT_TYPEDEF_(0x801F0001L);
static const int ERROR_FLT_CONTEXT_ALREADY_DEFINED = _HRESULT_TYPEDEF_(0x801F0002L);
static const int ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = _HRESULT_TYPEDEF_(0x801F0003L);
static const int ERROR_FLT_DISALLOW_FAST_IO = _HRESULT_TYPEDEF_(0x801F0004L);
static const int ERROR_FLT_INVALID_NAME_REQUEST = _HRESULT_TYPEDEF_(0x801F0005L);
static const int ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = _HRESULT_TYPEDEF_(0x801F0006L);
static const int ERROR_FLT_NOT_INITIALIZED = _HRESULT_TYPEDEF_(0x801F0007L);
static const int ERROR_FLT_FILTER_NOT_READY = _HRESULT_TYPEDEF_(0x801F0008L);
static const int ERROR_FLT_POST_OPERATION_CLEANUP = _HRESULT_TYPEDEF_(0x801F0009L);
static const int ERROR_FLT_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x801F000AL);
static const int ERROR_FLT_DELETING_OBJECT = _HRESULT_TYPEDEF_(0x801F000BL);
static const int ERROR_FLT_MUST_BE_NONPAGED_POOL = _HRESULT_TYPEDEF_(0x801F000CL);
static const int ERROR_FLT_DUPLICATE_ENTRY = _HRESULT_TYPEDEF_(0x801F000DL);
static const int ERROR_FLT_CBDQ_DISABLED = _HRESULT_TYPEDEF_(0x801F000EL);
static const int ERROR_FLT_DO_NOT_ATTACH = _HRESULT_TYPEDEF_(0x801F000FL);
static const int ERROR_FLT_DO_NOT_DETACH = _HRESULT_TYPEDEF_(0x801F0010L);
static const int ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = _HRESULT_TYPEDEF_(0x801F0011L);
static const int ERROR_FLT_INSTANCE_NAME_COLLISION = _HRESULT_TYPEDEF_(0x801F0012L);
static const int ERROR_FLT_FILTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0013L);
static const int ERROR_FLT_VOLUME_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0014L);
static const int ERROR_FLT_INSTANCE_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0015L);
static const int ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = _HRESULT_TYPEDEF_(0x801F0016L);
static const int ERROR_FLT_INVALID_CONTEXT_REGISTRATION = _HRESULT_TYPEDEF_(0x801F0017L);
static const int ERROR_FLT_NAME_CACHE_MISS = _HRESULT_TYPEDEF_(0x801F0018L);
static const int ERROR_FLT_NO_DEVICE_OBJECT = _HRESULT_TYPEDEF_(0x801F0019L);
static const int ERROR_FLT_VOLUME_ALREADY_MOUNTED = _HRESULT_TYPEDEF_(0x801F001AL);
static const int ERROR_FLT_ALREADY_ENLISTED = _HRESULT_TYPEDEF_(0x801F001BL);
static const int ERROR_FLT_CONTEXT_ALREADY_LINKED = _HRESULT_TYPEDEF_(0x801F001CL);
static const int ERROR_FLT_NO_WAITER_FOR_REPLY = _HRESULT_TYPEDEF_(0x801F0020L);
static const int ERROR_HUNG_DISPLAY_DRIVER_THREAD = _HRESULT_TYPEDEF_(0x80260001L);
static const int DWM_E_COMPOSITIONDISABLED = _HRESULT_TYPEDEF_(0x80263001L);
static const int DWM_E_REMOTING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80263002L);
static const int DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = _HRESULT_TYPEDEF_(0x80263003L);
static const int DWM_E_NOT_QUEUING_PRESENTS = _HRESULT_TYPEDEF_(0x80263004L);
static const int DWM_E_ADAPTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80263005L);
static const int DWM_S_GDI_REDIRECTION_SURFACE = _HRESULT_TYPEDEF_(0x00263005L);
static const int ERROR_MONITOR_NO_DESCRIPTOR = _HRESULT_TYPEDEF_(0x00261001L);
static const int ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = _HRESULT_TYPEDEF_(0x00261002L);
static const int ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = _HRESULT_TYPEDEF_(0xC0261003L);
static const int ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = _HRESULT_TYPEDEF_(0xC0261004L);
static const int ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = _HRESULT_TYPEDEF_(0xC0261005L);
static const int ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = _HRESULT_TYPEDEF_(0xC0261006L);
static const int ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = _HRESULT_TYPEDEF_(0xC0261007L);
static const int ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = _HRESULT_TYPEDEF_(0xC0261008L);
static const int ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = _HRESULT_TYPEDEF_(0xC0261009L);
static const int ERROR_MONITOR_INVALID_MANUFACTURE_DATE = _HRESULT_TYPEDEF_(0xC026100AL);
static const int ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = _HRESULT_TYPEDEF_(0xC0262000L);
static const int ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = _HRESULT_TYPEDEF_(0xC0262001L);
static const int ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = _HRESULT_TYPEDEF_(0xC0262002L);
static const int ERROR_GRAPHICS_ADAPTER_WAS_RESET = _HRESULT_TYPEDEF_(0xC0262003L);
static const int ERROR_GRAPHICS_INVALID_DRIVER_MODEL = _HRESULT_TYPEDEF_(0xC0262004L);
static const int ERROR_GRAPHICS_PRESENT_MODE_CHANGED = _HRESULT_TYPEDEF_(0xC0262005L);
static const int ERROR_GRAPHICS_PRESENT_OCCLUDED = _HRESULT_TYPEDEF_(0xC0262006L);
static const int ERROR_GRAPHICS_PRESENT_DENIED = _HRESULT_TYPEDEF_(0xC0262007L);
static const int ERROR_GRAPHICS_CANNOTCOLORCONVERT = _HRESULT_TYPEDEF_(0xC0262008L);
static const int ERROR_GRAPHICS_DRIVER_MISMATCH = _HRESULT_TYPEDEF_(0xC0262009L);
static const int ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = _HRESULT_TYPEDEF_(0x4026200AL);
static const int ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = _HRESULT_TYPEDEF_(0xC026200BL);
static const int ERROR_GRAPHICS_PRESENT_UNOCCLUDED = _HRESULT_TYPEDEF_(0xC026200CL);
static const int ERROR_GRAPHICS_NO_VIDEO_MEMORY = _HRESULT_TYPEDEF_(0xC0262100L);
static const int ERROR_GRAPHICS_CANT_LOCK_MEMORY = _HRESULT_TYPEDEF_(0xC0262101L);
static const int ERROR_GRAPHICS_ALLOCATION_BUSY = _HRESULT_TYPEDEF_(0xC0262102L);
static const int ERROR_GRAPHICS_TOO_MANY_REFERENCES = _HRESULT_TYPEDEF_(0xC0262103L);
static const int ERROR_GRAPHICS_TRY_AGAIN_LATER = _HRESULT_TYPEDEF_(0xC0262104L);
static const int ERROR_GRAPHICS_TRY_AGAIN_NOW = _HRESULT_TYPEDEF_(0xC0262105L);
static const int ERROR_GRAPHICS_ALLOCATION_INVALID = _HRESULT_TYPEDEF_(0xC0262106L);
static const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = _HRESULT_TYPEDEF_(0xC0262107L);
static const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = _HRESULT_TYPEDEF_(0xC0262108L);
static const int ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = _HRESULT_TYPEDEF_(0xC0262109L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = _HRESULT_TYPEDEF_(0xC0262110L);
static const int ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = _HRESULT_TYPEDEF_(0xC0262111L);
static const int ERROR_GRAPHICS_ALLOCATION_CLOSED = _HRESULT_TYPEDEF_(0xC0262112L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = _HRESULT_TYPEDEF_(0xC0262113L);
static const int ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = _HRESULT_TYPEDEF_(0xC0262114L);
static const int ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = _HRESULT_TYPEDEF_(0xC0262115L);
static const int ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = _HRESULT_TYPEDEF_(0xC0262116L);
static const int ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = _HRESULT_TYPEDEF_(0xC0262200L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262300L);
static const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262301L);
static const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262302L);
static const int ERROR_GRAPHICS_INVALID_VIDPN = _HRESULT_TYPEDEF_(0xC0262303L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = _HRESULT_TYPEDEF_(0xC0262304L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = _HRESULT_TYPEDEF_(0xC0262305L);
static const int ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262306L);
static const int ERROR_GRAPHICS_MODE_NOT_PINNED = _HRESULT_TYPEDEF_(0x00262307L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = _HRESULT_TYPEDEF_(0xC0262308L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = _HRESULT_TYPEDEF_(0xC0262309L);
static const int ERROR_GRAPHICS_INVALID_FREQUENCY = _HRESULT_TYPEDEF_(0xC026230AL);
static const int ERROR_GRAPHICS_INVALID_ACTIVE_REGION = _HRESULT_TYPEDEF_(0xC026230BL);
static const int ERROR_GRAPHICS_INVALID_TOTAL_REGION = _HRESULT_TYPEDEF_(0xC026230CL);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = _HRESULT_TYPEDEF_(0xC0262310L);
static const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = _HRESULT_TYPEDEF_(0xC0262311L);
static const int ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = _HRESULT_TYPEDEF_(0xC0262312L);
static const int ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262313L);
static const int ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = _HRESULT_TYPEDEF_(0xC0262314L);
static const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = _HRESULT_TYPEDEF_(0xC0262315L);
static const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = _HRESULT_TYPEDEF_(0xC0262316L);
static const int ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC0262317L);
static const int ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC0262318L);
static const int ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = _HRESULT_TYPEDEF_(0xC0262319L);
static const int ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC026231AL);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = _HRESULT_TYPEDEF_(0xC026231BL);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = _HRESULT_TYPEDEF_(0xC026231CL);
static const int ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = _HRESULT_TYPEDEF_(0xC026231DL);
static const int ERROR_GRAPHICS_NO_PREFERRED_MODE = _HRESULT_TYPEDEF_(0x0026231EL);
static const int ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC026231FL);
static const int ERROR_GRAPHICS_STALE_MODESET = _HRESULT_TYPEDEF_(0xC0262320L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = _HRESULT_TYPEDEF_(0xC0262321L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = _HRESULT_TYPEDEF_(0xC0262322L);
static const int ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = _HRESULT_TYPEDEF_(0xC0262323L);
static const int ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262324L);
static const int ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = _HRESULT_TYPEDEF_(0xC0262325L);
static const int ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = _HRESULT_TYPEDEF_(0xC0262326L);
static const int ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262327L);
static const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = _HRESULT_TYPEDEF_(0xC0262328L);
static const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = _HRESULT_TYPEDEF_(0xC0262329L);
static const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = _HRESULT_TYPEDEF_(0xC026232AL);
static const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = _HRESULT_TYPEDEF_(0xC026232BL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = _HRESULT_TYPEDEF_(0xC026232CL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = _HRESULT_TYPEDEF_(0xC026232DL);
static const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC026232EL);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = _HRESULT_TYPEDEF_(0xC026232FL);
static const int ERROR_GRAPHICS_RESOURCES_NOT_RELATED = _HRESULT_TYPEDEF_(0xC0262330L);
static const int ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262331L);
static const int ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = _HRESULT_TYPEDEF_(0xC0262332L);
static const int ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = _HRESULT_TYPEDEF_(0xC0262333L);
static const int ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = _HRESULT_TYPEDEF_(0xC0262334L);
static const int ERROR_GRAPHICS_NO_VIDPNMGR = _HRESULT_TYPEDEF_(0xC0262335L);
static const int ERROR_GRAPHICS_NO_ACTIVE_VIDPN = _HRESULT_TYPEDEF_(0xC0262336L);
static const int ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262337L);
static const int ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = _HRESULT_TYPEDEF_(0xC0262338L);
static const int ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262339L);
static const int ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = _HRESULT_TYPEDEF_(0xC026233AL);
static const int ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = _HRESULT_TYPEDEF_(0xC026233BL);
static const int ERROR_GRAPHICS_INVALID_STRIDE = _HRESULT_TYPEDEF_(0xC026233CL);
static const int ERROR_GRAPHICS_INVALID_PIXELFORMAT = _HRESULT_TYPEDEF_(0xC026233DL);
static const int ERROR_GRAPHICS_INVALID_COLORBASIS = _HRESULT_TYPEDEF_(0xC026233EL);
static const int ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = _HRESULT_TYPEDEF_(0xC026233FL);
static const int ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = _HRESULT_TYPEDEF_(0xC0262340L);
static const int ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = _HRESULT_TYPEDEF_(0xC0262341L);
static const int ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = _HRESULT_TYPEDEF_(0xC0262342L);
static const int ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = _HRESULT_TYPEDEF_(0xC0262343L);
static const int ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = _HRESULT_TYPEDEF_(0xC0262344L);
static const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = _HRESULT_TYPEDEF_(0xC0262345L);
static const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262346L);
static const int ERROR_GRAPHICS_INVALID_GAMMA_RAMP = _HRESULT_TYPEDEF_(0xC0262347L);
static const int ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262348L);
static const int ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262349L);
static const int ERROR_GRAPHICS_MODE_NOT_IN_MODESET = _HRESULT_TYPEDEF_(0xC026234AL);
static const int ERROR_GRAPHICS_DATASET_IS_EMPTY = _HRESULT_TYPEDEF_(0x0026234BL);
static const int ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = _HRESULT_TYPEDEF_(0x0026234CL);
static const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = _HRESULT_TYPEDEF_(0xC026234DL);
static const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = _HRESULT_TYPEDEF_(0xC026234EL);
static const int ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = _HRESULT_TYPEDEF_(0xC026234FL);
static const int ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0xC0262350L);
static const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = _HRESULT_TYPEDEF_(0x00262351L);
static const int ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = _HRESULT_TYPEDEF_(0xC0262352L);
static const int ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = _HRESULT_TYPEDEF_(0xC0262353L);
static const int ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = _HRESULT_TYPEDEF_(0xC0262354L);
static const int ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = _HRESULT_TYPEDEF_(0xC0262355L);
static const int ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = _HRESULT_TYPEDEF_(0xC0262356L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = _HRESULT_TYPEDEF_(0xC0262357L);
static const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = _HRESULT_TYPEDEF_(0xC0262358L);
static const int ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = _HRESULT_TYPEDEF_(0xC0262359L);
static const int ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = _HRESULT_TYPEDEF_(0xC026235AL);
static const int ERROR_GRAPHICS_INVALID_CLIENT_TYPE = _HRESULT_TYPEDEF_(0xC026235BL);
static const int ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = _HRESULT_TYPEDEF_(0xC026235CL);
static const int ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = _HRESULT_TYPEDEF_(0xC0262400L);
static const int ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262401L);
static const int ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = _HRESULT_TYPEDEF_(0x4026242FL);
static const int ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = _HRESULT_TYPEDEF_(0xC0262430L);
static const int ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = _HRESULT_TYPEDEF_(0xC0262431L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = _HRESULT_TYPEDEF_(0xC0262432L);
static const int ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = _HRESULT_TYPEDEF_(0xC0262433L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = _HRESULT_TYPEDEF_(0xC0262434L);
static const int ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = _HRESULT_TYPEDEF_(0xC0262435L);
static const int ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = _HRESULT_TYPEDEF_(0xC0262436L);
static const int ERROR_GRAPHICS_LEADLINK_START_DEFERRED = _HRESULT_TYPEDEF_(0x40262437L);
static const int ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = _HRESULT_TYPEDEF_(0xC0262438L);
static const int ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = _HRESULT_TYPEDEF_(0x40262439L);
static const int ERROR_GRAPHICS_START_DEFERRED = _HRESULT_TYPEDEF_(0x4026243AL);
static const int ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = _HRESULT_TYPEDEF_(0xC026243BL);
static const int ERROR_GRAPHICS_OPM_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262500L);
static const int ERROR_GRAPHICS_COPP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262501L);
static const int ERROR_GRAPHICS_UAB_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262502L);
static const int ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = _HRESULT_TYPEDEF_(0xC0262503L);
static const int ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = _HRESULT_TYPEDEF_(0xC0262505L);
static const int ERROR_GRAPHICS_OPM_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC026250BL);
static const int ERROR_GRAPHICS_OPM_INVALID_HANDLE = _HRESULT_TYPEDEF_(0xC026250CL);
static const int ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = _HRESULT_TYPEDEF_(0xC026250EL);
static const int ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = _HRESULT_TYPEDEF_(0xC026250FL);
static const int ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = _HRESULT_TYPEDEF_(0xC0262510L);
static const int ERROR_GRAPHICS_PVP_HFS_FAILED = _HRESULT_TYPEDEF_(0xC0262511L);
static const int ERROR_GRAPHICS_OPM_INVALID_SRM = _HRESULT_TYPEDEF_(0xC0262512L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = _HRESULT_TYPEDEF_(0xC0262513L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = _HRESULT_TYPEDEF_(0xC0262514L);
static const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = _HRESULT_TYPEDEF_(0xC0262515L);
static const int ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = _HRESULT_TYPEDEF_(0xC0262516L);
static const int ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = _HRESULT_TYPEDEF_(0xC0262517L);
static const int ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = _HRESULT_TYPEDEF_(0xC0262518L);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = _HRESULT_TYPEDEF_(0xC026251AL);
static const int ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = _HRESULT_TYPEDEF_(0xC026251BL);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = _HRESULT_TYPEDEF_(0xC026251CL);
static const int ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = _HRESULT_TYPEDEF_(0xC026251DL);
static const int ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC026251EL);
static const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = _HRESULT_TYPEDEF_(0xC026251FL);
static const int ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262520L);
static const int ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = _HRESULT_TYPEDEF_(0xC0262521L);
static const int ERROR_GRAPHICS_I2C_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262580L);
static const int ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = _HRESULT_TYPEDEF_(0xC0262581L);
static const int ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = _HRESULT_TYPEDEF_(0xC0262582L);
static const int ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = _HRESULT_TYPEDEF_(0xC0262583L);
static const int ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC0262584L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_DATA = _HRESULT_TYPEDEF_(0xC0262585L);
static const int ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = _HRESULT_TYPEDEF_(0xC0262586L);
static const int ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = _HRESULT_TYPEDEF_(0xC0262587L);
static const int ERROR_GRAPHICS_MCA_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC0262588L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = _HRESULT_TYPEDEF_(0xC0262589L);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = _HRESULT_TYPEDEF_(0xC026258AL);
static const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = _HRESULT_TYPEDEF_(0xC026258BL);
static const int ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = _HRESULT_TYPEDEF_(0xC026258CL);
static const int ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = _HRESULT_TYPEDEF_(0xC026258DL);
static const int ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE = _HRESULT_TYPEDEF_(0xC02625D8L);
static const int ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = _HRESULT_TYPEDEF_(0xC02625D9L);
static const int ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = _HRESULT_TYPEDEF_(0xC02625DAL);
static const int ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = _HRESULT_TYPEDEF_(0xC02625DBL);
static const int ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = _HRESULT_TYPEDEF_(0xC02625DCL);
static const int ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = _HRESULT_TYPEDEF_(0xC02625DEL);
static const int ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = _HRESULT_TYPEDEF_(0xC02625DFL);
static const int ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = _HRESULT_TYPEDEF_(0xC02625E0L);
static const int ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = _HRESULT_TYPEDEF_(0xC02625E1L);
static const int ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = _HRESULT_TYPEDEF_(0xC02625E2L);
static const int ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0xC02625E3L);
static const int ERROR_GRAPHICS_INVALID_POINTER = _HRESULT_TYPEDEF_(0xC02625E4L);
static const int ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = _HRESULT_TYPEDEF_(0xC02625E5L);
static const int ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = _HRESULT_TYPEDEF_(0xC02625E6L);
static const int ERROR_GRAPHICS_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0xC02625E7L);
static const int ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = _HRESULT_TYPEDEF_(0xC02605E8L);
static const int TPM_E_ERROR_MASK = _HRESULT_TYPEDEF_(0x80280000L);
static const int TPM_E_AUTHFAIL = _HRESULT_TYPEDEF_(0x80280001L);
static const int TPM_E_BADINDEX = _HRESULT_TYPEDEF_(0x80280002L);
static const int TPM_E_BAD_PARAMETER = _HRESULT_TYPEDEF_(0x80280003L);
static const int TPM_E_AUDITFAILURE = _HRESULT_TYPEDEF_(0x80280004L);
static const int TPM_E_CLEAR_DISABLED = _HRESULT_TYPEDEF_(0x80280005L);
static const int TPM_E_DEACTIVATED = _HRESULT_TYPEDEF_(0x80280006L);
static const int TPM_E_DISABLED = _HRESULT_TYPEDEF_(0x80280007L);
static const int TPM_E_DISABLED_CMD = _HRESULT_TYPEDEF_(0x80280008L);
static const int TPM_E_FAIL = _HRESULT_TYPEDEF_(0x80280009L);
static const int TPM_E_BAD_ORDINAL = _HRESULT_TYPEDEF_(0x8028000AL);
static const int TPM_E_INSTALL_DISABLED = _HRESULT_TYPEDEF_(0x8028000BL);
static const int TPM_E_INVALID_KEYHANDLE = _HRESULT_TYPEDEF_(0x8028000CL);
static const int TPM_E_KEYNOTFOUND = _HRESULT_TYPEDEF_(0x8028000DL);
static const int TPM_E_INAPPROPRIATE_ENC = _HRESULT_TYPEDEF_(0x8028000EL);
static const int TPM_E_MIGRATEFAIL = _HRESULT_TYPEDEF_(0x8028000FL);
static const int TPM_E_INVALID_PCR_INFO = _HRESULT_TYPEDEF_(0x80280010L);
static const int TPM_E_NOSPACE = _HRESULT_TYPEDEF_(0x80280011L);
static const int TPM_E_NOSRK = _HRESULT_TYPEDEF_(0x80280012L);
static const int TPM_E_NOTSEALED_BLOB = _HRESULT_TYPEDEF_(0x80280013L);
static const int TPM_E_OWNER_SET = _HRESULT_TYPEDEF_(0x80280014L);
static const int TPM_E_RESOURCES = _HRESULT_TYPEDEF_(0x80280015L);
static const int TPM_E_SHORTRANDOM = _HRESULT_TYPEDEF_(0x80280016L);
static const int TPM_E_SIZE = _HRESULT_TYPEDEF_(0x80280017L);
static const int TPM_E_WRONGPCRVAL = _HRESULT_TYPEDEF_(0x80280018L);
static const int TPM_E_BAD_PARAM_SIZE = _HRESULT_TYPEDEF_(0x80280019L);
static const int TPM_E_SHA_THREAD = _HRESULT_TYPEDEF_(0x8028001AL);
static const int TPM_E_SHA_ERROR = _HRESULT_TYPEDEF_(0x8028001BL);
static const int TPM_E_FAILEDSELFTEST = _HRESULT_TYPEDEF_(0x8028001CL);
static const int TPM_E_AUTH2FAIL = _HRESULT_TYPEDEF_(0x8028001DL);
static const int TPM_E_BADTAG = _HRESULT_TYPEDEF_(0x8028001EL);
static const int TPM_E_IOERROR = _HRESULT_TYPEDEF_(0x8028001FL);
static const int TPM_E_ENCRYPT_ERROR = _HRESULT_TYPEDEF_(0x80280020L);
static const int TPM_E_DECRYPT_ERROR = _HRESULT_TYPEDEF_(0x80280021L);
static const int TPM_E_INVALID_AUTHHANDLE = _HRESULT_TYPEDEF_(0x80280022L);
static const int TPM_E_NO_ENDORSEMENT = _HRESULT_TYPEDEF_(0x80280023L);
static const int TPM_E_INVALID_KEYUSAGE = _HRESULT_TYPEDEF_(0x80280024L);
static const int TPM_E_WRONG_ENTITYTYPE = _HRESULT_TYPEDEF_(0x80280025L);
static const int TPM_E_INVALID_POSTINIT = _HRESULT_TYPEDEF_(0x80280026L);
static const int TPM_E_INAPPROPRIATE_SIG = _HRESULT_TYPEDEF_(0x80280027L);
static const int TPM_E_BAD_KEY_PROPERTY = _HRESULT_TYPEDEF_(0x80280028L);
static const int TPM_E_BAD_MIGRATION = _HRESULT_TYPEDEF_(0x80280029L);
static const int TPM_E_BAD_SCHEME = _HRESULT_TYPEDEF_(0x8028002AL);
static const int TPM_E_BAD_DATASIZE = _HRESULT_TYPEDEF_(0x8028002BL);
static const int TPM_E_BAD_MODE = _HRESULT_TYPEDEF_(0x8028002CL);
static const int TPM_E_BAD_PRESENCE = _HRESULT_TYPEDEF_(0x8028002DL);
static const int TPM_E_BAD_VERSION = _HRESULT_TYPEDEF_(0x8028002EL);
static const int TPM_E_NO_WRAP_TRANSPORT = _HRESULT_TYPEDEF_(0x8028002FL);
static const int TPM_E_AUDITFAIL_UNSUCCESSFUL = _HRESULT_TYPEDEF_(0x80280030L);
static const int TPM_E_AUDITFAIL_SUCCESSFUL = _HRESULT_TYPEDEF_(0x80280031L);
static const int TPM_E_NOTRESETABLE = _HRESULT_TYPEDEF_(0x80280032L);
static const int TPM_E_NOTLOCAL = _HRESULT_TYPEDEF_(0x80280033L);
static const int TPM_E_BAD_TYPE = _HRESULT_TYPEDEF_(0x80280034L);
static const int TPM_E_INVALID_RESOURCE = _HRESULT_TYPEDEF_(0x80280035L);
static const int TPM_E_NOTFIPS = _HRESULT_TYPEDEF_(0x80280036L);
static const int TPM_E_INVALID_FAMILY = _HRESULT_TYPEDEF_(0x80280037L);
static const int TPM_E_NO_NV_PERMISSION = _HRESULT_TYPEDEF_(0x80280038L);
static const int TPM_E_REQUIRES_SIGN = _HRESULT_TYPEDEF_(0x80280039L);
static const int TPM_E_KEY_NOTSUPPORTED = _HRESULT_TYPEDEF_(0x8028003AL);
static const int TPM_E_AUTH_CONFLICT = _HRESULT_TYPEDEF_(0x8028003BL);
static const int TPM_E_AREA_LOCKED = _HRESULT_TYPEDEF_(0x8028003CL);
static const int TPM_E_BAD_LOCALITY = _HRESULT_TYPEDEF_(0x8028003DL);
static const int TPM_E_READ_ONLY = _HRESULT_TYPEDEF_(0x8028003EL);
static const int TPM_E_PER_NOWRITE = _HRESULT_TYPEDEF_(0x8028003FL);
static const int TPM_E_FAMILYCOUNT = _HRESULT_TYPEDEF_(0x80280040L);
static const int TPM_E_WRITE_LOCKED = _HRESULT_TYPEDEF_(0x80280041L);
static const int TPM_E_BAD_ATTRIBUTES = _HRESULT_TYPEDEF_(0x80280042L);
static const int TPM_E_INVALID_STRUCTURE = _HRESULT_TYPEDEF_(0x80280043L);
static const int TPM_E_KEY_OWNER_CONTROL = _HRESULT_TYPEDEF_(0x80280044L);
static const int TPM_E_BAD_COUNTER = _HRESULT_TYPEDEF_(0x80280045L);
static const int TPM_E_NOT_FULLWRITE = _HRESULT_TYPEDEF_(0x80280046L);
static const int TPM_E_CONTEXT_GAP = _HRESULT_TYPEDEF_(0x80280047L);
static const int TPM_E_MAXNVWRITES = _HRESULT_TYPEDEF_(0x80280048L);
static const int TPM_E_NOOPERATOR = _HRESULT_TYPEDEF_(0x80280049L);
static const int TPM_E_RESOURCEMISSING = _HRESULT_TYPEDEF_(0x8028004AL);
static const int TPM_E_DELEGATE_LOCK = _HRESULT_TYPEDEF_(0x8028004BL);
static const int TPM_E_DELEGATE_FAMILY = _HRESULT_TYPEDEF_(0x8028004CL);
static const int TPM_E_DELEGATE_ADMIN = _HRESULT_TYPEDEF_(0x8028004DL);
static const int TPM_E_TRANSPORT_NOTEXCLUSIVE = _HRESULT_TYPEDEF_(0x8028004EL);
static const int TPM_E_OWNER_CONTROL = _HRESULT_TYPEDEF_(0x8028004FL);
static const int TPM_E_DAA_RESOURCES = _HRESULT_TYPEDEF_(0x80280050L);
static const int TPM_E_DAA_INPUT_DATA0 = _HRESULT_TYPEDEF_(0x80280051L);
static const int TPM_E_DAA_INPUT_DATA1 = _HRESULT_TYPEDEF_(0x80280052L);
static const int TPM_E_DAA_ISSUER_SETTINGS = _HRESULT_TYPEDEF_(0x80280053L);
static const int TPM_E_DAA_TPM_SETTINGS = _HRESULT_TYPEDEF_(0x80280054L);
static const int TPM_E_DAA_STAGE = _HRESULT_TYPEDEF_(0x80280055L);
static const int TPM_E_DAA_ISSUER_VALIDITY = _HRESULT_TYPEDEF_(0x80280056L);
static const int TPM_E_DAA_WRONG_W = _HRESULT_TYPEDEF_(0x80280057L);
static const int TPM_E_BAD_HANDLE = _HRESULT_TYPEDEF_(0x80280058L);
static const int TPM_E_BAD_DELEGATE = _HRESULT_TYPEDEF_(0x80280059L);
static const int TPM_E_BADCONTEXT = _HRESULT_TYPEDEF_(0x8028005AL);
static const int TPM_E_TOOMANYCONTEXTS = _HRESULT_TYPEDEF_(0x8028005BL);
static const int TPM_E_MA_TICKET_SIGNATURE = _HRESULT_TYPEDEF_(0x8028005CL);
static const int TPM_E_MA_DESTINATION = _HRESULT_TYPEDEF_(0x8028005DL);
static const int TPM_E_MA_SOURCE = _HRESULT_TYPEDEF_(0x8028005EL);
static const int TPM_E_MA_AUTHORITY = _HRESULT_TYPEDEF_(0x8028005FL);
static const int TPM_E_PERMANENTEK = _HRESULT_TYPEDEF_(0x80280061L);
static const int TPM_E_BAD_SIGNATURE = _HRESULT_TYPEDEF_(0x80280062L);
static const int TPM_E_NOCONTEXTSPACE = _HRESULT_TYPEDEF_(0x80280063L);
static const int TPM_E_COMMAND_BLOCKED = _HRESULT_TYPEDEF_(0x80280400L);
static const int TPM_E_INVALID_HANDLE = _HRESULT_TYPEDEF_(0x80280401L);
static const int TPM_E_DUPLICATE_VHANDLE = _HRESULT_TYPEDEF_(0x80280402L);
static const int TPM_E_EMBEDDED_COMMAND_BLOCKED = _HRESULT_TYPEDEF_(0x80280403L);
static const int TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = _HRESULT_TYPEDEF_(0x80280404L);
static const int TPM_E_RETRY = _HRESULT_TYPEDEF_(0x80280800L);
static const int TPM_E_NEEDS_SELFTEST = _HRESULT_TYPEDEF_(0x80280801L);
static const int TPM_E_DOING_SELFTEST = _HRESULT_TYPEDEF_(0x80280802L);
static const int TPM_E_DEFEND_LOCK_RUNNING = _HRESULT_TYPEDEF_(0x80280803L);
static const int TBS_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80284001L);
static const int TBS_E_BAD_PARAMETER = _HRESULT_TYPEDEF_(0x80284002L);
static const int TBS_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80284003L);
static const int TBS_E_INVALID_CONTEXT = _HRESULT_TYPEDEF_(0x80284004L);
static const int TBS_E_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x80284005L);
static const int TBS_E_IOERROR = _HRESULT_TYPEDEF_(0x80284006L);
static const int TBS_E_INVALID_CONTEXT_PARAM = _HRESULT_TYPEDEF_(0x80284007L);
static const int TBS_E_SERVICE_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80284008L);
static const int TBS_E_TOO_MANY_TBS_CONTEXTS = _HRESULT_TYPEDEF_(0x80284009L);
static const int TBS_E_TOO_MANY_RESOURCES = _HRESULT_TYPEDEF_(0x8028400AL);
static const int TBS_E_SERVICE_START_PENDING = _HRESULT_TYPEDEF_(0x8028400BL);
static const int TBS_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8028400CL);
static const int TBS_E_COMMAND_CANCELED = _HRESULT_TYPEDEF_(0x8028400DL);
static const int TBS_E_BUFFER_TOO_LARGE = _HRESULT_TYPEDEF_(0x8028400EL);
static const int TBS_E_TPM_NOT_FOUND = _HRESULT_TYPEDEF_(0x8028400FL);
static const int TBS_E_SERVICE_DISABLED = _HRESULT_TYPEDEF_(0x80284010L);
static const int TBS_E_NO_EVENT_LOG = _HRESULT_TYPEDEF_(0x80284011L);
static const int TPMAPI_E_INVALID_STATE = _HRESULT_TYPEDEF_(0x80290100L);
static const int TPMAPI_E_NOT_ENOUGH_DATA = _HRESULT_TYPEDEF_(0x80290101L);
static const int TPMAPI_E_TOO_MUCH_DATA = _HRESULT_TYPEDEF_(0x80290102L);
static const int TPMAPI_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80290103L);
static const int TPMAPI_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80290104L);
static const int TPMAPI_E_OUT_OF_MEMORY = _HRESULT_TYPEDEF_(0x80290105L);
static const int TPMAPI_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80290106L);
static const int TPMAPI_E_INTERNAL_ERROR = _HRESULT_TYPEDEF_(0x80290107L);
static const int TPMAPI_E_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x80290108L);
static const int TPMAPI_E_AUTHORIZATION_FAILED = _HRESULT_TYPEDEF_(0x80290109L);
static const int TPMAPI_E_INVALID_CONTEXT_HANDLE = _HRESULT_TYPEDEF_(0x8029010AL);
static const int TPMAPI_E_TBS_COMMUNICATION_ERROR = _HRESULT_TYPEDEF_(0x8029010BL);
static const int TPMAPI_E_TPM_COMMAND_ERROR = _HRESULT_TYPEDEF_(0x8029010CL);
static const int TPMAPI_E_MESSAGE_TOO_LARGE = _HRESULT_TYPEDEF_(0x8029010DL);
static const int TPMAPI_E_INVALID_ENCODING = _HRESULT_TYPEDEF_(0x8029010EL);
static const int TPMAPI_E_INVALID_KEY_SIZE = _HRESULT_TYPEDEF_(0x8029010FL);
static const int TPMAPI_E_ENCRYPTION_FAILED = _HRESULT_TYPEDEF_(0x80290110L);
static const int TPMAPI_E_INVALID_KEY_PARAMS = _HRESULT_TYPEDEF_(0x80290111L);
static const int TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = _HRESULT_TYPEDEF_(0x80290112L);
static const int TPMAPI_E_INVALID_PCR_INDEX = _HRESULT_TYPEDEF_(0x80290113L);
static const int TPMAPI_E_INVALID_DELEGATE_BLOB = _HRESULT_TYPEDEF_(0x80290114L);
static const int TPMAPI_E_INVALID_CONTEXT_PARAMS = _HRESULT_TYPEDEF_(0x80290115L);
static const int TPMAPI_E_INVALID_KEY_BLOB = _HRESULT_TYPEDEF_(0x80290116L);
static const int TPMAPI_E_INVALID_PCR_DATA = _HRESULT_TYPEDEF_(0x80290117L);
static const int TPMAPI_E_INVALID_OWNER_AUTH = _HRESULT_TYPEDEF_(0x80290118L);
static const int TPMAPI_E_FIPS_RNG_CHECK_FAILED = _HRESULT_TYPEDEF_(0x80290119L);
static const int TPMAPI_E_EMPTY_TCG_LOG = _HRESULT_TYPEDEF_(0x8029011AL);
static const int TPMAPI_E_INVALID_TCG_LOG_ENTRY = _HRESULT_TYPEDEF_(0x8029011BL);
static const int TPMAPI_E_TCG_SEPARATOR_ABSENT = _HRESULT_TYPEDEF_(0x8029011CL);
static const int TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = _HRESULT_TYPEDEF_(0x8029011DL);
static const int TBSIMP_E_BUFFER_TOO_SMALL = _HRESULT_TYPEDEF_(0x80290200L);
static const int TBSIMP_E_CLEANUP_FAILED = _HRESULT_TYPEDEF_(0x80290201L);
static const int TBSIMP_E_INVALID_CONTEXT_HANDLE = _HRESULT_TYPEDEF_(0x80290202L);
static const int TBSIMP_E_INVALID_CONTEXT_PARAM = _HRESULT_TYPEDEF_(0x80290203L);
static const int TBSIMP_E_TPM_ERROR = _HRESULT_TYPEDEF_(0x80290204L);
static const int TBSIMP_E_HASH_BAD_KEY = _HRESULT_TYPEDEF_(0x80290205L);
static const int TBSIMP_E_DUPLICATE_VHANDLE = _HRESULT_TYPEDEF_(0x80290206L);
static const int TBSIMP_E_INVALID_OUTPUT_POINTER = _HRESULT_TYPEDEF_(0x80290207L);
static const int TBSIMP_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80290208L);
static const int TBSIMP_E_RPC_INIT_FAILED = _HRESULT_TYPEDEF_(0x80290209L);
static const int TBSIMP_E_SCHEDULER_NOT_RUNNING = _HRESULT_TYPEDEF_(0x8029020AL);
static const int TBSIMP_E_COMMAND_CANCELED = _HRESULT_TYPEDEF_(0x8029020BL);
static const int TBSIMP_E_OUT_OF_MEMORY = _HRESULT_TYPEDEF_(0x8029020CL);
static const int TBSIMP_E_LIST_NO_MORE_ITEMS = _HRESULT_TYPEDEF_(0x8029020DL);
static const int TBSIMP_E_LIST_NOT_FOUND = _HRESULT_TYPEDEF_(0x8029020EL);
static const int TBSIMP_E_NOT_ENOUGH_SPACE = _HRESULT_TYPEDEF_(0x8029020FL);
static const int TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = _HRESULT_TYPEDEF_(0x80290210L);
static const int TBSIMP_E_COMMAND_FAILED = _HRESULT_TYPEDEF_(0x80290211L);
static const int TBSIMP_E_UNKNOWN_ORDINAL = _HRESULT_TYPEDEF_(0x80290212L);
static const int TBSIMP_E_RESOURCE_EXPIRED = _HRESULT_TYPEDEF_(0x80290213L);
static const int TBSIMP_E_INVALID_RESOURCE = _HRESULT_TYPEDEF_(0x80290214L);
static const int TBSIMP_E_NOTHING_TO_UNLOAD = _HRESULT_TYPEDEF_(0x80290215L);
static const int TBSIMP_E_HASH_TABLE_FULL = _HRESULT_TYPEDEF_(0x80290216L);
static const int TBSIMP_E_TOO_MANY_TBS_CONTEXTS = _HRESULT_TYPEDEF_(0x80290217L);
static const int TBSIMP_E_TOO_MANY_RESOURCES = _HRESULT_TYPEDEF_(0x80290218L);
static const int TBSIMP_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80290219L);
static const int TBSIMP_E_TPM_INCOMPATIBLE = _HRESULT_TYPEDEF_(0x8029021AL);
static const int TBSIMP_E_NO_EVENT_LOG = _HRESULT_TYPEDEF_(0x8029021BL);
static const int TPM_E_PPI_ACPI_FAILURE = _HRESULT_TYPEDEF_(0x80290300L);
static const int TPM_E_PPI_USER_ABORT = _HRESULT_TYPEDEF_(0x80290301L);
static const int TPM_E_PPI_BIOS_FAILURE = _HRESULT_TYPEDEF_(0x80290302L);
static const int TPM_E_PPI_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80290303L);
static const int PLA_E_DCS_NOT_FOUND = _HRESULT_TYPEDEF_(0x80300002L);
static const int PLA_E_DCS_IN_USE = _HRESULT_TYPEDEF_(0x803000AAL);
static const int PLA_E_TOO_MANY_FOLDERS = _HRESULT_TYPEDEF_(0x80300045L);
static const int PLA_E_NO_MIN_DISK = _HRESULT_TYPEDEF_(0x80300070L);
static const int PLA_E_DCS_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x803000B7L);
static const int PLA_S_PROPERTY_IGNORED = _HRESULT_TYPEDEF_(0x00300100L);
static const int PLA_E_PROPERTY_CONFLICT = _HRESULT_TYPEDEF_(0x80300101L);
static const int PLA_E_DCS_SINGLETON_REQUIRED = _HRESULT_TYPEDEF_(0x80300102L);
static const int PLA_E_CREDENTIALS_REQUIRED = _HRESULT_TYPEDEF_(0x80300103L);
static const int PLA_E_DCS_NOT_RUNNING = _HRESULT_TYPEDEF_(0x80300104L);
static const int PLA_E_CONFLICT_INCL_EXCL_API = _HRESULT_TYPEDEF_(0x80300105L);
static const int PLA_E_NETWORK_EXE_NOT_VALID = _HRESULT_TYPEDEF_(0x80300106L);
static const int PLA_E_EXE_ALREADY_CONFIGURED = _HRESULT_TYPEDEF_(0x80300107L);
static const int PLA_E_EXE_PATH_NOT_VALID = _HRESULT_TYPEDEF_(0x80300108L);
static const int PLA_E_DC_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x80300109L);
static const int PLA_E_DCS_START_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010AL);
static const int PLA_E_DC_START_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010BL);
static const int PLA_E_REPORT_WAIT_TIMEOUT = _HRESULT_TYPEDEF_(0x8030010CL);
static const int PLA_E_NO_DUPLICATES = _HRESULT_TYPEDEF_(0x8030010DL);
static const int PLA_E_EXE_FULL_PATH_REQUIRED = _HRESULT_TYPEDEF_(0x8030010EL);
static const int PLA_E_INVALID_SESSION_NAME = _HRESULT_TYPEDEF_(0x8030010FL);
static const int PLA_E_PLA_CHANNEL_NOT_ENABLED = _HRESULT_TYPEDEF_(0x80300110L);
static const int PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = _HRESULT_TYPEDEF_(0x80300111L);
static const int PLA_E_RULES_MANAGER_FAILED = _HRESULT_TYPEDEF_(0x80300112L);
static const int PLA_E_CABAPI_FAILURE = _HRESULT_TYPEDEF_(0x80300113L);
static const int FVE_E_LOCKED_VOLUME = _HRESULT_TYPEDEF_(0x80310000L);
static const int FVE_E_NOT_ENCRYPTED = _HRESULT_TYPEDEF_(0x80310001L);
static const int FVE_E_NO_TPM_BIOS = _HRESULT_TYPEDEF_(0x80310002L);
static const int FVE_E_NO_MBR_METRIC = _HRESULT_TYPEDEF_(0x80310003L);
static const int FVE_E_NO_BOOTSECTOR_METRIC = _HRESULT_TYPEDEF_(0x80310004L);
static const int FVE_E_NO_BOOTMGR_METRIC = _HRESULT_TYPEDEF_(0x80310005L);
static const int FVE_E_WRONG_BOOTMGR = _HRESULT_TYPEDEF_(0x80310006L);
static const int FVE_E_SECURE_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310007L);
static const int FVE_E_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80310008L);
static const int FVE_E_ACTION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310009L);
static const int FVE_E_AD_SCHEMA_NOT_INSTALLED = _HRESULT_TYPEDEF_(0x8031000AL);
static const int FVE_E_AD_INVALID_DATATYPE = _HRESULT_TYPEDEF_(0x8031000BL);
static const int FVE_E_AD_INVALID_DATASIZE = _HRESULT_TYPEDEF_(0x8031000CL);
static const int FVE_E_AD_NO_VALUES = _HRESULT_TYPEDEF_(0x8031000DL);
static const int FVE_E_AD_ATTR_NOT_SET = _HRESULT_TYPEDEF_(0x8031000EL);
static const int FVE_E_AD_GUID_NOT_FOUND = _HRESULT_TYPEDEF_(0x8031000FL);
static const int FVE_E_BAD_INFORMATION = _HRESULT_TYPEDEF_(0x80310010L);
static const int FVE_E_TOO_SMALL = _HRESULT_TYPEDEF_(0x80310011L);
static const int FVE_E_SYSTEM_VOLUME = _HRESULT_TYPEDEF_(0x80310012L);
static const int FVE_E_FAILED_WRONG_FS = _HRESULT_TYPEDEF_(0x80310013L);
static const int FVE_E_BAD_PARTITION_SIZE = _HRESULT_TYPEDEF_(0x80310014L);
static const int FVE_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310015L);
static const int FVE_E_BAD_DATA = _HRESULT_TYPEDEF_(0x80310016L);
static const int FVE_E_VOLUME_NOT_BOUND = _HRESULT_TYPEDEF_(0x80310017L);
static const int FVE_E_TPM_NOT_OWNED = _HRESULT_TYPEDEF_(0x80310018L);
static const int FVE_E_NOT_DATA_VOLUME = _HRESULT_TYPEDEF_(0x80310019L);
static const int FVE_E_AD_INSUFFICIENT_BUFFER = _HRESULT_TYPEDEF_(0x8031001AL);
static const int FVE_E_CONV_READ = _HRESULT_TYPEDEF_(0x8031001BL);
static const int FVE_E_CONV_WRITE = _HRESULT_TYPEDEF_(0x8031001CL);
static const int FVE_E_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x8031001DL);
static const int FVE_E_CLUSTERING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8031001EL);
static const int FVE_E_VOLUME_BOUND_ALREADY = _HRESULT_TYPEDEF_(0x8031001FL);
static const int FVE_E_OS_NOT_PROTECTED = _HRESULT_TYPEDEF_(0x80310020L);
static const int FVE_E_PROTECTION_DISABLED = _HRESULT_TYPEDEF_(0x80310021L);
static const int FVE_E_RECOVERY_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310022L);
static const int FVE_E_FOREIGN_VOLUME = _HRESULT_TYPEDEF_(0x80310023L);
static const int FVE_E_OVERLAPPED_UPDATE = _HRESULT_TYPEDEF_(0x80310024L);
static const int FVE_E_TPM_SRK_AUTH_NOT_ZERO = _HRESULT_TYPEDEF_(0x80310025L);
static const int FVE_E_FAILED_SECTOR_SIZE = _HRESULT_TYPEDEF_(0x80310026L);
static const int FVE_E_FAILED_AUTHENTICATION = _HRESULT_TYPEDEF_(0x80310027L);
static const int FVE_E_NOT_OS_VOLUME = _HRESULT_TYPEDEF_(0x80310028L);
static const int FVE_E_AUTOUNLOCK_ENABLED = _HRESULT_TYPEDEF_(0x80310029L);
static const int FVE_E_WRONG_BOOTSECTOR = _HRESULT_TYPEDEF_(0x8031002AL);
static const int FVE_E_WRONG_SYSTEM_FS = _HRESULT_TYPEDEF_(0x8031002BL);
static const int FVE_E_POLICY_PASSWORD_REQUIRED = _HRESULT_TYPEDEF_(0x8031002CL);
static const int FVE_E_CANNOT_SET_FVEK_ENCRYPTED = _HRESULT_TYPEDEF_(0x8031002DL);
static const int FVE_E_CANNOT_ENCRYPT_NO_KEY = _HRESULT_TYPEDEF_(0x8031002EL);
static const int FVE_E_BOOTABLE_CDDVD = _HRESULT_TYPEDEF_(0x80310030L);
static const int FVE_E_PROTECTOR_EXISTS = _HRESULT_TYPEDEF_(0x80310031L);
static const int FVE_E_RELATIVE_PATH = _HRESULT_TYPEDEF_(0x80310032L);
static const int FVE_E_PROTECTOR_NOT_FOUND = _HRESULT_TYPEDEF_(0x80310033L);
static const int FVE_E_INVALID_KEY_FORMAT = _HRESULT_TYPEDEF_(0x80310034L);
static const int FVE_E_INVALID_PASSWORD_FORMAT = _HRESULT_TYPEDEF_(0x80310035L);
static const int FVE_E_FIPS_RNG_CHECK_FAILED = _HRESULT_TYPEDEF_(0x80310036L);
static const int FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = _HRESULT_TYPEDEF_(0x80310037L);
static const int FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = _HRESULT_TYPEDEF_(0x80310038L);
static const int FVE_E_NOT_DECRYPTED = _HRESULT_TYPEDEF_(0x80310039L);
static const int FVE_E_INVALID_PROTECTOR_TYPE = _HRESULT_TYPEDEF_(0x8031003AL);
static const int FVE_E_NO_PROTECTORS_TO_TEST = _HRESULT_TYPEDEF_(0x8031003BL);
static const int FVE_E_KEYFILE_NOT_FOUND = _HRESULT_TYPEDEF_(0x8031003CL);
static const int FVE_E_KEYFILE_INVALID = _HRESULT_TYPEDEF_(0x8031003DL);
static const int FVE_E_KEYFILE_NO_VMK = _HRESULT_TYPEDEF_(0x8031003EL);
static const int FVE_E_TPM_DISABLED = _HRESULT_TYPEDEF_(0x8031003FL);
static const int FVE_E_NOT_ALLOWED_IN_SAFE_MODE = _HRESULT_TYPEDEF_(0x80310040L);
static const int FVE_E_TPM_INVALID_PCR = _HRESULT_TYPEDEF_(0x80310041L);
static const int FVE_E_TPM_NO_VMK = _HRESULT_TYPEDEF_(0x80310042L);
static const int FVE_E_PIN_INVALID = _HRESULT_TYPEDEF_(0x80310043L);
static const int FVE_E_AUTH_INVALID_APPLICATION = _HRESULT_TYPEDEF_(0x80310044L);
static const int FVE_E_AUTH_INVALID_CONFIG = _HRESULT_TYPEDEF_(0x80310045L);
static const int FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310046L);
static const int FVE_E_FS_NOT_EXTENDED = _HRESULT_TYPEDEF_(0x80310047L);
static const int FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310048L);
static const int FVE_E_NO_LICENSE = _HRESULT_TYPEDEF_(0x80310049L);
static const int FVE_E_NOT_ON_STACK = _HRESULT_TYPEDEF_(0x8031004AL);
static const int FVE_E_FS_MOUNTED = _HRESULT_TYPEDEF_(0x8031004BL);
static const int FVE_E_TOKEN_NOT_IMPERSONATED = _HRESULT_TYPEDEF_(0x8031004CL);
static const int FVE_E_DRY_RUN_FAILED = _HRESULT_TYPEDEF_(0x8031004DL);
static const int FVE_E_REBOOT_REQUIRED = _HRESULT_TYPEDEF_(0x8031004EL);
static const int FVE_E_DEBUGGER_ENABLED = _HRESULT_TYPEDEF_(0x8031004FL);
static const int FVE_E_RAW_ACCESS = _HRESULT_TYPEDEF_(0x80310050L);
static const int FVE_E_RAW_BLOCKED = _HRESULT_TYPEDEF_(0x80310051L);
static const int FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = _HRESULT_TYPEDEF_(0x80310052L);
static const int FVE_E_NOT_ALLOWED_IN_VERSION = _HRESULT_TYPEDEF_(0x80310053L);
static const int FVE_E_NO_AUTOUNLOCK_MASTER_KEY = _HRESULT_TYPEDEF_(0x80310054L);
static const int FVE_E_MOR_FAILED = _HRESULT_TYPEDEF_(0x80310055L);
static const int FVE_E_HIDDEN_VOLUME = _HRESULT_TYPEDEF_(0x80310056L);
static const int FVE_E_TRANSIENT_STATE = _HRESULT_TYPEDEF_(0x80310057L);
static const int FVE_E_PUBKEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310058L);
static const int FVE_E_VOLUME_HANDLE_OPEN = _HRESULT_TYPEDEF_(0x80310059L);
static const int FVE_E_NO_FEATURE_LICENSE = _HRESULT_TYPEDEF_(0x8031005AL);
static const int FVE_E_INVALID_STARTUP_OPTIONS = _HRESULT_TYPEDEF_(0x8031005BL);
static const int FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031005CL);
static const int FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = _HRESULT_TYPEDEF_(0x8031005DL);
static const int FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031005EL);
static const int FVE_E_POLICY_RECOVERY_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x8031005FL);
static const int FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310060L);
static const int FVE_E_POLICY_STARTUP_PIN_REQUIRED = _HRESULT_TYPEDEF_(0x80310061L);
static const int FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310062L);
static const int FVE_E_POLICY_STARTUP_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310063L);
static const int FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310064L);
static const int FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310065L);
static const int FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310066L);
static const int FVE_E_POLICY_STARTUP_TPM_REQUIRED = _HRESULT_TYPEDEF_(0x80310067L);
static const int FVE_E_POLICY_INVALID_PIN_LENGTH = _HRESULT_TYPEDEF_(0x80310068L);
static const int FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80310069L);
static const int FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031006AL);
static const int FVE_E_POLICY_PASSPHRASE_REQUIRED = _HRESULT_TYPEDEF_(0x8031006BL);
static const int FVE_E_FIPS_PREVENTS_PASSPHRASE = _HRESULT_TYPEDEF_(0x8031006CL);
static const int FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x8031006DL);
static const int FVE_E_INVALID_BITLOCKER_OID = _HRESULT_TYPEDEF_(0x8031006EL);
static const int FVE_E_VOLUME_TOO_SMALL = _HRESULT_TYPEDEF_(0x8031006FL);
static const int FVE_E_DV_NOT_SUPPORTED_ON_FS = _HRESULT_TYPEDEF_(0x80310070L);
static const int FVE_E_DV_NOT_ALLOWED_BY_GP = _HRESULT_TYPEDEF_(0x80310071L);
static const int FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310072L);
static const int FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = _HRESULT_TYPEDEF_(0x80310073L);
static const int FVE_E_POLICY_USER_CERT_MUST_BE_HW = _HRESULT_TYPEDEF_(0x80310074L);
static const int FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310075L);
static const int FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310076L);
static const int FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310077L);
static const int FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310078L);
static const int FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310079L);
static const int FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = _HRESULT_TYPEDEF_(0x80310080L);
static const int FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = _HRESULT_TYPEDEF_(0x80310081L);
static const int FVE_E_RECOVERY_PARTITION = _HRESULT_TYPEDEF_(0x80310082L);
static const int FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = _HRESULT_TYPEDEF_(0x80310083L);
static const int FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = _HRESULT_TYPEDEF_(0x80310084L);
static const int FVE_E_NON_BITLOCKER_OID = _HRESULT_TYPEDEF_(0x80310085L);
static const int FVE_E_POLICY_PROHIBITS_SELFSIGNED = _HRESULT_TYPEDEF_(0x80310086L);
static const int FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = _HRESULT_TYPEDEF_(0x80310087L);
static const int FVE_E_CONV_RECOVERY_FAILED = _HRESULT_TYPEDEF_(0x80310088L);
static const int FVE_E_VIRTUALIZED_SPACE_TOO_BIG = _HRESULT_TYPEDEF_(0x80310089L);
static const int FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310090L);
static const int FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310091L);
static const int FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = _HRESULT_TYPEDEF_(0x80310092L);
static const int FVE_E_NON_BITLOCKER_KU = _HRESULT_TYPEDEF_(0x80310093L);
static const int FVE_E_PRIVATEKEY_AUTH_FAILED = _HRESULT_TYPEDEF_(0x80310094L);
static const int FVE_E_REMOVAL_OF_DRA_FAILED = _HRESULT_TYPEDEF_(0x80310095L);
static const int FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = _HRESULT_TYPEDEF_(0x80310096L);
static const int FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = _HRESULT_TYPEDEF_(0x80310097L);
static const int FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80310098L);
static const int FVE_E_ENH_PIN_INVALID = _HRESULT_TYPEDEF_(0x80310099L);
static const int FVE_E_INVALID_PIN_CHARS = _HRESULT_TYPEDEF_(0x8031009AL);
static const int FVE_E_INVALID_DATUM_TYPE = _HRESULT_TYPEDEF_(0x8031009BL);
static const int FWP_E_CALLOUT_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320001L);
static const int FWP_E_CONDITION_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320002L);
static const int FWP_E_FILTER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320003L);
static const int FWP_E_LAYER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320004L);
static const int FWP_E_PROVIDER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320005L);
static const int FWP_E_PROVIDER_CONTEXT_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320006L);
static const int FWP_E_SUBLAYER_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320007L);
static const int FWP_E_NOT_FOUND = _HRESULT_TYPEDEF_(0x80320008L);
static const int FWP_E_ALREADY_EXISTS = _HRESULT_TYPEDEF_(0x80320009L);
static const int FWP_E_IN_USE = _HRESULT_TYPEDEF_(0x8032000AL);
static const int FWP_E_DYNAMIC_SESSION_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000BL);
static const int FWP_E_WRONG_SESSION = _HRESULT_TYPEDEF_(0x8032000CL);
static const int FWP_E_NO_TXN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000DL);
static const int FWP_E_TXN_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8032000EL);
static const int FWP_E_TXN_ABORTED = _HRESULT_TYPEDEF_(0x8032000FL);
static const int FWP_E_SESSION_ABORTED = _HRESULT_TYPEDEF_(0x80320010L);
static const int FWP_E_INCOMPATIBLE_TXN = _HRESULT_TYPEDEF_(0x80320011L);
static const int FWP_E_TIMEOUT = _HRESULT_TYPEDEF_(0x80320012L);
static const int FWP_E_NET_EVENTS_DISABLED = _HRESULT_TYPEDEF_(0x80320013L);
static const int FWP_E_INCOMPATIBLE_LAYER = _HRESULT_TYPEDEF_(0x80320014L);
static const int FWP_E_KM_CLIENTS_ONLY = _HRESULT_TYPEDEF_(0x80320015L);
static const int FWP_E_LIFETIME_MISMATCH = _HRESULT_TYPEDEF_(0x80320016L);
static const int FWP_E_BUILTIN_OBJECT = _HRESULT_TYPEDEF_(0x80320017L);
static const int FWP_E_TOO_MANY_CALLOUTS = _HRESULT_TYPEDEF_(0x80320018L);
static const int FWP_E_NOTIFICATION_DROPPED = _HRESULT_TYPEDEF_(0x80320019L);
static const int FWP_E_TRAFFIC_MISMATCH = _HRESULT_TYPEDEF_(0x8032001AL);
static const int FWP_E_INCOMPATIBLE_SA_STATE = _HRESULT_TYPEDEF_(0x8032001BL);
static const int FWP_E_NULL_POINTER = _HRESULT_TYPEDEF_(0x8032001CL);
static const int FWP_E_INVALID_ENUMERATOR = _HRESULT_TYPEDEF_(0x8032001DL);
static const int FWP_E_INVALID_FLAGS = _HRESULT_TYPEDEF_(0x8032001EL);
static const int FWP_E_INVALID_NET_MASK = _HRESULT_TYPEDEF_(0x8032001FL);
static const int FWP_E_INVALID_RANGE = _HRESULT_TYPEDEF_(0x80320020L);
static const int FWP_E_INVALID_INTERVAL = _HRESULT_TYPEDEF_(0x80320021L);
static const int FWP_E_ZERO_LENGTH_ARRAY = _HRESULT_TYPEDEF_(0x80320022L);
static const int FWP_E_NULL_DISPLAY_NAME = _HRESULT_TYPEDEF_(0x80320023L);
static const int FWP_E_INVALID_ACTION_TYPE = _HRESULT_TYPEDEF_(0x80320024L);
static const int FWP_E_INVALID_WEIGHT = _HRESULT_TYPEDEF_(0x80320025L);
static const int FWP_E_MATCH_TYPE_MISMATCH = _HRESULT_TYPEDEF_(0x80320026L);
static const int FWP_E_TYPE_MISMATCH = _HRESULT_TYPEDEF_(0x80320027L);
static const int FWP_E_OUT_OF_BOUNDS = _HRESULT_TYPEDEF_(0x80320028L);
static const int FWP_E_RESERVED = _HRESULT_TYPEDEF_(0x80320029L);
static const int FWP_E_DUPLICATE_CONDITION = _HRESULT_TYPEDEF_(0x8032002AL);
static const int FWP_E_DUPLICATE_KEYMOD = _HRESULT_TYPEDEF_(0x8032002BL);
static const int FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = _HRESULT_TYPEDEF_(0x8032002CL);
static const int FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = _HRESULT_TYPEDEF_(0x8032002DL);
static const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = _HRESULT_TYPEDEF_(0x8032002EL);
static const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = _HRESULT_TYPEDEF_(0x8032002FL);
static const int FWP_E_INCOMPATIBLE_AUTH_METHOD = _HRESULT_TYPEDEF_(0x80320030L);
static const int FWP_E_INCOMPATIBLE_DH_GROUP = _HRESULT_TYPEDEF_(0x80320031L);
static const int FWP_E_EM_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80320032L);
static const int FWP_E_NEVER_MATCH = _HRESULT_TYPEDEF_(0x80320033L);
static const int FWP_E_PROVIDER_CONTEXT_MISMATCH = _HRESULT_TYPEDEF_(0x80320034L);
static const int FWP_E_INVALID_PARAMETER = _HRESULT_TYPEDEF_(0x80320035L);
static const int FWP_E_TOO_MANY_SUBLAYERS = _HRESULT_TYPEDEF_(0x80320036L);
static const int FWP_E_CALLOUT_NOTIFICATION_FAILED = _HRESULT_TYPEDEF_(0x80320037L);
static const int FWP_E_INVALID_AUTH_TRANSFORM = _HRESULT_TYPEDEF_(0x80320038L);
static const int FWP_E_INVALID_CIPHER_TRANSFORM = _HRESULT_TYPEDEF_(0x80320039L);
static const int FWP_E_DROP_NOICMP = _HRESULT_TYPEDEF_(0x80320104L);
static const int FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = _HRESULT_TYPEDEF_(0x8032003AL);
static const int FWP_E_INVALID_TRANSFORM_COMBINATION = _HRESULT_TYPEDEF_(0x8032003BL);
static const int FWP_E_DUPLICATE_AUTH_METHOD = _HRESULT_TYPEDEF_(0x8032003CL);
static const int WS_S_ASYNC = _HRESULT_TYPEDEF_(0x003D0000L);
static const int WS_S_END = _HRESULT_TYPEDEF_(0x003D0001L);
static const int WS_E_INVALID_FORMAT = _HRESULT_TYPEDEF_(0x803D0000L);
static const int WS_E_OBJECT_FAULTED = _HRESULT_TYPEDEF_(0x803D0001L);
static const int WS_E_NUMERIC_OVERFLOW = _HRESULT_TYPEDEF_(0x803D0002L);
static const int WS_E_INVALID_OPERATION = _HRESULT_TYPEDEF_(0x803D0003L);
static const int WS_E_OPERATION_ABORTED = _HRESULT_TYPEDEF_(0x803D0004L);
static const int WS_E_ENDPOINT_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x803D0005L);
static const int WS_E_OPERATION_TIMED_OUT = _HRESULT_TYPEDEF_(0x803D0006L);
static const int WS_E_OPERATION_ABANDONED = _HRESULT_TYPEDEF_(0x803D0007L);
static const int WS_E_QUOTA_EXCEEDED = _HRESULT_TYPEDEF_(0x803D0008L);
static const int WS_E_NO_TRANSLATION_AVAILABLE = _HRESULT_TYPEDEF_(0x803D0009L);
static const int WS_E_SECURITY_VERIFICATION_FAILURE = _HRESULT_TYPEDEF_(0x803D000AL);
static const int WS_E_ADDRESS_IN_USE = _HRESULT_TYPEDEF_(0x803D000BL);
static const int WS_E_ADDRESS_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x803D000CL);
static const int WS_E_ENDPOINT_NOT_FOUND = _HRESULT_TYPEDEF_(0x803D000DL);
static const int WS_E_ENDPOINT_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x803D000EL);
static const int WS_E_ENDPOINT_FAILURE = _HRESULT_TYPEDEF_(0x803D000FL);
static const int WS_E_ENDPOINT_UNREACHABLE = _HRESULT_TYPEDEF_(0x803D0010L);
static const int WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x803D0011L);
static const int WS_E_ENDPOINT_TOO_BUSY = _HRESULT_TYPEDEF_(0x803D0012L);
static const int WS_E_ENDPOINT_FAULT_RECEIVED = _HRESULT_TYPEDEF_(0x803D0013L);
static const int WS_E_ENDPOINT_DISCONNECTED = _HRESULT_TYPEDEF_(0x803D0014L);
static const int WS_E_PROXY_FAILURE = _HRESULT_TYPEDEF_(0x803D0015L);
static const int WS_E_PROXY_ACCESS_DENIED = _HRESULT_TYPEDEF_(0x803D0016L);
static const int WS_E_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x803D0017L);
static const int WS_E_PROXY_REQUIRES_BASIC_AUTH = _HRESULT_TYPEDEF_(0x803D0018L);
static const int WS_E_PROXY_REQUIRES_DIGEST_AUTH = _HRESULT_TYPEDEF_(0x803D0019L);
static const int WS_E_PROXY_REQUIRES_NTLM_AUTH = _HRESULT_TYPEDEF_(0x803D001AL);
static const int WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = _HRESULT_TYPEDEF_(0x803D001BL);
static const int WS_E_SERVER_REQUIRES_BASIC_AUTH = _HRESULT_TYPEDEF_(0x803D001CL);
static const int WS_E_SERVER_REQUIRES_DIGEST_AUTH = _HRESULT_TYPEDEF_(0x803D001DL);
static const int WS_E_SERVER_REQUIRES_NTLM_AUTH = _HRESULT_TYPEDEF_(0x803D001EL);
static const int WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = _HRESULT_TYPEDEF_(0x803D001FL);
static const int WS_E_INVALID_ENDPOINT_URL = _HRESULT_TYPEDEF_(0x803D0020L);
static const int WS_E_OTHER = _HRESULT_TYPEDEF_(0x803D0021L);
static const int WS_E_SECURITY_TOKEN_EXPIRED = _HRESULT_TYPEDEF_(0x803D0022L);
static const int WS_E_SECURITY_SYSTEM_FAILURE = _HRESULT_TYPEDEF_(0x803D0023L);
static const int _NDIS_ERROR_TYPEDEF_(_sc) = (DWORD)(_sc);
static const int ERROR_NDIS_INTERFACE_CLOSING = _NDIS_ERROR_TYPEDEF_(0x80340002L);
static const int ERROR_NDIS_BAD_VERSION = _NDIS_ERROR_TYPEDEF_(0x80340004L);
static const int ERROR_NDIS_BAD_CHARACTERISTICS = _NDIS_ERROR_TYPEDEF_(0x80340005L);
static const int ERROR_NDIS_ADAPTER_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x80340006L);
static const int ERROR_NDIS_OPEN_FAILED = _NDIS_ERROR_TYPEDEF_(0x80340007L);
static const int ERROR_NDIS_DEVICE_FAILED = _NDIS_ERROR_TYPEDEF_(0x80340008L);
static const int ERROR_NDIS_MULTICAST_FULL = _NDIS_ERROR_TYPEDEF_(0x80340009L);
static const int ERROR_NDIS_MULTICAST_EXISTS = _NDIS_ERROR_TYPEDEF_(0x8034000AL);
static const int ERROR_NDIS_MULTICAST_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034000BL);
static const int ERROR_NDIS_REQUEST_ABORTED = _NDIS_ERROR_TYPEDEF_(0x8034000CL);
static const int ERROR_NDIS_RESET_IN_PROGRESS = _NDIS_ERROR_TYPEDEF_(0x8034000DL);
static const int ERROR_NDIS_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0x803400BBL);
static const int ERROR_NDIS_INVALID_PACKET = _NDIS_ERROR_TYPEDEF_(0x8034000FL);
static const int ERROR_NDIS_ADAPTER_NOT_READY = _NDIS_ERROR_TYPEDEF_(0x80340011L);
static const int ERROR_NDIS_INVALID_LENGTH = _NDIS_ERROR_TYPEDEF_(0x80340014L);
static const int ERROR_NDIS_INVALID_DATA = _NDIS_ERROR_TYPEDEF_(0x80340015L);
static const int ERROR_NDIS_BUFFER_TOO_SHORT = _NDIS_ERROR_TYPEDEF_(0x80340016L);
static const int ERROR_NDIS_INVALID_OID = _NDIS_ERROR_TYPEDEF_(0x80340017L);
static const int ERROR_NDIS_ADAPTER_REMOVED = _NDIS_ERROR_TYPEDEF_(0x80340018L);
static const int ERROR_NDIS_UNSUPPORTED_MEDIA = _NDIS_ERROR_TYPEDEF_(0x80340019L);
static const int ERROR_NDIS_GROUP_ADDRESS_IN_USE = _NDIS_ERROR_TYPEDEF_(0x8034001AL);
static const int ERROR_NDIS_FILE_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034001BL);
static const int ERROR_NDIS_ERROR_READING_FILE = _NDIS_ERROR_TYPEDEF_(0x8034001CL);
static const int ERROR_NDIS_ALREADY_MAPPED = _NDIS_ERROR_TYPEDEF_(0x8034001DL);
static const int ERROR_NDIS_RESOURCE_CONFLICT = _NDIS_ERROR_TYPEDEF_(0x8034001EL);
static const int ERROR_NDIS_MEDIA_DISCONNECTED = _NDIS_ERROR_TYPEDEF_(0x8034001FL);
static const int ERROR_NDIS_INVALID_ADDRESS = _NDIS_ERROR_TYPEDEF_(0x80340022L);
static const int ERROR_NDIS_INVALID_DEVICE_REQUEST = _NDIS_ERROR_TYPEDEF_(0x80340010L);
static const int ERROR_NDIS_PAUSED = _NDIS_ERROR_TYPEDEF_(0x8034002AL);
static const int ERROR_NDIS_INTERFACE_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0x8034002BL);
static const int ERROR_NDIS_UNSUPPORTED_REVISION = _NDIS_ERROR_TYPEDEF_(0x8034002CL);
static const int ERROR_NDIS_INVALID_PORT = _NDIS_ERROR_TYPEDEF_(0x8034002DL);
static const int ERROR_NDIS_INVALID_PORT_STATE = _NDIS_ERROR_TYPEDEF_(0x8034002EL);
static const int ERROR_NDIS_LOW_POWER_STATE = _NDIS_ERROR_TYPEDEF_(0x8034002FL);
static const int ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = _NDIS_ERROR_TYPEDEF_(0x80342000L);
static const int ERROR_NDIS_DOT11_MEDIA_IN_USE = _NDIS_ERROR_TYPEDEF_(0x80342001L);
static const int ERROR_NDIS_DOT11_POWER_STATE_INVALID = _NDIS_ERROR_TYPEDEF_(0x80342002L);
static const int ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = _NDIS_ERROR_TYPEDEF_(0x80342003L);
static const int ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = _NDIS_ERROR_TYPEDEF_(0x80342004L);
static const int ERROR_NDIS_INDICATION_REQUIRED = _NDIS_ERROR_TYPEDEF_(0x00340001L);
static const int ERROR_NDIS_OFFLOAD_POLICY = _NDIS_ERROR_TYPEDEF_(0xC034100FL);
static const int ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = _NDIS_ERROR_TYPEDEF_(0xC0341012L);
static const int ERROR_NDIS_OFFLOAD_PATH_REJECTED = _NDIS_ERROR_TYPEDEF_(0xC0341013L);
static const int ERROR_HV_INVALID_HYPERCALL_CODE = _NDIS_ERROR_TYPEDEF_(0xC0350002L);
static const int ERROR_HV_INVALID_HYPERCALL_INPUT = _NDIS_ERROR_TYPEDEF_(0xC0350003L);
static const int ERROR_HV_INVALID_ALIGNMENT = _NDIS_ERROR_TYPEDEF_(0xC0350004L);
static const int ERROR_HV_INVALID_PARAMETER = _NDIS_ERROR_TYPEDEF_(0xC0350005L);
static const int ERROR_HV_ACCESS_DENIED = _NDIS_ERROR_TYPEDEF_(0xC0350006L);
static const int ERROR_HV_INVALID_PARTITION_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350007L);
static const int ERROR_HV_OPERATION_DENIED = _NDIS_ERROR_TYPEDEF_(0xC0350008L);
static const int ERROR_HV_UNKNOWN_PROPERTY = _NDIS_ERROR_TYPEDEF_(0xC0350009L);
static const int ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = _NDIS_ERROR_TYPEDEF_(0xC035000AL);
static const int ERROR_HV_INSUFFICIENT_MEMORY = _NDIS_ERROR_TYPEDEF_(0xC035000BL);
static const int ERROR_HV_PARTITION_TOO_DEEP = _NDIS_ERROR_TYPEDEF_(0xC035000CL);
static const int ERROR_HV_INVALID_PARTITION_ID = _NDIS_ERROR_TYPEDEF_(0xC035000DL);
static const int ERROR_HV_INVALID_VP_INDEX = _NDIS_ERROR_TYPEDEF_(0xC035000EL);
static const int ERROR_HV_INVALID_PORT_ID = _NDIS_ERROR_TYPEDEF_(0xC0350011L);
static const int ERROR_HV_INVALID_CONNECTION_ID = _NDIS_ERROR_TYPEDEF_(0xC0350012L);
static const int ERROR_HV_INSUFFICIENT_BUFFERS = _NDIS_ERROR_TYPEDEF_(0xC0350013L);
static const int ERROR_HV_NOT_ACKNOWLEDGED = _NDIS_ERROR_TYPEDEF_(0xC0350014L);
static const int ERROR_HV_ACKNOWLEDGED = _NDIS_ERROR_TYPEDEF_(0xC0350016L);
static const int ERROR_HV_INVALID_SAVE_RESTORE_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350017L);
static const int ERROR_HV_INVALID_SYNIC_STATE = _NDIS_ERROR_TYPEDEF_(0xC0350018L);
static const int ERROR_HV_OBJECT_IN_USE = _NDIS_ERROR_TYPEDEF_(0xC0350019L);
static const int ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = _NDIS_ERROR_TYPEDEF_(0xC035001AL);
static const int ERROR_HV_NO_DATA = _NDIS_ERROR_TYPEDEF_(0xC035001BL);
static const int ERROR_HV_INACTIVE = _NDIS_ERROR_TYPEDEF_(0xC035001CL);
static const int ERROR_HV_NO_RESOURCES = _NDIS_ERROR_TYPEDEF_(0xC035001DL);
static const int ERROR_HV_FEATURE_UNAVAILABLE = _NDIS_ERROR_TYPEDEF_(0xC035001EL);
static const int ERROR_HV_NOT_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0351000L);
static const int ERROR_VID_DUPLICATE_HANDLER = _NDIS_ERROR_TYPEDEF_(0xC0370001L);
static const int ERROR_VID_TOO_MANY_HANDLERS = _NDIS_ERROR_TYPEDEF_(0xC0370002L);
static const int ERROR_VID_QUEUE_FULL = _NDIS_ERROR_TYPEDEF_(0xC0370003L);
static const int ERROR_VID_HANDLER_NOT_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0370004L);
static const int ERROR_VID_INVALID_OBJECT_NAME = _NDIS_ERROR_TYPEDEF_(0xC0370005L);
static const int ERROR_VID_PARTITION_NAME_TOO_LONG = _NDIS_ERROR_TYPEDEF_(0xC0370006L);
static const int ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = _NDIS_ERROR_TYPEDEF_(0xC0370007L);
static const int ERROR_VID_PARTITION_ALREADY_EXISTS = _NDIS_ERROR_TYPEDEF_(0xC0370008L);
static const int ERROR_VID_PARTITION_DOES_NOT_EXIST = _NDIS_ERROR_TYPEDEF_(0xC0370009L);
static const int ERROR_VID_PARTITION_NAME_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC037000AL);
static const int ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = _NDIS_ERROR_TYPEDEF_(0xC037000BL);
static const int ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC037000CL);
static const int ERROR_VID_MB_STILL_REFERENCED = _NDIS_ERROR_TYPEDEF_(0xC037000DL);
static const int ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = _NDIS_ERROR_TYPEDEF_(0xC037000EL);
static const int ERROR_VID_INVALID_NUMA_SETTINGS = _NDIS_ERROR_TYPEDEF_(0xC037000FL);
static const int ERROR_VID_INVALID_NUMA_NODE_INDEX = _NDIS_ERROR_TYPEDEF_(0xC0370010L);
static const int ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = _NDIS_ERROR_TYPEDEF_(0xC0370011L);
static const int ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370012L);
static const int ERROR_VID_PAGE_RANGE_OVERFLOW = _NDIS_ERROR_TYPEDEF_(0xC0370013L);
static const int ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370014L);
static const int ERROR_VID_INVALID_GPA_RANGE_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370015L);
static const int ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = _NDIS_ERROR_TYPEDEF_(0xC0370016L);
static const int ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = _NDIS_ERROR_TYPEDEF_(0xC0370017L);
static const int ERROR_VID_INVALID_PPM_HANDLE = _NDIS_ERROR_TYPEDEF_(0xC0370018L);
static const int ERROR_VID_MBPS_ARE_LOCKED = _NDIS_ERROR_TYPEDEF_(0xC0370019L);
static const int ERROR_VID_MESSAGE_QUEUE_CLOSED = _NDIS_ERROR_TYPEDEF_(0xC037001AL);
static const int ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = _NDIS_ERROR_TYPEDEF_(0xC037001BL);
static const int ERROR_VID_STOP_PENDING = _NDIS_ERROR_TYPEDEF_(0xC037001CL);
static const int ERROR_VID_INVALID_PROCESSOR_STATE = _NDIS_ERROR_TYPEDEF_(0xC037001DL);
static const int ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC037001EL);
static const int ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = _NDIS_ERROR_TYPEDEF_(0xC037001FL);
static const int ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = _NDIS_ERROR_TYPEDEF_(0xC0370020L);
static const int ERROR_VID_MMIO_RANGE_DESTROYED = _NDIS_ERROR_TYPEDEF_(0xC0370021L);
static const int ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = _NDIS_ERROR_TYPEDEF_(0xC0370022L);
static const int ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = _NDIS_ERROR_TYPEDEF_(0xC0370023L);
static const int ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = _NDIS_ERROR_TYPEDEF_(0xC0370024L);
static const int ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = _NDIS_ERROR_TYPEDEF_(0xC0370025L);
static const int ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = _NDIS_ERROR_TYPEDEF_(0xC0370026L);
static const int ERROR_VID_SAVED_STATE_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC0370027L);
static const int ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = _NDIS_ERROR_TYPEDEF_(0xC0370028L);
static const int ERROR_VID_SAVED_STATE_INCOMPATIBLE = _NDIS_ERROR_TYPEDEF_(0xC0370029L);
static const int ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = _NDIS_ERROR_TYPEDEF_(0x80370001L);
static const int ERROR_VOLMGR_INCOMPLETE_REGENERATION = _NDIS_ERROR_TYPEDEF_(0x80380001L);
static const int ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = _NDIS_ERROR_TYPEDEF_(0x80380002L);
static const int ERROR_VOLMGR_DATABASE_FULL = _NDIS_ERROR_TYPEDEF_(0xC0380001L);
static const int ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = _NDIS_ERROR_TYPEDEF_(0xC0380002L);
static const int ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380003L);
static const int ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380004L);
static const int ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = _NDIS_ERROR_TYPEDEF_(0xC0380005L);
static const int ERROR_VOLMGR_DISK_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380006L);
static const int ERROR_VOLMGR_DISK_DYNAMIC = _NDIS_ERROR_TYPEDEF_(0xC0380007L);
static const int ERROR_VOLMGR_DISK_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380008L);
static const int ERROR_VOLMGR_DISK_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380009L);
static const int ERROR_VOLMGR_DISK_LAST_VOTER = _NDIS_ERROR_TYPEDEF_(0xC038000AL);
static const int ERROR_VOLMGR_DISK_LAYOUT_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038000BL);
static const int ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC038000CL);
static const int ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = _NDIS_ERROR_TYPEDEF_(0xC038000DL);
static const int ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = _NDIS_ERROR_TYPEDEF_(0xC038000EL);
static const int ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC038000FL);
static const int ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = _NDIS_ERROR_TYPEDEF_(0xC0380010L);
static const int ERROR_VOLMGR_DISK_MISSING = _NDIS_ERROR_TYPEDEF_(0xC0380011L);
static const int ERROR_VOLMGR_DISK_NOT_EMPTY = _NDIS_ERROR_TYPEDEF_(0xC0380012L);
static const int ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = _NDIS_ERROR_TYPEDEF_(0xC0380013L);
static const int ERROR_VOLMGR_DISK_REVECTORING_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380014L);
static const int ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380015L);
static const int ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = _NDIS_ERROR_TYPEDEF_(0xC0380016L);
static const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = _NDIS_ERROR_TYPEDEF_(0xC0380017L);
static const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = _NDIS_ERROR_TYPEDEF_(0xC0380018L);
static const int ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC0380019L);
static const int ERROR_VOLMGR_EXTENT_ALREADY_USED = _NDIS_ERROR_TYPEDEF_(0xC038001AL);
static const int ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = _NDIS_ERROR_TYPEDEF_(0xC038001BL);
static const int ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = _NDIS_ERROR_TYPEDEF_(0xC038001CL);
static const int ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = _NDIS_ERROR_TYPEDEF_(0xC038001DL);
static const int ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = _NDIS_ERROR_TYPEDEF_(0xC038001EL);
static const int ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = _NDIS_ERROR_TYPEDEF_(0xC038001FL);
static const int ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC0380020L);
static const int ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380021L);
static const int ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = _NDIS_ERROR_TYPEDEF_(0xC0380022L);
static const int ERROR_VOLMGR_MEMBER_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380023L);
static const int ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380024L);
static const int ERROR_VOLMGR_MEMBER_INDEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380025L);
static const int ERROR_VOLMGR_MEMBER_MISSING = _NDIS_ERROR_TYPEDEF_(0xC0380026L);
static const int ERROR_VOLMGR_MEMBER_NOT_DETACHED = _NDIS_ERROR_TYPEDEF_(0xC0380027L);
static const int ERROR_VOLMGR_MEMBER_REGENERATING = _NDIS_ERROR_TYPEDEF_(0xC0380028L);
static const int ERROR_VOLMGR_ALL_DISKS_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380029L);
static const int ERROR_VOLMGR_NO_REGISTERED_USERS = _NDIS_ERROR_TYPEDEF_(0xC038002AL);
static const int ERROR_VOLMGR_NO_SUCH_USER = _NDIS_ERROR_TYPEDEF_(0xC038002BL);
static const int ERROR_VOLMGR_NOTIFICATION_RESET = _NDIS_ERROR_TYPEDEF_(0xC038002CL);
static const int ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038002DL);
static const int ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038002EL);
static const int ERROR_VOLMGR_PACK_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC038002FL);
static const int ERROR_VOLMGR_PACK_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380030L);
static const int ERROR_VOLMGR_PACK_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380031L);
static const int ERROR_VOLMGR_PACK_NAME_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380032L);
static const int ERROR_VOLMGR_PACK_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC0380033L);
static const int ERROR_VOLMGR_PACK_HAS_QUORUM = _NDIS_ERROR_TYPEDEF_(0xC0380034L);
static const int ERROR_VOLMGR_PACK_WITHOUT_QUORUM = _NDIS_ERROR_TYPEDEF_(0xC0380035L);
static const int ERROR_VOLMGR_PARTITION_STYLE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380036L);
static const int ERROR_VOLMGR_PARTITION_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380037L);
static const int ERROR_VOLMGR_PLEX_IN_SYNC = _NDIS_ERROR_TYPEDEF_(0xC0380038L);
static const int ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = _NDIS_ERROR_TYPEDEF_(0xC0380039L);
static const int ERROR_VOLMGR_PLEX_INDEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038003AL);
static const int ERROR_VOLMGR_PLEX_LAST_ACTIVE = _NDIS_ERROR_TYPEDEF_(0xC038003BL);
static const int ERROR_VOLMGR_PLEX_MISSING = _NDIS_ERROR_TYPEDEF_(0xC038003CL);
static const int ERROR_VOLMGR_PLEX_REGENERATING = _NDIS_ERROR_TYPEDEF_(0xC038003DL);
static const int ERROR_VOLMGR_PLEX_TYPE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038003EL);
static const int ERROR_VOLMGR_PLEX_NOT_RAID5 = _NDIS_ERROR_TYPEDEF_(0xC038003FL);
static const int ERROR_VOLMGR_PLEX_NOT_SIMPLE = _NDIS_ERROR_TYPEDEF_(0xC0380040L);
static const int ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380041L);
static const int ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = _NDIS_ERROR_TYPEDEF_(0xC0380042L);
static const int ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = _NDIS_ERROR_TYPEDEF_(0xC0380043L);
static const int ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = _NDIS_ERROR_TYPEDEF_(0xC0380044L);
static const int ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = _NDIS_ERROR_TYPEDEF_(0xC0380045L);
static const int ERROR_VOLMGR_VOLUME_ID_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380046L);
static const int ERROR_VOLMGR_VOLUME_LENGTH_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380047L);
static const int ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = _NDIS_ERROR_TYPEDEF_(0xC0380048L);
static const int ERROR_VOLMGR_VOLUME_NOT_MIRRORED = _NDIS_ERROR_TYPEDEF_(0xC0380049L);
static const int ERROR_VOLMGR_VOLUME_NOT_RETAINED = _NDIS_ERROR_TYPEDEF_(0xC038004AL);
static const int ERROR_VOLMGR_VOLUME_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC038004BL);
static const int ERROR_VOLMGR_VOLUME_RETAINED = _NDIS_ERROR_TYPEDEF_(0xC038004CL);
static const int ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038004DL);
static const int ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = _NDIS_ERROR_TYPEDEF_(0xC038004EL);
static const int ERROR_VOLMGR_BAD_BOOT_DISK = _NDIS_ERROR_TYPEDEF_(0xC038004FL);
static const int ERROR_VOLMGR_PACK_CONFIG_OFFLINE = _NDIS_ERROR_TYPEDEF_(0xC0380050L);
static const int ERROR_VOLMGR_PACK_CONFIG_ONLINE = _NDIS_ERROR_TYPEDEF_(0xC0380051L);
static const int ERROR_VOLMGR_NOT_PRIMARY_PACK = _NDIS_ERROR_TYPEDEF_(0xC0380052L);
static const int ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = _NDIS_ERROR_TYPEDEF_(0xC0380053L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380054L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = _NDIS_ERROR_TYPEDEF_(0xC0380055L);
static const int ERROR_VOLMGR_VOLUME_MIRRORED = _NDIS_ERROR_TYPEDEF_(0xC0380056L);
static const int ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = _NDIS_ERROR_TYPEDEF_(0xC0380057L);
static const int ERROR_VOLMGR_NO_VALID_LOG_COPIES = _NDIS_ERROR_TYPEDEF_(0xC0380058L);
static const int ERROR_VOLMGR_PRIMARY_PACK_PRESENT = _NDIS_ERROR_TYPEDEF_(0xC0380059L);
static const int ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = _NDIS_ERROR_TYPEDEF_(0xC038005AL);
static const int ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC038005BL);
static const int ERROR_VOLMGR_RAID5_NOT_SUPPORTED = _NDIS_ERROR_TYPEDEF_(0xC038005CL);
static const int ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = _NDIS_ERROR_TYPEDEF_(0x80390001L);
static const int ERROR_BCD_TOO_MANY_ELEMENTS = _NDIS_ERROR_TYPEDEF_(0xC0390002L);
static const int ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = _NDIS_ERROR_TYPEDEF_(0x80390003L);
static const int ERROR_VHD_DRIVE_FOOTER_MISSING = _NDIS_ERROR_TYPEDEF_(0xC03A0001L);
static const int ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0002L);
static const int ERROR_VHD_DRIVE_FOOTER_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A0003L);
static const int ERROR_VHD_FORMAT_UNKNOWN = _NDIS_ERROR_TYPEDEF_(0xC03A0004L);
static const int ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = _NDIS_ERROR_TYPEDEF_(0xC03A0005L);
static const int ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0006L);
static const int ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = _NDIS_ERROR_TYPEDEF_(0xC03A0007L);
static const int ERROR_VHD_SPARSE_HEADER_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A0008L);
static const int ERROR_VHD_BLOCK_ALLOCATION_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0009L);
static const int ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = _NDIS_ERROR_TYPEDEF_(0xC03A000AL);
static const int ERROR_VHD_INVALID_BLOCK_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A000BL);
static const int ERROR_VHD_BITMAP_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000CL);
static const int ERROR_VHD_PARENT_VHD_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC03A000DL);
static const int ERROR_VHD_CHILD_PARENT_ID_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000EL);
static const int ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A000FL);
static const int ERROR_VHD_METADATA_READ_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0010L);
static const int ERROR_VHD_METADATA_WRITE_FAILURE = _NDIS_ERROR_TYPEDEF_(0xC03A0011L);
static const int ERROR_VHD_INVALID_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A0012L);
static const int ERROR_VHD_INVALID_FILE_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A0013L);
static const int ERROR_VIRTDISK_PROVIDER_NOT_FOUND = _NDIS_ERROR_TYPEDEF_(0xC03A0014L);
static const int ERROR_VIRTDISK_NOT_VIRTUAL_DISK = _NDIS_ERROR_TYPEDEF_(0xC03A0015L);
static const int ERROR_VHD_PARENT_VHD_ACCESS_DENIED = _NDIS_ERROR_TYPEDEF_(0xC03A0016L);
static const int ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = _NDIS_ERROR_TYPEDEF_(0xC03A0017L);
static const int ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = _NDIS_ERROR_TYPEDEF_(0xC03A0018L);
static const int ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = _NDIS_ERROR_TYPEDEF_(0xC03A0019L);
static const int ERROR_VIRTUAL_DISK_LIMITATION = _NDIS_ERROR_TYPEDEF_(0xC03A001AL);
static const int ERROR_VHD_INVALID_TYPE = _NDIS_ERROR_TYPEDEF_(0xC03A001BL);
static const int ERROR_VHD_INVALID_STATE = _NDIS_ERROR_TYPEDEF_(0xC03A001CL);
static const int ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = _NDIS_ERROR_TYPEDEF_(0xC03A001DL);
static const int ERROR_QUERY_STORAGE_ERROR = _NDIS_ERROR_TYPEDEF_(0x803A0001L);
static const int SDIAG_E_CANCELLED = _NDIS_ERROR_TYPEDEF_(0x803C0100L);
static const int SDIAG_E_SCRIPT = _NDIS_ERROR_TYPEDEF_(0x803C0101L);
static const int SDIAG_E_POWERSHELL = _NDIS_ERROR_TYPEDEF_(0x803C0102L);
static const int SDIAG_E_MANAGEDHOST = _NDIS_ERROR_TYPEDEF_(0x803C0103L);
static const int SDIAG_E_NOVERIFIER = _NDIS_ERROR_TYPEDEF_(0x803C0104L);
static const int SDIAG_S_CANNOTRUN = _NDIS_ERROR_TYPEDEF_(0x003C0105L);
static const int SDIAG_E_DISABLED = _NDIS_ERROR_TYPEDEF_(0x803C0106L);
static const int SDIAG_E_TRUST = _NDIS_ERROR_TYPEDEF_(0x803C0107L);
static const int SDIAG_E_CANNOTRUN = _NDIS_ERROR_TYPEDEF_(0x803C0108L);
static const int SDIAG_E_VERSION = _NDIS_ERROR_TYPEDEF_(0x803C0109L);
static const int SDIAG_E_RESOURCE = _NDIS_ERROR_TYPEDEF_(0x803C010AL);
static const int SDIAG_E_ROOTCAUSE = _NDIS_ERROR_TYPEDEF_(0x803C010BL);
static const int E_MBN_CONTEXT_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80548201L);
static const int E_MBN_BAD_SIM = _HRESULT_TYPEDEF_(0x80548202L);
static const int E_MBN_DATA_CLASS_NOT_AVAILABLE = _HRESULT_TYPEDEF_(0x80548203L);
static const int E_MBN_INVALID_ACCESS_STRING = _HRESULT_TYPEDEF_(0x80548204L);
static const int E_MBN_MAX_ACTIVATED_CONTEXTS = _HRESULT_TYPEDEF_(0x80548205L);
static const int E_MBN_PACKET_SVC_DETACHED = _HRESULT_TYPEDEF_(0x80548206L);
static const int E_MBN_PROVIDER_NOT_VISIBLE = _HRESULT_TYPEDEF_(0x80548207L);
static const int E_MBN_RADIO_POWER_OFF = _HRESULT_TYPEDEF_(0x80548208L);
static const int E_MBN_SERVICE_NOT_ACTIVATED = _HRESULT_TYPEDEF_(0x80548209L);
static const int E_MBN_SIM_NOT_INSERTED = _HRESULT_TYPEDEF_(0x8054820AL);
static const int E_MBN_VOICE_CALL_IN_PROGRESS = _HRESULT_TYPEDEF_(0x8054820BL);
static const int E_MBN_INVALID_CACHE = _HRESULT_TYPEDEF_(0x8054820CL);
static const int E_MBN_NOT_REGISTERED = _HRESULT_TYPEDEF_(0x8054820DL);
static const int E_MBN_PROVIDERS_NOT_FOUND = _HRESULT_TYPEDEF_(0x8054820EL);
static const int E_MBN_PIN_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x8054820FL);
static const int E_MBN_PIN_REQUIRED = _HRESULT_TYPEDEF_(0x80548210L);
static const int E_MBN_PIN_DISABLED = _HRESULT_TYPEDEF_(0x80548211L);
static const int E_MBN_FAILURE = _HRESULT_TYPEDEF_(0x80548212L);
static const int E_MBN_INVALID_PROFILE = _HRESULT_TYPEDEF_(0x80548218L);
static const int E_MBN_DEFAULT_PROFILE_EXIST = _HRESULT_TYPEDEF_(0x80548219L);
static const int E_MBN_SMS_ENCODING_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548220L);
static const int E_MBN_SMS_FILTER_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548221L);
static const int E_MBN_SMS_INVALID_MEMORY_INDEX = _HRESULT_TYPEDEF_(0x80548222L);
static const int E_MBN_SMS_LANG_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548223L);
static const int E_MBN_SMS_MEMORY_FAILURE = _HRESULT_TYPEDEF_(0x80548224L);
static const int E_MBN_SMS_NETWORK_TIMEOUT = _HRESULT_TYPEDEF_(0x80548225L);
static const int E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = _HRESULT_TYPEDEF_(0x80548226L);
static const int E_MBN_SMS_FORMAT_NOT_SUPPORTED = _HRESULT_TYPEDEF_(0x80548227L);
static const int E_MBN_SMS_OPERATION_NOT_ALLOWED = _HRESULT_TYPEDEF_(0x80548228L);
static const int E_MBN_SMS_MEMORY_FULL = _HRESULT_TYPEDEF_(0x80548229L);
static const int UI_E_CREATE_FAILED = _HRESULT_TYPEDEF_(0x802A0001L);
static const int UI_E_SHUTDOWN_CALLED = _HRESULT_TYPEDEF_(0x802A0002L);
static const int UI_E_ILLEGAL_REENTRANCY = _HRESULT_TYPEDEF_(0x802A0003L);
static const int UI_E_OBJECT_SEALED = _HRESULT_TYPEDEF_(0x802A0004L);
static const int UI_E_VALUE_NOT_SET = _HRESULT_TYPEDEF_(0x802A0005L);
static const int UI_E_VALUE_NOT_DETERMINED = _HRESULT_TYPEDEF_(0x802A0006L);
static const int UI_E_INVALID_OUTPUT = _HRESULT_TYPEDEF_(0x802A0007L);
static const int UI_E_BOOLEAN_EXPECTED = _HRESULT_TYPEDEF_(0x802A0008L);
static const int UI_E_DIFFERENT_OWNER = _HRESULT_TYPEDEF_(0x802A0009L);
static const int UI_E_AMBIGUOUS_MATCH = _HRESULT_TYPEDEF_(0x802A000AL);
static const int UI_E_FP_OVERFLOW = _HRESULT_TYPEDEF_(0x802A000BL);
static const int UI_E_WRONG_THREAD = _HRESULT_TYPEDEF_(0x802A000CL);
static const int UI_E_STORYBOARD_ACTIVE = _HRESULT_TYPEDEF_(0x802A0101L);
static const int UI_E_STORYBOARD_NOT_PLAYING = _HRESULT_TYPEDEF_(0x802A0102L);
static const int UI_E_START_KEYFRAME_AFTER_END = _HRESULT_TYPEDEF_(0x802A0103L);
static const int UI_E_END_KEYFRAME_NOT_DETERMINED = _HRESULT_TYPEDEF_(0x802A0104L);
static const int UI_E_LOOPS_OVERLAP = _HRESULT_TYPEDEF_(0x802A0105L);
static const int UI_E_TRANSITION_ALREADY_USED = _HRESULT_TYPEDEF_(0x802A0106L);
static const int UI_E_TRANSITION_NOT_IN_STORYBOARD = _HRESULT_TYPEDEF_(0x802A0107L);
static const int UI_E_TRANSITION_ECLIPSED = _HRESULT_TYPEDEF_(0x802A0108L);
static const int UI_E_TIME_BEFORE_LAST_UPDATE = _HRESULT_TYPEDEF_(0x802A0109L);
static const int UI_E_TIMER_CLIENT_ALREADY_CONNECTED = _HRESULT_TYPEDEF_(0x802A010AL);
static const int TC_NORMAL = 0;
static const int TC_HARDERR = 1;
static const int TC_GP_TRAP = 2;
static const int TC_SIGNAL = 3;
static const int AC_LINE_OFFLINE = 0x00;
static const int AC_LINE_ONLINE = 0x01;
static const int AC_LINE_BACKUP_POWER = 0x02;
static const int AC_LINE_UNKNOWN = 0xFF;
static const int BATTERY_FLAG_HIGH = 0x01;
static const int BATTERY_FLAG_LOW = 0x02;
static const int BATTERY_FLAG_CRITICAL = 0x04;
static const int BATTERY_FLAG_CHARGING = 0x08;
static const int BATTERY_FLAG_NO_BATTERY = 0x80;
static const int BATTERY_FLAG_UNKNOWN = 0xFF;
static const int BATTERY_PERCENTAGE_UNKNOWN = 0xFF;
static const int BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF;
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;
BOOL
GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );
BOOL
SetSystemPowerState(
    BOOL fSuspend,
    BOOL fForce
    );
BOOL
AllocateUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
AllocateUserPhysicalPagesNuma(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
    DWORD nndPreferred
    );
BOOL
FreeUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
MapUserPhysicalPages(
    PVOID VirtualAddress,
    ULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
BOOL
MapUserPhysicalPagesScatter(
    PVOID *VirtualAddresses,
    ULONG_PTR NumberOfPages,
    PULONG_PTR PageArray
    );
HANDLE
CreateJobObjectA(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCSTR lpName
    );
HANDLE
CreateJobObjectW(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCWSTR lpName
    );
static const int CreateJobObject = CreateJobObjectA;
HANDLE
OpenJobObjectA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
HANDLE
OpenJobObjectW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );
static const int OpenJobObject = OpenJobObjectA;
BOOL
AssignProcessToJobObject(
    HANDLE hJob,
    HANDLE hProcess
    );
BOOL
TerminateJobObject(
    HANDLE hJob,
    UINT uExitCode
    );
BOOL
QueryInformationJobObject(
    HANDLE hJob,
    JOBOBJECTINFOCLASS JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    DWORD cbJobObjectInformationLength,
    LPDWORD lpReturnLength
    );
BOOL
SetInformationJobObject(
    HANDLE hJob,
    JOBOBJECTINFOCLASS JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    DWORD cbJobObjectInformationLength
    );
BOOL
IsProcessInJob (
    HANDLE ProcessHandle,
    HANDLE JobHandle,
    PBOOL Result
    );
BOOL
CreateJobSet (
    ULONG NumJob,
    PJOB_SET_ARRAY UserJobSet,
    ULONG Flags);
PVOID
AddVectoredExceptionHandler (
    ULONG First,
    PVECTORED_EXCEPTION_HANDLER Handler
    );
ULONG
RemoveVectoredExceptionHandler (
    PVOID Handle
    );
PVOID
AddVectoredContinueHandler (
    ULONG First,
    PVECTORED_EXCEPTION_HANDLER Handler
    );
ULONG
RemoveVectoredContinueHandler (
    PVOID Handle
    );
HANDLE
FindFirstVolumeA(
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
HANDLE
FindFirstVolumeW(
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int FindFirstVolume = FindFirstVolumeA;
BOOL
FindNextVolumeA(
    HANDLE hFindVolume,
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
BOOL
FindNextVolumeW(
    HANDLE hFindVolume,
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int FindNextVolume = FindNextVolumeA;
BOOL
FindVolumeClose(
    HANDLE hFindVolume
    );
HANDLE
FindFirstVolumeMountPointA(
    LPCSTR lpszRootPathName,
    LPSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
HANDLE
FindFirstVolumeMountPointW(
    LPCWSTR lpszRootPathName,
    LPWSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
static const int FindFirstVolumeMountPoint = FindFirstVolumeMountPointA;
BOOL
FindNextVolumeMountPointA(
    HANDLE hFindVolumeMountPoint,
    LPSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
BOOL
FindNextVolumeMountPointW(
    HANDLE hFindVolumeMountPoint,
    LPWSTR lpszVolumeMountPoint,
    DWORD cchBufferLength
    );
static const int FindNextVolumeMountPoint = FindNextVolumeMountPointA;
BOOL
FindVolumeMountPointClose(
    HANDLE hFindVolumeMountPoint
    );
BOOL
SetVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPCSTR lpszVolumeName
    );
BOOL
SetVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPCWSTR lpszVolumeName
    );
static const int SetVolumeMountPoint = SetVolumeMountPointA;
BOOL
DeleteVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint
    );
BOOL
DeleteVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint
    );
static const int DeleteVolumeMountPoint = DeleteVolumeMountPointA;
BOOL
GetVolumeNameForVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPSTR lpszVolumeName,
    DWORD cchBufferLength
    );
BOOL
GetVolumeNameForVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPWSTR lpszVolumeName,
    DWORD cchBufferLength
    );
static const int GetVolumeNameForVolumeMountPoint = GetVolumeNameForVolumeMountPointA;
BOOL
GetVolumePathNameA(
    LPCSTR lpszFileName,
    LPSTR lpszVolumePathName,
    DWORD cchBufferLength
    );
BOOL
GetVolumePathNameW(
    LPCWSTR lpszFileName,
    LPWSTR lpszVolumePathName,
    DWORD cchBufferLength
    );
static const int GetVolumePathName = GetVolumePathNameA;
BOOL
GetVolumePathNamesForVolumeNameA(
    LPCSTR lpszVolumeName,
    LPCH lpszVolumePathNames,
    DWORD cchBufferLength,
    PDWORD lpcchReturnLength
    );
BOOL
GetVolumePathNamesForVolumeNameW(
    LPCWSTR lpszVolumeName,
    LPWCH lpszVolumePathNames,
    DWORD cchBufferLength,
    PDWORD lpcchReturnLength
    );
static const int GetVolumePathNamesForVolumeName = GetVolumePathNamesForVolumeNameA;
static const int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = (0x00000001);
static const int ACTCTX_FLAG_LANGID_VALID = (0x00000002);
static const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = (0x00000004);
static const int ACTCTX_FLAG_RESOURCE_NAME_VALID = (0x00000008);
static const int ACTCTX_FLAG_SET_PROCESS_DEFAULT = (0x00000010);
static const int ACTCTX_FLAG_APPLICATION_NAME_VALID = (0x00000020);
static const int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = (0x00000040);
static const int ACTCTX_FLAG_HMODULE_VALID = (0x00000080);
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;
typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;
typedef PCACTCTXA PCACTCTX;
HANDLE
CreateActCtxA(
    PCACTCTXA pActCtx
    );
HANDLE
CreateActCtxW(
    PCACTCTXW pActCtx
    );
static const int CreateActCtx = CreateActCtxA;
void
AddRefActCtx(
    HANDLE hActCtx
    );
void
ReleaseActCtx(
    HANDLE hActCtx
    );
BOOL
ZombifyActCtx(
    HANDLE hActCtx
    );
BOOL
ActivateActCtx(
    HANDLE hActCtx,
    ULONG_PTR *lpCookie
    );
static const int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = (0x00000001);
BOOL
DeactivateActCtx(
    DWORD dwFlags,
    ULONG_PTR ulCookie
    );
BOOL
GetCurrentActCtx(
    HANDLE *lphActCtx);
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
static const int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = (0x00000001);
static const int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = (0x00000002);
static const int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = (0x00000004);
BOOL
FindActCtxSectionStringA(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    LPCSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
BOOL
FindActCtxSectionStringW(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    LPCWSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
static const int FindActCtxSectionString = FindActCtxSectionStringA;
BOOL
FindActCtxSectionGuid(
    DWORD dwFlags,
    const GUID *lpExtensionGuid,
    ULONG ulSectionId,
    const GUID *lpGuidToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
static const int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;
static const int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = (0x00000004);
static const int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = (0x00000008);
static const int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = (0x00000010);
static const int QUERY_ACTCTX_FLAG_NO_ADDREF = (0x80000000);
BOOL
QueryActCtxW(
    DWORD dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    ULONG ulInfoClass,
    PVOID pvBuffer,
    SIZE_T cbBuffer,
    SIZE_T *pcbWrittenOrRequired
    );
typedef BOOL ( * PQUERYACTCTXW_FUNC)(
    DWORD dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    ULONG ulInfoClass,
    PVOID pvBuffer,
    SIZE_T cbBuffer,
    SIZE_T *pcbWrittenOrRequired
    );
BOOL
ProcessIdToSessionId(
    DWORD dwProcessId,
    DWORD *pSessionId
    );
DWORD
WTSGetActiveConsoleSessionId(
    void
    );
BOOL
IsWow64Process(
    HANDLE hProcess,
    PBOOL Wow64Process
    );
BOOL
GetLogicalProcessorInformation(
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
    PDWORD ReturnedLength
    );
BOOL
GetLogicalProcessorInformationEx(
    LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
    PDWORD ReturnedLength
    );
WORD
GetActiveProcessorGroupCount(
    void
    );
WORD
GetMaximumProcessorGroupCount(
    void
    );
DWORD
GetActiveProcessorCount(
    WORD GroupNumber
    );
DWORD
GetMaximumProcessorCount(
    WORD GroupNumber
    );
BOOL
GetNumaHighestNodeNumber(
    PULONG HighestNodeNumber
    );
BOOL
GetNumaProcessorNode(
    UCHAR Processor,
    PUCHAR NodeNumber
    );
BOOL
GetNumaNodeNumberFromHandle(
    HANDLE hFile,
    PUSHORT NodeNumber
    );
BOOL
GetNumaProcessorNodeEx(
    PPROCESSOR_NUMBER Processor,
    PUSHORT NodeNumber
    );
BOOL
GetNumaNodeProcessorMask(
    UCHAR Node,
    PULONGLONG ProcessorMask
    );
BOOL
GetNumaNodeProcessorMaskEx(
    USHORT Node,
    PGROUP_AFFINITY ProcessorMask
    );
BOOL
GetNumaAvailableMemoryNode(
    UCHAR Node,
    PULONGLONG AvailableBytes
    );
BOOL
GetNumaAvailableMemoryNodeEx(
    USHORT Node,
    PULONGLONG AvailableBytes
    );
BOOL
GetNumaProximityNode(
    ULONG ProximityId,
    PUCHAR NodeNumber
    );
BOOL
GetNumaProximityNodeEx(
    ULONG ProximityId,
    PUSHORT NodeNumber
    );
typedef DWORD ( *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
static const int RESTART_MAX_CMD_LINE = 1024;
static const int RESTART_NO_CRASH = 1;
static const int RESTART_NO_HANG = 2;
static const int RESTART_NO_PATCH = 4;
static const int RESTART_NO_REBOOT = 8;
HRESULT
RegisterApplicationRecoveryCallback(
    APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
    PVOID pvParameter,
    DWORD dwPingInterval,
    DWORD dwFlags
    );
HRESULT
UnregisterApplicationRecoveryCallback(void);
HRESULT
RegisterApplicationRestart(
    PCWSTR pwzCommandline,
    DWORD dwFlags
    );
HRESULT
UnregisterApplicationRestart(void);
static const int RECOVERY_DEFAULT_PING_INTERVAL = 5000;
static const int RECOVERY_MAX_PING_INTERVAL = (5 * 60 * 1000);
HRESULT
GetApplicationRecoveryCallback(
    HANDLE hProcess,
    APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
    PVOID* ppvParameter,
    PDWORD pdwPingInterval,
    PDWORD pdwFlags
    );
HRESULT
GetApplicationRestartSettings(
    HANDLE hProcess,
    PWSTR pwzCommandline,
    PDWORD pcchSize,
    PDWORD pdwFlags
    );
HRESULT
ApplicationRecoveryInProgress(
    PBOOL pbCancelled
    );
void
ApplicationRecoveryFinished(
    BOOL bSuccess
    );
typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;
typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;
typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;
typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;
typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;
typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;
typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;
typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;
typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;
typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;
typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;
typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;
typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;
static const int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 0x00000001;
static const int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 0x00000002;
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    USHORT StructureVersion; // 1
    USHORT StructureSize; // sizeof(FILE_REMOTE_PROTOCOL_INFO)
    DWORD Protocol; // Protocol (WNNC_NET_*) defined in wnnc.h or ntifs.h.
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    DWORD Flags;
    struct {
        DWORD Reserved[8];
    } GenericReserved;
    struct {
        DWORD Reserved[16];
    } ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;
BOOL
SetFileInformationByHandle(
    HANDLE hFile,
    FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    LPVOID lpFileInformation,
    DWORD dwBufferSize
);
BOOL
GetFileInformationByHandleEx(
    HANDLE hFile,
    FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
    LPVOID lpFileInformation,
    DWORD dwBufferSize
);
typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;
typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize; // Size of the struct
    FILE_ID_TYPE Type; // Describes the type of identifier passed in.
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;
    } u;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;
HANDLE
OpenFileById (
    HANDLE hVolumeHint,
    LPFILE_ID_DESCRIPTOR lpFileId,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwFlagsAndAttributes
    );
static const int SYMBOLIC_LINK_FLAG_DIRECTORY = (0x1);
static const int VALID_SYMBOLIC_LINK_FLAGS = SYMBOLIC_LINK_FLAG_DIRECTORY;
BOOLEAN
CreateSymbolicLinkA (
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    DWORD dwFlags
    );
BOOLEAN
CreateSymbolicLinkW (
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    DWORD dwFlags
    );
static const int CreateSymbolicLink = CreateSymbolicLinkA;
BOOLEAN
CreateSymbolicLinkTransactedA (
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    DWORD dwFlags,
    HANDLE hTransaction
    );
BOOLEAN
CreateSymbolicLinkTransactedW (
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    DWORD dwFlags,
    HANDLE hTransaction
    );
static const int CreateSymbolicLinkTransacted = CreateSymbolicLinkTransactedA;
DWORD
GetFinalPathNameByHandleA (
    HANDLE hFile,
    LPSTR lpszFilePath,
    DWORD cchFilePath,
    DWORD dwFlags
);
DWORD
GetFinalPathNameByHandleW (
    HANDLE hFile,
    LPWSTR lpszFilePath,
    DWORD cchFilePath,
    DWORD dwFlags
);
static const int GetFinalPathNameByHandle = GetFinalPathNameByHandleA;
BOOL
QueryActCtxSettingsW(
    DWORD dwFlags,
    HANDLE hActCtx,
    PCWSTR settingsNameSpace,
    PCWSTR settingName,
    PWSTR pvBuffer,
    SIZE_T dwBuffer,
    SIZE_T *pdwWrittenOrRequired
    );
BOOL
ReplacePartitionUnit (
    PWSTR TargetPartition,
    PWSTR SparePartition,
    ULONG Flags
    );
BOOL
AddSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
BOOL
RemoveSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
BOOL
CopyExtendedContext(
    PCONTEXT_EX Destination,
    DWORD ContextFlags,
    PCONTEXT_EX Source
    );
BOOL
InitializeExtendedContext(
    PVOID Context,
    DWORD ContextFlags,
    PCONTEXT_EX* ContextEx
    );
DWORD64
GetEnabledExtendedFeatures(
    DWORD64 FeatureMask
    );
BOOL
GetExtendedContextLength(
    DWORD ContextFlags,
    PDWORD ContextLength
    );
DWORD64
GetExtendedFeaturesMask(
    PCONTEXT_EX ContextEx
    );
PVOID
LocateExtendedFeature(
    PCONTEXT_EX ContextEx,
    DWORD FeatureId,
    PDWORD Length
    );
PCONTEXT
LocateLegacyContext(
    PCONTEXT_EX ContextEx,
    PDWORD Length
    );
void
SetExtendedFeaturesMask(
    PCONTEXT_EX ContextEx,
    DWORD64 FeatureMask
    );
DWORD
EnableThreadProfiling(
    HANDLE ThreadHandle,
    DWORD Flags,
    DWORD64 HardwareCounters,
    HANDLE *PerformanceDataHandle
    );
DWORD
DisableThreadProfiling(
    HANDLE PerformanceDataHandle
    );
DWORD
QueryThreadProfiling(
    HANDLE ThreadHandle,
    PBOOLEAN Enabled
    );
DWORD
ReadThreadProfilingData(
    HANDLE PerformanceDataHandle,
    DWORD Flags,
    PPERFORMANCE_DATA PerformanceData
    );
static const int MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = (_WIN32_WINNT >= 0x0502 || !defined(_WINBASE_));
static const int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
static const int WINGDIAPI = ;
static const int WINSPOOLAPI = ;
static const int R2_BLACK = 1;
static const int R2_NOTMERGEPEN = 2;
static const int R2_MASKNOTPEN = 3;
static const int R2_NOTCOPYPEN = 4;
static const int R2_MASKPENNOT = 5;
static const int R2_NOT = 6;
static const int R2_XORPEN = 7;
static const int R2_NOTMASKPEN = 8;
static const int R2_MASKPEN = 9;
static const int R2_NOTXORPEN = 10;
static const int R2_NOP = 11;
static const int R2_MERGENOTPEN = 12;
static const int R2_COPYPEN = 13;
static const int R2_MERGEPENNOT = 14;
static const int R2_MERGEPEN = 15;
static const int R2_WHITE = 16;
static const int R2_LAST = 16;
static const int SRCCOPY = (DWORD)0x00CC0020;
static const int SRCPAINT = (DWORD)0x00EE0086;
static const int SRCAND = (DWORD)0x008800C6;
static const int SRCINVERT = (DWORD)0x00660046;
static const int SRCERASE = (DWORD)0x00440328;
static const int NOTSRCCOPY = (DWORD)0x00330008;
static const int NOTSRCERASE = (DWORD)0x001100A6;
static const int MERGECOPY = (DWORD)0x00C000CA;
static const int MERGEPAINT = (DWORD)0x00BB0226;
static const int PATCOPY = (DWORD)0x00F00021;
static const int PATPAINT = (DWORD)0x00FB0A09;
static const int PATINVERT = (DWORD)0x005A0049;
static const int DSTINVERT = (DWORD)0x00550009;
static const int BLACKNESS = (DWORD)0x00000042;
static const int WHITENESS = (DWORD)0x00FF0062;
static const int NOMIRRORBITMAP = (DWORD)0x80000000;
static const int CAPTUREBLT = (DWORD)0x40000000;
static const int MAKEROP4(fore,back) = (DWORD)((((back) << 8) & 0xFF000000) | (fore));
static const int GDI_ERROR = (0xFFFFFFFFL);
static const int HGDI_ERROR = (LongToHandle(0xFFFFFFFFL));
static const int ERROR = 0;
static const int NULLREGION = 1;
static const int SIMPLEREGION = 2;
static const int COMPLEXREGION = 3;
static const int RGN_ERROR = ERROR;
static const int RGN_AND = 1;
static const int RGN_OR = 2;
static const int RGN_XOR = 3;
static const int RGN_DIFF = 4;
static const int RGN_COPY = 5;
static const int RGN_MIN = RGN_AND;
static const int RGN_MAX = RGN_COPY;
static const int BLACKONWHITE = 1;
static const int WHITEONBLACK = 2;
static const int COLORONCOLOR = 3;
static const int HALFTONE = 4;
static const int MAXSTRETCHBLTMODE = 4;
static const int STRETCH_ANDSCANS = BLACKONWHITE;
static const int STRETCH_ORSCANS = WHITEONBLACK;
static const int STRETCH_DELETESCANS = COLORONCOLOR;
static const int STRETCH_HALFTONE = HALFTONE;
static const int ALTERNATE = 1;
static const int WINDING = 2;
static const int POLYFILL_LAST = 2;
static const int LAYOUT_RTL = 0x00000001;
static const int LAYOUT_BTT = 0x00000002;
static const int LAYOUT_VBH = 0x00000004;
static const int LAYOUT_ORIENTATIONMASK = (LAYOUT_RTL | LAYOUT_BTT | LAYOUT_VBH);
static const int LAYOUT_BITMAPORIENTATIONPRESERVED = 0x00000008;
static const int TA_NOUPDATECP = 0;
static const int TA_UPDATECP = 1;
static const int TA_LEFT = 0;
static const int TA_RIGHT = 2;
static const int TA_CENTER = 6;
static const int TA_TOP = 0;
static const int TA_BOTTOM = 8;
static const int TA_BASELINE = 24;
static const int TA_RTLREADING = 256;
static const int TA_MASK = (TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING);
static const int VTA_BASELINE = TA_BASELINE;
static const int VTA_LEFT = TA_BOTTOM;
static const int VTA_RIGHT = TA_TOP;
static const int VTA_CENTER = TA_CENTER;
static const int VTA_BOTTOM = TA_RIGHT;
static const int VTA_TOP = TA_LEFT;
static const int ETO_OPAQUE = 0x0002;
static const int ETO_CLIPPED = 0x0004;
static const int ETO_GLYPH_INDEX = 0x0010;
static const int ETO_RTLREADING = 0x0080;
static const int ETO_NUMERICSLOCAL = 0x0400;
static const int ETO_NUMERICSLATIN = 0x0800;
static const int ETO_IGNORELANGUAGE = 0x1000;
static const int ETO_PDY = 0x2000;
static const int ETO_REVERSE_INDEX_MAP = 0x10000;
static const int ASPECT_FILTERING = 0x0001;
static const int DCB_RESET = 0x0001;
static const int DCB_ACCUMULATE = 0x0002;
static const int DCB_DIRTY = DCB_ACCUMULATE;
static const int DCB_SET = (DCB_RESET | DCB_ACCUMULATE);
static const int DCB_ENABLE = 0x0004;
static const int DCB_DISABLE = 0x0008;
static const int META_SETBKCOLOR = 0x0201;
static const int META_SETBKMODE = 0x0102;
static const int META_SETMAPMODE = 0x0103;
static const int META_SETROP2 = 0x0104;
static const int META_SETRELABS = 0x0105;
static const int META_SETPOLYFILLMODE = 0x0106;
static const int META_SETSTRETCHBLTMODE = 0x0107;
static const int META_SETTEXTCHAREXTRA = 0x0108;
static const int META_SETTEXTCOLOR = 0x0209;
static const int META_SETTEXTJUSTIFICATION = 0x020A;
static const int META_SETWINDOWORG = 0x020B;
static const int META_SETWINDOWEXT = 0x020C;
static const int META_SETVIEWPORTORG = 0x020D;
static const int META_SETVIEWPORTEXT = 0x020E;
static const double META_OFFSETWINDOWORG = 0x020F;
static const int META_SCALEWINDOWEXT = 0x0410;
static const int META_OFFSETVIEWPORTORG = 0x0211;
static const int META_SCALEVIEWPORTEXT = 0x0412;
static const int META_LINETO = 0x0213;
static const int META_MOVETO = 0x0214;
static const int META_EXCLUDECLIPRECT = 0x0415;
static const int META_INTERSECTCLIPRECT = 0x0416;
static const int META_ARC = 0x0817;
static const int META_ELLIPSE = 0x0418;
static const int META_FLOODFILL = 0x0419;
static const int META_PIE = 0x081A;
static const int META_RECTANGLE = 0x041B;
static const int META_ROUNDRECT = 0x061C;
static const int META_PATBLT = 0x061D;
static const int META_SAVEDC = 0x001E;
static const double META_SETPIXEL = 0x041F;
static const int META_OFFSETCLIPRGN = 0x0220;
static const int META_TEXTOUT = 0x0521;
static const int META_BITBLT = 0x0922;
static const int META_STRETCHBLT = 0x0B23;
static const int META_POLYGON = 0x0324;
static const int META_POLYLINE = 0x0325;
static const int META_ESCAPE = 0x0626;
static const int META_RESTOREDC = 0x0127;
static const int META_FILLREGION = 0x0228;
static const int META_FRAMEREGION = 0x0429;
static const int META_INVERTREGION = 0x012A;
static const int META_PAINTREGION = 0x012B;
static const int META_SELECTCLIPREGION = 0x012C;
static const int META_SELECTOBJECT = 0x012D;
static const int META_SETTEXTALIGN = 0x012E;
static const int META_CHORD = 0x0830;
static const int META_SETMAPPERFLAGS = 0x0231;
static const int META_EXTTEXTOUT = 0x0a32;
static const int META_SETDIBTODEV = 0x0d33;
static const int META_SELECTPALETTE = 0x0234;
static const int META_REALIZEPALETTE = 0x0035;
static const int META_ANIMATEPALETTE = 0x0436;
static const int META_SETPALENTRIES = 0x0037;
static const int META_POLYPOLYGON = 0x0538;
static const int META_RESIZEPALETTE = 0x0139;
static const int META_DIBBITBLT = 0x0940;
static const int META_DIBSTRETCHBLT = 0x0b41;
static const int META_DIBCREATEPATTERNBRUSH = 0x0142;
static const int META_STRETCHDIB = 0x0f43;
static const int META_EXTFLOODFILL = 0x0548;
static const int META_SETLAYOUT = 0x0149;
static const int META_DELETEOBJECT = 0x01f0;
static const int META_CREATEPALETTE = 0x00f7;
static const int META_CREATEPATTERNBRUSH = 0x01F9;
static const int META_CREATEPENINDIRECT = 0x02FA;
static const int META_CREATEFONTINDIRECT = 0x02FB;
static const int META_CREATEBRUSHINDIRECT = 0x02FC;
static const int META_CREATEREGION = 0x06FF;
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
static const int NEWFRAME = 1;
static const int ABORTDOC = 2;
static const int NEXTBAND = 3;
static const int SETCOLORTABLE = 4;
static const int GETCOLORTABLE = 5;
static const int FLUSHOUTPUT = 6;
static const int DRAFTMODE = 7;
static const int QUERYESCSUPPORT = 8;
static const int SETABORTPROC = 9;
static const int STARTDOC = 10;
static const int ENDDOC = 11;
static const int GETPHYSPAGESIZE = 12;
static const int GETPRINTINGOFFSET = 13;
static const int GETSCALINGFACTOR = 14;
static const int MFCOMMENT = 15;
static const int GETPENWIDTH = 16;
static const int SETCOPYCOUNT = 17;
static const int SELECTPAPERSOURCE = 18;
static const int DEVICEDATA = 19;
static const int PASSTHROUGH = 19;
static const int GETTECHNOLGY = 20;
static const int GETTECHNOLOGY = 20;
static const int SETLINECAP = 21;
static const int SETLINEJOIN = 22;
static const int SETMITERLIMIT = 23;
static const int BANDINFO = 24;
static const int DRAWPATTERNRECT = 25;
static const int GETVECTORPENSIZE = 26;
static const int GETVECTORBRUSHSIZE = 27;
static const int ENABLEDUPLEX = 28;
static const int GETSETPAPERBINS = 29;
static const int GETSETPRINTORIENT = 30;
static const int ENUMPAPERBINS = 31;
static const int SETDIBSCALING = 32;
static const int EPSPRINTING = 33;
static const int ENUMPAPERMETRICS = 34;
static const int GETSETPAPERMETRICS = 35;
static const int POSTSCRIPT_DATA = 37;
static const int POSTSCRIPT_IGNORE = 38;
static const int MOUSETRAILS = 39;
static const int GETDEVICEUNITS = 42;
static const int GETEXTENDEDTEXTMETRICS = 256;
static const int GETEXTENTTABLE = 257;
static const int GETPAIRKERNTABLE = 258;
static const int GETTRACKKERNTABLE = 259;
static const int EXTTEXTOUT = 512;
static const int GETFACENAME = 513;
static const int DOWNLOADFACE = 514;
static const int ENABLERELATIVEWIDTHS = 768;
static const int ENABLEPAIRKERNING = 769;
static const int SETKERNTRACK = 770;
static const int SETALLJUSTVALUES = 771;
static const int SETCHARSET = 772;
static const int STRETCHBLT = 2048;
static const int METAFILE_DRIVER = 2049;
static const int GETSETSCREENPARAMS = 3072;
static const int QUERYDIBSUPPORT = 3073;
static const int BEGIN_PATH = 4096;
static const int CLIP_TO_PATH = 4097;
static const int END_PATH = 4098;
static const int EXT_DEVICE_CAPS = 4099;
static const int RESTORE_CTM = 4100;
static const int SAVE_CTM = 4101;
static const int SET_ARC_DIRECTION = 4102;
static const int SET_BACKGROUND_COLOR = 4103;
static const int SET_POLY_MODE = 4104;
static const int SET_SCREEN_ANGLE = 4105;
static const int SET_SPREAD = 4106;
static const int TRANSFORM_CTM = 4107;
static const int SET_CLIP_BOX = 4108;
static const int SET_BOUNDS = 4109;
static const int SET_MIRROR_MODE = 4110;
static const int OPENCHANNEL = 4110;
static const int DOWNLOADHEADER = 4111;
static const int CLOSECHANNEL = 4112;
static const int POSTSCRIPT_PASSTHROUGH = 4115;
static const int ENCAPSULATED_POSTSCRIPT = 4116;
static const int POSTSCRIPT_IDENTIFY = 4117;
static const int POSTSCRIPT_INJECTION = 4118;
static const int CHECKJPEGFORMAT = 4119;
static const int CHECKPNGFORMAT = 4120;
static const int GET_PS_FEATURESETTING = 4121;
static const int GDIPLUS_TS_QUERYVER = 4122;
static const int GDIPLUS_TS_RECORD = 4123;
static const int MILCORE_TS_QUERYVER_RESULT_FALSE = 0x0;
static const int MILCORE_TS_QUERYVER_RESULT_TRUE = 0x7FFFFFFF;
static const int SPCLPASSTHROUGH2 = 4568;
static const int PSIDENT_GDICENTRIC = 0;
static const int PSIDENT_PSCENTRIC = 1;
typedef struct _PSINJECTDATA {
    DWORD DataBytes; /* number of raw data bytes (NOT including this header) */
    WORD InjectionPoint; /* injection point */
    WORD PageNumber; /* page number to apply the injection */
} PSINJECTDATA, *PPSINJECTDATA;
static const int PSINJECT_BEGINSTREAM = 1;
static const int PSINJECT_PSADOBE = 2;
static const int PSINJECT_PAGESATEND = 3;
static const int PSINJECT_PAGES = 4;
static const int PSINJECT_DOCNEEDEDRES = 5;
static const int PSINJECT_DOCSUPPLIEDRES = 6;
static const int PSINJECT_PAGEORDER = 7;
static const int PSINJECT_ORIENTATION = 8;
static const int PSINJECT_BOUNDINGBOX = 9;
static const int PSINJECT_DOCUMENTPROCESSCOLORS = 10;
static const int PSINJECT_COMMENTS = 11;
static const int PSINJECT_BEGINDEFAULTS = 12;
static const int PSINJECT_ENDDEFAULTS = 13;
static const int PSINJECT_BEGINPROLOG = 14;
static const int PSINJECT_ENDPROLOG = 15;
static const int PSINJECT_BEGINSETUP = 16;
static const int PSINJECT_ENDSETUP = 17;
static const int PSINJECT_TRAILER = 18;
static const int PSINJECT_EOF = 19;
static const int PSINJECT_ENDSTREAM = 20;
static const int PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;
static const int PSINJECT_PAGENUMBER = 100;
static const int PSINJECT_BEGINPAGESETUP = 101;
static const int PSINJECT_ENDPAGESETUP = 102;
static const int PSINJECT_PAGETRAILER = 103;
static const int PSINJECT_PLATECOLOR = 104;
static const int PSINJECT_SHOWPAGE = 105;
static const int PSINJECT_PAGEBBOX = 106;
static const int PSINJECT_ENDPAGECOMMENTS = 107;
static const int PSINJECT_VMSAVE = 200;
static const int PSINJECT_VMRESTORE = 201;
static const int PSINJECT_DLFONT = 0xdddddddd;
static const int FEATURESETTING_NUP = 0;
static const int FEATURESETTING_OUTPUT = 1;
static const int FEATURESETTING_PSLEVEL = 2;
static const int FEATURESETTING_CUSTPAPER = 3;
static const int FEATURESETTING_MIRROR = 4;
static const int FEATURESETTING_NEGATIVE = 5;
static const int FEATURESETTING_PROTOCOL = 6;
static const int FEATURESETTING_PRIVATE_BEGIN = 0x1000;
static const int FEATURESETTING_PRIVATE_END = 0x1FFF;
typedef struct _PSFEATURE_OUTPUT {
    BOOL bPageIndependent;
    BOOL bSetPageDevice;
} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;
typedef struct _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
static const int PSPROTOCOL_ASCII = 0;
static const int PSPROTOCOL_BCP = 1;
static const int PSPROTOCOL_TBCP = 2;
static const int PSPROTOCOL_BINARY = 3;
static const int QDI_SETDIBITS = 1;
static const int QDI_GETDIBITS = 2;
static const int QDI_DIBTOSCREEN = 4;
static const int QDI_STRETCHDIB = 8;
static const int SP_NOTREPORTED = 0x4000;
static const int SP_ERROR = (-1);
static const int SP_APPABORT = (-2);
static const int SP_USERABORT = (-3);
static const int SP_OUTOFDISK = (-4);
static const int SP_OUTOFMEMORY = (-5);
static const int PR_JOBSTATUS = 0x0000;
static const int OBJ_PEN = 1;
static const int OBJ_BRUSH = 2;
static const int OBJ_DC = 3;
static const int OBJ_METADC = 4;
static const int OBJ_PAL = 5;
static const int OBJ_FONT = 6;
static const int OBJ_BITMAP = 7;
static const int OBJ_REGION = 8;
static const int OBJ_METAFILE = 9;
static const int OBJ_MEMDC = 10;
static const int OBJ_EXTPEN = 11;
static const int OBJ_ENHMETADC = 12;
static const int OBJ_ENHMETAFILE = 13;
static const int OBJ_COLORSPACE = 14;
static const int GDI_OBJ_LAST = OBJ_COLORSPACE;
static const int MWT_IDENTITY = 1;
static const int MWT_LEFTMULTIPLY = 2;
static const int MWT_RIGHTMULTIPLY = 3;
static const int MWT_MIN = MWT_IDENTITY;
static const int MWT_MAX = MWT_RIGHTMULTIPLY;
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;
typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;
typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;
typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;
static const long CS_ENABLE = 0x00000001L;
static const long CS_DISABLE = 0x00000002L;
static const long CS_DELETE_TRANSFORM = 0x00000003L;
static const int LCS_SIGNATURE = 'PSOC';
static const int LCS_sRGB = 'sRGB';
static const int LCS_WINDOWS_COLOR_SPACE = 'Win ';
typedef LONG LCSCSTYPE;
static const long LCS_CALIBRATED_RGB = 0x00000000L;
typedef LONG LCSGAMUTMATCH;
static const long LCS_GM_BUSINESS = 0x00000001L;
static const long LCS_GM_GRAPHICS = 0x00000002L;
static const long LCS_GM_IMAGES = 0x00000004L;
static const long LCS_GM_ABS_COLORIMETRIC = 0x00000008L;
static const int CM_OUT_OF_GAMUT = 255;
static const int CM_IN_GAMUT = 0;
static const int ICM_ADDPROFILE = 1;
static const int ICM_DELETEPROFILE = 2;
static const int ICM_QUERYPROFILE = 3;
static const int ICM_SETDEFAULTPROFILE = 4;
static const int ICM_REGISTERICMATCHER = 5;
static const int ICM_UNREGISTERICMATCHER = 6;
static const int ICM_QUERYMATCH = 7;
static const int GetKValue(cmyk) = ((BYTE)(cmyk));
static const int GetYValue(cmyk) = ((BYTE)((cmyk)>> 8));
static const int GetMValue(cmyk) = ((BYTE)((cmyk)>>16));
static const int GetCValue(cmyk) = ((BYTE)((cmyk)>>24));
static const int CMYK(c,m,y,k) = ((COLORREF)((((BYTE)(k)|((WORD)((BYTE)(y))<<8))|(((DWORD)(BYTE)(m))<<16))|(((DWORD)(BYTE)(c))<<24)));
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;
typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ *LPCIEXYZ;
typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize; /* used to get to color table */
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;
typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
static const int PROFILE_LINKED = 'LINK';
static const int PROFILE_EMBEDDED = 'MBED';
static const long BI_RGB = 0L;
static const long BI_RLE8 = 1L;
static const long BI_RLE4 = 2L;
static const long BI_BITFIELDS = 3L;
static const long BI_JPEG = 4L;
static const long BI_PNG = 5L;
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;
typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;
typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
static const int MAKEPOINTS(l) = (*((POINTS FAR *)&(l)));
typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;
typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
static const int TCI_SRCCHARSET = 1;
static const int TCI_SRCCODEPAGE = 2;
static const int TCI_SRCFONTSIG = 3;
static const int TCI_SRCLOCALE = 0x1000;
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;
typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMETARECORD *LPMETARECORD;
typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;
typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;
typedef struct tagENHMETARECORD
{
    DWORD iType; // Record type EMR_XXX
    DWORD nSize; // Record size in bytes
    DWORD dParm[1]; // Parameters
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;
typedef struct tagENHMETAHEADER
{
    DWORD iType; // Record typeEMR_HEADER
    DWORD nSize; // Record size in bytes.  This may be greater
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    RECTL rclFrame; // Inclusive-inclusive Picture Frame of metafile in .01 mm units
    DWORD dSignature; // Signature.  Must be ENHMETA_SIGNATURE.
    DWORD nVersion; // Version number
    DWORD nBytes; // Size of the metafile in bytes
    DWORD nRecords; // Number of records in the metafile
    WORD nHandles; // Number of handles in the handle table
    WORD sReserved; // Reserved.  Must be zero.
    DWORD nDescription; // Number of chars in the unicode description string
    DWORD offDescription; // Offset to the metafile description record.
    DWORD nPalEntries; // Number of entries in the metafile palette.
    SIZEL szlDevice; // Size of the reference device in pels
    SIZEL szlMillimeters; // Size of the reference device in millimeters
    DWORD cbPixelFormat; // Size of PIXELFORMATDESCRIPTOR information
    DWORD offPixelFormat; // Offset to PIXELFORMATDESCRIPTOR
    DWORD bOpenGL; // TRUE if OpenGL commands are present in
    SIZEL szlMicrometers; // Size of the reference device in micrometers
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
static const int TMPF_FIXED_PITCH = 0x01;
static const int TMPF_VECTOR = 0x02;
static const int TMPF_DEVICE = 0x08;
static const int TMPF_TRUETYPE = 0x04;
    typedef BYTE BCHAR;
typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;
typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
static const long NTM_REGULAR = 0x00000040L;
static const long NTM_BOLD = 0x00000020L;
static const long NTM_ITALIC = 0x00000001L;
static const int NTM_NONNEGATIVE_AC = 0x00010000;
static const int NTM_PS_OPENTYPE = 0x00020000;
static const int NTM_TT_OPENTYPE = 0x00040000;
static const int NTM_MULTIPLEMASTER = 0x00080000;
static const int NTM_TYPE1 = 0x00100000;
static const int NTM_DSIG = 0x00200000;
typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;
typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;
typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;
typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;
typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;
typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;
typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;
typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;
typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;
static const int LF_FACESIZE = 32;
typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;
typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
static const int LF_FULLFACESIZE = 64;
typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
static const int OUT_DEFAULT_PRECIS = 0;
static const int OUT_STRING_PRECIS = 1;
static const int OUT_CHARACTER_PRECIS = 2;
static const int OUT_STROKE_PRECIS = 3;
static const int OUT_TT_PRECIS = 4;
static const int OUT_DEVICE_PRECIS = 5;
static const int OUT_RASTER_PRECIS = 6;
static const int OUT_TT_ONLY_PRECIS = 7;
static const int OUT_OUTLINE_PRECIS = 8;
static const int OUT_SCREEN_OUTLINE_PRECIS = 9;
static const int OUT_PS_ONLY_PRECIS = 10;
static const int CLIP_DEFAULT_PRECIS = 0;
static const int CLIP_CHARACTER_PRECIS = 1;
static const int CLIP_STROKE_PRECIS = 2;
static const int CLIP_MASK = 0xf;
static const int CLIP_LH_ANGLES = (1<<4);
static const int CLIP_TT_ALWAYS = (2<<4);
static const int CLIP_DFA_DISABLE = (4<<4);
static const int CLIP_EMBEDDED = (8<<4);
static const int DEFAULT_QUALITY = 0;
static const int DRAFT_QUALITY = 1;
static const int PROOF_QUALITY = 2;
static const int NONANTIALIASED_QUALITY = 3;
static const int ANTIALIASED_QUALITY = 4;
static const int CLEARTYPE_QUALITY = 5;
static const int CLEARTYPE_NATURAL_QUALITY = 6;
static const int DEFAULT_PITCH = 0;
static const int FIXED_PITCH = 1;
static const int VARIABLE_PITCH = 2;
static const int MONO_FONT = 8;
static const int ANSI_CHARSET = 0;
static const int DEFAULT_CHARSET = 1;
static const int SYMBOL_CHARSET = 2;
static const int SHIFTJIS_CHARSET = 128;
static const int HANGEUL_CHARSET = 129;
static const int HANGUL_CHARSET = 129;
static const int GB2312_CHARSET = 134;
static const int CHINESEBIG5_CHARSET = 136;
static const int OEM_CHARSET = 255;
static const int JOHAB_CHARSET = 130;
static const int HEBREW_CHARSET = 177;
static const int ARABIC_CHARSET = 178;
static const int GREEK_CHARSET = 161;
static const int TURKISH_CHARSET = 162;
static const int VIETNAMESE_CHARSET = 163;
static const int THAI_CHARSET = 222;
static const int EASTEUROPE_CHARSET = 238;
static const int RUSSIAN_CHARSET = 204;
static const int MAC_CHARSET = 77;
static const int BALTIC_CHARSET = 186;
static const long FS_LATIN1 = 0x00000001L;
static const long FS_LATIN2 = 0x00000002L;
static const long FS_CYRILLIC = 0x00000004L;
static const long FS_GREEK = 0x00000008L;
static const long FS_TURKISH = 0x00000010L;
static const long FS_HEBREW = 0x00000020L;
static const long FS_ARABIC = 0x00000040L;
static const long FS_BALTIC = 0x00000080L;
static const long FS_VIETNAMESE = 0x00000100L;
static const long FS_THAI = 0x00010000L;
static const long FS_JISJAPAN = 0x00020000L;
static const long FS_CHINESESIMP = 0x00040000L;
static const long FS_WANSUNG = 0x00080000L;
static const long FS_CHINESETRAD = 0x00100000L;
static const long FS_JOHAB = 0x00200000L;
static const long FS_SYMBOL = 0x80000000L;
static const int FF_DONTCARE = (0<<4);
static const int FF_ROMAN = (1<<4);
static const int FF_SWISS = (2<<4);
static const int FF_MODERN = (3<<4);
static const int FF_SCRIPT = (4<<4);
static const int FF_DECORATIVE = (5<<4);
static const int FW_DONTCARE = 0;
static const int FW_THIN = 100;
static const int FW_EXTRALIGHT = 200;
static const int FW_LIGHT = 300;
static const int FW_NORMAL = 400;
static const int FW_MEDIUM = 500;
static const int FW_SEMIBOLD = 600;
static const int FW_BOLD = 700;
static const int FW_EXTRABOLD = 800;
static const int FW_HEAVY = 900;
static const int FW_ULTRALIGHT = FW_EXTRALIGHT;
static const int FW_REGULAR = FW_NORMAL;
static const int FW_DEMIBOLD = FW_SEMIBOLD;
static const int FW_ULTRABOLD = FW_EXTRABOLD;
static const int FW_BLACK = FW_HEAVY;
static const int PANOSE_COUNT = 10;
static const int PAN_FAMILYTYPE_INDEX = 0;
static const int PAN_SERIFSTYLE_INDEX = 1;
static const int PAN_WEIGHT_INDEX = 2;
static const int PAN_PROPORTION_INDEX = 3;
static const int PAN_CONTRAST_INDEX = 4;
static const int PAN_STROKEVARIATION_INDEX = 5;
static const int PAN_ARMSTYLE_INDEX = 6;
static const int PAN_LETTERFORM_INDEX = 7;
static const int PAN_MIDLINE_INDEX = 8;
static const int PAN_XHEIGHT_INDEX = 9;
static const int PAN_CULTURE_LATIN = 0;
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
static const int PAN_ANY = 0;
static const int PAN_NO_FIT = 1;
static const int PAN_FAMILY_TEXT_DISPLAY = 2;
static const int PAN_FAMILY_SCRIPT = 3;
static const int PAN_FAMILY_DECORATIVE = 4;
static const int PAN_FAMILY_PICTORIAL = 5;
static const int PAN_SERIF_COVE = 2;
static const int PAN_SERIF_OBTUSE_COVE = 3;
static const int PAN_SERIF_SQUARE_COVE = 4;
static const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
static const int PAN_SERIF_SQUARE = 6;
static const int PAN_SERIF_THIN = 7;
static const int PAN_SERIF_BONE = 8;
static const int PAN_SERIF_EXAGGERATED = 9;
static const int PAN_SERIF_TRIANGLE = 10;
static const int PAN_SERIF_NORMAL_SANS = 11;
static const int PAN_SERIF_OBTUSE_SANS = 12;
static const int PAN_SERIF_PERP_SANS = 13;
static const int PAN_SERIF_FLARED = 14;
static const int PAN_SERIF_ROUNDED = 15;
static const int PAN_WEIGHT_VERY_LIGHT = 2;
static const int PAN_WEIGHT_LIGHT = 3;
static const int PAN_WEIGHT_THIN = 4;
static const int PAN_WEIGHT_BOOK = 5;
static const int PAN_WEIGHT_MEDIUM = 6;
static const int PAN_WEIGHT_DEMI = 7;
static const int PAN_WEIGHT_BOLD = 8;
static const int PAN_WEIGHT_HEAVY = 9;
static const int PAN_WEIGHT_BLACK = 10;
static const int PAN_WEIGHT_NORD = 11;
static const int PAN_PROP_OLD_STYLE = 2;
static const int PAN_PROP_MODERN = 3;
static const int PAN_PROP_EVEN_WIDTH = 4;
static const int PAN_PROP_EXPANDED = 5;
static const int PAN_PROP_CONDENSED = 6;
static const int PAN_PROP_VERY_EXPANDED = 7;
static const int PAN_PROP_VERY_CONDENSED = 8;
static const int PAN_PROP_MONOSPACED = 9;
static const int PAN_CONTRAST_NONE = 2;
static const int PAN_CONTRAST_VERY_LOW = 3;
static const int PAN_CONTRAST_LOW = 4;
static const int PAN_CONTRAST_MEDIUM_LOW = 5;
static const int PAN_CONTRAST_MEDIUM = 6;
static const int PAN_CONTRAST_MEDIUM_HIGH = 7;
static const int PAN_CONTRAST_HIGH = 8;
static const int PAN_CONTRAST_VERY_HIGH = 9;
static const int PAN_STROKE_GRADUAL_DIAG = 2;
static const int PAN_STROKE_GRADUAL_TRAN = 3;
static const int PAN_STROKE_GRADUAL_VERT = 4;
static const int PAN_STROKE_GRADUAL_HORZ = 5;
static const int PAN_STROKE_RAPID_VERT = 6;
static const int PAN_STROKE_RAPID_HORZ = 7;
static const int PAN_STROKE_INSTANT_VERT = 8;
static const int PAN_STRAIGHT_ARMS_HORZ = 2;
static const int PAN_STRAIGHT_ARMS_WEDGE = 3;
static const int PAN_STRAIGHT_ARMS_VERT = 4;
static const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
static const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
static const int PAN_BENT_ARMS_HORZ = 7;
static const int PAN_BENT_ARMS_WEDGE = 8;
static const int PAN_BENT_ARMS_VERT = 9;
static const int PAN_BENT_ARMS_SINGLE_SERIF = 10;
static const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;
static const int PAN_LETT_NORMAL_CONTACT = 2;
static const int PAN_LETT_NORMAL_WEIGHTED = 3;
static const int PAN_LETT_NORMAL_BOXED = 4;
static const int PAN_LETT_NORMAL_FLATTENED = 5;
static const int PAN_LETT_NORMAL_ROUNDED = 6;
static const int PAN_LETT_NORMAL_OFF_CENTER = 7;
static const int PAN_LETT_NORMAL_SQUARE = 8;
static const int PAN_LETT_OBLIQUE_CONTACT = 9;
static const int PAN_LETT_OBLIQUE_WEIGHTED = 10;
static const int PAN_LETT_OBLIQUE_BOXED = 11;
static const int PAN_LETT_OBLIQUE_FLATTENED = 12;
static const int PAN_LETT_OBLIQUE_ROUNDED = 13;
static const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;
static const int PAN_LETT_OBLIQUE_SQUARE = 15;
static const int PAN_MIDLINE_STANDARD_TRIMMED = 2;
static const int PAN_MIDLINE_STANDARD_POINTED = 3;
static const int PAN_MIDLINE_STANDARD_SERIFED = 4;
static const int PAN_MIDLINE_HIGH_TRIMMED = 5;
static const int PAN_MIDLINE_HIGH_POINTED = 6;
static const int PAN_MIDLINE_HIGH_SERIFED = 7;
static const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;
static const int PAN_MIDLINE_CONSTANT_POINTED = 9;
static const int PAN_MIDLINE_CONSTANT_SERIFED = 10;
static const int PAN_MIDLINE_LOW_TRIMMED = 11;
static const int PAN_MIDLINE_LOW_POINTED = 12;
static const int PAN_MIDLINE_LOW_SERIFED = 13;
static const int PAN_XHEIGHT_CONSTANT_SMALL = 2;
static const int PAN_XHEIGHT_CONSTANT_STD = 3;
static const int PAN_XHEIGHT_CONSTANT_LARGE = 4;
static const int PAN_XHEIGHT_DUCKING_SMALL = 5;
static const int PAN_XHEIGHT_DUCKING_STD = 6;
static const int PAN_XHEIGHT_DUCKING_LARGE = 7;
static const int ELF_VENDOR_SIZE = 4;
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion; /* 0 for the first release of NT */
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture; /* 0 for Latin                   */
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion; /* 0 for the first release of NT */
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture; /* 0 for Latin                   */
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;
typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
static const int ELF_VERSION = 0;
static const int ELF_CULTURE_LATIN = 0;
static const int RASTER_FONTTYPE = 0x0001;
static const int DEVICE_FONTTYPE = 0x0002;
static const int TRUETYPE_FONTTYPE = 0x0004;
static const int RGB(r,g,b) = ((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))<<8))|(((DWORD)(BYTE)(b))<<16)));
static const int PALETTERGB(r,g,b) = (0x02000000 | RGB(r,g,b));
static const int PALETTEINDEX(i) = ((COLORREF)(0x01000000 | (DWORD)(WORD)(i)));
static const int PC_RESERVED = 0x01;
static const int PC_EXPLICIT = 0x02;
static const int PC_NOCOLLAPSE = 0x04;
static const int GetRValue(rgb) = (LOBYTE(rgb));
static const int GetGValue(rgb) = (LOBYTE(((WORD)(rgb)) >> 8));
static const int GetBValue(rgb) = (LOBYTE((rgb)>>16));
static const int TRANSPARENT = 1;
static const int OPAQUE = 2;
static const int BKMODE_LAST = 2;
static const int GM_COMPATIBLE = 1;
static const int GM_ADVANCED = 2;
static const int GM_LAST = 2;
static const int PT_CLOSEFIGURE = 0x01;
static const int PT_LINETO = 0x02;
static const int PT_BEZIERTO = 0x04;
static const int PT_MOVETO = 0x06;
static const int MM_TEXT = 1;
static const int MM_LOMETRIC = 2;
static const int MM_HIMETRIC = 3;
static const int MM_LOENGLISH = 4;
static const int MM_HIENGLISH = 5;
static const int MM_TWIPS = 6;
static const int MM_ISOTROPIC = 7;
static const int MM_ANISOTROPIC = 8;
static const int MM_MIN = MM_TEXT;
static const int MM_MAX = MM_ANISOTROPIC;
static const int MM_MAX_FIXEDSCALE = MM_TWIPS;
static const int ABSOLUTE = 1;
static const int RELATIVE = 2;
static const int WHITE_BRUSH = 0;
static const int LTGRAY_BRUSH = 1;
static const int GRAY_BRUSH = 2;
static const int DKGRAY_BRUSH = 3;
static const int BLACK_BRUSH = 4;
static const int NULL_BRUSH = 5;
static const int HOLLOW_BRUSH = NULL_BRUSH;
static const int WHITE_PEN = 6;
static const int BLACK_PEN = 7;
static const int NULL_PEN = 8;
static const int OEM_FIXED_FONT = 10;
static const int ANSI_FIXED_FONT = 11;
static const int ANSI_VAR_FONT = 12;
static const int SYSTEM_FONT = 13;
static const int DEVICE_DEFAULT_FONT = 14;
static const int DEFAULT_PALETTE = 15;
static const int SYSTEM_FIXED_FONT = 16;
static const int DEFAULT_GUI_FONT = 17;
static const int DC_BRUSH = 18;
static const int DC_PEN = 19;
static const int STOCK_LAST = 19;
static const int CLR_INVALID = 0xFFFFFFFF;
static const int BS_SOLID = 0;
static const int BS_NULL = 1;
static const int BS_HOLLOW = BS_NULL;
static const int BS_HATCHED = 2;
static const int BS_PATTERN = 3;
static const int BS_INDEXED = 4;
static const int BS_DIBPATTERN = 5;
static const int BS_DIBPATTERNPT = 6;
static const int BS_PATTERN8X8 = 7;
static const int BS_DIBPATTERN8X8 = 8;
static const int BS_MONOPATTERN = 9;
static const int HS_HORIZONTAL = 0;
static const int HS_VERTICAL = 1;
static const int HS_FDIAGONAL = 2;
static const int HS_BDIAGONAL = 3;
static const int HS_CROSS = 4;
static const int HS_DIAGCROSS = 5;
static const int HS_API_MAX = 12;
static const int PS_SOLID = 0;
static const int PS_DASH = 1;
static const int PS_DOT = 2;
static const int PS_DASHDOT = 3;
static const int PS_DASHDOTDOT = 4;
static const int PS_NULL = 5;
static const int PS_INSIDEFRAME = 6;
static const int PS_USERSTYLE = 7;
static const int PS_ALTERNATE = 8;
static const double PS_STYLE_MASK = 0x0000000F;
static const int PS_ENDCAP_ROUND = 0x00000000;
static const int PS_ENDCAP_SQUARE = 0x00000100;
static const int PS_ENDCAP_FLAT = 0x00000200;
static const int PS_ENDCAP_MASK = 0x00000F00;
static const int PS_JOIN_ROUND = 0x00000000;
static const int PS_JOIN_BEVEL = 0x00001000;
static const int PS_JOIN_MITER = 0x00002000;
static const int PS_JOIN_MASK = 0x0000F000;
static const int PS_COSMETIC = 0x00000000;
static const int PS_GEOMETRIC = 0x00010000;
static const int PS_TYPE_MASK = 0x000F0000;
static const int AD_COUNTERCLOCKWISE = 1;
static const int AD_CLOCKWISE = 2;
static const int DRIVERVERSION = 0;
static const int TECHNOLOGY = 2;
static const int HORZSIZE = 4;
static const int VERTSIZE = 6;
static const int HORZRES = 8;
static const int VERTRES = 10;
static const int BITSPIXEL = 12;
static const int PLANES = 14;
static const int NUMBRUSHES = 16;
static const int NUMPENS = 18;
static const int NUMMARKERS = 20;
static const int NUMFONTS = 22;
static const int NUMCOLORS = 24;
static const int PDEVICESIZE = 26;
static const int CURVECAPS = 28;
static const int LINECAPS = 30;
static const int POLYGONALCAPS = 32;
static const int TEXTCAPS = 34;
static const int CLIPCAPS = 36;
static const int RASTERCAPS = 38;
static const int ASPECTX = 40;
static const int ASPECTY = 42;
static const int ASPECTXY = 44;
static const int LOGPIXELSX = 88;
static const int LOGPIXELSY = 90;
static const int SIZEPALETTE = 104;
static const int NUMRESERVED = 106;
static const int COLORRES = 108;
static const int PHYSICALWIDTH = 110;
static const int PHYSICALHEIGHT = 111;
static const int PHYSICALOFFSETX = 112;
static const int PHYSICALOFFSETY = 113;
static const int SCALINGFACTORX = 114;
static const int SCALINGFACTORY = 115;
static const int VREFRESH = 116;
static const int DESKTOPVERTRES = 117;
static const int DESKTOPHORZRES = 118;
static const int BLTALIGNMENT = 119;
static const int SHADEBLENDCAPS = 120;
static const int COLORMGMTCAPS = 121;
static const int DT_PLOTTER = 0;
static const int DT_RASDISPLAY = 1;
static const int DT_RASPRINTER = 2;
static const int DT_RASCAMERA = 3;
static const int DT_CHARSTREAM = 4;
static const int DT_METAFILE = 5;
static const int DT_DISPFILE = 6;
static const int CC_NONE = 0;
static const int CC_CIRCLES = 1;
static const int CC_PIE = 2;
static const int CC_CHORD = 4;
static const int CC_ELLIPSES = 8;
static const int CC_WIDE = 16;
static const int CC_STYLED = 32;
static const int CC_WIDESTYLED = 64;
static const int CC_INTERIORS = 128;
static const int CC_ROUNDRECT = 256;
static const int LC_NONE = 0;
static const int LC_POLYLINE = 2;
static const int LC_MARKER = 4;
static const int LC_POLYMARKER = 8;
static const int LC_WIDE = 16;
static const int LC_STYLED = 32;
static const int LC_WIDESTYLED = 64;
static const int LC_INTERIORS = 128;
static const int PC_NONE = 0;
static const int PC_POLYGON = 1;
static const int PC_RECTANGLE = 2;
static const int PC_WINDPOLYGON = 4;
static const int PC_TRAPEZOID = 4;
static const int PC_SCANLINE = 8;
static const int PC_WIDE = 16;
static const int PC_STYLED = 32;
static const int PC_WIDESTYLED = 64;
static const int PC_INTERIORS = 128;
static const int PC_POLYPOLYGON = 256;
static const int PC_PATHS = 512;
static const int CP_NONE = 0;
static const int CP_RECTANGLE = 1;
static const int CP_REGION = 2;
static const int TC_OP_CHARACTER = 0x00000001;
static const int TC_OP_STROKE = 0x00000002;
static const int TC_CP_STROKE = 0x00000004;
static const int TC_CR_90 = 0x00000008;
static const int TC_CR_ANY = 0x00000010;
static const int TC_SF_X_YINDEP = 0x00000020;
static const int TC_SA_DOUBLE = 0x00000040;
static const int TC_SA_INTEGER = 0x00000080;
static const int TC_SA_CONTIN = 0x00000100;
static const int TC_EA_DOUBLE = 0x00000200;
static const int TC_IA_ABLE = 0x00000400;
static const int TC_UA_ABLE = 0x00000800;
static const int TC_SO_ABLE = 0x00001000;
static const int TC_RA_ABLE = 0x00002000;
static const int TC_VA_ABLE = 0x00004000;
static const int TC_RESERVED = 0x00008000;
static const int TC_SCROLLBLT = 0x00010000;
static const int RC_BITBLT = 1;
static const int RC_BANDING = 2;
static const int RC_SCALING = 4;
static const int RC_BITMAP64 = 8;
static const int RC_GDI20_OUTPUT = 0x0010;
static const int RC_GDI20_STATE = 0x0020;
static const int RC_SAVEBITMAP = 0x0040;
static const int RC_DI_BITMAP = 0x0080;
static const int RC_PALETTE = 0x0100;
static const int RC_DIBTODEV = 0x0200;
static const int RC_BIGFONT = 0x0400;
static const int RC_STRETCHBLT = 0x0800;
static const int RC_FLOODFILL = 0x1000;
static const int RC_STRETCHDIB = 0x2000;
static const int RC_OP_DX_OUTPUT = 0x4000;
static const int RC_DEVBITS = 0x8000;
static const int SB_NONE = 0x00000000;
static const int SB_CONST_ALPHA = 0x00000001;
static const int SB_PIXEL_ALPHA = 0x00000002;
static const int SB_PREMULT_ALPHA = 0x00000004;
static const int SB_GRAD_RECT = 0x00000010;
static const int SB_GRAD_TRI = 0x00000020;
static const int CM_NONE = 0x00000000;
static const int CM_DEVICE_ICM = 0x00000001;
static const int CM_GAMMA_RAMP = 0x00000002;
static const int CM_CMYK_COLOR = 0x00000004;
static const int DIB_RGB_COLORS = 0;
static const int DIB_PAL_COLORS = 1;
static const int SYSPAL_ERROR = 0;
static const int SYSPAL_STATIC = 1;
static const int SYSPAL_NOSTATIC = 2;
static const int SYSPAL_NOSTATIC256 = 3;
static const long CBM_INIT = 0x04L;
static const int FLOODFILLBORDER = 0;
static const int FLOODFILLSURFACE = 1;
static const int CCHDEVICENAME = 32;
static const int CCHFORMNAME = 32;
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;
typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
static const int DM_SPECVERSION = 0x0401;
static const long DM_ORIENTATION = 0x00000001L;
static const long DM_PAPERSIZE = 0x00000002L;
static const long DM_PAPERLENGTH = 0x00000004L;
static const long DM_PAPERWIDTH = 0x00000008L;
static const long DM_SCALE = 0x00000010L;
static const long DM_POSITION = 0x00000020L;
static const long DM_NUP = 0x00000040L;
static const long DM_DISPLAYORIENTATION = 0x00000080L;
static const long DM_COPIES = 0x00000100L;
static const long DM_DEFAULTSOURCE = 0x00000200L;
static const long DM_PRINTQUALITY = 0x00000400L;
static const long DM_COLOR = 0x00000800L;
static const long DM_DUPLEX = 0x00001000L;
static const long DM_YRESOLUTION = 0x00002000L;
static const long DM_TTOPTION = 0x00004000L;
static const long DM_COLLATE = 0x00008000L;
static const long DM_FORMNAME = 0x00010000L;
static const long DM_LOGPIXELS = 0x00020000L;
static const long DM_BITSPERPEL = 0x00040000L;
static const long DM_PELSWIDTH = 0x00080000L;
static const long DM_PELSHEIGHT = 0x00100000L;
static const long DM_DISPLAYFLAGS = 0x00200000L;
static const long DM_DISPLAYFREQUENCY = 0x00400000L;
static const long DM_ICMMETHOD = 0x00800000L;
static const long DM_ICMINTENT = 0x01000000L;
static const long DM_MEDIATYPE = 0x02000000L;
static const long DM_DITHERTYPE = 0x04000000L;
static const long DM_PANNINGWIDTH = 0x08000000L;
static const long DM_PANNINGHEIGHT = 0x10000000L;
static const long DM_DISPLAYFIXEDOUTPUT = 0x20000000L;
static const int DMORIENT_PORTRAIT = 1;
static const int DMORIENT_LANDSCAPE = 2;
static const int DMPAPER_FIRST = DMPAPER_LETTER;
static const int DMPAPER_LETTER = 1;
static const int DMPAPER_LETTERSMALL = 2;
static const int DMPAPER_TABLOID = 3;
static const int DMPAPER_LEDGER = 4;
static const int DMPAPER_LEGAL = 5;
static const int DMPAPER_STATEMENT = 6;
static const int DMPAPER_EXECUTIVE = 7;
static const int DMPAPER_A3 = 8;
static const int DMPAPER_A4 = 9;
static const int DMPAPER_A4SMALL = 10;
static const int DMPAPER_A5 = 11;
static const int DMPAPER_B4 = 12;
static const int DMPAPER_B5 = 13;
static const int DMPAPER_FOLIO = 14;
static const int DMPAPER_QUARTO = 15;
static const int DMPAPER_10X14 = 16;
static const int DMPAPER_11X17 = 17;
static const int DMPAPER_NOTE = 18;
static const int DMPAPER_ENV_9 = 19;
static const int DMPAPER_ENV_10 = 20;
static const int DMPAPER_ENV_11 = 21;
static const int DMPAPER_ENV_12 = 22;
static const int DMPAPER_ENV_14 = 23;
static const int DMPAPER_CSHEET = 24;
static const int DMPAPER_DSHEET = 25;
static const int DMPAPER_ESHEET = 26;
static const int DMPAPER_ENV_DL = 27;
static const int DMPAPER_ENV_C5 = 28;
static const int DMPAPER_ENV_C3 = 29;
static const int DMPAPER_ENV_C4 = 30;
static const int DMPAPER_ENV_C6 = 31;
static const int DMPAPER_ENV_C65 = 32;
static const int DMPAPER_ENV_B4 = 33;
static const int DMPAPER_ENV_B5 = 34;
static const int DMPAPER_ENV_B6 = 35;
static const int DMPAPER_ENV_ITALY = 36;
static const int DMPAPER_ENV_MONARCH = 37;
static const int DMPAPER_ENV_PERSONAL = 38;
static const int DMPAPER_FANFOLD_US = 39;
static const int DMPAPER_FANFOLD_STD_GERMAN = 40;
static const int DMPAPER_FANFOLD_LGL_GERMAN = 41;
static const int DMPAPER_ISO_B4 = 42;
static const int DMPAPER_JAPANESE_POSTCARD = 43;
static const int DMPAPER_9X11 = 44;
static const int DMPAPER_10X11 = 45;
static const int DMPAPER_15X11 = 46;
static const int DMPAPER_ENV_INVITE = 47;
static const int DMPAPER_RESERVED_48 = 48;
static const int DMPAPER_RESERVED_49 = 49;
static const int DMPAPER_LETTER_EXTRA = 50;
static const int DMPAPER_LEGAL_EXTRA = 51;
static const int DMPAPER_TABLOID_EXTRA = 52;
static const int DMPAPER_A4_EXTRA = 53;
static const int DMPAPER_LETTER_TRANSVERSE = 54;
static const int DMPAPER_A4_TRANSVERSE = 55;
static const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;
static const int DMPAPER_A_PLUS = 57;
static const int DMPAPER_B_PLUS = 58;
static const int DMPAPER_LETTER_PLUS = 59;
static const int DMPAPER_A4_PLUS = 60;
static const int DMPAPER_A5_TRANSVERSE = 61;
static const int DMPAPER_B5_TRANSVERSE = 62;
static const int DMPAPER_A3_EXTRA = 63;
static const int DMPAPER_A5_EXTRA = 64;
static const int DMPAPER_B5_EXTRA = 65;
static const int DMPAPER_A2 = 66;
static const int DMPAPER_A3_TRANSVERSE = 67;
static const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;
static const int DMPAPER_DBL_JAPANESE_POSTCARD = 69;
static const int DMPAPER_A6 = 70;
static const int DMPAPER_JENV_KAKU2 = 71;
static const int DMPAPER_JENV_KAKU3 = 72;
static const int DMPAPER_JENV_CHOU3 = 73;
static const int DMPAPER_JENV_CHOU4 = 74;
static const int DMPAPER_LETTER_ROTATED = 75;
static const int DMPAPER_A3_ROTATED = 76;
static const int DMPAPER_A4_ROTATED = 77;
static const int DMPAPER_A5_ROTATED = 78;
static const int DMPAPER_B4_JIS_ROTATED = 79;
static const int DMPAPER_B5_JIS_ROTATED = 80;
static const int DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;
static const int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;
static const int DMPAPER_A6_ROTATED = 83;
static const int DMPAPER_JENV_KAKU2_ROTATED = 84;
static const int DMPAPER_JENV_KAKU3_ROTATED = 85;
static const int DMPAPER_JENV_CHOU3_ROTATED = 86;
static const int DMPAPER_JENV_CHOU4_ROTATED = 87;
static const int DMPAPER_B6_JIS = 88;
static const int DMPAPER_B6_JIS_ROTATED = 89;
static const int DMPAPER_12X11 = 90;
static const int DMPAPER_JENV_YOU4 = 91;
static const int DMPAPER_JENV_YOU4_ROTATED = 92;
static const int DMPAPER_P16K = 93;
static const int DMPAPER_P32K = 94;
static const int DMPAPER_P32KBIG = 95;
static const int DMPAPER_PENV_1 = 96;
static const int DMPAPER_PENV_2 = 97;
static const int DMPAPER_PENV_3 = 98;
static const int DMPAPER_PENV_4 = 99;
static const int DMPAPER_PENV_5 = 100;
static const int DMPAPER_PENV_6 = 101;
static const int DMPAPER_PENV_7 = 102;
static const int DMPAPER_PENV_8 = 103;
static const int DMPAPER_PENV_9 = 104;
static const int DMPAPER_PENV_10 = 105;
static const int DMPAPER_P16K_ROTATED = 106;
static const int DMPAPER_P32K_ROTATED = 107;
static const int DMPAPER_P32KBIG_ROTATED = 108;
static const int DMPAPER_PENV_1_ROTATED = 109;
static const int DMPAPER_PENV_2_ROTATED = 110;
static const int DMPAPER_PENV_3_ROTATED = 111;
static const int DMPAPER_PENV_4_ROTATED = 112;
static const int DMPAPER_PENV_5_ROTATED = 113;
static const int DMPAPER_PENV_6_ROTATED = 114;
static const int DMPAPER_PENV_7_ROTATED = 115;
static const int DMPAPER_PENV_8_ROTATED = 116;
static const int DMPAPER_PENV_9_ROTATED = 117;
static const int DMPAPER_PENV_10_ROTATED = 118;
static const int DMPAPER_LAST = DMPAPER_PENV_10_ROTATED;
static const int DMPAPER_USER = 256;
static const int DMBIN_FIRST = DMBIN_UPPER;
static const int DMBIN_UPPER = 1;
static const int DMBIN_ONLYONE = 1;
static const int DMBIN_LOWER = 2;
static const int DMBIN_MIDDLE = 3;
static const int DMBIN_MANUAL = 4;
static const int DMBIN_ENVELOPE = 5;
static const int DMBIN_ENVMANUAL = 6;
static const int DMBIN_AUTO = 7;
static const int DMBIN_TRACTOR = 8;
static const int DMBIN_SMALLFMT = 9;
static const int DMBIN_LARGEFMT = 10;
static const int DMBIN_LARGECAPACITY = 11;
static const int DMBIN_CASSETTE = 14;
static const int DMBIN_FORMSOURCE = 15;
static const int DMBIN_LAST = DMBIN_FORMSOURCE;
static const int DMBIN_USER = 256;
static const int DMRES_DRAFT = (-1);
static const int DMRES_LOW = (-2);
static const int DMRES_MEDIUM = (-3);
static const int DMRES_HIGH = (-4);
static const int DMCOLOR_MONOCHROME = 1;
static const int DMCOLOR_COLOR = 2;
static const int DMDUP_SIMPLEX = 1;
static const int DMDUP_VERTICAL = 2;
static const int DMDUP_HORIZONTAL = 3;
static const int DMTT_BITMAP = 1;
static const int DMTT_DOWNLOAD = 2;
static const int DMTT_SUBDEV = 3;
static const int DMTT_DOWNLOAD_OUTLINE = 4;
static const int DMCOLLATE_FALSE = 0;
static const int DMCOLLATE_TRUE = 1;
static const int DMDO_DEFAULT = 0;
static const int DMDO_90 = 1;
static const int DMDO_180 = 2;
static const int DMDO_270 = 3;
static const int DMDFO_DEFAULT = 0;
static const int DMDFO_STRETCH = 1;
static const int DMDFO_CENTER = 2;
static const int DM_INTERLACED = 0x00000002;
static const int DMDISPLAYFLAGS_TEXTMODE = 0x00000004;
static const int DMNUP_SYSTEM = 1;
static const int DMNUP_ONEUP = 2;
static const int DMICMMETHOD_NONE = 1;
static const int DMICMMETHOD_SYSTEM = 2;
static const int DMICMMETHOD_DRIVER = 3;
static const int DMICMMETHOD_DEVICE = 4;
static const int DMICMMETHOD_USER = 256;
static const int DMICM_SATURATE = 1;
static const int DMICM_CONTRAST = 2;
static const int DMICM_COLORIMETRIC = 3;
static const int DMICM_ABS_COLORIMETRIC = 4;
static const int DMICM_USER = 256;
static const int DMMEDIA_STANDARD = 1;
static const int DMMEDIA_TRANSPARENCY = 2;
static const int DMMEDIA_GLOSSY = 3;
static const int DMMEDIA_USER = 256;
static const int DMDITHER_NONE = 1;
static const int DMDITHER_COARSE = 2;
static const int DMDITHER_FINE = 3;
static const int DMDITHER_LINEART = 4;
static const int DMDITHER_ERRORDIFFUSION = 5;
static const int DMDITHER_RESERVED6 = 6;
static const int DMDITHER_RESERVED7 = 7;
static const int DMDITHER_RESERVED8 = 8;
static const int DMDITHER_RESERVED9 = 9;
static const int DMDITHER_GRAYSCALE = 10;
static const int DMDITHER_USER = 256;
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
static const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x00000001;
static const int DISPLAY_DEVICE_MULTI_DRIVER = 0x00000002;
static const int DISPLAY_DEVICE_PRIMARY_DEVICE = 0x00000004;
static const int DISPLAY_DEVICE_MIRRORING_DRIVER = 0x00000008;
static const int DISPLAY_DEVICE_VGA_COMPATIBLE = 0x00000010;
static const int DISPLAY_DEVICE_REMOVABLE = 0x00000020;
static const int DISPLAY_DEVICE_MODESPRUNED = 0x08000000;
static const int DISPLAY_DEVICE_REMOTE = 0x04000000;
static const int DISPLAY_DEVICE_DISCONNECT = 0x02000000;
static const int DISPLAY_DEVICE_TS_COMPATIBLE = 0x00200000;
static const int DISPLAY_DEVICE_UNSAFE_MODES_ON = 0x00080000;
static const int DISPLAY_DEVICE_ACTIVE = 0x00000001;
static const int DISPLAY_DEVICE_ATTACHED = 0x00000002;
static const int DISPLAYCONFIG_MAXPATH = 1024;
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;
typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;
typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;
typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;
    UINT32 videoStandard;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;
typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;
typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;
typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;
typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;
typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;
typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;
static const int DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 0xffffffff;
typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;
static const int DISPLAYCONFIG_SOURCE_IN_USE = 0x00000001;
typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
static const int DISPLAYCONFIG_TARGET_IN_USE = 0x00000001;
static const int DISPLAYCONFIG_TARGET_FORCIBLE = 0x00000002;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 0x00000004;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 0x00000008;
static const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 0x00000010;
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;
static const int DISPLAYCONFIG_PATH_ACTIVE = 0x00000001;
typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;
typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;
typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;
typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;
typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
static const int QDC_ALL_PATHS = 0x00000001;
static const int QDC_ONLY_ACTIVE_PATHS = 0x00000002;
static const int QDC_DATABASE_CURRENT = 0x00000004;
static const int SDC_TOPOLOGY_INTERNAL = 0x00000001;
static const int SDC_TOPOLOGY_CLONE = 0x00000002;
static const int SDC_TOPOLOGY_EXTEND = 0x00000004;
static const int SDC_TOPOLOGY_EXTERNAL = 0x00000008;
static const int SDC_TOPOLOGY_SUPPLIED = 0x00000010;
static const int SDC_USE_DATABASE_CURRENT = (SDC_TOPOLOGY_INTERNAL | SDC_TOPOLOGY_CLONE | SDC_TOPOLOGY_EXTEND | SDC_TOPOLOGY_EXTERNAL);
static const int SDC_USE_SUPPLIED_DISPLAY_CONFIG = 0x00000020;
static const int SDC_VALIDATE = 0x00000040;
static const int SDC_APPLY = 0x00000080;
static const int SDC_NO_OPTIMIZATION = 0x00000100;
static const int SDC_SAVE_TO_DATABASE = 0x00000200;
static const int SDC_ALLOW_CHANGES = 0x00000400;
static const int SDC_PATH_PERSIST_IF_REQUIRED = 0x00000800;
static const int SDC_FORCE_MODE_ENUMERATION = 0x00001000;
static const int SDC_ALLOW_PATH_ORDER_CHANGES = 0x00002000;
static const int RDH_RECTANGLES = 1;
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;
typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
static const int SYSRGN = 4;
typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;
typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;
typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;
typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef struct _FIXED {
    WORD fract;
    short value;
} FIXED;
typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;
typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
static const int GGO_METRICS = 0;
static const int GGO_BITMAP = 1;
static const int GGO_NATIVE = 2;
static const int GGO_BEZIER = 3;
static const int GGO_GRAY2_BITMAP = 4;
static const int GGO_GRAY4_BITMAP = 5;
static const int GGO_GRAY8_BITMAP = 6;
static const int GGO_GLYPH_INDEX = 0x0080;
static const int GGO_UNHINTED = 0x0100;
static const int TT_POLYGON_TYPE = 24;
static const int TT_PRIM_LINE = 1;
static const int TT_PRIM_QSPLINE = 2;
static const int TT_PRIM_CSPLINE = 3;
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;
typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
static const int GCP_DBCS = 0x0001;
static const int GCP_REORDER = 0x0002;
static const int GCP_USEKERNING = 0x0008;
static const int GCP_GLYPHSHAPE = 0x0010;
static const int GCP_LIGATE = 0x0020;
static const int GCP_DIACRITIC = 0x0100;
static const int GCP_KASHIDA = 0x0400;
static const int GCP_ERROR = 0x8000;
static const int FLI_MASK = 0x103B;
static const long GCP_JUSTIFY = 0x00010000L;
static const long FLI_GLYPHS = 0x00040000L;
static const long GCP_CLASSIN = 0x00080000L;
static const long GCP_MAXEXTENT = 0x00100000L;
static const long GCP_JUSTIFYIN = 0x00200000L;
static const long GCP_DISPLAYZWG = 0x00400000L;
static const long GCP_SYMSWAPOFF = 0x00800000L;
static const long GCP_NUMERICOVERRIDE = 0x01000000L;
static const long GCP_NEUTRALOVERRIDE = 0x02000000L;
static const long GCP_NUMERICSLATIN = 0x04000000L;
static const long GCP_NUMERICSLOCAL = 0x08000000L;
static const int GCPCLASS_LATIN = 1;
static const int GCPCLASS_HEBREW = 2;
static const int GCPCLASS_ARABIC = 2;
static const int GCPCLASS_NEUTRAL = 3;
static const int GCPCLASS_LOCALNUMBER = 4;
static const int GCPCLASS_LATINNUMBER = 5;
static const int GCPCLASS_LATINNUMERICTERMINATOR = 6;
static const int GCPCLASS_LATINNUMERICSEPARATOR = 7;
static const int GCPCLASS_NUMERICSEPARATOR = 8;
static const int GCPCLASS_PREBOUNDLTR = 0x80;
static const int GCPCLASS_PREBOUNDRTL = 0x40;
static const int GCPCLASS_POSTBOUNDLTR = 0x20;
static const int GCPCLASS_POSTBOUNDRTL = 0x10;
static const int GCPGLYPH_LINKBEFORE = 0x8000;
static const int GCPGLYPH_LINKAFTER = 0x4000;
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;
typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
static const int TT_AVAILABLE = 0x0001;
static const int TT_ENABLED = 0x0002;
typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
static const int PFD_TYPE_RGBA = 0;
static const int PFD_TYPE_COLORINDEX = 1;
static const int PFD_MAIN_PLANE = 0;
static const int PFD_OVERLAY_PLANE = 1;
static const int PFD_UNDERLAY_PLANE = (-1);
static const int PFD_DOUBLEBUFFER = 0x00000001;
static const int PFD_STEREO = 0x00000002;
static const int PFD_DRAW_TO_WINDOW = 0x00000004;
static const int PFD_DRAW_TO_BITMAP = 0x00000008;
static const int PFD_SUPPORT_GDI = 0x00000010;
static const int PFD_SUPPORT_OPENGL = 0x00000020;
static const int PFD_GENERIC_FORMAT = 0x00000040;
static const int PFD_NEED_PALETTE = 0x00000080;
static const int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
static const int PFD_SWAP_EXCHANGE = 0x00000200;
static const int PFD_SWAP_COPY = 0x00000400;
static const int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
static const int PFD_GENERIC_ACCELERATED = 0x00001000;
static const int PFD_SUPPORT_DIRECTDRAW = 0x00002000;
static const int PFD_DIRECT3D_ACCELERATED = 0x00004000;
static const int PFD_SUPPORT_COMPOSITION = 0x00008000;
static const int PFD_DEPTH_DONTCARE = 0x20000000;
static const int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
static const int PFD_STEREO_DONTCARE = 0x80000000;
typedef int (* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
static const int OLDFONTENUMPROC = OLDFONTENUMPROCA;
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef FONTENUMPROCA FONTENUMPROC;
typedef int (* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (* LINEDDAPROC)(int, int, LPARAM);
 int AddFontResourceA( LPCSTR);
 int AddFontResourceW( LPCWSTR);
static const int AddFontResource = AddFontResourceA;
 BOOL AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
 BOOL Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
 BOOL BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
 BOOL CancelDC( HDC hdc);
 BOOL Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
 int ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
 HMETAFILE CloseMetaFile( HDC hdc);
 int CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
 HMETAFILE CopyMetaFileA( HMETAFILE, LPCSTR);
 HMETAFILE CopyMetaFileW( HMETAFILE, LPCWSTR);
static const int CopyMetaFile = CopyMetaFileA;
 HBITMAP CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
 HBITMAP CreateBitmapIndirect( const BITMAP *pbm);
 HBRUSH CreateBrushIndirect( const LOGBRUSH *plbrush);
 HBITMAP CreateCompatibleBitmap( HDC hdc, int cx, int cy);
 HBITMAP CreateDiscardableBitmap( HDC hdc, int cx, int cy);
 HDC CreateCompatibleDC( HDC hdc);
 HDC CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
 HDC CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);
static const int CreateDC = CreateDCA;
 HBITMAP CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
 HBRUSH CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
 HBRUSH CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
 HRGN CreateEllipticRgn( int x1, int y1, int x2, int y2);
 HRGN CreateEllipticRgnIndirect( const RECT *lprect);
 HFONT CreateFontIndirectA( const LOGFONTA *lplf);
 HFONT CreateFontIndirectW( const LOGFONTW *lplf);
static const int CreateFontIndirect = CreateFontIndirectA;
 HFONT CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                             DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                             DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
 HFONT CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                             DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                             DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
static const int CreateFont = CreateFontA;
 HBRUSH CreateHatchBrush( int iHatch, COLORREF color);
 HDC CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
 HDC CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);
static const int CreateIC = CreateICA;
 HDC CreateMetaFileA( LPCSTR pszFile);
 HDC CreateMetaFileW( LPCWSTR pszFile);
static const int CreateMetaFile = CreateMetaFileA;
 HPALETTE CreatePalette( const LOGPALETTE * plpal);
 HPEN CreatePen( int iStyle, int cWidth, COLORREF color);
 HPEN CreatePenIndirect( const LOGPEN *plpen);
 HRGN CreatePolyPolygonRgn( const POINT *pptl,
                                                const INT *pc,
                                                int cPoly,
                                                int iMode);
 HBRUSH CreatePatternBrush( HBITMAP hbm);
 HRGN CreateRectRgn( int x1, int y1, int x2, int y2);
 HRGN CreateRectRgnIndirect( const RECT *lprect);
 HRGN CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
 BOOL CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
 BOOL CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
static const int CreateScalableFontResource = CreateScalableFontResourceA;
 HBRUSH CreateSolidBrush( COLORREF color);
 BOOL DeleteDC( HDC hdc);
 BOOL DeleteMetaFile( HMETAFILE hmf);
 BOOL DeleteObject( HGDIOBJ ho);
 int DescribePixelFormat( HDC hdc,
                                            int iPixelFormat,
                                            UINT nBytes,
                                            LPPIXELFORMATDESCRIPTOR ppfd);
typedef UINT (* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef DWORD (* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
static const int DM_UPDATE = 1;
static const int DM_COPY = 2;
static const int DM_PROMPT = 4;
static const int DM_MODIFY = 8;
static const int DM_IN_BUFFER = DM_MODIFY;
static const int DM_IN_PROMPT = DM_PROMPT;
static const int DM_OUT_BUFFER = DM_COPY;
static const int DM_OUT_DEFAULT = DM_UPDATE;
static const int DC_FIELDS = 1;
static const int DC_PAPERS = 2;
static const int DC_PAPERSIZE = 3;
static const int DC_MINEXTENT = 4;
static const int DC_MAXEXTENT = 5;
static const int DC_BINS = 6;
static const int DC_DUPLEX = 7;
static const int DC_SIZE = 8;
static const int DC_EXTRA = 9;
static const int DC_VERSION = 10;
static const int DC_DRIVER = 11;
static const int DC_BINNAMES = 12;
static const int DC_ENUMRESOLUTIONS = 13;
static const int DC_FILEDEPENDENCIES = 14;
static const int DC_TRUETYPE = 15;
static const int DC_PAPERNAMES = 16;
static const int DC_ORIENTATION = 17;
static const int DC_COPIES = 18;
static const int DC_BINADJUST = 19;
static const int DC_EMF_COMPLIANT = 20;
static const int DC_DATATYPE_PRODUCED = 21;
static const int DC_COLLATE = 22;
static const int DC_MANUFACTURER = 23;
static const int DC_MODEL = 24;
static const int DC_PERSONALITY = 25;
static const int DC_PRINTRATE = 26;
static const int DC_PRINTRATEUNIT = 27;
static const int PRINTRATEUNIT_PPM = 1;
static const int PRINTRATEUNIT_CPS = 2;
static const int PRINTRATEUNIT_LPM = 3;
static const int PRINTRATEUNIT_IPM = 4;
static const int DC_PRINTERMEM = 28;
static const int DC_MEDIAREADY = 29;
static const int DC_STAPLE = 30;
static const int DC_PRINTRATEPPM = 31;
static const int DC_COLORDEVICE = 32;
static const int DC_NUP = 33;
static const int DC_MEDIATYPENAMES = 34;
static const int DC_MEDIATYPES = 35;
static const long DCTT_BITMAP = 0x0000001L;
static const long DCTT_DOWNLOAD = 0x0000002L;
static const long DCTT_SUBDEV = 0x0000004L;
static const long DCTT_DOWNLOAD_OUTLINE = 0x0000008L;
static const int DCBA_FACEUPNONE = 0x0000;
static const int DCBA_FACEUPCENTER = 0x0001;
static const int DCBA_FACEUPLEFT = 0x0002;
static const int DCBA_FACEUPRIGHT = 0x0003;
static const int DCBA_FACEDOWNNONE = 0x0100;
static const int DCBA_FACEDOWNCENTER = 0x0101;
static const int DCBA_FACEDOWNLEFT = 0x0102;
static const int DCBA_FACEDOWNRIGHT = 0x0103;
int
DeviceCapabilitiesA(
    LPCSTR pDevice,
    LPCSTR pPort,
    WORD fwCapability,
    LPSTR pOutput,
    const DEVMODEA *pDevMode
    );
int
DeviceCapabilitiesW(
    LPCWSTR pDevice,
    LPCWSTR pPort,
    WORD fwCapability,
    LPWSTR pOutput,
    const DEVMODEW *pDevMode
    );
static const int DeviceCapabilities = DeviceCapabilitiesA;
 int DrawEscape( HDC hdc,
                                    int iEscape,
                                    int cjIn,
                                    LPCSTR lpIn);
 BOOL Ellipse( HDC hdc, int left, int top, int right, int bottom);
 int EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
 int EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
static const int EnumFontFamiliesEx = EnumFontFamiliesExA;
 int EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
 int EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
static const int EnumFontFamilies = EnumFontFamiliesA;
 int EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
 int EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
static const int EnumFonts = EnumFontsA;
 int EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);
 BOOL EqualRgn( HRGN hrgn1, HRGN hrgn2);
 int Escape( HDC hdc,
                                int iEscape,
                                int cjIn,
                                LPCSTR pvIn,
                                LPVOID pvOut);
 int ExtEscape( HDC hdc,
                                    int iEscape,
                                    int cjInput,
                                    LPCSTR lpInData,
                                    int cjOutput,
                                    LPSTR lpOutData);
 int ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
 HRGN ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
 BOOL ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
 BOOL FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
 BOOL FloodFill( HDC hdc, int x, int y, COLORREF color);
 BOOL FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
 int GetROP2( HDC hdc);
 BOOL GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
 COLORREF GetBkColor( HDC hdc);
 COLORREF GetDCBrushColor( HDC hdc);
 COLORREF GetDCPenColor( HDC hdc);
int
GetBkMode(
    HDC hdc
    );
LONG
GetBitmapBits(
    HBITMAP hbit,
    LONG cb,
    LPVOID lpvBits
    );
 BOOL GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
 UINT GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);
 BOOL GetBrushOrgEx( HDC hdc, LPPOINT lppt);
 BOOL GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
 BOOL GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
static const int GetCharWidth = GetCharWidthA;
 BOOL GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
 BOOL GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
static const int GetCharWidth32 = GetCharWidth32A;
 BOOL GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
 BOOL GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
static const int GetCharWidthFloat = GetCharWidthFloatA;
 BOOL GetCharABCWidthsA( HDC hdc,
                                            UINT wFirst,
                                            UINT wLast,
                                            LPABC lpABC);
 BOOL GetCharABCWidthsW( HDC hdc,
                                            UINT wFirst,
                                            UINT wLast,
                                            LPABC lpABC);
static const int GetCharABCWidths = GetCharABCWidthsA;
 BOOL GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
 BOOL GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
static const int GetCharABCWidthsFloat = GetCharABCWidthsFloatA;
 int GetClipBox( HDC hdc, LPRECT lprect);
 int GetClipRgn( HDC hdc, HRGN hrgn);
 int GetMetaRgn( HDC hdc, HRGN hrgn);
 HGDIOBJ GetCurrentObject( HDC hdc, UINT type);
 BOOL GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
 int GetDeviceCaps( HDC hdc, int index);
 int GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage); // SAL actual size of lpbmi is computed from structure elements
 DWORD GetFontData ( HDC hdc,
                                        DWORD dwTable,
                                        DWORD dwOffset,
                                        PVOID pvBuffer,
                                        DWORD cjBuffer
                                        );
 DWORD GetGlyphOutlineA( HDC hdc,
                                            UINT uChar,
                                            UINT fuFormat,
                                            LPGLYPHMETRICS lpgm,
                                            DWORD cjBuffer,
                                            LPVOID pvBuffer,
                                            const MAT2 *lpmat2
                                        );
 DWORD GetGlyphOutlineW( HDC hdc,
                                            UINT uChar,
                                            UINT fuFormat,
                                            LPGLYPHMETRICS lpgm,
                                            DWORD cjBuffer,
                                            LPVOID pvBuffer,
                                            const MAT2 *lpmat2
                                        );
static const int GetGlyphOutline = GetGlyphOutlineA;
 int GetGraphicsMode( HDC hdc);
 int GetMapMode( HDC hdc);
 UINT GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
 HMETAFILE GetMetaFileA( LPCSTR lpName);
 HMETAFILE GetMetaFileW( LPCWSTR lpName);
static const int GetMetaFile = GetMetaFileA;
 COLORREF GetNearestColor( HDC hdc, COLORREF color);
 UINT GetNearestPaletteIndex( HPALETTE h, COLORREF color);
 DWORD GetObjectType( HGDIOBJ h);
 UINT GetOutlineTextMetricsA( HDC hdc,
                                                UINT cjCopy,
                                                LPOUTLINETEXTMETRICA potm);
 UINT GetOutlineTextMetricsW( HDC hdc,
                                                UINT cjCopy,
                                                LPOUTLINETEXTMETRICW potm);
static const int GetOutlineTextMetrics = GetOutlineTextMetricsA;
 UINT GetPaletteEntries( HPALETTE hpal,
                                            UINT iStart,
                                            UINT cEntries,
                                            LPPALETTEENTRY pPalEntries);
 COLORREF GetPixel( HDC hdc, int x, int y);
 int GetPixelFormat( HDC hdc);
 int GetPolyFillMode( HDC hdc);
 BOOL GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                            UINT cjBytes);
 int GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
 DWORD GetRegionData( HRGN hrgn,
                                        DWORD nCount,
                                        LPRGNDATA lpRgnData);
 int GetRgnBox( HRGN hrgn, LPRECT lprc);
 HGDIOBJ GetStockObject( int i);
 int GetStretchBltMode( HDC hdc);
UINT
GetSystemPaletteEntries(
    HDC hdc,
    UINT iStart,
    UINT cEntries,
    LPPALETTEENTRY pPalEntries
    );
 UINT GetSystemPaletteUse( HDC hdc);
 int GetTextCharacterExtra( HDC hdc);
 UINT GetTextAlign( HDC hdc);
 COLORREF GetTextColor( HDC hdc);
BOOL
GetTextExtentPointA(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE lpsz
    );
BOOL
GetTextExtentPointW(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE lpsz
    );
static const int GetTextExtentPoint = GetTextExtentPointA;
BOOL
GetTextExtentPoint32A(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE psizl
    );
BOOL
GetTextExtentPoint32W(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE psizl
    );
static const int GetTextExtentPoint32 = GetTextExtentPoint32A;
BOOL
GetTextExtentExPointA(
    HDC hdc,
    LPCSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize
    );
BOOL
GetTextExtentExPointW(
    HDC hdc,
    LPCWSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize
    );
static const int GetTextExtentExPoint = GetTextExtentExPointA;
 int GetTextCharset( HDC hdc);
 int GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
 BOOL TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
 DWORD GetFontLanguageInfo( HDC hdc);
 DWORD GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
 DWORD GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
static const int GetCharacterPlacement = GetCharacterPlacementA;
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;
typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
static const int GS_8BIT_INDICES = 0x00000001;
static const int GGI_MARK_NONEXISTING_GLYPHS = 0X0001;
 DWORD GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
 DWORD GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
 DWORD GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
static const int GetGlyphIndices = GetGlyphIndicesA;
 BOOL GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
 BOOL GetTextExtentExPointI ( HDC hdc,
                                                LPWORD lpwszString,
                                                int cwchString,
                                                int nMaxExtent,
                                                LPINT lpnFit,
                                                LPINT lpnDx,
                                                LPSIZE lpSize
                                                );
 BOOL GetCharWidthI( HDC hdc,
                                        UINT giFirst,
                                        UINT cgi,
                                        LPWORD pgi,
                                        LPINT piWidths
                                        );
 BOOL GetCharABCWidthsI( HDC hdc,
                                            UINT giFirst,
                                            UINT cgi,
                                            LPWORD pgi,
                                            LPABC pabc
                                        );
static const int STAMP_DESIGNVECTOR = (0x8000000 + 'd' + ('v' << 8));
static const int STAMP_AXESLIST = (0x8000000 + 'a' + ('l' << 8));
static const int MM_MAX_NUMAXES = 16;
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;
 int AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
 int AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);
static const int AddFontResourceEx = AddFontResourceExA;
 BOOL RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
 BOOL RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);
static const int RemoveFontResourceEx = RemoveFontResourceExA;
 HANDLE AddFontMemResourceEx( PVOID pFileView,
                                                DWORD cjSize,
                                                PVOID pvResrved,
                                                DWORD* pNumFonts);
 BOOL RemoveFontMemResourceEx( HANDLE h);
static const int FR_PRIVATE = 0x10;
static const int FR_NOT_ENUM = 0x20;
static const int MM_MAX_AXES_NAMELEN = 16;
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;
typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;
typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
 HFONT CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
 HFONT CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);
static const int CreateFontIndirectEx = CreateFontIndirectExA;
typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
 BOOL GetViewportExtEx( HDC hdc, LPSIZE lpsize);
 BOOL GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
 BOOL GetWindowExtEx( HDC hdc, LPSIZE lpsize);
 BOOL GetWindowOrgEx( HDC hdc, LPPOINT lppoint);
 int IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
 BOOL InvertRgn( HDC hdc, HRGN hrgn);
 BOOL LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
 BOOL LineTo( HDC hdc, int x, int y);
 BOOL MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
              HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
 BOOL PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                     int height, HBITMAP hbmMask, int xMask, int yMask);
 int OffsetClipRgn( HDC hdc, int x, int y);
 int OffsetRgn( HRGN hrgn, int x, int y);
 BOOL PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
 BOOL Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
 BOOL PlayMetaFile( HDC hdc, HMETAFILE hmf);
 BOOL PaintRgn( HDC hdc, HRGN hrgn);
 BOOL PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
 BOOL PtInRegion( HRGN hrgn, int x, int y);
 BOOL PtVisible( HDC hdc, int x, int y);
 BOOL RectInRegion( HRGN hrgn, const RECT * lprect);
 BOOL RectVisible( HDC hdc, const RECT * lprect);
 BOOL Rectangle( HDC hdc, int left, int top, int right, int bottom);
 BOOL RestoreDC( HDC hdc, int nSavedDC);
 HDC ResetDCA( HDC hdc, const DEVMODEA * lpdm);
 HDC ResetDCW( HDC hdc, const DEVMODEW * lpdm);
static const int ResetDC = ResetDCA;
 UINT RealizePalette( HDC hdc);
 BOOL RemoveFontResourceA( LPCSTR lpFileName);
 BOOL RemoveFontResourceW( LPCWSTR lpFileName);
static const int RemoveFontResource = RemoveFontResourceA;
 BOOL RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
 BOOL ResizePalette( HPALETTE hpal, UINT n);
 int SaveDC( HDC hdc);
 int SelectClipRgn( HDC hdc, HRGN hrgn);
 int ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
 int SetMetaRgn( HDC hdc);
 HGDIOBJ SelectObject( HDC hdc, HGDIOBJ h);
 HPALETTE SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
 COLORREF SetBkColor( HDC hdc, COLORREF color);
 COLORREF SetDCBrushColor( HDC hdc, COLORREF color);
 COLORREF SetDCPenColor( HDC hdc, COLORREF color);
 int SetBkMode( HDC hdc, int mode);
LONG
SetBitmapBits(
    HBITMAP hbm,
    DWORD cb,
    const void *pvBits);
 UINT SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
 int SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 int SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
        int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 DWORD SetMapperFlags( HDC hdc, DWORD flags);
 int SetGraphicsMode( HDC hdc, int iMode);
 int SetMapMode( HDC hdc, int iMode);
 DWORD SetLayout( HDC hdc, DWORD l);
 DWORD GetLayout( HDC hdc);
 HMETAFILE SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
 UINT SetPaletteEntries( HPALETTE hpal,
                                            UINT iStart,
                                            UINT cEntries,
                                            const PALETTEENTRY *pPalEntries);
 COLORREF SetPixel( HDC hdc, int x, int y, COLORREF color);
 BOOL SetPixelV( HDC hdc, int x, int y, COLORREF color);
 BOOL SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
 int SetPolyFillMode( HDC hdc, int mode);
 BOOL StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
 BOOL SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
 int StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
        const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
 int SetROP2( HDC hdc, int rop2);
 int SetStretchBltMode( HDC hdc, int mode);
 UINT SetSystemPaletteUse( HDC hdc, UINT use);
 int SetTextCharacterExtra( HDC hdc, int extra);
 COLORREF SetTextColor( HDC hdc, COLORREF color);
 UINT SetTextAlign( HDC hdc, UINT align);
 BOOL SetTextJustification( HDC hdc, int extra, int count);
 BOOL UpdateColors( HDC hdc);
typedef USHORT COLOR16;
typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;
typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;
typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;
typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
static const int AC_SRC_OVER = 0x00;
static const int AC_SRC_ALPHA = 0x01;
 BOOL AlphaBlend(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    BLENDFUNCTION ftn);
 BOOL TransparentBlt(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    UINT crTransparent);
static const int GRADIENT_FILL_RECT_H = 0x00000000;
static const int GRADIENT_FILL_RECT_V = 0x00000001;
static const int GRADIENT_FILL_TRIANGLE = 0x00000002;
static const int GRADIENT_FILL_OP_FLAG = 0x000000ff;
BOOL
GradientFill(
    HDC hdc,
    PTRIVERTEX pVertex,
    ULONG nVertex,
    PVOID pMesh,
    ULONG nMesh,
    ULONG ulMode
    );
 BOOL GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
 BOOL GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                           int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
 BOOL GdiGradientFill( HDC hdc,
                                        PTRIVERTEX pVertex,
                                        ULONG nVertex,
                                        PVOID pMesh,
                                        ULONG nCount,
                                        ULONG ulMode);
 BOOL PlayMetaFileRecord( HDC hdc,
                                            LPHANDLETABLE lpHandleTable,
                                            LPMETARECORD lpMR,
                                            UINT noObjs);
typedef int (* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
 BOOL EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);
typedef int (* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);
 HENHMETAFILE CloseEnhMetaFile( HDC hdc);
 HENHMETAFILE CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
 HENHMETAFILE CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);
static const int CopyEnhMetaFile = CopyEnhMetaFileA;
 HDC CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
 HDC CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);
static const int CreateEnhMetaFile = CreateEnhMetaFileA;
 BOOL DeleteEnhMetaFile( HENHMETAFILE hmf);
 BOOL EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                        LPVOID param, const RECT * lpRect);
 HENHMETAFILE GetEnhMetaFileA( LPCSTR lpName);
 HENHMETAFILE GetEnhMetaFileW( LPCWSTR lpName);
static const int GetEnhMetaFile = GetEnhMetaFileA;
 UINT GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                            UINT nSize,
                                            LPBYTE lpData);
 UINT GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                    UINT cchBuffer,
                                                    LPSTR lpDescription);
 UINT GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                    UINT cchBuffer,
                                                    LPWSTR lpDescription);
static const int GetEnhMetaFileDescription = GetEnhMetaFileDescriptionA;
 UINT GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                UINT nSize,
                                                LPENHMETAHEADER lpEnhMetaHeader);
 UINT GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                    UINT nNumEntries,
                                                    LPPALETTEENTRY lpPaletteEntries);
 UINT GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                    UINT cbBuffer,
                                                    PIXELFORMATDESCRIPTOR *ppfd);
 UINT GetWinMetaFileBits( HENHMETAFILE hemf,
                                            UINT cbData16,
                                            LPBYTE pData16,
                                            INT iMapMode,
                                            HDC hdcRef);
 BOOL PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
 BOOL PlayEnhMetaFileRecord( HDC hdc,
                                                LPHANDLETABLE pht,
                                                const ENHMETARECORD *pmr,
                                                UINT cht);
 HENHMETAFILE SetEnhMetaFileBits( UINT nSize,
                                                    const BYTE * pb);
 HENHMETAFILE SetWinMetaFileBits( UINT nSize,
                                                    const BYTE *lpMeta16Data,
                                                    HDC hdcRef,
                                                    const METAFILEPICT *lpMFP);
 BOOL GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);
 BOOL GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
 BOOL GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
static const int GetTextMetrics = GetTextMetricsA;
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;
 BOOL AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
 BOOL PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
 BOOL GetWorldTransform( HDC hdc, LPXFORM lpxf);
 BOOL SetWorldTransform( HDC hdc, const XFORM * lpxf);
 BOOL ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
 BOOL CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);
 HBITMAP CreateDIBSection( HDC hdc, const BITMAPINFO *lpbmi, UINT usage, void **ppvBits, HANDLE hSection, DWORD offset);
 UINT GetDIBColorTable( HDC hdc,
                                        UINT iStart,
                                        UINT cEntries,
                                        RGBQUAD *prgbq);
 UINT SetDIBColorTable( HDC hdc,
                                        UINT iStart,
                                        UINT cEntries,
                                        const RGBQUAD *prgbq);
static const int CA_NEGATIVE = 0x0001;
static const int CA_LOG_FILTER = 0x0002;
static const int ILLUMINANT_DEVICE_DEFAULT = 0;
static const int ILLUMINANT_A = 1;
static const int ILLUMINANT_B = 2;
static const int ILLUMINANT_C = 3;
static const int ILLUMINANT_D50 = 4;
static const int ILLUMINANT_D55 = 5;
static const int ILLUMINANT_D65 = 6;
static const int ILLUMINANT_D75 = 7;
static const int ILLUMINANT_F2 = 8;
static const int ILLUMINANT_MAX_INDEX = ILLUMINANT_F2;
static const int ILLUMINANT_TUNGSTEN = ILLUMINANT_A;
static const int ILLUMINANT_DAYLIGHT = ILLUMINANT_C;
static const int ILLUMINANT_FLUORESCENT = ILLUMINANT_F2;
static const int ILLUMINANT_NTSC = ILLUMINANT_C;
static const int RGB_GAMMA_MIN = (WORD)02500;
static const int RGB_GAMMA_MAX = (WORD)65000;
static const int REFERENCE_WHITE_MIN = (WORD)6000;
static const int REFERENCE_WHITE_MAX = (WORD)10000;
static const int REFERENCE_BLACK_MIN = (WORD)0;
static const int REFERENCE_BLACK_MAX = (WORD)4000;
static const int COLOR_ADJ_MIN = (SHORT)-100;
static const int COLOR_ADJ_MAX = (SHORT)100;
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;
 BOOL SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
 BOOL GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
 HPALETTE CreateHalftonePalette( HDC hdc);
typedef BOOL (* ABORTPROC)( HDC, int);
typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
} DOCINFOW, *LPDOCINFOW;
typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
static const int DI_APPBANDING = 0x00000001;
static const int DI_ROPS_READ_DESTINATION = 0x00000002;
 int StartDocA( HDC hdc, const DOCINFOA *lpdi);
 int StartDocW( HDC hdc, const DOCINFOW *lpdi);
static const int StartDoc = StartDocA;
 int EndDoc( HDC hdc);
 int StartPage( HDC hdc);
 int EndPage( HDC hdc);
 int AbortDoc( HDC hdc);
 int SetAbortProc( HDC hdc, ABORTPROC proc);
 BOOL AbortPath( HDC hdc);
 BOOL ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
 BOOL BeginPath( HDC hdc);
 BOOL CloseFigure( HDC hdc);
 BOOL EndPath( HDC hdc);
 BOOL FillPath( HDC hdc);
 BOOL FlattenPath( HDC hdc);
 int GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
 HRGN PathToRegion( HDC hdc);
 BOOL PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
 BOOL SelectClipPath( HDC hdc, int mode);
 int SetArcDirection( HDC hdc, int dir);
 BOOL SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
 BOOL StrokeAndFillPath( HDC hdc);
 BOOL StrokePath( HDC hdc);
 BOOL WidenPath( HDC hdc);
 HPEN ExtCreatePen( DWORD iPenStyle,
                                    DWORD cWidth,
                                    const LOGBRUSH *plbrush,
                                    DWORD cStyle,
                                    const DWORD *pstyle);
 BOOL GetMiterLimit( HDC hdc, PFLOAT plimit);
 int GetArcDirection( HDC hdc);
 int GetObjectA( HANDLE h, int c, LPVOID pv);
 int GetObjectW( HANDLE h, int c, LPVOID pv);
static const int GetObject = GetObjectA;
 BOOL MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
 BOOL TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
 BOOL TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);
static const int TextOut = TextOutA;
 BOOL ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
 BOOL ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);
static const int ExtTextOut = ExtTextOutA;
 BOOL PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
 BOOL PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);
static const int PolyTextOut = PolyTextOutA;
 HRGN CreatePolygonRgn( const POINT *pptl,
                                            int cPoint,
                                            int iMode);
 BOOL DPtoLP( HDC hdc, LPPOINT lppt, int c);
 BOOL LPtoDP( HDC hdc, LPPOINT lppt, int c);
 BOOL Polygon( HDC hdc, const POINT *apt, int cpt);
 BOOL Polyline( HDC hdc, const POINT *apt, int cpt);
 BOOL PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
 BOOL PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
 BOOL PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);
 BOOL SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 BOOL SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 BOOL SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 BOOL SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 BOOL OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 BOOL OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 BOOL ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
 BOOL ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
 BOOL SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
 BOOL SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 int GetTextFaceA( HDC hdc, int c, LPSTR lpName);
 int GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
static const int GetTextFace = GetTextFaceA;
static const int FONTMAPPER_MAX = 10;
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;
 DWORD GetKerningPairsA( HDC hdc,
                                            DWORD nPairs,
                                            LPKERNINGPAIR lpKernPair);
 DWORD GetKerningPairsW( HDC hdc,
                                            DWORD nPairs,
                                            LPKERNINGPAIR lpKernPair);
static const int GetKerningPairs = GetKerningPairsA;
 BOOL GetDCOrgEx( HDC hdc, LPPOINT lppt);
 BOOL FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
 BOOL UnrealizeObject( HGDIOBJ h);
 BOOL GdiFlush(void);
 DWORD GdiSetBatchLimit( DWORD dw);
 DWORD GdiGetBatchLimit(void);
static const int ICM_OFF = 1;
static const int ICM_ON = 2;
static const int ICM_QUERY = 3;
static const int ICM_DONE_OUTSIDEDC = 4;
typedef int (* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (* ICMENUMPROCW)(LPWSTR, LPARAM);
static const int ICMENUMPROC = ICMENUMPROCA;
 int SetICMMode( HDC hdc, int mode);
 BOOL CheckColorsInGamut( HDC hdc,
                                                    LPRGBTRIPLE lpRGBTriple,
                                                    LPVOID dlpBuffer,
                                                    DWORD nCount);
 HCOLORSPACE GetColorSpace( HDC hdc);
 BOOL GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                LPLOGCOLORSPACEA lpBuffer,
                                                DWORD nSize);
 BOOL GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                LPLOGCOLORSPACEW lpBuffer,
                                                DWORD nSize);
static const int GetLogColorSpace = GetLogColorSpaceA;
 HCOLORSPACE CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
 HCOLORSPACE CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);
static const int CreateColorSpace = CreateColorSpaceA;
 HCOLORSPACE SetColorSpace( HDC hdc, HCOLORSPACE hcs);
 BOOL DeleteColorSpace( HCOLORSPACE hcs);
 BOOL GetICMProfileA( HDC hdc,
                                                LPDWORD pBufSize,
                                                LPSTR pszFilename);
 BOOL GetICMProfileW( HDC hdc,
                                                LPDWORD pBufSize,
                                                LPWSTR pszFilename);
static const int GetICMProfile = GetICMProfileA;
 BOOL SetICMProfileA( HDC hdc, LPSTR lpFileName);
 BOOL SetICMProfileW( HDC hdc, LPWSTR lpFileName);
static const int SetICMProfile = SetICMProfileA;
 BOOL GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
 BOOL SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
 BOOL ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
 int EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
 int EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);
static const int EnumICMProfiles = EnumICMProfilesA;
 BOOL UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
 BOOL UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
static const int UpdateICMRegKey = UpdateICMRegKeyA;
 BOOL ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
static const int ENHMETA_SIGNATURE = 0x464D4520;
static const int ENHMETA_STOCK_OBJECT = 0x80000000;
static const int EMR_HEADER = 1;
static const int EMR_POLYBEZIER = 2;
static const int EMR_POLYGON = 3;
static const int EMR_POLYLINE = 4;
static const int EMR_POLYBEZIERTO = 5;
static const int EMR_POLYLINETO = 6;
static const int EMR_POLYPOLYLINE = 7;
static const int EMR_POLYPOLYGON = 8;
static const int EMR_SETWINDOWEXTEX = 9;
static const int EMR_SETWINDOWORGEX = 10;
static const int EMR_SETVIEWPORTEXTEX = 11;
static const int EMR_SETVIEWPORTORGEX = 12;
static const int EMR_SETBRUSHORGEX = 13;
static const int EMR_EOF = 14;
static const int EMR_SETPIXELV = 15;
static const int EMR_SETMAPPERFLAGS = 16;
static const int EMR_SETMAPMODE = 17;
static const int EMR_SETBKMODE = 18;
static const int EMR_SETPOLYFILLMODE = 19;
static const int EMR_SETROP2 = 20;
static const int EMR_SETSTRETCHBLTMODE = 21;
static const int EMR_SETTEXTALIGN = 22;
static const int EMR_SETCOLORADJUSTMENT = 23;
static const int EMR_SETTEXTCOLOR = 24;
static const int EMR_SETBKCOLOR = 25;
static const int EMR_OFFSETCLIPRGN = 26;
static const int EMR_MOVETOEX = 27;
static const int EMR_SETMETARGN = 28;
static const int EMR_EXCLUDECLIPRECT = 29;
static const int EMR_INTERSECTCLIPRECT = 30;
static const int EMR_SCALEVIEWPORTEXTEX = 31;
static const int EMR_SCALEWINDOWEXTEX = 32;
static const int EMR_SAVEDC = 33;
static const int EMR_RESTOREDC = 34;
static const int EMR_SETWORLDTRANSFORM = 35;
static const int EMR_MODIFYWORLDTRANSFORM = 36;
static const int EMR_SELECTOBJECT = 37;
static const int EMR_CREATEPEN = 38;
static const int EMR_CREATEBRUSHINDIRECT = 39;
static const int EMR_DELETEOBJECT = 40;
static const int EMR_ANGLEARC = 41;
static const int EMR_ELLIPSE = 42;
static const int EMR_RECTANGLE = 43;
static const int EMR_ROUNDRECT = 44;
static const int EMR_ARC = 45;
static const int EMR_CHORD = 46;
static const int EMR_PIE = 47;
static const int EMR_SELECTPALETTE = 48;
static const int EMR_CREATEPALETTE = 49;
static const int EMR_SETPALETTEENTRIES = 50;
static const int EMR_RESIZEPALETTE = 51;
static const int EMR_REALIZEPALETTE = 52;
static const int EMR_EXTFLOODFILL = 53;
static const int EMR_LINETO = 54;
static const int EMR_ARCTO = 55;
static const int EMR_POLYDRAW = 56;
static const int EMR_SETARCDIRECTION = 57;
static const int EMR_SETMITERLIMIT = 58;
static const int EMR_BEGINPATH = 59;
static const int EMR_ENDPATH = 60;
static const int EMR_CLOSEFIGURE = 61;
static const int EMR_FILLPATH = 62;
static const int EMR_STROKEANDFILLPATH = 63;
static const int EMR_STROKEPATH = 64;
static const int EMR_FLATTENPATH = 65;
static const int EMR_WIDENPATH = 66;
static const int EMR_SELECTCLIPPATH = 67;
static const int EMR_ABORTPATH = 68;
static const int EMR_GDICOMMENT = 70;
static const int EMR_FILLRGN = 71;
static const int EMR_FRAMERGN = 72;
static const int EMR_INVERTRGN = 73;
static const int EMR_PAINTRGN = 74;
static const int EMR_EXTSELECTCLIPRGN = 75;
static const int EMR_BITBLT = 76;
static const int EMR_STRETCHBLT = 77;
static const int EMR_MASKBLT = 78;
static const int EMR_PLGBLT = 79;
static const int EMR_SETDIBITSTODEVICE = 80;
static const int EMR_STRETCHDIBITS = 81;
static const int EMR_EXTCREATEFONTINDIRECTW = 82;
static const int EMR_EXTTEXTOUTA = 83;
static const int EMR_EXTTEXTOUTW = 84;
static const int EMR_POLYBEZIER16 = 85;
static const int EMR_POLYGON16 = 86;
static const int EMR_POLYLINE16 = 87;
static const int EMR_POLYBEZIERTO16 = 88;
static const int EMR_POLYLINETO16 = 89;
static const int EMR_POLYPOLYLINE16 = 90;
static const int EMR_POLYPOLYGON16 = 91;
static const int EMR_POLYDRAW16 = 92;
static const int EMR_CREATEMONOBRUSH = 93;
static const int EMR_CREATEDIBPATTERNBRUSHPT = 94;
static const int EMR_EXTCREATEPEN = 95;
static const int EMR_POLYTEXTOUTA = 96;
static const int EMR_POLYTEXTOUTW = 97;
static const int EMR_SETICMMODE = 98;
static const int EMR_CREATECOLORSPACE = 99;
static const int EMR_SETCOLORSPACE = 100;
static const int EMR_DELETECOLORSPACE = 101;
static const int EMR_GLSRECORD = 102;
static const int EMR_GLSBOUNDEDRECORD = 103;
static const int EMR_PIXELFORMAT = 104;
static const int EMR_RESERVED_105 = 105;
static const int EMR_RESERVED_106 = 106;
static const int EMR_RESERVED_107 = 107;
static const int EMR_RESERVED_108 = 108;
static const int EMR_RESERVED_109 = 109;
static const int EMR_RESERVED_110 = 110;
static const int EMR_COLORCORRECTPALETTE = 111;
static const int EMR_SETICMPROFILEA = 112;
static const int EMR_SETICMPROFILEW = 113;
static const int EMR_ALPHABLEND = 114;
static const int EMR_SETLAYOUT = 115;
static const int EMR_TRANSPARENTBLT = 116;
static const int EMR_RESERVED_117 = 117;
static const int EMR_GRADIENTFILL = 118;
static const int EMR_RESERVED_119 = 119;
static const int EMR_RESERVED_120 = 120;
static const int EMR_COLORMATCHTOTARGETW = 121;
static const int EMR_CREATECOLORSPACEW = 122;
static const int EMR_MIN = 1;
static const int EMR_MAX = 122;
typedef struct tagEMR
{
    DWORD iType; // Enhanced metafile record type
    DWORD nSize; // Length of the record in bytes.
} EMR, *PEMR;
typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString; // Offset to the string
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx; // Offset to the inter-character spacing array.
} EMRTEXT, *PEMRTEXT;
typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,
  EMRSETLAYOUT, *PEMRSETLAYOUT,
  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;
typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;
typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative; // Specifies a relative instance
} EMRRESTOREDC, *PEMRRESTOREDC;
typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection; // Specifies the arc direction in the
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;
typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;
typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject; // Object handle index
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;
typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index, background mode only
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;
typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;
typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];// The peFlags fields do not contain any flags
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;
typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;
typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries; // Number of palette entries
    DWORD offPalEntries; // Offset to the palette entries
    DWORD nSizeLast; // Same as nSize and must be the last DWORD
} EMREOF, *PEMREOF;
typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;
typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;
typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;
typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;
typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;
typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;
typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;
typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;
typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox; // Inclusive-inclusive bounding rectangle
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;
typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;
typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;
typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cptl; // Number of points
    POINTL aptl[1]; // Array of points
    BYTE abTypes[1]; // Array of point types
} EMRPOLYDRAW, *PEMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cpts; // Number of points
    POINTS apts[1]; // Array of points
    BYTE abTypes[1]; // Array of point types
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nPolys; // Number of polys
    DWORD cptl; // Total number of points in all polys
    DWORD aPolyCounts[1]; // Array of point counts for each poly
    POINTL aptl[1]; // Array of points
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nPolys; // Number of polys
    DWORD cpts; // Total number of points in all polys
    DWORD aPolyCounts[1]; // Array of point counts for each poly
    POINTS apts[1]; // Array of points
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;
typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;
typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    DWORD ihBrush; // Brush handle index
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;
typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD cbRgnData; // Size of region data in bytes
    DWORD ihBrush; // Brush handle index
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;
typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData; // Size of region data in bytes
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;
typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD iGraphicsMode; // Current graphics mode
    FLOAT exScale; // X and Y scales from Page units to .01mm units
    FLOAT eyScale; //   if graphics mode is GM_COMPATIBLE.
    EMRTEXT emrtext; // This is followed by the string and spacing
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;
typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD iGraphicsMode; // Current graphics mode
    FLOAT exScale; // X and Y scales from Page units to .01mm units
    FLOAT eyScale; //   if graphics mode is GM_COMPATIBLE.
    LONG cStrings;
    EMRTEXT aemrtext[1]; // Array of EMRTEXT structures.  This is
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;
typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
} EMRBITBLT, *PEMRBITBLT;
typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;
typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask; // Mask bitmap info color table usage
    DWORD offBmiMask; // Offset to the mask BITMAPINFO structure if any
    DWORD cbBmiMask; // Size of the mask BITMAPINFO structure if any
    DWORD offBitsMask; // Offset to the mask bitmap bits if any
    DWORD cbBitsMask; // Size of the mask bitmap bits if any
} EMRMASKBLT, *PEMRMASKBLT;
typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask; // Mask bitmap info color table usage
    DWORD offBmiMask; // Offset to the mask BITMAPINFO structure if any
    DWORD cbBmiMask; // Size of the mask BITMAPINFO structure if any
    DWORD offBitsMask; // Offset to the mask bitmap bits if any
    DWORD cbBitsMask; // Size of the mask bitmap bits if any
} EMRPLGBLT, *PEMRPLGBLT;
typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;
typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont; // Font handle index
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;
typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal; // Palette handle index
    LOGPALETTE lgpl; // The peFlags fields in the palette entries
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;
typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen; // Pen handle index
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;
typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen; // Pen handle index
    DWORD offBmi; // Offset to the BITMAPINFO structure if any
    DWORD cbBmi; // Size of the BITMAPINFO structure if any
    DWORD offBits; // Offset to the brush bitmap bits if any
    DWORD cbBits; // Size of the brush bitmap bits if any
    EXTLOGPEN32 elp; // The extended pen with the style array.
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;
typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    LOGBRUSH32 lb; // The style must be BS_SOLID, BS_HOLLOW,
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;
typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    DWORD iUsage; // Bitmap info color table usage
    DWORD offBmi; // Offset to the BITMAPINFO structure
    DWORD cbBmi; // Size of the BITMAPINFO structure
    DWORD offBits; // Offset to the bitmap bits
    DWORD cbBits; // Size of the bitmap bits
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush; // Brush handle index
    DWORD iUsage; // Bitmap info color table usage
    DWORD offBmi; // Offset to the BITMAPINFO structure
    DWORD cbBmi; // Size of the BITMAPINFO structure
    DWORD offBits; // Offset to the bitmap bits
    DWORD cbBits; // Size of the bitmap bits
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRFORMAT
{
    DWORD dSignature; // Format signature, e.g. ENHMETA_SIGNATURE.
    DWORD nVersion; // Format version number.
    DWORD cbData; // Size of data in bytes.
    DWORD offData; // Offset to data from GDICOMMENT_IDENTIFIER.
} EMRFORMAT, *PEMRFORMAT;
typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;
typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds; // Bounds in recording coordinates
    DWORD cbData; // Size of data in bytes
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;
typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
    LOGCOLORSPACEA lcs; // Ansi version of LOGCOLORSPACE
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape; // Escape code
    INT cbEscData; // Size of escape data
    BYTE EscData[1]; // Escape data
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;
typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape; // Escape code
    INT cbDriver; // Size of driver name
    INT cbEscData; // Size of escape data
    BYTE EscData[1]; // Driver name and Escape data
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;
static const int SETICMPROFILE_EMBEDED = 0x00000001;
typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags; // flags
    DWORD cbName; // Size of desired profile name
    DWORD cbData; // Size of raw profile data if attached
    BYTE Data[1]; // Array size is cbName + cbData
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;
static const int CREATECOLORSPACE_EMBEDED = 0x00000001;
typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS; // ColorSpace handle index
    LOGCOLORSPACEW lcs; // Unicode version of logical color space structure
    DWORD dwFlags; // flags
    DWORD cbData; // size of raw source profile data if attached
    BYTE Data[1]; // Array size is cbData
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;
static const int COLORMATCHTOTARGET_EMBEDED = 0x00000001;
typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction; // CS_ENABLE, CS_DISABLE or CS_DELETE_TRANSFORM
    DWORD dwFlags; // flags
    DWORD cbName; // Size of desired target profile name
    DWORD cbData; // Size of raw target profile data if attached
    BYTE Data[1]; // Array size is cbName + cbData
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;
typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette; // Palette handle index
    DWORD nFirstEntry; // Index of first entry to correct
    DWORD nPalEntries; // Number of palette entries to correct
    DWORD nReserved; // Reserved
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;
typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;
typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds; // Inclusive-inclusive bounds in device units
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc; // Source DC transform
    COLORREF crBkColorSrc; // Source DC BkColor in RGB
    DWORD iUsageSrc; // Source bitmap info color table usage
    DWORD offBmiSrc; // Offset to the source BITMAPINFO structure
    DWORD cbBmiSrc; // Size of the source BITMAPINFO structure
    DWORD offBitsSrc; // Offset to the source bitmap bits
    DWORD cbBitsSrc; // Size of the source bitmap bits
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
static const int GDICOMMENT_IDENTIFIER = 0x43494447;
static const int GDICOMMENT_WINDOWS_METAFILE = 0x80000001;
static const int GDICOMMENT_BEGINGROUP = 0x00000002;
static const int GDICOMMENT_ENDGROUP = 0x00000003;
static const int GDICOMMENT_MULTIFORMATS = 0x40000004;
static const int EPS_SIGNATURE = 0x46535045;
static const int GDICOMMENT_UNICODE_STRING = 0x00000040;
static const int GDICOMMENT_UNICODE_END = 0x00000080;
 BOOL wglCopyContext(HGLRC, HGLRC, UINT);
 HGLRC wglCreateContext(HDC);
 HGLRC wglCreateLayerContext(HDC, int);
 BOOL wglDeleteContext(HGLRC);
 HGLRC wglGetCurrentContext(void);
 HDC wglGetCurrentDC(void);
 PROC wglGetProcAddress(LPCSTR);
 BOOL wglMakeCurrent(HDC, HGLRC);
 BOOL wglShareLists(HGLRC, HGLRC);
 BOOL wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
 BOOL wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
static const int wglUseFontBitmaps = wglUseFontBitmapsA;
 BOOL SwapBuffers(HDC);
typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;
typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;
static const int WGL_FONT_LINES = 0;
static const int WGL_FONT_POLYGONS = 1;
 BOOL wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
 BOOL wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
static const int wglUseFontOutlines = wglUseFontOutlinesA;
typedef struct tagLAYERPLANEDESCRIPTOR { // lpd
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
static const int LPD_DOUBLEBUFFER = 0x00000001;
static const int LPD_STEREO = 0x00000002;
static const int LPD_SUPPORT_GDI = 0x00000010;
static const int LPD_SUPPORT_OPENGL = 0x00000020;
static const int LPD_SHARE_DEPTH = 0x00000040;
static const int LPD_SHARE_STENCIL = 0x00000080;
static const int LPD_SHARE_ACCUM = 0x00000100;
static const int LPD_SWAP_EXCHANGE = 0x00000200;
static const int LPD_SWAP_COPY = 0x00000400;
static const int LPD_TRANSPARENT = 0x00001000;
static const int LPD_TYPE_RGBA = 0;
static const int LPD_TYPE_COLORINDEX = 1;
static const int WGL_SWAP_MAIN_PLANE = 0x00000001;
static const int WGL_SWAP_OVERLAY1 = 0x00000002;
static const int WGL_SWAP_OVERLAY2 = 0x00000004;
static const int WGL_SWAP_OVERLAY3 = 0x00000008;
static const int WGL_SWAP_OVERLAY4 = 0x00000010;
static const int WGL_SWAP_OVERLAY5 = 0x00000020;
static const int WGL_SWAP_OVERLAY6 = 0x00000040;
static const int WGL_SWAP_OVERLAY7 = 0x00000080;
static const int WGL_SWAP_OVERLAY8 = 0x00000100;
static const int WGL_SWAP_OVERLAY9 = 0x00000200;
static const int WGL_SWAP_OVERLAY10 = 0x00000400;
static const int WGL_SWAP_OVERLAY11 = 0x00000800;
static const int WGL_SWAP_OVERLAY12 = 0x00001000;
static const int WGL_SWAP_OVERLAY13 = 0x00002000;
static const int WGL_SWAP_OVERLAY14 = 0x00004000;
static const int WGL_SWAP_OVERLAY15 = 0x00008000;
static const int WGL_SWAP_UNDERLAY1 = 0x00010000;
static const int WGL_SWAP_UNDERLAY2 = 0x00020000;
static const int WGL_SWAP_UNDERLAY3 = 0x00040000;
static const int WGL_SWAP_UNDERLAY4 = 0x00080000;
static const int WGL_SWAP_UNDERLAY5 = 0x00100000;
static const int WGL_SWAP_UNDERLAY6 = 0x00200000;
static const int WGL_SWAP_UNDERLAY7 = 0x00400000;
static const int WGL_SWAP_UNDERLAY8 = 0x00800000;
static const int WGL_SWAP_UNDERLAY9 = 0x01000000;
static const int WGL_SWAP_UNDERLAY10 = 0x02000000;
static const int WGL_SWAP_UNDERLAY11 = 0x04000000;
static const int WGL_SWAP_UNDERLAY12 = 0x08000000;
static const int WGL_SWAP_UNDERLAY13 = 0x10000000;
static const int WGL_SWAP_UNDERLAY14 = 0x20000000;
static const int WGL_SWAP_UNDERLAY15 = 0x40000000;
 BOOL wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
 int wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
 int wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
 BOOL wglRealizeLayerPalette(HDC, int, BOOL);
 BOOL wglSwapLayerBuffers(HDC, UINT);
typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;
static const int WGL_SWAPMULTIPLE_MAX = 16;
 DWORD wglSwapMultipleBuffers(UINT, const WGLSWAP *);
static const int WINUSERAPI = ;
static const int WINABLEAPI = ;
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
typedef MENUTEMPLATEA MENUTEMPLATE;
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LRESULT (* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
typedef INT_PTR (* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);
typedef BOOL (* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
typedef BOOL (* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);
typedef int (* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
typedef BOOL (* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef PROPENUMPROCA PROPENUMPROC;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
typedef BOOL (* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (* NAMEENUMPROCW)(LPWSTR, LPARAM);
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
static const int IS_INTRESOURCE(_r) = ((((ULONG_PTR)(_r)) >> 16) == 0);
static const int MAKEINTRESOURCEA(i) = ((LPSTR)((ULONG_PTR)((WORD)(i))));
static const int MAKEINTRESOURCEW(i) = ((LPWSTR)((ULONG_PTR)((WORD)(i))));
static const int MAKEINTRESOURCE = MAKEINTRESOURCEA;
static const int RT_CURSOR = MAKEINTRESOURCE(1);
static const int RT_BITMAP = MAKEINTRESOURCE(2);
static const int RT_ICON = MAKEINTRESOURCE(3);
static const int RT_MENU = MAKEINTRESOURCE(4);
static const int RT_DIALOG = MAKEINTRESOURCE(5);
static const int RT_STRING = MAKEINTRESOURCE(6);
static const int RT_FONTDIR = MAKEINTRESOURCE(7);
static const int RT_FONT = MAKEINTRESOURCE(8);
static const int RT_ACCELERATOR = MAKEINTRESOURCE(9);
static const int RT_RCDATA = MAKEINTRESOURCE(10);
static const int RT_MESSAGETABLE = MAKEINTRESOURCE(11);
static const int DIFFERENCE = 11;
static const int RT_GROUP_CURSOR = MAKEINTRESOURCE((ULONG_PTR)(RT_CURSOR) + DIFFERENCE);
static const int RT_GROUP_ICON = MAKEINTRESOURCE((ULONG_PTR)(RT_ICON) + DIFFERENCE);
static const int RT_VERSION = MAKEINTRESOURCE(16);
static const int RT_DLGINCLUDE = MAKEINTRESOURCE(17);
static const int RT_PLUGPLAY = MAKEINTRESOURCE(19);
static const int RT_VXD = MAKEINTRESOURCE(20);
static const int RT_ANICURSOR = MAKEINTRESOURCE(21);
static const int RT_ANIICON = MAKEINTRESOURCE(22);
static const int RT_HTML = MAKEINTRESOURCE(23);
static const int RT_MANIFEST = MAKEINTRESOURCE(24);
static const int CREATEPROCESS_MANIFEST_RESOURCE_ID = MAKEINTRESOURCE( 1);
static const int ISOLATIONAWARE_MANIFEST_RESOURCE_ID = MAKEINTRESOURCE(2);
static const int ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = MAKEINTRESOURCE(3);
static const int MINIMUM_RESERVED_MANIFEST_RESOURCE_ID = MAKEINTRESOURCE( 1 );
static const int MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID = MAKEINTRESOURCE(16 );
int
wvsprintfA(
    LPSTR,
    LPCSTR,
    va_list arglist);
int
wvsprintfW(
    LPWSTR,
    LPCWSTR,
    va_list arglist);
static const int wvsprintf = wvsprintfA;
int
wsprintfA(
    LPSTR,
    LPCSTR,
    ...);
int
wsprintfW(
    LPWSTR,
    LPCWSTR,
    ...);
static const int wsprintf = wsprintfA;
static const int SETWALLPAPER_DEFAULT = ((LPWSTR)-1);
static const int SB_HORZ = 0;
static const int SB_VERT = 1;
static const int SB_CTL = 2;
static const int SB_BOTH = 3;
static const int SB_LINEUP = 0;
static const int SB_LINELEFT = 0;
static const int SB_LINEDOWN = 1;
static const int SB_LINERIGHT = 1;
static const int SB_PAGEUP = 2;
static const int SB_PAGELEFT = 2;
static const int SB_PAGEDOWN = 3;
static const int SB_PAGERIGHT = 3;
static const int SB_THUMBPOSITION = 4;
static const int SB_THUMBTRACK = 5;
static const int SB_TOP = 6;
static const int SB_LEFT = 6;
static const int SB_BOTTOM = 7;
static const int SB_RIGHT = 7;
static const int SB_ENDSCROLL = 8;
static const int SW_HIDE = 0;
static const int SW_SHOWNORMAL = 1;
static const int SW_NORMAL = 1;
static const int SW_SHOWMINIMIZED = 2;
static const int SW_SHOWMAXIMIZED = 3;
static const int SW_MAXIMIZE = 3;
static const int SW_SHOWNOACTIVATE = 4;
static const int SW_SHOW = 5;
static const int SW_MINIMIZE = 6;
static const int SW_SHOWMINNOACTIVE = 7;
static const int SW_SHOWNA = 8;
static const int SW_RESTORE = 9;
static const int SW_SHOWDEFAULT = 10;
static const int SW_FORCEMINIMIZE = 11;
static const int SW_MAX = 11;
static const int HIDE_WINDOW = 0;
static const int SHOW_OPENWINDOW = 1;
static const int SHOW_ICONWINDOW = 2;
static const int SHOW_FULLSCREEN = 3;
static const int SHOW_OPENNOACTIVATE = 4;
static const int SW_PARENTCLOSING = 1;
static const int SW_OTHERZOOM = 2;
static const int SW_PARENTOPENING = 3;
static const int SW_OTHERUNZOOM = 4;
static const int AW_HOR_POSITIVE = 0x00000001;
static const int AW_HOR_NEGATIVE = 0x00000002;
static const int AW_VER_POSITIVE = 0x00000004;
static const int AW_VER_NEGATIVE = 0x00000008;
static const int AW_CENTER = 0x00000010;
static const int AW_HIDE = 0x00010000;
static const int AW_ACTIVATE = 0x00020000;
static const int AW_SLIDE = 0x00040000;
static const int AW_BLEND = 0x00080000;
static const int KF_EXTENDED = 0x0100;
static const int KF_DLGMODE = 0x0800;
static const int KF_MENUMODE = 0x1000;
static const int KF_ALTDOWN = 0x2000;
static const int KF_REPEAT = 0x4000;
static const int KF_UP = 0x8000;
static const int VK_LBUTTON = 0x01;
static const int VK_RBUTTON = 0x02;
static const int VK_CANCEL = 0x03;
static const int VK_MBUTTON = 0x04;
static const int VK_XBUTTON1 = 0x05;
static const int VK_XBUTTON2 = 0x06;
static const int VK_BACK = 0x08;
static const int VK_TAB = 0x09;
static const int VK_CLEAR = 0x0C;
static const int VK_RETURN = 0x0D;
static const int VK_SHIFT = 0x10;
static const int VK_CONTROL = 0x11;
static const int VK_MENU = 0x12;
static const int VK_PAUSE = 0x13;
static const int VK_CAPITAL = 0x14;
static const int VK_KANA = 0x15;
static const int VK_HANGEUL = 0x15;
static const int VK_HANGUL = 0x15;
static const int VK_JUNJA = 0x17;
static const int VK_FINAL = 0x18;
static const int VK_HANJA = 0x19;
static const int VK_KANJI = 0x19;
static const int VK_ESCAPE = 0x1B;
static const int VK_CONVERT = 0x1C;
static const int VK_NONCONVERT = 0x1D;
static const int VK_ACCEPT = 0x1E;
static const double VK_MODECHANGE = 0x1F;
static const int VK_SPACE = 0x20;
static const int VK_PRIOR = 0x21;
static const int VK_NEXT = 0x22;
static const int VK_END = 0x23;
static const int VK_HOME = 0x24;
static const int VK_LEFT = 0x25;
static const int VK_UP = 0x26;
static const int VK_RIGHT = 0x27;
static const int VK_DOWN = 0x28;
static const int VK_SELECT = 0x29;
static const int VK_PRINT = 0x2A;
static const int VK_EXECUTE = 0x2B;
static const int VK_SNAPSHOT = 0x2C;
static const int VK_INSERT = 0x2D;
static const int VK_DELETE = 0x2E;
static const double VK_HELP = 0x2F;
static const int VK_LWIN = 0x5B;
static const int VK_RWIN = 0x5C;
static const int VK_APPS = 0x5D;
static const double VK_SLEEP = 0x5F;
static const int VK_NUMPAD0 = 0x60;
static const int VK_NUMPAD1 = 0x61;
static const int VK_NUMPAD2 = 0x62;
static const int VK_NUMPAD3 = 0x63;
static const int VK_NUMPAD4 = 0x64;
static const int VK_NUMPAD5 = 0x65;
static const int VK_NUMPAD6 = 0x66;
static const int VK_NUMPAD7 = 0x67;
static const int VK_NUMPAD8 = 0x68;
static const int VK_NUMPAD9 = 0x69;
static const int VK_MULTIPLY = 0x6A;
static const int VK_ADD = 0x6B;
static const int VK_SEPARATOR = 0x6C;
static const int VK_SUBTRACT = 0x6D;
static const int VK_DECIMAL = 0x6E;
static const double VK_DIVIDE = 0x6F;
static const int VK_F1 = 0x70;
static const int VK_F2 = 0x71;
static const int VK_F3 = 0x72;
static const int VK_F4 = 0x73;
static const int VK_F5 = 0x74;
static const int VK_F6 = 0x75;
static const int VK_F7 = 0x76;
static const int VK_F8 = 0x77;
static const int VK_F9 = 0x78;
static const int VK_F10 = 0x79;
static const int VK_F11 = 0x7A;
static const int VK_F12 = 0x7B;
static const int VK_F13 = 0x7C;
static const int VK_F14 = 0x7D;
static const int VK_F15 = 0x7E;
static const double VK_F16 = 0x7F;
static const int VK_F17 = 0x80;
static const int VK_F18 = 0x81;
static const int VK_F19 = 0x82;
static const int VK_F20 = 0x83;
static const int VK_F21 = 0x84;
static const int VK_F22 = 0x85;
static const int VK_F23 = 0x86;
static const int VK_F24 = 0x87;
static const int VK_NUMLOCK = 0x90;
static const int VK_SCROLL = 0x91;
static const int VK_OEM_NEC_EQUAL = 0x92;
static const int VK_OEM_FJ_JISHO = 0x92;
static const int VK_OEM_FJ_MASSHOU = 0x93;
static const int VK_OEM_FJ_TOUROKU = 0x94;
static const int VK_OEM_FJ_LOYA = 0x95;
static const int VK_OEM_FJ_ROYA = 0x96;
static const int VK_LSHIFT = 0xA0;
static const int VK_RSHIFT = 0xA1;
static const int VK_LCONTROL = 0xA2;
static const int VK_RCONTROL = 0xA3;
static const int VK_LMENU = 0xA4;
static const int VK_RMENU = 0xA5;
static const int VK_BROWSER_BACK = 0xA6;
static const int VK_BROWSER_FORWARD = 0xA7;
static const int VK_BROWSER_REFRESH = 0xA8;
static const int VK_BROWSER_STOP = 0xA9;
static const int VK_BROWSER_SEARCH = 0xAA;
static const int VK_BROWSER_FAVORITES = 0xAB;
static const int VK_BROWSER_HOME = 0xAC;
static const int VK_VOLUME_MUTE = 0xAD;
static const int VK_VOLUME_DOWN = 0xAE;
static const int VK_VOLUME_UP = 0xAF;
static const int VK_MEDIA_NEXT_TRACK = 0xB0;
static const int VK_MEDIA_PREV_TRACK = 0xB1;
static const int VK_MEDIA_STOP = 0xB2;
static const int VK_MEDIA_PLAY_PAUSE = 0xB3;
static const int VK_LAUNCH_MAIL = 0xB4;
static const int VK_LAUNCH_MEDIA_SELECT = 0xB5;
static const int VK_LAUNCH_APP1 = 0xB6;
static const int VK_LAUNCH_APP2 = 0xB7;
static const int VK_OEM_1 = 0xBA;
static const int VK_OEM_PLUS = 0xBB;
static const int VK_OEM_COMMA = 0xBC;
static const int VK_OEM_MINUS = 0xBD;
static const int VK_OEM_PERIOD = 0xBE;
static const int VK_OEM_2 = 0xBF;
static const int VK_OEM_3 = 0xC0;
static const int VK_OEM_4 = 0xDB;
static const int VK_OEM_5 = 0xDC;
static const int VK_OEM_6 = 0xDD;
static const int VK_OEM_7 = 0xDE;
static const int VK_OEM_8 = 0xDF;
static const int VK_OEM_AX = 0xE1;
static const int VK_OEM_102 = 0xE2;
static const int VK_ICO_HELP = 0xE3;
static const int VK_ICO_00 = 0xE4;
static const int VK_PROCESSKEY = 0xE5;
static const int VK_ICO_CLEAR = 0xE6;
static const int VK_PACKET = 0xE7;
static const int VK_OEM_RESET = 0xE9;
static const int VK_OEM_JUMP = 0xEA;
static const int VK_OEM_PA1 = 0xEB;
static const int VK_OEM_PA2 = 0xEC;
static const int VK_OEM_PA3 = 0xED;
static const int VK_OEM_WSCTRL = 0xEE;
static const int VK_OEM_CUSEL = 0xEF;
static const int VK_OEM_ATTN = 0xF0;
static const int VK_OEM_FINISH = 0xF1;
static const int VK_OEM_COPY = 0xF2;
static const int VK_OEM_AUTO = 0xF3;
static const int VK_OEM_ENLW = 0xF4;
static const int VK_OEM_BACKTAB = 0xF5;
static const int VK_ATTN = 0xF6;
static const int VK_CRSEL = 0xF7;
static const int VK_EXSEL = 0xF8;
static const int VK_EREOF = 0xF9;
static const int VK_PLAY = 0xFA;
static const int VK_ZOOM = 0xFB;
static const int VK_NONAME = 0xFC;
static const int VK_PA1 = 0xFD;
static const int VK_OEM_CLEAR = 0xFE;
static const int WH_MIN = (-1);
static const int WH_MSGFILTER = (-1);
static const int WH_JOURNALRECORD = 0;
static const int WH_JOURNALPLAYBACK = 1;
static const int WH_KEYBOARD = 2;
static const int WH_GETMESSAGE = 3;
static const int WH_CALLWNDPROC = 4;
static const int WH_CBT = 5;
static const int WH_SYSMSGFILTER = 6;
static const int WH_MOUSE = 7;
static const int WH_DEBUG = 9;
static const int WH_SHELL = 10;
static const int WH_FOREGROUNDIDLE = 11;
static const int WH_CALLWNDPROCRET = 12;
static const int WH_KEYBOARD_LL = 13;
static const int WH_MOUSE_LL = 14;
static const int WH_MAX = 14;
static const int WH_MINHOOK = WH_MIN;
static const int WH_MAXHOOK = WH_MAX;
static const int HC_ACTION = 0;
static const int HC_GETNEXT = 1;
static const int HC_SKIP = 2;
static const int HC_NOREMOVE = 3;
static const int HC_NOREM = HC_NOREMOVE;
static const int HC_SYSMODALON = 4;
static const int HC_SYSMODALOFF = 5;
static const int HCBT_MOVESIZE = 0;
static const int HCBT_MINMAX = 1;
static const int HCBT_QS = 2;
static const int HCBT_CREATEWND = 3;
static const int HCBT_DESTROYWND = 4;
static const int HCBT_ACTIVATE = 5;
static const int HCBT_CLICKSKIPPED = 6;
static const int HCBT_KEYSKIPPED = 7;
static const int HCBT_SYSCOMMAND = 8;
static const int HCBT_SETFOCUS = 9;
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;
} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
static const int WTS_CONSOLE_CONNECT = 0x1;
static const int WTS_CONSOLE_DISCONNECT = 0x2;
static const int WTS_REMOTE_CONNECT = 0x3;
static const int WTS_REMOTE_DISCONNECT = 0x4;
static const int WTS_SESSION_LOGON = 0x5;
static const int WTS_SESSION_LOGOFF = 0x6;
static const int WTS_SESSION_LOCK = 0x7;
static const int WTS_SESSION_UNLOCK = 0x8;
static const int WTS_SESSION_REMOTE_CONTROL = 0x9;
static const int MSGF_DIALOGBOX = 0;
static const int MSGF_MESSAGEBOX = 1;
static const int MSGF_MENU = 2;
static const int MSGF_SCROLLBAR = 5;
static const int MSGF_NEXTWINDOW = 6;
static const int MSGF_MAX = 8;
static const int MSGF_USER = 4096;
static const int HSHELL_WINDOWCREATED = 1;
static const int HSHELL_WINDOWDESTROYED = 2;
static const int HSHELL_ACTIVATESHELLWINDOW = 3;
static const int HSHELL_WINDOWACTIVATED = 4;
static const int HSHELL_GETMINRECT = 5;
static const int HSHELL_REDRAW = 6;
static const int HSHELL_TASKMAN = 7;
static const int HSHELL_LANGUAGE = 8;
static const int HSHELL_SYSMENU = 9;
static const int HSHELL_ENDTASK = 10;
static const int HSHELL_ACCESSIBILITYSTATE = 11;
static const int HSHELL_APPCOMMAND = 12;
static const int HSHELL_WINDOWREPLACED = 13;
static const int HSHELL_WINDOWREPLACING = 14;
static const int HSHELL_HIGHBIT = 0x8000;
static const int HSHELL_FLASH = (HSHELL_REDRAW|HSHELL_HIGHBIT);
static const int HSHELL_RUDEAPPACTIVATED = (HSHELL_WINDOWACTIVATED|HSHELL_HIGHBIT);
static const int APPCOMMAND_BROWSER_BACKWARD = 1;
static const int APPCOMMAND_BROWSER_FORWARD = 2;
static const int APPCOMMAND_BROWSER_REFRESH = 3;
static const int APPCOMMAND_BROWSER_STOP = 4;
static const int APPCOMMAND_BROWSER_SEARCH = 5;
static const int APPCOMMAND_BROWSER_FAVORITES = 6;
static const int APPCOMMAND_BROWSER_HOME = 7;
static const int APPCOMMAND_VOLUME_MUTE = 8;
static const int APPCOMMAND_VOLUME_DOWN = 9;
static const int APPCOMMAND_VOLUME_UP = 10;
static const int APPCOMMAND_MEDIA_NEXTTRACK = 11;
static const int APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;
static const int APPCOMMAND_MEDIA_STOP = 13;
static const int APPCOMMAND_MEDIA_PLAY_PAUSE = 14;
static const int APPCOMMAND_LAUNCH_MAIL = 15;
static const int APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;
static const int APPCOMMAND_LAUNCH_APP1 = 17;
static const int APPCOMMAND_LAUNCH_APP2 = 18;
static const int APPCOMMAND_BASS_DOWN = 19;
static const int APPCOMMAND_BASS_BOOST = 20;
static const int APPCOMMAND_BASS_UP = 21;
static const int APPCOMMAND_TREBLE_DOWN = 22;
static const int APPCOMMAND_TREBLE_UP = 23;
static const int APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;
static const int APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;
static const int APPCOMMAND_MICROPHONE_VOLUME_UP = 26;
static const int APPCOMMAND_HELP = 27;
static const int APPCOMMAND_FIND = 28;
static const int APPCOMMAND_NEW = 29;
static const int APPCOMMAND_OPEN = 30;
static const int APPCOMMAND_CLOSE = 31;
static const int APPCOMMAND_SAVE = 32;
static const int APPCOMMAND_PRINT = 33;
static const int APPCOMMAND_UNDO = 34;
static const int APPCOMMAND_REDO = 35;
static const int APPCOMMAND_COPY = 36;
static const int APPCOMMAND_CUT = 37;
static const int APPCOMMAND_PASTE = 38;
static const int APPCOMMAND_REPLY_TO_MAIL = 39;
static const int APPCOMMAND_FORWARD_MAIL = 40;
static const int APPCOMMAND_SEND_MAIL = 41;
static const int APPCOMMAND_SPELL_CHECK = 42;
static const int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;
static const int APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;
static const int APPCOMMAND_CORRECTION_LIST = 45;
static const int APPCOMMAND_MEDIA_PLAY = 46;
static const int APPCOMMAND_MEDIA_PAUSE = 47;
static const int APPCOMMAND_MEDIA_RECORD = 48;
static const int APPCOMMAND_MEDIA_FAST_FORWARD = 49;
static const int APPCOMMAND_MEDIA_REWIND = 50;
static const int APPCOMMAND_MEDIA_CHANNEL_UP = 51;
static const int APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;
static const int APPCOMMAND_DELETE = 53;
static const int APPCOMMAND_DWM_FLIP3D = 54;
static const int FAPPCOMMAND_MOUSE = 0x8000;
static const int FAPPCOMMAND_KEY = 0;
static const int FAPPCOMMAND_OEM = 0x1000;
static const int FAPPCOMMAND_MASK = 0xF000;
static const int GET_APPCOMMAND_LPARAM(lParam) = ((short)(HIWORD(lParam) & ~FAPPCOMMAND_MASK));
static const int GET_DEVICE_LPARAM(lParam) = ((WORD)(HIWORD(lParam) & FAPPCOMMAND_MASK));
static const int GET_MOUSEORKEY_LPARAM = GET_DEVICE_LPARAM;
static const int GET_FLAGS_LPARAM(lParam) = (LOWORD(lParam));
static const int GET_KEYSTATE_LPARAM(lParam) = GET_FLAGS_LPARAM(lParam);
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;
typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;
typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;
typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;
typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
static const int LLKHF_EXTENDED = (KF_EXTENDED >> 8);
static const int LLKHF_INJECTED = 0x00000010;
static const int LLKHF_ALTDOWN = (KF_ALTDOWN >> 8);
static const int LLKHF_UP = (KF_UP >> 8);
static const int LLMHF_INJECTED = 0x00000001;
typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;
typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;
typedef struct tagMOUSEHOOKSTRUCTEX
{
    MOUSEHOOKSTRUCT;
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
static const int HKL_PREV = 0;
static const int HKL_NEXT = 1;
static const int KLF_ACTIVATE = 0x00000001;
static const int KLF_SUBSTITUTE_OK = 0x00000002;
static const int KLF_REORDER = 0x00000008;
static const int KLF_REPLACELANG = 0x00000010;
static const int KLF_NOTELLSHELL = 0x00000080;
static const int KLF_SETFORPROCESS = 0x00000100;
static const int KLF_SHIFTLOCK = 0x00010000;
static const int KLF_RESET = 0x40000000;
static const int INPUTLANGCHANGE_SYSCHARSET = 0x0001;
static const int INPUTLANGCHANGE_FORWARD = 0x0002;
static const int INPUTLANGCHANGE_BACKWARD = 0x0004;
static const int KL_NAMELENGTH = 9;
HKL
LoadKeyboardLayoutA(
    LPCSTR pwszKLID,
    UINT Flags);
HKL
LoadKeyboardLayoutW(
    LPCWSTR pwszKLID,
    UINT Flags);
static const int LoadKeyboardLayout = LoadKeyboardLayoutA;
HKL
ActivateKeyboardLayout(
    HKL hkl,
    UINT Flags);
int
ToUnicodeEx(
    UINT wVirtKey,
    UINT wScanCode,
    const BYTE *lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags,
    HKL dwhkl);
BOOL
UnloadKeyboardLayout(
    HKL hkl);
BOOL
GetKeyboardLayoutNameA(
    LPSTR pwszKLID);
BOOL
GetKeyboardLayoutNameW(
    LPWSTR pwszKLID);
static const int GetKeyboardLayoutName = GetKeyboardLayoutNameA;
int
GetKeyboardLayoutList(
    int nBuff,
    HKL *lpList);
HKL
GetKeyboardLayout(
    DWORD idThread);
typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;
static const int GMMP_USE_DISPLAY_POINTS = 1;
static const int GMMP_USE_HIGH_RESOLUTION_POINTS = 2;
int
GetMouseMovePointsEx(
    UINT cbSize,
    LPMOUSEMOVEPOINT lppt,
    LPMOUSEMOVEPOINT lpptBuf,
    int nBufPoints,
    DWORD resolution);
static const long DESKTOP_READOBJECTS = 0x0001L;
static const long DESKTOP_CREATEWINDOW = 0x0002L;
static const long DESKTOP_CREATEMENU = 0x0004L;
static const long DESKTOP_HOOKCONTROL = 0x0008L;
static const long DESKTOP_JOURNALRECORD = 0x0010L;
static const long DESKTOP_JOURNALPLAYBACK = 0x0020L;
static const long DESKTOP_ENUMERATE = 0x0040L;
static const long DESKTOP_WRITEOBJECTS = 0x0080L;
static const long DESKTOP_SWITCHDESKTOP = 0x0100L;
static const long DF_ALLOWOTHERACCOUNTHOOK = 0x0001L;
HDESK
CreateDesktopA(
    LPCSTR lpszDesktop,
    LPCSTR lpszDevice,
    DEVMODEA* pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
HDESK
CreateDesktopW(
    LPCWSTR lpszDesktop,
    LPCWSTR lpszDevice,
    DEVMODEW* pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
static const int CreateDesktop = CreateDesktopA;
HDESK
CreateDesktopExA(
    LPCSTR lpszDesktop,
    LPCSTR lpszDevice,
    DEVMODEA* pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
    ULONG ulHeapSize,
    PVOID pvoid);
HDESK
CreateDesktopExW(
    LPCWSTR lpszDesktop,
    LPCWSTR lpszDevice,
    DEVMODEW* pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
    ULONG ulHeapSize,
    PVOID pvoid);
static const int CreateDesktopEx = CreateDesktopExA;
HDESK
OpenDesktopA(
    LPCSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
HDESK
OpenDesktopW(
    LPCWSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
static const int OpenDesktop = OpenDesktopA;
HDESK
OpenInputDesktop(
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
BOOL
EnumDesktopsA(
    HWINSTA hwinsta,
    DESKTOPENUMPROCA lpEnumFunc,
    LPARAM lParam);
BOOL
EnumDesktopsW(
    HWINSTA hwinsta,
    DESKTOPENUMPROCW lpEnumFunc,
    LPARAM lParam);
static const int EnumDesktops = EnumDesktopsA;
BOOL
EnumDesktopWindows(
    HDESK hDesktop,
    WNDENUMPROC lpfn,
    LPARAM lParam);
BOOL
SwitchDesktop(
    HDESK hDesktop);
BOOL
SetThreadDesktop(
     HDESK hDesktop);
BOOL
CloseDesktop(
    HDESK hDesktop);
HDESK
GetThreadDesktop(
    DWORD dwThreadId);
static const long WINSTA_ENUMDESKTOPS = 0x0001L;
static const long WINSTA_READATTRIBUTES = 0x0002L;
static const long WINSTA_ACCESSCLIPBOARD = 0x0004L;
static const long WINSTA_CREATEDESKTOP = 0x0008L;
static const long WINSTA_WRITEATTRIBUTES = 0x0010L;
static const long WINSTA_ACCESSGLOBALATOMS = 0x0020L;
static const long WINSTA_EXITWINDOWS = 0x0040L;
static const long WINSTA_ENUMERATE = 0x0100L;
static const long WINSTA_READSCREEN = 0x0200L;
static const int WINSTA_ALL_ACCESS = (WINSTA_ENUMDESKTOPS | WINSTA_READATTRIBUTES | WINSTA_ACCESSCLIPBOARD | WINSTA_CREATEDESKTOP | WINSTA_WRITEATTRIBUTES | WINSTA_ACCESSGLOBALATOMS | WINSTA_EXITWINDOWS | WINSTA_ENUMERATE | WINSTA_READSCREEN);
static const int CWF_CREATE_ONLY = 0x00000001;
static const long WSF_VISIBLE = 0x0001L;
HWINSTA
CreateWindowStationA(
    LPCSTR lpwinsta,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
HWINSTA
CreateWindowStationW(
    LPCWSTR lpwinsta,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
static const int CreateWindowStation = CreateWindowStationA;
HWINSTA
OpenWindowStationA(
    LPCSTR lpszWinSta,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
HWINSTA
OpenWindowStationW(
    LPCWSTR lpszWinSta,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
static const int OpenWindowStation = OpenWindowStationA;
BOOL
EnumWindowStationsA(
    WINSTAENUMPROCA lpEnumFunc,
    LPARAM lParam);
BOOL
EnumWindowStationsW(
    WINSTAENUMPROCW lpEnumFunc,
    LPARAM lParam);
static const int EnumWindowStations = EnumWindowStationsA;
BOOL
CloseWindowStation(
    HWINSTA hWinSta);
BOOL
SetProcessWindowStation(
    HWINSTA hWinSta);
HWINSTA
GetProcessWindowStation(
    void);
BOOL
SetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID);
BOOL
GetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
static const int UOI_FLAGS = 1;
static const int UOI_NAME = 2;
static const int UOI_TYPE = 3;
static const int UOI_USER_SID = 4;
static const int UOI_HEAPSIZE = 5;
static const int UOI_IO = 6;
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;
BOOL
GetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
BOOL
GetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
static const int GetUserObjectInformation = GetUserObjectInformationA;
BOOL
SetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);
BOOL
SetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);
static const int SetUserObjectInformation = SetUserObjectInformationA;
typedef struct tagWNDCLASSEXA {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;
typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;
typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
BOOL
IsHungAppWindow(
    HWND hwnd);
void
DisableProcessWindowsGhosting(
    void);
typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
} MSG, *PMSG, *NPMSG, *LPMSG;
static const int POINTSTOPOINT(pt,pts) = { (pt).x = (LONG)(SHORT)LOWORD(*(LONG*)&pts); (pt).y = (LONG)(SHORT)HIWORD(*(LONG*)&pts); };
static const int POINTTOPOINTS(pt) = (MAKELONG((short)((pt).x), (short)((pt).y)));
static const int MAKEWPARAM(l,h) = ((WPARAM)(DWORD)MAKELONG(l, h));
static const int MAKELPARAM(l,h) = ((LPARAM)(DWORD)MAKELONG(l, h));
static const int MAKELRESULT(l,h) = ((LRESULT)(DWORD)MAKELONG(l, h));
static const int GWL_WNDPROC = (-4);
static const int GWL_HINSTANCE = (-6);
static const int GWL_HWNDPARENT = (-8);
static const int GWL_STYLE = (-16);
static const int GWL_EXSTYLE = (-20);
static const int GWL_USERDATA = (-21);
static const int GWL_ID = (-12);
static const int GWLP_WNDPROC = (-4);
static const int GWLP_HINSTANCE = (-6);
static const int GWLP_HWNDPARENT = (-8);
static const int GWLP_USERDATA = (-21);
static const int GWLP_ID = (-12);
static const int GCL_MENUNAME = (-8);
static const int GCL_HBRBACKGROUND = (-10);
static const int GCL_HCURSOR = (-12);
static const int GCL_HICON = (-14);
static const int GCL_HMODULE = (-16);
static const int GCL_CBWNDEXTRA = (-18);
static const int GCL_CBCLSEXTRA = (-20);
static const int GCL_WNDPROC = (-24);
static const int GCL_STYLE = (-26);
static const int GCW_ATOM = (-32);
static const int GCL_HICONSM = (-34);
static const int GCLP_MENUNAME = (-8);
static const int GCLP_HBRBACKGROUND = (-10);
static const int GCLP_HCURSOR = (-12);
static const int GCLP_HICON = (-14);
static const int GCLP_HMODULE = (-16);
static const int GCLP_WNDPROC = (-24);
static const int GCLP_HICONSM = (-34);
static const int WM_NULL = 0x0000;
static const int WM_CREATE = 0x0001;
static const int WM_DESTROY = 0x0002;
static const int WM_MOVE = 0x0003;
static const int WM_SIZE = 0x0005;
static const int WM_ACTIVATE = 0x0006;
static const int WA_INACTIVE = 0;
static const int WA_ACTIVE = 1;
static const int WA_CLICKACTIVE = 2;
static const int WM_SETFOCUS = 0x0007;
static const int WM_KILLFOCUS = 0x0008;
static const int WM_ENABLE = 0x000A;
static const int WM_SETREDRAW = 0x000B;
static const int WM_SETTEXT = 0x000C;
static const int WM_GETTEXT = 0x000D;
static const int WM_GETTEXTLENGTH = 0x000E;
static const double WM_PAINT = 0x000F;
static const int WM_CLOSE = 0x0010;
static const int WM_QUERYENDSESSION = 0x0011;
static const int WM_QUERYOPEN = 0x0013;
static const int WM_ENDSESSION = 0x0016;
static const int WM_QUIT = 0x0012;
static const int WM_ERASEBKGND = 0x0014;
static const int WM_SYSCOLORCHANGE = 0x0015;
static const int WM_SHOWWINDOW = 0x0018;
static const int WM_WININICHANGE = 0x001A;
static const int WM_SETTINGCHANGE = WM_WININICHANGE;
static const int WM_DEVMODECHANGE = 0x001B;
static const int WM_ACTIVATEAPP = 0x001C;
static const int WM_FONTCHANGE = 0x001D;
static const int WM_TIMECHANGE = 0x001E;
static const double WM_CANCELMODE = 0x001F;
static const int WM_SETCURSOR = 0x0020;
static const int WM_MOUSEACTIVATE = 0x0021;
static const int WM_CHILDACTIVATE = 0x0022;
static const int WM_QUEUESYNC = 0x0023;
static const int WM_GETMINMAXINFO = 0x0024;
typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
static const int WM_PAINTICON = 0x0026;
static const int WM_ICONERASEBKGND = 0x0027;
static const int WM_NEXTDLGCTL = 0x0028;
static const int WM_SPOOLERSTATUS = 0x002A;
static const int WM_DRAWITEM = 0x002B;
static const int WM_MEASUREITEM = 0x002C;
static const int WM_DELETEITEM = 0x002D;
static const int WM_VKEYTOITEM = 0x002E;
static const double WM_CHARTOITEM = 0x002F;
static const int WM_SETFONT = 0x0030;
static const int WM_GETFONT = 0x0031;
static const int WM_SETHOTKEY = 0x0032;
static const int WM_GETHOTKEY = 0x0033;
static const int WM_QUERYDRAGICON = 0x0037;
static const int WM_COMPAREITEM = 0x0039;
static const int WM_GETOBJECT = 0x003D;
static const int WM_COMPACTING = 0x0041;
static const int WM_COMMNOTIFY = 0x0044;
static const int WM_WINDOWPOSCHANGING = 0x0046;
static const int WM_WINDOWPOSCHANGED = 0x0047;
static const int WM_POWER = 0x0048;
static const int PWR_OK = 1;
static const int PWR_FAIL = (-1);
static const int PWR_SUSPENDREQUEST = 1;
static const int PWR_SUSPENDRESUME = 2;
static const int PWR_CRITICALRESUME = 3;
static const int WM_COPYDATA = 0x004A;
static const int WM_CANCELJOURNAL = 0x004B;
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;
typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
static const int WM_NOTIFY = 0x004E;
static const int WM_INPUTLANGCHANGEREQUEST = 0x0050;
static const int WM_INPUTLANGCHANGE = 0x0051;
static const int WM_TCARD = 0x0052;
static const int WM_HELP = 0x0053;
static const int WM_USERCHANGED = 0x0054;
static const int WM_NOTIFYFORMAT = 0x0055;
static const int NFR_ANSI = 1;
static const int NFR_UNICODE = 2;
static const int NF_QUERY = 3;
static const int NF_REQUERY = 4;
static const int WM_CONTEXTMENU = 0x007B;
static const int WM_STYLECHANGING = 0x007C;
static const int WM_STYLECHANGED = 0x007D;
static const int WM_DISPLAYCHANGE = 0x007E;
static const double WM_GETICON = 0x007F;
static const int WM_SETICON = 0x0080;
static const int WM_NCCREATE = 0x0081;
static const int WM_NCDESTROY = 0x0082;
static const int WM_NCCALCSIZE = 0x0083;
static const int WM_NCHITTEST = 0x0084;
static const int WM_NCPAINT = 0x0085;
static const int WM_NCACTIVATE = 0x0086;
static const int WM_GETDLGCODE = 0x0087;
static const int WM_SYNCPAINT = 0x0088;
static const int WM_NCMOUSEMOVE = 0x00A0;
static const int WM_NCLBUTTONDOWN = 0x00A1;
static const int WM_NCLBUTTONUP = 0x00A2;
static const int WM_NCLBUTTONDBLCLK = 0x00A3;
static const int WM_NCRBUTTONDOWN = 0x00A4;
static const int WM_NCRBUTTONUP = 0x00A5;
static const int WM_NCRBUTTONDBLCLK = 0x00A6;
static const int WM_NCMBUTTONDOWN = 0x00A7;
static const int WM_NCMBUTTONUP = 0x00A8;
static const int WM_NCMBUTTONDBLCLK = 0x00A9;
static const int WM_NCXBUTTONDOWN = 0x00AB;
static const int WM_NCXBUTTONUP = 0x00AC;
static const int WM_NCXBUTTONDBLCLK = 0x00AD;
static const int WM_INPUT_DEVICE_CHANGE = 0x00FE;
static const int WM_INPUT = 0x00FF;
static const int WM_KEYFIRST = 0x0100;
static const int WM_KEYDOWN = 0x0100;
static const int WM_KEYUP = 0x0101;
static const int WM_CHAR = 0x0102;
static const int WM_DEADCHAR = 0x0103;
static const int WM_SYSKEYDOWN = 0x0104;
static const int WM_SYSKEYUP = 0x0105;
static const int WM_SYSCHAR = 0x0106;
static const int WM_SYSDEADCHAR = 0x0107;
static const int WM_UNICHAR = 0x0109;
static const int WM_KEYLAST = 0x0109;
static const int UNICODE_NOCHAR = 0xFFFF;
static const int WM_IME_STARTCOMPOSITION = 0x010D;
static const int WM_IME_ENDCOMPOSITION = 0x010E;
static const double WM_IME_COMPOSITION = 0x010F;
static const double WM_IME_KEYLAST = 0x010F;
static const int WM_INITDIALOG = 0x0110;
static const int WM_COMMAND = 0x0111;
static const int WM_SYSCOMMAND = 0x0112;
static const int WM_TIMER = 0x0113;
static const int WM_HSCROLL = 0x0114;
static const int WM_VSCROLL = 0x0115;
static const int WM_INITMENU = 0x0116;
static const int WM_INITMENUPOPUP = 0x0117;
static const int WM_GESTURE = 0x0119;
static const int WM_GESTURENOTIFY = 0x011A;
static const double WM_MENUSELECT = 0x011F;
static const int WM_MENUCHAR = 0x0120;
static const int WM_ENTERIDLE = 0x0121;
static const int WM_MENURBUTTONUP = 0x0122;
static const int WM_MENUDRAG = 0x0123;
static const int WM_MENUGETOBJECT = 0x0124;
static const int WM_UNINITMENUPOPUP = 0x0125;
static const int WM_MENUCOMMAND = 0x0126;
static const int WM_CHANGEUISTATE = 0x0127;
static const int WM_UPDATEUISTATE = 0x0128;
static const int WM_QUERYUISTATE = 0x0129;
static const int UIS_SET = 1;
static const int UIS_CLEAR = 2;
static const int UIS_INITIALIZE = 3;
static const int UISF_HIDEFOCUS = 0x1;
static const int UISF_HIDEACCEL = 0x2;
static const int UISF_ACTIVE = 0x4;
static const int WM_CTLCOLORMSGBOX = 0x0132;
static const int WM_CTLCOLOREDIT = 0x0133;
static const int WM_CTLCOLORLISTBOX = 0x0134;
static const int WM_CTLCOLORBTN = 0x0135;
static const int WM_CTLCOLORDLG = 0x0136;
static const int WM_CTLCOLORSCROLLBAR = 0x0137;
static const int WM_CTLCOLORSTATIC = 0x0138;
static const int MN_GETHMENU = 0x01E1;
static const int WM_MOUSEFIRST = 0x0200;
static const int WM_MOUSEMOVE = 0x0200;
static const int WM_LBUTTONDOWN = 0x0201;
static const int WM_LBUTTONUP = 0x0202;
static const int WM_LBUTTONDBLCLK = 0x0203;
static const int WM_RBUTTONDOWN = 0x0204;
static const int WM_RBUTTONUP = 0x0205;
static const int WM_RBUTTONDBLCLK = 0x0206;
static const int WM_MBUTTONDOWN = 0x0207;
static const int WM_MBUTTONUP = 0x0208;
static const int WM_MBUTTONDBLCLK = 0x0209;
static const int WM_MOUSEWHEEL = 0x020A;
static const int WM_XBUTTONDOWN = 0x020B;
static const int WM_XBUTTONUP = 0x020C;
static const int WM_XBUTTONDBLCLK = 0x020D;
static const int WM_MOUSEHWHEEL = 0x020E;
static const int WM_MOUSELAST = 0x020E;
static const int WHEEL_DELTA = 120;
static const int GET_WHEEL_DELTA_WPARAM(wParam) = ((short)HIWORD(wParam));
static const int WHEEL_PAGESCROLL = (UINT_MAX);
static const int GET_KEYSTATE_WPARAM(wParam) = (LOWORD(wParam));
static const int GET_NCHITTEST_WPARAM(wParam) = ((short)LOWORD(wParam));
static const int GET_XBUTTON_WPARAM(wParam) = (HIWORD(wParam));
static const int XBUTTON1 = 0x0001;
static const int XBUTTON2 = 0x0002;
static const int WM_PARENTNOTIFY = 0x0210;
static const int WM_ENTERMENULOOP = 0x0211;
static const int WM_EXITMENULOOP = 0x0212;
static const int WM_NEXTMENU = 0x0213;
static const int WM_SIZING = 0x0214;
static const int WM_CAPTURECHANGED = 0x0215;
static const int WM_MOVING = 0x0216;
static const int WM_POWERBROADCAST = 0x0218;
static const int PBT_APMQUERYSUSPEND = 0x0000;
static const int PBT_APMQUERYSTANDBY = 0x0001;
static const int PBT_APMQUERYSUSPENDFAILED = 0x0002;
static const int PBT_APMQUERYSTANDBYFAILED = 0x0003;
static const int PBT_APMSUSPEND = 0x0004;
static const int PBT_APMSTANDBY = 0x0005;
static const int PBT_APMRESUMECRITICAL = 0x0006;
static const int PBT_APMRESUMESUSPEND = 0x0007;
static const int PBT_APMRESUMESTANDBY = 0x0008;
static const int PBTF_APMRESUMEFROMFAILURE = 0x00000001;
static const int PBT_APMBATTERYLOW = 0x0009;
static const int PBT_APMPOWERSTATUSCHANGE = 0x000A;
static const int PBT_APMOEMEVENT = 0x000B;
static const int PBT_APMRESUMEAUTOMATIC = 0x0012;
static const int PBT_POWERSETTINGCHANGE = 0x8013;
typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;
static const int WM_DEVICECHANGE = 0x0219;
static const int WM_MDICREATE = 0x0220;
static const int WM_MDIDESTROY = 0x0221;
static const int WM_MDIACTIVATE = 0x0222;
static const int WM_MDIRESTORE = 0x0223;
static const int WM_MDINEXT = 0x0224;
static const int WM_MDIMAXIMIZE = 0x0225;
static const int WM_MDITILE = 0x0226;
static const int WM_MDICASCADE = 0x0227;
static const int WM_MDIICONARRANGE = 0x0228;
static const int WM_MDIGETACTIVE = 0x0229;
static const int WM_MDISETMENU = 0x0230;
static const int WM_ENTERSIZEMOVE = 0x0231;
static const int WM_EXITSIZEMOVE = 0x0232;
static const int WM_DROPFILES = 0x0233;
static const int WM_MDIREFRESHMENU = 0x0234;
static const int WM_TOUCH = 0x0240;
static const int WM_IME_SETCONTEXT = 0x0281;
static const int WM_IME_NOTIFY = 0x0282;
static const int WM_IME_CONTROL = 0x0283;
static const int WM_IME_COMPOSITIONFULL = 0x0284;
static const int WM_IME_SELECT = 0x0285;
static const int WM_IME_CHAR = 0x0286;
static const int WM_IME_REQUEST = 0x0288;
static const int WM_IME_KEYDOWN = 0x0290;
static const int WM_IME_KEYUP = 0x0291;
static const int WM_MOUSEHOVER = 0x02A1;
static const int WM_MOUSELEAVE = 0x02A3;
static const int WM_NCMOUSEHOVER = 0x02A0;
static const int WM_NCMOUSELEAVE = 0x02A2;
static const int WM_WTSSESSION_CHANGE = 0x02B1;
static const int WM_TABLET_FIRST = 0x02c0;
static const int WM_TABLET_LAST = 0x02df;
static const int WM_CUT = 0x0300;
static const int WM_COPY = 0x0301;
static const int WM_PASTE = 0x0302;
static const int WM_CLEAR = 0x0303;
static const int WM_UNDO = 0x0304;
static const int WM_RENDERFORMAT = 0x0305;
static const int WM_RENDERALLFORMATS = 0x0306;
static const int WM_DESTROYCLIPBOARD = 0x0307;
static const int WM_DRAWCLIPBOARD = 0x0308;
static const int WM_PAINTCLIPBOARD = 0x0309;
static const int WM_VSCROLLCLIPBOARD = 0x030A;
static const int WM_SIZECLIPBOARD = 0x030B;
static const int WM_ASKCBFORMATNAME = 0x030C;
static const int WM_CHANGECBCHAIN = 0x030D;
static const int WM_HSCROLLCLIPBOARD = 0x030E;
static const double WM_QUERYNEWPALETTE = 0x030F;
static const int WM_PALETTEISCHANGING = 0x0310;
static const int WM_PALETTECHANGED = 0x0311;
static const int WM_HOTKEY = 0x0312;
static const int WM_PRINT = 0x0317;
static const int WM_PRINTCLIENT = 0x0318;
static const int WM_APPCOMMAND = 0x0319;
static const int WM_THEMECHANGED = 0x031A;
static const int WM_CLIPBOARDUPDATE = 0x031D;
static const int WM_DWMCOMPOSITIONCHANGED = 0x031E;
static const double WM_DWMNCRENDERINGCHANGED = 0x031F;
static const int WM_DWMCOLORIZATIONCOLORCHANGED = 0x0320;
static const int WM_DWMWINDOWMAXIMIZEDCHANGE = 0x0321;
static const int WM_DWMSENDICONICTHUMBNAIL = 0x0323;
static const int WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x0326;
static const double WM_GETTITLEBARINFOEX = 0x033F;
static const int WM_HANDHELDFIRST = 0x0358;
static const double WM_HANDHELDLAST = 0x035F;
static const int WM_AFXFIRST = 0x0360;
static const double WM_AFXLAST = 0x037F;
static const int WM_PENWINFIRST = 0x0380;
static const double WM_PENWINLAST = 0x038F;
static const int WM_APP = 0x8000;
static const int WM_USER = 0x0400;
static const int WMSZ_LEFT = 1;
static const int WMSZ_RIGHT = 2;
static const int WMSZ_TOP = 3;
static const int WMSZ_TOPLEFT = 4;
static const int WMSZ_TOPRIGHT = 5;
static const int WMSZ_BOTTOM = 6;
static const int WMSZ_BOTTOMLEFT = 7;
static const int WMSZ_BOTTOMRIGHT = 8;
static const int HTERROR = (-2);
static const int HTTRANSPARENT = (-1);
static const int HTNOWHERE = 0;
static const int HTCLIENT = 1;
static const int HTCAPTION = 2;
static const int HTSYSMENU = 3;
static const int HTGROWBOX = 4;
static const int HTSIZE = HTGROWBOX;
static const int HTMENU = 5;
static const int HTHSCROLL = 6;
static const int HTVSCROLL = 7;
static const int HTMINBUTTON = 8;
static const int HTMAXBUTTON = 9;
static const int HTLEFT = 10;
static const int HTRIGHT = 11;
static const int HTTOP = 12;
static const int HTTOPLEFT = 13;
static const int HTTOPRIGHT = 14;
static const int HTBOTTOM = 15;
static const int HTBOTTOMLEFT = 16;
static const int HTBOTTOMRIGHT = 17;
static const int HTBORDER = 18;
static const int HTREDUCE = HTMINBUTTON;
static const int HTZOOM = HTMAXBUTTON;
static const int HTSIZEFIRST = HTLEFT;
static const int HTSIZELAST = HTBOTTOMRIGHT;
static const int HTOBJECT = 19;
static const int HTCLOSE = 20;
static const int HTHELP = 21;
static const int SMTO_NORMAL = 0x0000;
static const int SMTO_BLOCK = 0x0001;
static const int SMTO_ABORTIFHUNG = 0x0002;
static const int SMTO_NOTIMEOUTIFNOTHUNG = 0x0008;
static const int SMTO_ERRORONEXIT = 0x0020;
static const int MA_ACTIVATE = 1;
static const int MA_ACTIVATEANDEAT = 2;
static const int MA_NOACTIVATE = 3;
static const int MA_NOACTIVATEANDEAT = 4;
static const int ICON_SMALL = 0;
static const int ICON_BIG = 1;
static const int ICON_SMALL2 = 2;
UINT
RegisterWindowMessageA(
    LPCSTR lpString);
UINT
RegisterWindowMessageW(
    LPCWSTR lpString);
static const int RegisterWindowMessage = RegisterWindowMessageA;
static const int SIZE_RESTORED = 0;
static const int SIZE_MINIMIZED = 1;
static const int SIZE_MAXIMIZED = 2;
static const int SIZE_MAXSHOW = 3;
static const int SIZE_MAXHIDE = 4;
static const int SIZENORMAL = SIZE_RESTORED;
static const int SIZEICONIC = SIZE_MINIMIZED;
static const int SIZEFULLSCREEN = SIZE_MAXIMIZED;
static const int SIZEZOOMSHOW = SIZE_MAXSHOW;
static const int SIZEZOOMHIDE = SIZE_MAXHIDE;
typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;
typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
static const int WVR_ALIGNTOP = 0x0010;
static const int WVR_ALIGNLEFT = 0x0020;
static const int WVR_ALIGNBOTTOM = 0x0040;
static const int WVR_ALIGNRIGHT = 0x0080;
static const int WVR_HREDRAW = 0x0100;
static const int WVR_VREDRAW = 0x0200;
static const int WVR_REDRAW = (WVR_HREDRAW | WVR_VREDRAW);
static const int WVR_VALIDRECTS = 0x0400;
static const int MK_LBUTTON = 0x0001;
static const int MK_RBUTTON = 0x0002;
static const int MK_SHIFT = 0x0004;
static const int MK_CONTROL = 0x0008;
static const int MK_MBUTTON = 0x0010;
static const int MK_XBUTTON1 = 0x0020;
static const int MK_XBUTTON2 = 0x0040;
static const int TME_HOVER = 0x00000001;
static const int TME_LEAVE = 0x00000002;
static const int TME_NONCLIENT = 0x00000010;
static const int TME_QUERY = 0x40000000;
static const int TME_CANCEL = 0x80000000;
static const int HOVER_DEFAULT = 0xFFFFFFFF;
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;
BOOL
TrackMouseEvent(
    LPTRACKMOUSEEVENT lpEventTrack);
static const long WS_OVERLAPPED = 0x00000000L;
static const long WS_POPUP = 0x80000000L;
static const long WS_CHILD = 0x40000000L;
static const long WS_MINIMIZE = 0x20000000L;
static const long WS_VISIBLE = 0x10000000L;
static const long WS_DISABLED = 0x08000000L;
static const long WS_CLIPSIBLINGS = 0x04000000L;
static const long WS_CLIPCHILDREN = 0x02000000L;
static const long WS_MAXIMIZE = 0x01000000L;
static const long WS_CAPTION = 0x00C00000L;
static const long WS_BORDER = 0x00800000L;
static const long WS_DLGFRAME = 0x00400000L;
static const long WS_VSCROLL = 0x00200000L;
static const long WS_HSCROLL = 0x00100000L;
static const long WS_SYSMENU = 0x00080000L;
static const long WS_THICKFRAME = 0x00040000L;
static const long WS_GROUP = 0x00020000L;
static const long WS_TABSTOP = 0x00010000L;
static const long WS_MINIMIZEBOX = 0x00020000L;
static const long WS_MAXIMIZEBOX = 0x00010000L;
static const int WS_TILED = WS_OVERLAPPED;
static const int WS_ICONIC = WS_MINIMIZE;
static const int WS_SIZEBOX = WS_THICKFRAME;
static const int WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW;
static const int WS_OVERLAPPEDWINDOW = (WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX);
static const int WS_POPUPWINDOW = (WS_POPUP | WS_BORDER | WS_SYSMENU);
static const int WS_CHILDWINDOW = (WS_CHILD);
static const long WS_EX_DLGMODALFRAME = 0x00000001L;
static const long WS_EX_NOPARENTNOTIFY = 0x00000004L;
static const long WS_EX_TOPMOST = 0x00000008L;
static const long WS_EX_ACCEPTFILES = 0x00000010L;
static const long WS_EX_TRANSPARENT = 0x00000020L;
static const long WS_EX_MDICHILD = 0x00000040L;
static const long WS_EX_TOOLWINDOW = 0x00000080L;
static const long WS_EX_WINDOWEDGE = 0x00000100L;
static const long WS_EX_CLIENTEDGE = 0x00000200L;
static const long WS_EX_CONTEXTHELP = 0x00000400L;
static const long WS_EX_RIGHT = 0x00001000L;
static const long WS_EX_LEFT = 0x00000000L;
static const long WS_EX_RTLREADING = 0x00002000L;
static const long WS_EX_LTRREADING = 0x00000000L;
static const long WS_EX_LEFTSCROLLBAR = 0x00004000L;
static const long WS_EX_RIGHTSCROLLBAR = 0x00000000L;
static const long WS_EX_CONTROLPARENT = 0x00010000L;
static const long WS_EX_STATICEDGE = 0x00020000L;
static const long WS_EX_APPWINDOW = 0x00040000L;
static const int WS_EX_OVERLAPPEDWINDOW = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE);
static const int WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST);
static const int WS_EX_LAYERED = 0x00080000;
static const long WS_EX_NOINHERITLAYOUT = 0x00100000L;
static const long WS_EX_LAYOUTRTL = 0x00400000L;
static const long WS_EX_COMPOSITED = 0x02000000L;
static const long WS_EX_NOACTIVATE = 0x08000000L;
static const int CS_VREDRAW = 0x0001;
static const int CS_HREDRAW = 0x0002;
static const int CS_DBLCLKS = 0x0008;
static const int CS_OWNDC = 0x0020;
static const int CS_CLASSDC = 0x0040;
static const int CS_PARENTDC = 0x0080;
static const int CS_NOCLOSE = 0x0200;
static const int CS_SAVEBITS = 0x0800;
static const int CS_BYTEALIGNCLIENT = 0x1000;
static const int CS_BYTEALIGNWINDOW = 0x2000;
static const int CS_GLOBALCLASS = 0x4000;
static const int CS_IME = 0x00010000;
static const int CS_DROPSHADOW = 0x00020000;
static const long PRF_CHECKVISIBLE = 0x00000001L;
static const long PRF_NONCLIENT = 0x00000002L;
static const long PRF_CLIENT = 0x00000004L;
static const long PRF_ERASEBKGND = 0x00000008L;
static const long PRF_CHILDREN = 0x00000010L;
static const long PRF_OWNED = 0x00000020L;
static const int BDR_RAISEDOUTER = 0x0001;
static const int BDR_SUNKENOUTER = 0x0002;
static const int BDR_RAISEDINNER = 0x0004;
static const int BDR_SUNKENINNER = 0x0008;
static const int BDR_OUTER = (BDR_RAISEDOUTER | BDR_SUNKENOUTER);
static const int BDR_INNER = (BDR_RAISEDINNER | BDR_SUNKENINNER);
static const int BDR_RAISED = (BDR_RAISEDOUTER | BDR_RAISEDINNER);
static const int BDR_SUNKEN = (BDR_SUNKENOUTER | BDR_SUNKENINNER);
static const int EDGE_RAISED = (BDR_RAISEDOUTER | BDR_RAISEDINNER);
static const int EDGE_SUNKEN = (BDR_SUNKENOUTER | BDR_SUNKENINNER);
static const int EDGE_ETCHED = (BDR_SUNKENOUTER | BDR_RAISEDINNER);
static const int EDGE_BUMP = (BDR_RAISEDOUTER | BDR_SUNKENINNER);
static const int BF_LEFT = 0x0001;
static const int BF_TOP = 0x0002;
static const int BF_RIGHT = 0x0004;
static const int BF_BOTTOM = 0x0008;
static const int BF_TOPLEFT = (BF_TOP | BF_LEFT);
static const int BF_TOPRIGHT = (BF_TOP | BF_RIGHT);
static const int BF_BOTTOMLEFT = (BF_BOTTOM | BF_LEFT);
static const int BF_BOTTOMRIGHT = (BF_BOTTOM | BF_RIGHT);
static const int BF_RECT = (BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM);
static const int BF_DIAGONAL = 0x0010;
static const int BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL | BF_TOP | BF_RIGHT);
static const int BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL | BF_TOP | BF_LEFT);
static const int BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL | BF_BOTTOM | BF_LEFT);
static const int BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL | BF_BOTTOM | BF_RIGHT);
static const int BF_MIDDLE = 0x0800;
static const int BF_SOFT = 0x1000;
static const int BF_ADJUST = 0x2000;
static const int BF_FLAT = 0x4000;
static const int BF_MONO = 0x8000;
BOOL
DrawEdge(
    HDC hdc,
    LPRECT qrc,
    UINT edge,
    UINT grfFlags);
static const int DFC_CAPTION = 1;
static const int DFC_MENU = 2;
static const int DFC_SCROLL = 3;
static const int DFC_BUTTON = 4;
static const int DFC_POPUPMENU = 5;
static const int DFCS_CAPTIONCLOSE = 0x0000;
static const int DFCS_CAPTIONMIN = 0x0001;
static const int DFCS_CAPTIONMAX = 0x0002;
static const int DFCS_CAPTIONRESTORE = 0x0003;
static const int DFCS_CAPTIONHELP = 0x0004;
static const int DFCS_MENUARROW = 0x0000;
static const int DFCS_MENUCHECK = 0x0001;
static const int DFCS_MENUBULLET = 0x0002;
static const int DFCS_MENUARROWRIGHT = 0x0004;
static const int DFCS_SCROLLUP = 0x0000;
static const int DFCS_SCROLLDOWN = 0x0001;
static const int DFCS_SCROLLLEFT = 0x0002;
static const int DFCS_SCROLLRIGHT = 0x0003;
static const int DFCS_SCROLLCOMBOBOX = 0x0005;
static const int DFCS_SCROLLSIZEGRIP = 0x0008;
static const int DFCS_SCROLLSIZEGRIPRIGHT = 0x0010;
static const int DFCS_BUTTONCHECK = 0x0000;
static const int DFCS_BUTTONRADIOIMAGE = 0x0001;
static const int DFCS_BUTTONRADIOMASK = 0x0002;
static const int DFCS_BUTTONRADIO = 0x0004;
static const int DFCS_BUTTON3STATE = 0x0008;
static const int DFCS_BUTTONPUSH = 0x0010;
static const int DFCS_INACTIVE = 0x0100;
static const int DFCS_PUSHED = 0x0200;
static const int DFCS_CHECKED = 0x0400;
static const int DFCS_TRANSPARENT = 0x0800;
static const int DFCS_HOT = 0x1000;
static const int DFCS_ADJUSTRECT = 0x2000;
static const int DFCS_FLAT = 0x4000;
static const int DFCS_MONO = 0x8000;
BOOL
DrawFrameControl(
    HDC,
    LPRECT,
    UINT,
    UINT);
static const int DC_ACTIVE = 0x0001;
static const int DC_SMALLCAP = 0x0002;
static const int DC_ICON = 0x0004;
static const int DC_TEXT = 0x0008;
static const int DC_INBUTTON = 0x0010;
static const int DC_GRADIENT = 0x0020;
static const int DC_BUTTONS = 0x1000;
BOOL
DrawCaption(
    HWND hwnd,
    HDC hdc,
    const RECT * lprect,
    UINT flags);
static const int IDANI_OPEN = 1;
static const int IDANI_CAPTION = 3;
BOOL
DrawAnimatedRects(
    HWND hwnd,
    int idAni,
    const RECT *lprcFrom,
    const RECT *lprcTo);
static const int CF_TEXT = 1;
static const int CF_BITMAP = 2;
static const int CF_METAFILEPICT = 3;
static const int CF_SYLK = 4;
static const int CF_DIF = 5;
static const int CF_TIFF = 6;
static const int CF_OEMTEXT = 7;
static const int CF_DIB = 8;
static const int CF_PALETTE = 9;
static const int CF_PENDATA = 10;
static const int CF_RIFF = 11;
static const int CF_WAVE = 12;
static const int CF_UNICODETEXT = 13;
static const int CF_ENHMETAFILE = 14;
static const int CF_HDROP = 15;
static const int CF_LOCALE = 16;
static const int CF_DIBV5 = 17;
static const int CF_MAX = 18;
static const int CF_OWNERDISPLAY = 0x0080;
static const int CF_DSPTEXT = 0x0081;
static const int CF_DSPBITMAP = 0x0082;
static const int CF_DSPMETAFILEPICT = 0x0083;
static const int CF_DSPENHMETAFILE = 0x008E;
static const int CF_PRIVATEFIRST = 0x0200;
static const int CF_PRIVATELAST = 0x02FF;
static const int CF_GDIOBJFIRST = 0x0300;
static const int CF_GDIOBJLAST = 0x03FF;
static const int FVIRTKEY = TRUE;
static const int FNOINVERT = 0x02;
static const int FSHIFT = 0x04;
static const int FCONTROL = 0x08;
static const int FALT = 0x10;
typedef struct tagACCEL {
    BYTE fVirt; /* Also called the flags field */
    WORD key;
    WORD cmd;
} ACCEL, *LPACCEL;
typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;
typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;
typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
static const int WPF_SETMINPOSITION = 0x0001;
static const int WPF_RESTORETOMAXIMIZED = 0x0002;
static const int WPF_ASYNCWINDOWPLACEMENT = 0x0004;
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code; // NM_ code
} NMHDR;
typedef NMHDR * LPNMHDR;
typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
static const int ODT_MENU = 1;
static const int ODT_LISTBOX = 2;
static const int ODT_COMBOBOX = 3;
static const int ODT_BUTTON = 4;
static const int ODT_STATIC = 5;
static const int ODA_DRAWENTIRE = 0x0001;
static const int ODA_SELECT = 0x0002;
static const int ODA_FOCUS = 0x0004;
static const int ODS_SELECTED = 0x0001;
static const int ODS_GRAYED = 0x0002;
static const int ODS_DISABLED = 0x0004;
static const int ODS_CHECKED = 0x0008;
static const int ODS_FOCUS = 0x0010;
static const int ODS_DEFAULT = 0x0020;
static const int ODS_COMBOBOXEDIT = 0x1000;
static const int ODS_HOTLIGHT = 0x0040;
static const int ODS_INACTIVE = 0x0080;
static const int ODS_NOACCEL = 0x0100;
static const int ODS_NOFOCUSRECT = 0x0200;
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;
typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
BOOL
GetMessageA(
    LPMSG lpMsg,
    HWND hWnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
BOOL
GetMessageW(
    LPMSG lpMsg,
    HWND hWnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
static const int GetMessage = GetMessageA;
BOOL
TranslateMessage(
    const MSG *lpMsg);
LRESULT
DispatchMessageA(
    const MSG *lpMsg);
LRESULT
DispatchMessageW(
    const MSG *lpMsg);
static const int DispatchMessage = DispatchMessageA;
BOOL
SetMessageQueue(
    int cMessagesMax);
BOOL
PeekMessageA(
    LPMSG lpMsg,
    HWND hWnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
BOOL
PeekMessageW(
    LPMSG lpMsg,
    HWND hWnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
static const int PeekMessage = PeekMessageA;
static const int PM_NOREMOVE = 0x0000;
static const int PM_REMOVE = 0x0001;
static const int PM_NOYIELD = 0x0002;
static const int PM_QS_INPUT = (QS_INPUT << 16);
static const int PM_QS_POSTMESSAGE = ((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) << 16);
static const int PM_QS_PAINT = (QS_PAINT << 16);
static const int PM_QS_SENDMESSAGE = (QS_SENDMESSAGE << 16);
BOOL
RegisterHotKey(
    HWND hWnd,
    int id,
    UINT fsModifiers,
    UINT vk);
BOOL
UnregisterHotKey(
    HWND hWnd,
    int id);
static const int MOD_ALT = 0x0001;
static const int MOD_CONTROL = 0x0002;
static const int MOD_SHIFT = 0x0004;
static const int MOD_WIN = 0x0008;
static const int MOD_NOREPEAT = 0x4000;
static const int IDHOT_SNAPWINDOW = (-1);
static const int IDHOT_SNAPDESKTOP = (-2);
static const int ENDSESSION_LOGOFF = 0x80000000;
static const int ENDSESSION_CRITICAL = 0x40000000;
static const int ENDSESSION_CLOSEAPP = 0x00000001;
static const int EWX_LOGOFF = 0;
static const int EWX_SHUTDOWN = 0x00000001;
static const int EWX_REBOOT = 0x00000002;
static const int EWX_FORCE = 0x00000004;
static const int EWX_POWEROFF = 0x00000008;
static const int EWX_FORCEIFHUNG = 0x00000010;
static const int EWX_QUICKRESOLVE = 0x00000020;
static const int EWX_RESTARTAPPS = 0x00000040;
static const int ExitWindows(dwReserved,Code) = ExitWindowsEx(EWX_LOGOFF, 0xFFFFFFFF);
BOOL
ExitWindowsEx(
    UINT uFlags,
    DWORD dwReason);
BOOL
SwapMouseButton(
    BOOL fSwap);
DWORD
GetMessagePos(
    void);
LONG
GetMessageTime(
    void);
LPARAM
GetMessageExtraInfo(
    void);
BOOL
IsWow64Message(
    void);
LPARAM
SetMessageExtraInfo(
    LPARAM lParam);
LRESULT
SendMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
SendMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int SendMessage = SendMessageA;
LRESULT
SendMessageTimeoutA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    PDWORD_PTR lpdwResult);
LRESULT
SendMessageTimeoutW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    PDWORD_PTR lpdwResult);
static const int SendMessageTimeout = SendMessageTimeoutA;
BOOL
SendNotifyMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
BOOL
SendNotifyMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int SendNotifyMessage = SendNotifyMessageA;
BOOL
SendMessageCallbackA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    ULONG_PTR dwData);
BOOL
SendMessageCallbackW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    ULONG_PTR dwData);
static const int SendMessageCallback = SendMessageCallbackA;
typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;
long
BroadcastSystemMessageExA(
    DWORD flags,
    LPDWORD lpInfo,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    PBSMINFO pbsmInfo);
long
BroadcastSystemMessageExW(
    DWORD flags,
    LPDWORD lpInfo,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    PBSMINFO pbsmInfo);
static const int BroadcastSystemMessageEx = BroadcastSystemMessageExA;
long
BroadcastSystemMessageA(
    DWORD flags,
    LPDWORD lpInfo,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
long
BroadcastSystemMessageW(
    DWORD flags,
    LPDWORD lpInfo,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int BroadcastSystemMessage = BroadcastSystemMessageA;
static const int BSM_ALLCOMPONENTS = 0x00000000;
static const int BSM_VXDS = 0x00000001;
static const int BSM_NETDRIVER = 0x00000002;
static const int BSM_INSTALLABLEDRIVERS = 0x00000004;
static const int BSM_APPLICATIONS = 0x00000008;
static const int BSM_ALLDESKTOPS = 0x00000010;
static const int BSF_QUERY = 0x00000001;
static const int BSF_IGNORECURRENTTASK = 0x00000002;
static const int BSF_FLUSHDISK = 0x00000004;
static const int BSF_NOHANG = 0x00000008;
static const int BSF_POSTMESSAGE = 0x00000010;
static const int BSF_FORCEIFHUNG = 0x00000020;
static const int BSF_NOTIMEOUTIFNOTHUNG = 0x00000040;
static const int BSF_ALLOWSFW = 0x00000080;
static const int BSF_SENDNOTIFYMESSAGE = 0x00000100;
static const int BSF_RETURNHDESK = 0x00000200;
static const int BSF_LUID = 0x00000400;
static const int BROADCAST_QUERY_DENY = 0x424D5144;
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;
static const int DEVICE_NOTIFY_WINDOW_HANDLE = 0x00000000;
static const int DEVICE_NOTIFY_SERVICE_HANDLE = 0x00000001;
static const int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 0x00000004;
HDEVNOTIFY
RegisterDeviceNotificationA(
    HANDLE hRecipient,
    LPVOID NotificationFilter,
    DWORD Flags);
HDEVNOTIFY
RegisterDeviceNotificationW(
    HANDLE hRecipient,
    LPVOID NotificationFilter,
    DWORD Flags);
static const int RegisterDeviceNotification = RegisterDeviceNotificationA;
BOOL
UnregisterDeviceNotification(
    HDEVNOTIFY Handle
    );
typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;
HPOWERNOTIFY
RegisterPowerSettingNotification(
    HANDLE hRecipient,
    LPCGUID PowerSettingGuid,
    DWORD Flags
    );
BOOL
UnregisterPowerSettingNotification(
    HPOWERNOTIFY Handle
    );
BOOL
PostMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
BOOL
PostMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int PostMessage = PostMessageA;
BOOL
PostThreadMessageA(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
BOOL
PostThreadMessageW(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int PostThreadMessage = PostThreadMessageA;
static const int PostAppMessageA(idThread,wMsg,wParam,lParam) = PostThreadMessageA((DWORD)idThread, wMsg, wParam, lParam);
static const int PostAppMessageW(idThread,wMsg,wParam,lParam) = PostThreadMessageW((DWORD)idThread, wMsg, wParam, lParam);
static const int PostAppMessage = PostAppMessageA;
static const int HWND_BROADCAST = ((HWND)0xffff);
static const int HWND_MESSAGE = ((HWND)-3);
BOOL
AttachThreadInput(
    DWORD idAttach,
    DWORD idAttachTo,
    BOOL fAttach);
BOOL
ReplyMessage(
    LRESULT lResult);
BOOL
WaitMessage(
    void);
DWORD
WaitForInputIdle(
    HANDLE hProcess,
    DWORD dwMilliseconds);
LRESULT
DefWindowProcA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
DefWindowProcW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int DefWindowProc = DefWindowProcA;
void
PostQuitMessage(
    int nExitCode);
LRESULT
CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int CallWindowProc = CallWindowProcA;
BOOL
InSendMessage(
    void);
DWORD
InSendMessageEx(
    LPVOID lpReserved);
static const int ISMEX_NOSEND = 0x00000000;
static const int ISMEX_SEND = 0x00000001;
static const int ISMEX_NOTIFY = 0x00000002;
static const int ISMEX_CALLBACK = 0x00000004;
static const int ISMEX_REPLIED = 0x00000008;
UINT
GetDoubleClickTime(
    void);
BOOL
SetDoubleClickTime(
    UINT);
ATOM
RegisterClassA(
    const WNDCLASSA *lpWndClass);
ATOM
RegisterClassW(
    const WNDCLASSW *lpWndClass);
static const int RegisterClass = RegisterClassA;
BOOL
UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance);
BOOL
UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance);
static const int UnregisterClass = UnregisterClassA;
BOOL
GetClassInfoA(
    HINSTANCE hInstance,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass);
BOOL
GetClassInfoW(
    HINSTANCE hInstance,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass);
static const int GetClassInfo = GetClassInfoA;
ATOM
RegisterClassExA(
    const WNDCLASSEXA *);
ATOM
RegisterClassExW(
    const WNDCLASSEXW *);
static const int RegisterClassEx = RegisterClassExA;
BOOL
GetClassInfoExA(
    HINSTANCE hInstance,
    LPCSTR lpszClass,
    LPWNDCLASSEXA lpwcx);
BOOL
GetClassInfoExW(
    HINSTANCE hInstance,
    LPCWSTR lpszClass,
    LPWNDCLASSEXW lpwcx);
static const int GetClassInfoEx = GetClassInfoExA;
static const int CW_USEDEFAULT = ((int)0x80000000);
static const int HWND_DESKTOP = ((HWND)0);
typedef BOOLEAN ( * PREGISTERCLASSNAMEW)(LPCWSTR);
HWND
CreateWindowExA(
    DWORD dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
HWND
CreateWindowExW(
    DWORD dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
static const int CreateWindowEx = CreateWindowExA;
static const int CreateWindowA(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam) = CreateWindowExA(0L, lpClassName, lpWindowName, dwStyle, x, y,nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
static const int CreateWindowW(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam) = CreateWindowExW(0L, lpClassName, lpWindowName, dwStyle, x, y,nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
static const int CreateWindow = CreateWindowA;
BOOL
IsWindow(
    HWND hWnd);
BOOL
IsMenu(
    HMENU hMenu);
BOOL
IsChild(
    HWND hWndParent,
    HWND hWnd);
BOOL
DestroyWindow(
    HWND hWnd);
BOOL
ShowWindow(
    HWND hWnd,
    int nCmdShow);
BOOL
AnimateWindow(
    HWND hWnd,
    DWORD dwTime,
    DWORD dwFlags);
BOOL
UpdateLayeredWindow(
    HWND hWnd,
    HDC hdcDst,
    POINT* pptDst,
    SIZE* psize,
    HDC hdcSrc,
    POINT* pptSrc,
    COLORREF crKey,
    BLENDFUNCTION* pblend,
    DWORD dwFlags);
typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;
BOOL
UpdateLayeredWindowIndirect(
    HWND hWnd,
    const UPDATELAYEREDWINDOWINFO* pULWInfo);
BOOL
GetLayeredWindowAttributes(
    HWND hwnd,
    COLORREF* pcrKey,
    BYTE* pbAlpha,
    DWORD* pdwFlags);
static const int PW_CLIENTONLY = 0x00000001;
BOOL
PrintWindow(
    HWND hwnd,
    HDC hdcBlt,
    UINT nFlags);
BOOL
SetLayeredWindowAttributes(
    HWND hwnd,
    COLORREF crKey,
    BYTE bAlpha,
    DWORD dwFlags);
static const int LWA_COLORKEY = 0x00000001;
static const int LWA_ALPHA = 0x00000002;
static const int ULW_COLORKEY = 0x00000001;
static const int ULW_ALPHA = 0x00000002;
static const int ULW_OPAQUE = 0x00000004;
static const int ULW_EX_NORESIZE = 0x00000008;
BOOL
ShowWindowAsync(
    HWND hWnd,
    int nCmdShow);
BOOL
FlashWindow(
    HWND hWnd,
    BOOL bInvert);
typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;
BOOL
FlashWindowEx(
    PFLASHWINFO pfwi);
static const int FLASHW_STOP = 0;
static const int FLASHW_CAPTION = 0x00000001;
static const int FLASHW_TRAY = 0x00000002;
static const int FLASHW_ALL = (FLASHW_CAPTION | FLASHW_TRAY);
static const int FLASHW_TIMER = 0x00000004;
static const int FLASHW_TIMERNOFG = 0x0000000C;
BOOL
ShowOwnedPopups(
    HWND hWnd,
    BOOL fShow);
BOOL
OpenIcon(
    HWND hWnd);
BOOL
CloseWindow(
    HWND hWnd);
BOOL
MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    BOOL bRepaint);
BOOL
SetWindowPos(
    HWND hWnd,
    HWND hWndInsertAfter,
    int X,
    int Y,
    int cx,
    int cy,
    UINT uFlags);
BOOL
GetWindowPlacement(
    HWND hWnd,
    WINDOWPLACEMENT *lpwndpl);
BOOL
SetWindowPlacement(
    HWND hWnd,
    const WINDOWPLACEMENT *lpwndpl);
static const int WDA_NONE = 0x00000000;
static const int WDA_MONITOR = 0x00000001;
BOOL
GetWindowDisplayAffinity(
    HWND hWnd,
    DWORD* pdwAffinity);
BOOL
SetWindowDisplayAffinity(
    HWND hWnd,
    DWORD dwAffinity);
HDWP
BeginDeferWindowPos(
    int nNumWindows);
HDWP
DeferWindowPos(
    HDWP hWinPosInfo,
    HWND hWnd,
    HWND hWndInsertAfter,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);
BOOL
EndDeferWindowPos(
    HDWP hWinPosInfo);
BOOL
IsWindowVisible(
    HWND hWnd);
BOOL
IsIconic(
    HWND hWnd);
BOOL
AnyPopup(
    void);
BOOL
BringWindowToTop(
    HWND hWnd);
BOOL
IsZoomed(
    HWND hWnd);
static const int SWP_NOSIZE = 0x0001;
static const int SWP_NOMOVE = 0x0002;
static const int SWP_NOZORDER = 0x0004;
static const int SWP_NOREDRAW = 0x0008;
static const int SWP_NOACTIVATE = 0x0010;
static const int SWP_FRAMECHANGED = 0x0020;
static const int SWP_SHOWWINDOW = 0x0040;
static const int SWP_HIDEWINDOW = 0x0080;
static const int SWP_NOCOPYBITS = 0x0100;
static const int SWP_NOOWNERZORDER = 0x0200;
static const int SWP_NOSENDCHANGING = 0x0400;
static const int SWP_DRAWFRAME = SWP_FRAMECHANGED;
static const int SWP_NOREPOSITION = SWP_NOOWNERZORDER;
static const int SWP_DEFERERASE = 0x2000;
static const int SWP_ASYNCWINDOWPOS = 0x4000;
static const int HWND_TOP = ((HWND)0);
static const int HWND_BOTTOM = ((HWND)1);
static const int HWND_TOPMOST = ((HWND)-1);
static const int HWND_NOTOPMOST = ((HWND)-2);
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
HWND
CreateDialogParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
HWND
CreateDialogParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
static const int CreateDialogParam = CreateDialogParamA;
HWND
CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
HWND
CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
static const int CreateDialogIndirectParam = CreateDialogIndirectParamA;
static const int CreateDialogA(hInstance,lpName,hWndParent,lpDialogFunc) = CreateDialogParamA(hInstance, lpName, hWndParent, lpDialogFunc, 0L);
static const int CreateDialogW(hInstance,lpName,hWndParent,lpDialogFunc) = CreateDialogParamW(hInstance, lpName, hWndParent, lpDialogFunc, 0L);
static const int CreateDialog = CreateDialogA;
static const int CreateDialogIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc) = CreateDialogIndirectParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int CreateDialogIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc) = CreateDialogIndirectParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int CreateDialogIndirect = CreateDialogIndirectA;
INT_PTR
DialogBoxParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
INT_PTR
DialogBoxParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
static const int DialogBoxParam = DialogBoxParamA;
INT_PTR
DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
INT_PTR
DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
static const int DialogBoxIndirectParam = DialogBoxIndirectParamA;
static const int DialogBoxA(hInstance,lpTemplate,hWndParent,lpDialogFunc) = DialogBoxParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int DialogBoxW(hInstance,lpTemplate,hWndParent,lpDialogFunc) = DialogBoxParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int DialogBox = DialogBoxA;
static const int DialogBoxIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc) = DialogBoxIndirectParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int DialogBoxIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc) = DialogBoxIndirectParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0L);
static const int DialogBoxIndirect = DialogBoxIndirectA;
BOOL
EndDialog(
    HWND hDlg,
    INT_PTR nResult);
HWND
GetDlgItem(
    HWND hDlg,
    int nIDDlgItem);
BOOL
SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    UINT uValue,
    BOOL bSigned);
UINT
GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    BOOL *lpTranslated,
    BOOL bSigned);
BOOL
SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString);
BOOL
SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString);
static const int SetDlgItemText = SetDlgItemTextA;
UINT
GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int cchMax);
UINT
GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int cchMax);
static const int GetDlgItemText = GetDlgItemTextA;
BOOL
CheckDlgButton(
    HWND hDlg,
    int nIDButton,
    UINT uCheck);
BOOL
CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton);
UINT
IsDlgButtonChecked(
    HWND hDlg,
    int nIDButton);
LRESULT
SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int SendDlgItemMessage = SendDlgItemMessageA;
HWND
GetNextDlgGroupItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);
HWND
GetNextDlgTabItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);
int
GetDlgCtrlID(
    HWND hWnd);
long
GetDialogBaseUnits(void);
LRESULT
DefDlgProcA(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
DefDlgProcW(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
static const int DefDlgProc = DefDlgProcA;
static const int DLGWINDOWEXTRA = 30;
BOOL
CallMsgFilterA(
    LPMSG lpMsg,
    int nCode);
BOOL
CallMsgFilterW(
    LPMSG lpMsg,
    int nCode);
static const int CallMsgFilter = CallMsgFilterA;
BOOL
OpenClipboard(
    HWND hWndNewOwner);
BOOL
CloseClipboard(
    void);
DWORD
GetClipboardSequenceNumber(
    void);
HWND
GetClipboardOwner(
    void);
HWND
SetClipboardViewer(
    HWND hWndNewViewer);
HWND
GetClipboardViewer(
    void);
BOOL
ChangeClipboardChain(
    HWND hWndRemove,
    HWND hWndNewNext);
HANDLE
SetClipboardData(
    UINT uFormat,
    HANDLE hMem);
HANDLE
GetClipboardData(
    UINT uFormat);
UINT
RegisterClipboardFormatA(
    LPCSTR lpszFormat);
UINT
RegisterClipboardFormatW(
    LPCWSTR lpszFormat);
static const int RegisterClipboardFormat = RegisterClipboardFormatA;
int
CountClipboardFormats(
    void);
UINT
EnumClipboardFormats(
    UINT format);
int
GetClipboardFormatNameA(
    UINT format,
    LPSTR lpszFormatName,
    int cchMaxCount);
int
GetClipboardFormatNameW(
    UINT format,
    LPWSTR lpszFormatName,
    int cchMaxCount);
static const int GetClipboardFormatName = GetClipboardFormatNameA;
BOOL
EmptyClipboard(
    void);
BOOL
IsClipboardFormatAvailable(
    UINT format);
int
GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    int cFormats);
HWND
GetOpenClipboardWindow(
    void);
BOOL
AddClipboardFormatListener(
    HWND hwnd);
BOOL
RemoveClipboardFormatListener(
    HWND hwnd);
BOOL
GetUpdatedClipboardFormats(
    PUINT lpuiFormats,
    UINT cFormats,
    PUINT pcFormatsOut);
BOOL
CharToOemA(
    LPCSTR pSrc,
    LPSTR pDst);
BOOL
CharToOemW(
    LPCWSTR pSrc,
    LPSTR pDst);
static const int CharToOem = CharToOemA;
BOOL
OemToCharA(
    LPCSTR pSrc,
    LPSTR pDst);
BOOL
OemToCharW(
    LPCSTR pSrc,
    LPWSTR pDst);
static const int OemToChar = OemToCharA;
BOOL
CharToOemBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
BOOL
CharToOemBuffW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
static const int CharToOemBuff = CharToOemBuffA;
BOOL
OemToCharBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
BOOL
OemToCharBuffW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst,
    DWORD cchDstLength);
static const int OemToCharBuff = OemToCharBuffA;
LPSTR
CharUpperA(
    LPSTR lpsz);
LPWSTR
CharUpperW(
    LPWSTR lpsz);
static const int CharUpper = CharUpperA;
DWORD
CharUpperBuffA(
    LPSTR lpsz,
    DWORD cchLength);
DWORD
CharUpperBuffW(
    LPWSTR lpsz,
    DWORD cchLength);
static const int CharUpperBuff = CharUpperBuffA;
LPSTR
CharLowerA(
    LPSTR lpsz);
LPWSTR
CharLowerW(
    LPWSTR lpsz);
static const int CharLower = CharLowerA;
DWORD
CharLowerBuffA(
    LPSTR lpsz,
    DWORD cchLength);
DWORD
CharLowerBuffW(
    LPWSTR lpsz,
    DWORD cchLength);
static const int CharLowerBuff = CharLowerBuffA;
LPSTR
CharNextA(
    LPCSTR lpsz);
LPWSTR
CharNextW(
    LPCWSTR lpsz);
static const int CharNext = CharNextA;
LPSTR
CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent);
LPWSTR
CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent);
static const int CharPrev = CharPrevA;
LPSTR
CharNextExA(
     WORD CodePage,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);
LPSTR
CharPrevExA(
     WORD CodePage,
     LPCSTR lpStart,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);
static const int AnsiToOem = CharToOemA;
static const int OemToAnsi = OemToCharA;
static const int AnsiToOemBuff = CharToOemBuffA;
static const int OemToAnsiBuff = OemToCharBuffA;
static const int AnsiUpper = CharUpperA;
static const int AnsiUpperBuff = CharUpperBuffA;
static const int AnsiLower = CharLowerA;
static const int AnsiLowerBuff = CharLowerBuffA;
static const int AnsiNext = CharNextA;
static const int AnsiPrev = CharPrevA;
BOOL
IsCharAlphaA(
    CHAR ch);
BOOL
IsCharAlphaW(
    WCHAR ch);
static const int IsCharAlpha = IsCharAlphaA;
BOOL
IsCharAlphaNumericA(
    CHAR ch);
BOOL
IsCharAlphaNumericW(
    WCHAR ch);
static const int IsCharAlphaNumeric = IsCharAlphaNumericA;
BOOL
IsCharUpperA(
    CHAR ch);
BOOL
IsCharUpperW(
    WCHAR ch);
static const int IsCharUpper = IsCharUpperA;
BOOL
IsCharLowerA(
    CHAR ch);
BOOL
IsCharLowerW(
    WCHAR ch);
static const int IsCharLower = IsCharLowerA;
HWND
SetFocus(
    HWND hWnd);
HWND
GetActiveWindow(
    void);
HWND
GetFocus(
    void);
UINT
GetKBCodePage(
    void);
SHORT
GetKeyState(
    int nVirtKey);
SHORT
GetAsyncKeyState(
    int vKey);
BOOL
GetKeyboardState(
    PBYTE lpKeyState);
BOOL
SetKeyboardState(
    LPBYTE lpKeyState);
int
GetKeyNameTextA(
    LONG lParam,
    LPSTR lpString,
    int cchSize);
int
GetKeyNameTextW(
    LONG lParam,
    LPWSTR lpString,
    int cchSize);
static const int GetKeyNameText = GetKeyNameTextA;
int
GetKeyboardType(
    int nTypeFlag);
int
ToAscii(
    UINT uVirtKey,
    UINT uScanCode,
    const BYTE *lpKeyState,
    LPWORD lpChar,
    UINT uFlags);
int
ToAsciiEx(
    UINT uVirtKey,
    UINT uScanCode,
    const BYTE *lpKeyState,
    LPWORD lpChar,
    UINT uFlags,
    HKL dwhkl);
int
ToUnicode(
    UINT wVirtKey,
    UINT wScanCode,
    const BYTE *lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags);
DWORD
OemKeyScan(
    WORD wOemChar);
SHORT
VkKeyScanA(
    CHAR ch);
SHORT
VkKeyScanW(
    WCHAR ch);
static const int VkKeyScan = VkKeyScanA;
SHORT
VkKeyScanExA(
    CHAR ch,
    HKL dwhkl);
SHORT
VkKeyScanExW(
    WCHAR ch,
    HKL dwhkl);
static const int VkKeyScanEx = VkKeyScanExA;
static const int KEYEVENTF_EXTENDEDKEY = 0x0001;
static const int KEYEVENTF_KEYUP = 0x0002;
static const int KEYEVENTF_UNICODE = 0x0004;
static const int KEYEVENTF_SCANCODE = 0x0008;
void
keybd_event(
    BYTE bVk,
    BYTE bScan,
    DWORD dwFlags,
    ULONG_PTR dwExtraInfo);
static const int MOUSEEVENTF_MOVE = 0x0001;
static const int MOUSEEVENTF_LEFTDOWN = 0x0002;
static const int MOUSEEVENTF_LEFTUP = 0x0004;
static const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
static const int MOUSEEVENTF_RIGHTUP = 0x0010;
static const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
static const int MOUSEEVENTF_MIDDLEUP = 0x0040;
static const int MOUSEEVENTF_XDOWN = 0x0080;
static const int MOUSEEVENTF_XUP = 0x0100;
static const int MOUSEEVENTF_WHEEL = 0x0800;
static const int MOUSEEVENTF_HWHEEL = 0x01000;
static const int MOUSEEVENTF_MOVE_NOCOALESCE = 0x2000;
static const int MOUSEEVENTF_VIRTUALDESK = 0x4000;
static const int MOUSEEVENTF_ABSOLUTE = 0x8000;
void
mouse_event(
    DWORD dwFlags,
    DWORD dx,
    DWORD dy,
    DWORD dwData,
    ULONG_PTR dwExtraInfo);
typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;
typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;
typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;
static const int INPUT_MOUSE = 0;
static const int INPUT_KEYBOARD = 1;
static const int INPUT_HARDWARE = 2;
typedef struct tagINPUT {
    DWORD type;
    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    };
} INPUT, *PINPUT, * LPINPUT;
UINT
SendInput(
    UINT cInputs, // number of input in the array
    LPINPUT pInputs, // array of inputs
    int cbSize); // sizeof(INPUT)
struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;
typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;
static const int TOUCH_COORD_TO_PIXEL(l) = ((l) / 100);
static const int TOUCHEVENTF_MOVE = 0x0001;
static const int TOUCHEVENTF_DOWN = 0x0002;
static const int TOUCHEVENTF_UP = 0x0004;
static const int TOUCHEVENTF_INRANGE = 0x0008;
static const int TOUCHEVENTF_PRIMARY = 0x0010;
static const int TOUCHEVENTF_NOCOALESCE = 0x0020;
static const int TOUCHEVENTF_PEN = 0x0040;
static const int TOUCHEVENTF_PALM = 0x0080;
static const int TOUCHINPUTMASKF_TIMEFROMSYSTEM = 0x0001;
static const int TOUCHINPUTMASKF_EXTRAINFO = 0x0002;
static const int TOUCHINPUTMASKF_CONTACTAREA = 0x0004;
BOOL
GetTouchInputInfo(
    HTOUCHINPUT hTouchInput, // input event handle; from touch message lParam
    UINT cInputs, // number of elements in the array
    PTOUCHINPUT pInputs, // array of touch inputs
    int cbSize); // sizeof(TOUCHINPUT)
BOOL
CloseTouchInputHandle(
    HTOUCHINPUT hTouchInput); // input event handle; from touch message lParam
static const int TWF_FINETOUCH = (0x00000001);
static const int TWF_WANTPALM = (0x00000002);
BOOL
RegisterTouchWindow(
    HWND hwnd,
    ULONG ulFlags);
BOOL
UnregisterTouchWindow(
    HWND hwnd);
BOOL
IsTouchWindow(
    HWND hwnd,
    PULONG pulFlags);
typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;
BOOL
GetLastInputInfo(
    PLASTINPUTINFO plii);
UINT
MapVirtualKeyA(
    UINT uCode,
    UINT uMapType);
UINT
MapVirtualKeyW(
    UINT uCode,
    UINT uMapType);
static const int MapVirtualKey = MapVirtualKeyA;
UINT
MapVirtualKeyExA(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);
UINT
MapVirtualKeyExW(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);
static const int MapVirtualKeyEx = MapVirtualKeyExA;
static const int MAPVK_VK_TO_VSC = (0);
static const int MAPVK_VSC_TO_VK = (1);
static const int MAPVK_VK_TO_CHAR = (2);
static const int MAPVK_VSC_TO_VK_EX = (3);
static const int MAPVK_VK_TO_VSC_EX = (4);
BOOL
GetInputState(
    void);
DWORD
GetQueueStatus(
    UINT flags);
HWND
GetCapture(
    void);
HWND
SetCapture(
    HWND hWnd);
BOOL
ReleaseCapture(
    void);
DWORD
MsgWaitForMultipleObjects(
    DWORD nCount,
    const HANDLE *pHandles,
    BOOL fWaitAll,
    DWORD dwMilliseconds,
    DWORD dwWakeMask);
DWORD
MsgWaitForMultipleObjectsEx(
    DWORD nCount,
    const HANDLE *pHandles,
    DWORD dwMilliseconds,
    DWORD dwWakeMask,
    DWORD dwFlags);
static const int MWMO_WAITALL = 0x0001;
static const int MWMO_ALERTABLE = 0x0002;
static const int MWMO_INPUTAVAILABLE = 0x0004;
static const int QS_KEY = 0x0001;
static const int QS_MOUSEMOVE = 0x0002;
static const int QS_MOUSEBUTTON = 0x0004;
static const int QS_POSTMESSAGE = 0x0008;
static const int QS_TIMER = 0x0010;
static const int QS_PAINT = 0x0020;
static const int QS_SENDMESSAGE = 0x0040;
static const int QS_HOTKEY = 0x0080;
static const int QS_ALLPOSTMESSAGE = 0x0100;
static const int QS_RAWINPUT = 0x0400;
static const int QS_MOUSE = (QS_MOUSEMOVE | QS_MOUSEBUTTON);
static const int QS_INPUT = (QS_MOUSE | QS_KEY | QS_RAWINPUT);
static const int QS_ALLEVENTS = (QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY);
static const int QS_ALLINPUT = (QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY | QS_SENDMESSAGE);
static const int USER_TIMER_MAXIMUM = 0x7FFFFFFF;
static const int USER_TIMER_MINIMUM = 0x0000000A;
UINT_PTR
SetTimer(
    HWND hWnd,
    UINT_PTR nIDEvent,
    UINT uElapse,
    TIMERPROC lpTimerFunc);
BOOL
KillTimer(
    HWND hWnd,
    UINT_PTR uIDEvent);
BOOL
IsWindowUnicode(
    HWND hWnd);
BOOL
EnableWindow(
    HWND hWnd,
    BOOL bEnable);
BOOL
IsWindowEnabled(
    HWND hWnd);
HACCEL
LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName);
HACCEL
LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName);
static const int LoadAccelerators = LoadAcceleratorsA;
HACCEL
CreateAcceleratorTableA(
    LPACCEL paccel,
    int cAccel);
HACCEL
CreateAcceleratorTableW(
    LPACCEL paccel,
    int cAccel);
static const int CreateAcceleratorTable = CreateAcceleratorTableA;
BOOL
DestroyAcceleratorTable(
    HACCEL hAccel);
int
CopyAcceleratorTableA(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);
int
CopyAcceleratorTableW(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);
static const int CopyAcceleratorTable = CopyAcceleratorTableA;
int
TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
int
TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
static const int TranslateAccelerator = TranslateAcceleratorA;
static const int SM_CXSCREEN = 0;
static const int SM_CYSCREEN = 1;
static const int SM_CXVSCROLL = 2;
static const int SM_CYHSCROLL = 3;
static const int SM_CYCAPTION = 4;
static const int SM_CXBORDER = 5;
static const int SM_CYBORDER = 6;
static const int SM_CXDLGFRAME = 7;
static const int SM_CYDLGFRAME = 8;
static const int SM_CYVTHUMB = 9;
static const int SM_CXHTHUMB = 10;
static const int SM_CXICON = 11;
static const int SM_CYICON = 12;
static const int SM_CXCURSOR = 13;
static const int SM_CYCURSOR = 14;
static const int SM_CYMENU = 15;
static const int SM_CXFULLSCREEN = 16;
static const int SM_CYFULLSCREEN = 17;
static const int SM_CYKANJIWINDOW = 18;
static const int SM_MOUSEPRESENT = 19;
static const int SM_CYVSCROLL = 20;
static const int SM_CXHSCROLL = 21;
static const int SM_DEBUG = 22;
static const int SM_SWAPBUTTON = 23;
static const int SM_RESERVED1 = 24;
static const int SM_RESERVED2 = 25;
static const int SM_RESERVED3 = 26;
static const int SM_RESERVED4 = 27;
static const int SM_CXMIN = 28;
static const int SM_CYMIN = 29;
static const int SM_CXSIZE = 30;
static const int SM_CYSIZE = 31;
static const int SM_CXFRAME = 32;
static const int SM_CYFRAME = 33;
static const int SM_CXMINTRACK = 34;
static const int SM_CYMINTRACK = 35;
static const int SM_CXDOUBLECLK = 36;
static const int SM_CYDOUBLECLK = 37;
static const int SM_CXICONSPACING = 38;
static const int SM_CYICONSPACING = 39;
static const int SM_MENUDROPALIGNMENT = 40;
static const int SM_PENWINDOWS = 41;
static const int SM_DBCSENABLED = 42;
static const int SM_CMOUSEBUTTONS = 43;
static const int SM_CXFIXEDFRAME = SM_CXDLGFRAME;
static const int SM_CYFIXEDFRAME = SM_CYDLGFRAME;
static const int SM_CXSIZEFRAME = SM_CXFRAME;
static const int SM_CYSIZEFRAME = SM_CYFRAME;
static const int SM_SECURE = 44;
static const int SM_CXEDGE = 45;
static const int SM_CYEDGE = 46;
static const int SM_CXMINSPACING = 47;
static const int SM_CYMINSPACING = 48;
static const int SM_CXSMICON = 49;
static const int SM_CYSMICON = 50;
static const int SM_CYSMCAPTION = 51;
static const int SM_CXSMSIZE = 52;
static const int SM_CYSMSIZE = 53;
static const int SM_CXMENUSIZE = 54;
static const int SM_CYMENUSIZE = 55;
static const int SM_ARRANGE = 56;
static const int SM_CXMINIMIZED = 57;
static const int SM_CYMINIMIZED = 58;
static const int SM_CXMAXTRACK = 59;
static const int SM_CYMAXTRACK = 60;
static const int SM_CXMAXIMIZED = 61;
static const int SM_CYMAXIMIZED = 62;
static const int SM_NETWORK = 63;
static const int SM_CLEANBOOT = 67;
static const int SM_CXDRAG = 68;
static const int SM_CYDRAG = 69;
static const int SM_SHOWSOUNDS = 70;
static const int SM_CXMENUCHECK = 71;
static const int SM_CYMENUCHECK = 72;
static const int SM_SLOWMACHINE = 73;
static const int SM_MIDEASTENABLED = 74;
static const int SM_MOUSEWHEELPRESENT = 75;
static const int SM_XVIRTUALSCREEN = 76;
static const int SM_YVIRTUALSCREEN = 77;
static const int SM_CXVIRTUALSCREEN = 78;
static const int SM_CYVIRTUALSCREEN = 79;
static const int SM_CMONITORS = 80;
static const int SM_SAMEDISPLAYFORMAT = 81;
static const int SM_IMMENABLED = 82;
static const int SM_CXFOCUSBORDER = 83;
static const int SM_CYFOCUSBORDER = 84;
static const int SM_TABLETPC = 86;
static const int SM_MEDIACENTER = 87;
static const int SM_STARTER = 88;
static const int SM_SERVERR2 = 89;
static const int SM_MOUSEHORIZONTALWHEELPRESENT = 91;
static const int SM_CXPADDEDBORDER = 92;
static const int SM_DIGITIZER = 94;
static const int SM_MAXIMUMTOUCHES = 95;
static const int SM_CMETRICS = 97;
static const int SM_REMOTESESSION = 0x1000;
static const int SM_SHUTTINGDOWN = 0x2000;
static const int SM_REMOTECONTROL = 0x2001;
static const int SM_CARETBLINKINGENABLED = 0x2002;
int
GetSystemMetrics(
    int nIndex);
HMENU
LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName);
HMENU
LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName);
static const int LoadMenu = LoadMenuA;
HMENU
LoadMenuIndirectA(
    const MENUTEMPLATEA *lpMenuTemplate);
HMENU
LoadMenuIndirectW(
    const MENUTEMPLATEW *lpMenuTemplate);
static const int LoadMenuIndirect = LoadMenuIndirectA;
HMENU
GetMenu(
    HWND hWnd);
BOOL
SetMenu(
    HWND hWnd,
    HMENU hMenu);
BOOL
ChangeMenuA(
    HMENU hMenu,
    UINT cmd,
    LPCSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);
BOOL
ChangeMenuW(
    HMENU hMenu,
    UINT cmd,
    LPCWSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);
static const int ChangeMenu = ChangeMenuA;
BOOL
HiliteMenuItem(
    HWND hWnd,
    HMENU hMenu,
    UINT uIDHiliteItem,
    UINT uHilite);
int
GetMenuStringA(
    HMENU hMenu,
    UINT uIDItem,
    LPSTR lpString,
    int cchMax,
    UINT flags);
int
GetMenuStringW(
    HMENU hMenu,
    UINT uIDItem,
    LPWSTR lpString,
    int cchMax,
    UINT flags);
static const int GetMenuString = GetMenuStringA;
UINT
GetMenuState(
    HMENU hMenu,
    UINT uId,
    UINT uFlags);
BOOL
DrawMenuBar(
    HWND hWnd);
static const int PMB_ACTIVE = 0x00000001;
HMENU
GetSystemMenu(
    HWND hWnd,
    BOOL bRevert);
HMENU
CreateMenu(
    void);
HMENU
CreatePopupMenu(
    void);
BOOL
DestroyMenu(
    HMENU hMenu);
DWORD
CheckMenuItem(
    HMENU hMenu,
    UINT uIDCheckItem,
    UINT uCheck);
BOOL
EnableMenuItem(
    HMENU hMenu,
    UINT uIDEnableItem,
    UINT uEnable);
HMENU
GetSubMenu(
    HMENU hMenu,
    int nPos);
UINT
GetMenuItemID(
    HMENU hMenu,
    int nPos);
int
GetMenuItemCount(
    HMENU hMenu);
BOOL
InsertMenuA(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCSTR lpNewItem);
BOOL
InsertMenuW(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCWSTR lpNewItem);
static const int InsertMenu = InsertMenuA;
BOOL
AppendMenuA(
    HMENU hMenu,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCSTR lpNewItem);
BOOL
AppendMenuW(
    HMENU hMenu,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCWSTR lpNewItem);
static const int AppendMenu = AppendMenuA;
BOOL
ModifyMenuA(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCSTR lpNewItem);
BOOL
ModifyMenuW(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT_PTR uIDNewItem,
    LPCWSTR lpNewItem);
static const int ModifyMenu = ModifyMenuA;
BOOL
 RemoveMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);
BOOL
DeleteMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);
BOOL
SetMenuItemBitmaps(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    HBITMAP hBitmapUnchecked,
    HBITMAP hBitmapChecked);
LONG
GetMenuCheckMarkDimensions(
    void);
BOOL
TrackPopupMenu(
    HMENU hMenu,
    UINT uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    const RECT *prcRect);
static const int MNC_IGNORE = 0;
static const int MNC_CLOSE = 1;
static const int MNC_EXECUTE = 2;
static const int MNC_SELECT = 3;
typedef struct tagTPMPARAMS
{
    UINT cbSize; /* Size of structure */
    RECT rcExclude; /* Screen coordinates of rectangle to exclude when positioning */
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;
BOOL
TrackPopupMenuEx(
    HMENU,
    UINT,
    int,
    int,
    HWND,
    LPTPMPARAMS);
BOOL
CalculatePopupWindowPosition(
    const POINT *anchorPoint,
    const SIZE *windowSize,
    UINT /* TPM_XXX values */ flags,
    RECT *excludeRect,
    RECT *popupWindowPosition);
static const int MNS_NOCHECK = 0x80000000;
static const int MNS_MODELESS = 0x40000000;
static const int MNS_DRAGDROP = 0x20000000;
static const int MNS_AUTODISMISS = 0x10000000;
static const int MNS_NOTIFYBYPOS = 0x08000000;
static const int MNS_CHECKORBMP = 0x04000000;
static const int MIM_MAXHEIGHT = 0x00000001;
static const int MIM_BACKGROUND = 0x00000002;
static const int MIM_HELPID = 0x00000004;
static const int MIM_MENUDATA = 0x00000008;
static const int MIM_STYLE = 0x00000010;
static const int MIM_APPLYTOSUBMENUS = 0x80000000;
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;
BOOL
GetMenuInfo(
    HMENU,
    LPMENUINFO);
BOOL
SetMenuInfo(
    HMENU,
    LPCMENUINFO);
BOOL
EndMenu(
        void);
static const int MND_CONTINUE = 0;
static const int MND_ENDMENU = 1;
typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
static const int MNGOF_TOPGAP = 0x00000001;
static const int MNGOF_BOTTOMGAP = 0x00000002;
static const int MNGO_NOINTERFACE = 0x00000000;
static const int MNGO_NOERROR = 0x00000001;
static const int MIIM_STATE = 0x00000001;
static const int MIIM_ID = 0x00000002;
static const int MIIM_SUBMENU = 0x00000004;
static const int MIIM_CHECKMARKS = 0x00000008;
static const int MIIM_TYPE = 0x00000010;
static const int MIIM_DATA = 0x00000020;
static const int MIIM_STRING = 0x00000040;
static const int MIIM_BITMAP = 0x00000080;
static const int MIIM_FTYPE = 0x00000100;
static const int HBMMENU_CALLBACK = ((HBITMAP) -1);
static const int HBMMENU_SYSTEM = ((HBITMAP) 1);
static const int HBMMENU_MBAR_RESTORE = ((HBITMAP) 2);
static const int HBMMENU_MBAR_MINIMIZE = ((HBITMAP) 3);
static const int HBMMENU_MBAR_CLOSE = ((HBITMAP) 5);
static const int HBMMENU_MBAR_CLOSE_D = ((HBITMAP) 6);
static const int HBMMENU_MBAR_MINIMIZE_D = ((HBITMAP) 7);
static const int HBMMENU_POPUP_CLOSE = ((HBITMAP) 8);
static const int HBMMENU_POPUP_RESTORE = ((HBITMAP) 9);
static const int HBMMENU_POPUP_MAXIMIZE = ((HBITMAP) 10);
static const int HBMMENU_POPUP_MINIMIZE = ((HBITMAP) 11);
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType; // used if MIIM_TYPE (4.0) or MIIM_FTYPE (>4.0)
    UINT fState; // used if MIIM_STATE
    UINT wID; // used if MIIM_ID
    HMENU hSubMenu; // used if MIIM_SUBMENU
    HBITMAP hbmpChecked; // used if MIIM_CHECKMARKS
    HBITMAP hbmpUnchecked; // used if MIIM_CHECKMARKS
    ULONG_PTR dwItemData; // used if MIIM_DATA
    LPSTR dwTypeData; // used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
    UINT cch; // used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
    HBITMAP hbmpItem; // used if MIIM_BITMAP
} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType; // used if MIIM_TYPE (4.0) or MIIM_FTYPE (>4.0)
    UINT fState; // used if MIIM_STATE
    UINT wID; // used if MIIM_ID
    HMENU hSubMenu; // used if MIIM_SUBMENU
    HBITMAP hbmpChecked; // used if MIIM_CHECKMARKS
    HBITMAP hbmpUnchecked; // used if MIIM_CHECKMARKS
    ULONG_PTR dwItemData; // used if MIIM_DATA
    LPWSTR dwTypeData; // used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
    UINT cch; // used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
    HBITMAP hbmpItem; // used if MIIM_BITMAP
} MENUITEMINFOW, *LPMENUITEMINFOW;
typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
BOOL
InsertMenuItemA(
    HMENU hmenu,
    UINT item,
    BOOL fByPosition,
    LPCMENUITEMINFOA lpmi);
BOOL
InsertMenuItemW(
    HMENU hmenu,
    UINT item,
    BOOL fByPosition,
    LPCMENUITEMINFOW lpmi);
static const int InsertMenuItem = InsertMenuItemA;
BOOL
GetMenuItemInfoA(
    HMENU hmenu,
    UINT item,
    BOOL fByPosition,
    LPMENUITEMINFOA lpmii);
BOOL
GetMenuItemInfoW(
    HMENU hmenu,
    UINT item,
    BOOL fByPosition,
    LPMENUITEMINFOW lpmii);
static const int GetMenuItemInfo = GetMenuItemInfoA;
BOOL
SetMenuItemInfoA(
    HMENU hmenu,
    UINT item,
    BOOL fByPositon,
    LPCMENUITEMINFOA lpmii);
BOOL
SetMenuItemInfoW(
    HMENU hmenu,
    UINT item,
    BOOL fByPositon,
    LPCMENUITEMINFOW lpmii);
static const int SetMenuItemInfo = SetMenuItemInfoA;
static const long GMDI_USEDISABLED = 0x0001L;
static const long GMDI_GOINTOPOPUPS = 0x0002L;
UINT
GetMenuDefaultItem(
    HMENU hMenu,
    UINT fByPos,
    UINT gmdiFlags);
BOOL
SetMenuDefaultItem(
    HMENU hMenu,
    UINT uItem,
    UINT fByPos);
BOOL
GetMenuItemRect(
    HWND hWnd,
    HMENU hMenu,
    UINT uItem,
    LPRECT lprcItem);
int
MenuItemFromPoint(
    HWND hWnd,
    HMENU hMenu,
    POINT ptScreen);
static const long TPM_LEFTBUTTON = 0x0000L;
static const long TPM_RIGHTBUTTON = 0x0002L;
static const long TPM_LEFTALIGN = 0x0000L;
static const long TPM_CENTERALIGN = 0x0004L;
static const long TPM_RIGHTALIGN = 0x0008L;
static const long TPM_TOPALIGN = 0x0000L;
static const long TPM_VCENTERALIGN = 0x0010L;
static const long TPM_BOTTOMALIGN = 0x0020L;
static const long TPM_HORIZONTAL = 0x0000L;
static const long TPM_VERTICAL = 0x0040L;
static const long TPM_NONOTIFY = 0x0080L;
static const long TPM_RETURNCMD = 0x0100L;
static const long TPM_RECURSE = 0x0001L;
static const long TPM_HORPOSANIMATION = 0x0400L;
static const long TPM_HORNEGANIMATION = 0x0800L;
static const long TPM_VERPOSANIMATION = 0x1000L;
static const long TPM_VERNEGANIMATION = 0x2000L;
static const long TPM_NOANIMATION = 0x4000L;
static const long TPM_LAYOUTRTL = 0x8000L;
static const long TPM_WORKAREA = 0x10000L;
typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;
static const int DOF_EXECUTABLE = 0x8001;
static const int DOF_DOCUMENT = 0x8002;
static const int DOF_DIRECTORY = 0x8003;
static const int DOF_MULTIPLE = 0x8004;
static const int DOF_PROGMAN = 0x0001;
static const int DOF_SHELLDATA = 0x0002;
static const long DO_DROPFILE = 0x454C4946L;
static const long DO_PRINTFILE = 0x544E5250L;
DWORD
DragObject(
    HWND hwndParent,
    HWND hwndFrom,
    UINT fmt,
    ULONG_PTR data,
    HCURSOR hcur);
BOOL
DragDetect(
    HWND hwnd,
    POINT pt);
BOOL
DrawIcon(
    HDC hDC,
    int X,
    int Y,
    HICON hIcon);
static const int DT_TOP = 0x00000000;
static const int DT_LEFT = 0x00000000;
static const int DT_CENTER = 0x00000001;
static const int DT_RIGHT = 0x00000002;
static const int DT_VCENTER = 0x00000004;
static const int DT_BOTTOM = 0x00000008;
static const int DT_WORDBREAK = 0x00000010;
static const int DT_SINGLELINE = 0x00000020;
static const int DT_EXPANDTABS = 0x00000040;
static const int DT_TABSTOP = 0x00000080;
static const int DT_NOCLIP = 0x00000100;
static const int DT_EXTERNALLEADING = 0x00000200;
static const int DT_CALCRECT = 0x00000400;
static const int DT_NOPREFIX = 0x00000800;
static const int DT_INTERNAL = 0x00001000;
static const int DT_EDITCONTROL = 0x00002000;
static const int DT_PATH_ELLIPSIS = 0x00004000;
static const int DT_END_ELLIPSIS = 0x00008000;
static const int DT_MODIFYSTRING = 0x00010000;
static const int DT_RTLREADING = 0x00020000;
static const int DT_WORD_ELLIPSIS = 0x00040000;
static const int DT_NOFULLWIDTHCHARBREAK = 0x00080000;
static const int DT_HIDEPREFIX = 0x00100000;
static const int DT_PREFIXONLY = 0x00200000;
typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;
int
DrawTextA(
    HDC hdc,
    LPCSTR lpchText,
    int cchText,
    LPRECT lprc,
    UINT format);
int
DrawTextW(
    HDC hdc,
    LPCWSTR lpchText,
    int cchText,
    LPRECT lprc,
    UINT format);
static const int DrawText = DrawTextA;
int
DrawTextExA(
    HDC hdc,
    LPSTR lpchText,
    int cchText,
    LPRECT lprc,
    UINT format,
    LPDRAWTEXTPARAMS lpdtp);
int
DrawTextExW(
    HDC hdc,
    LPWSTR lpchText,
    int cchText,
    LPRECT lprc,
    UINT format,
    LPDRAWTEXTPARAMS lpdtp);
static const int DrawTextEx = DrawTextExA;
BOOL
GrayStringA(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);
BOOL
GrayStringW(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);
static const int GrayString = GrayStringA;
static const int DST_COMPLEX = 0x0000;
static const int DST_TEXT = 0x0001;
static const int DST_PREFIXTEXT = 0x0002;
static const int DST_ICON = 0x0003;
static const int DST_BITMAP = 0x0004;
static const int DSS_NORMAL = 0x0000;
static const int DSS_UNION = 0x0010;
static const int DSS_DISABLED = 0x0020;
static const int DSS_MONO = 0x0080;
static const int DSS_HIDEPREFIX = 0x0200;
static const int DSS_PREFIXONLY = 0x0400;
static const int DSS_RIGHT = 0x8000;
BOOL
DrawStateA(
    HDC hdc,
    HBRUSH hbrFore,
    DRAWSTATEPROC qfnCallBack,
    LPARAM lData,
    WPARAM wData,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);
BOOL
DrawStateW(
    HDC hdc,
    HBRUSH hbrFore,
    DRAWSTATEPROC qfnCallBack,
    LPARAM lData,
    WPARAM wData,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);
static const int DrawState = DrawStateA;
LONG
TabbedTextOutA(
    HDC hdc,
    int x,
    int y,
    LPCSTR lpString,
    int chCount,
    int nTabPositions,
    const INT *lpnTabStopPositions,
    int nTabOrigin);
LONG
TabbedTextOutW(
    HDC hdc,
    int x,
    int y,
    LPCWSTR lpString,
    int chCount,
    int nTabPositions,
    const INT *lpnTabStopPositions,
    int nTabOrigin);
static const int TabbedTextOut = TabbedTextOutA;
DWORD
GetTabbedTextExtentA(
    HDC hdc,
    LPCSTR lpString,
    int chCount,
    int nTabPositions,
    const INT *lpnTabStopPositions);
DWORD
GetTabbedTextExtentW(
    HDC hdc,
    LPCWSTR lpString,
    int chCount,
    int nTabPositions,
    const INT *lpnTabStopPositions);
static const int GetTabbedTextExtent = GetTabbedTextExtentA;
BOOL
UpdateWindow(
    HWND hWnd);
HWND
SetActiveWindow(
    HWND hWnd);
HWND
GetForegroundWindow(
    void);
BOOL
PaintDesktop(
    HDC hdc);
void
SwitchToThisWindow(
    HWND hwnd,
    BOOL fUnknown);
BOOL
SetForegroundWindow(
    HWND hWnd);
BOOL
AllowSetForegroundWindow(
    DWORD dwProcessId);
static const int ASFW_ANY = ((DWORD)-1);
BOOL
LockSetForegroundWindow(
    UINT uLockCode);
static const int LSFW_LOCK = 1;
static const int LSFW_UNLOCK = 2;
HWND
WindowFromDC(
    HDC hDC);
HDC
GetDC(
    HWND hWnd);
HDC
GetDCEx(
    HWND hWnd,
    HRGN hrgnClip,
    DWORD flags);
static const long DCX_WINDOW = 0x00000001L;
static const long DCX_CACHE = 0x00000002L;
static const long DCX_NORESETATTRS = 0x00000004L;
static const long DCX_CLIPCHILDREN = 0x00000008L;
static const long DCX_CLIPSIBLINGS = 0x00000010L;
static const long DCX_PARENTCLIP = 0x00000020L;
static const long DCX_EXCLUDERGN = 0x00000040L;
static const long DCX_INTERSECTRGN = 0x00000080L;
static const long DCX_EXCLUDEUPDATE = 0x00000100L;
static const long DCX_INTERSECTUPDATE = 0x00000200L;
static const long DCX_LOCKWINDOWUPDATE = 0x00000400L;
static const long DCX_VALIDATE = 0x00200000L;
HDC
GetWindowDC(
    HWND hWnd);
int
ReleaseDC(
    HWND hWnd,
    HDC hDC);
HDC
BeginPaint(
    HWND hWnd,
    LPPAINTSTRUCT lpPaint);
BOOL
EndPaint(
    HWND hWnd,
    const PAINTSTRUCT *lpPaint);
BOOL
GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    BOOL bErase);
int
GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);
int
SetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bRedraw);
int
GetWindowRgn(
    HWND hWnd,
    HRGN hRgn);
int
GetWindowRgnBox(
    HWND hWnd,
    LPRECT lprc);
int
ExcludeUpdateRgn(
    HDC hDC,
    HWND hWnd);
BOOL
InvalidateRect(
    HWND hWnd,
    const RECT *lpRect,
    BOOL bErase);
BOOL
ValidateRect(
    HWND hWnd,
    const RECT *lpRect);
BOOL
InvalidateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);
BOOL
ValidateRgn(
    HWND hWnd,
    HRGN hRgn);
BOOL
RedrawWindow(
    HWND hWnd,
    const RECT *lprcUpdate,
    HRGN hrgnUpdate,
    UINT flags);
static const int RDW_INVALIDATE = 0x0001;
static const int RDW_INTERNALPAINT = 0x0002;
static const int RDW_ERASE = 0x0004;
static const int RDW_VALIDATE = 0x0008;
static const int RDW_NOINTERNALPAINT = 0x0010;
static const int RDW_NOERASE = 0x0020;
static const int RDW_NOCHILDREN = 0x0040;
static const int RDW_ALLCHILDREN = 0x0080;
static const int RDW_UPDATENOW = 0x0100;
static const int RDW_ERASENOW = 0x0200;
static const int RDW_FRAME = 0x0400;
static const int RDW_NOFRAME = 0x0800;
BOOL
LockWindowUpdate(
    HWND hWndLock);
BOOL
ScrollWindow(
    HWND hWnd,
    int XAmount,
    int YAmount,
    const RECT *lpRect,
    const RECT *lpClipRect);
BOOL
ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    const RECT *lprcScroll,
    const RECT *lprcClip,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate);
int
ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    const RECT *prcScroll,
    const RECT *prcClip,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    UINT flags);
static const int SW_SCROLLCHILDREN = 0x0001;
static const int SW_INVALIDATE = 0x0002;
static const int SW_ERASE = 0x0004;
static const int SW_SMOOTHSCROLL = 0x0010;
int
SetScrollPos(
    HWND hWnd,
    int nBar,
    int nPos,
    BOOL bRedraw);
int
GetScrollPos(
    HWND hWnd,
    int nBar);
BOOL
SetScrollRange(
    HWND hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    BOOL bRedraw);
BOOL
GetScrollRange(
    HWND hWnd,
    int nBar,
    LPINT lpMinPos,
    LPINT lpMaxPos);
BOOL
ShowScrollBar(
    HWND hWnd,
    int wBar,
    BOOL bShow);
BOOL
EnableScrollBar(
    HWND hWnd,
    UINT wSBflags,
    UINT wArrows);
static const int ESB_ENABLE_BOTH = 0x0000;
static const int ESB_DISABLE_BOTH = 0x0003;
static const int ESB_DISABLE_LEFT = 0x0001;
static const int ESB_DISABLE_RIGHT = 0x0002;
static const int ESB_DISABLE_UP = 0x0001;
static const int ESB_DISABLE_DOWN = 0x0002;
static const int ESB_DISABLE_LTUP = ESB_DISABLE_LEFT;
static const int ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT;
BOOL
SetPropA(
    HWND hWnd,
    LPCSTR lpString,
    HANDLE hData);
BOOL
SetPropW(
    HWND hWnd,
    LPCWSTR lpString,
    HANDLE hData);
static const int SetProp = SetPropA;
HANDLE
GetPropA(
    HWND hWnd,
    LPCSTR lpString);
HANDLE
GetPropW(
    HWND hWnd,
    LPCWSTR lpString);
static const int GetProp = GetPropA;
HANDLE
RemovePropA(
    HWND hWnd,
    LPCSTR lpString);
HANDLE
RemovePropW(
    HWND hWnd,
    LPCWSTR lpString);
static const int RemoveProp = RemovePropA;
int
EnumPropsExA(
    HWND hWnd,
    PROPENUMPROCEXA lpEnumFunc,
    LPARAM lParam);
int
EnumPropsExW(
    HWND hWnd,
    PROPENUMPROCEXW lpEnumFunc,
    LPARAM lParam);
static const int EnumPropsEx = EnumPropsExA;
int
EnumPropsA(
    HWND hWnd,
    PROPENUMPROCA lpEnumFunc);
int
EnumPropsW(
    HWND hWnd,
    PROPENUMPROCW lpEnumFunc);
static const int EnumProps = EnumPropsA;
BOOL
SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString);
BOOL
SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString);
static const int SetWindowText = SetWindowTextA;
int
GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount);
int
GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);
static const int GetWindowText = GetWindowTextA;
int
GetWindowTextLengthA(
    HWND hWnd);
int
GetWindowTextLengthW(
    HWND hWnd);
static const int GetWindowTextLength = GetWindowTextLengthA;
BOOL
GetClientRect(
    HWND hWnd,
    LPRECT lpRect);
BOOL
GetWindowRect(
    HWND hWnd,
    LPRECT lpRect);
BOOL
AdjustWindowRect(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu);
BOOL
AdjustWindowRectEx(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu,
    DWORD dwExStyle);
static const int HELPINFO_WINDOW = 0x0001;
static const int HELPINFO_MENUITEM = 0x0002;
typedef struct tagHELPINFO /* Structure pointed to by lParam of WM_HELP */
{
    UINT cbSize; /* Size in bytes of this struct  */
    int iContextType; /* Either HELPINFO_WINDOW or HELPINFO_MENUITEM */
    int iCtrlId; /* Control Id or a Menu item Id. */
    HANDLE hItemHandle; /* hWnd of control or hMenu.     */
    DWORD_PTR dwContextId; /* Context Id associated with this item */
    POINT MousePos; /* Mouse Position in screen co-ordinates */
} HELPINFO, *LPHELPINFO;
BOOL
SetWindowContextHelpId(
    HWND,
    DWORD);
DWORD
GetWindowContextHelpId(
    HWND);
BOOL
SetMenuContextHelpId(
    HMENU,
    DWORD);
DWORD
GetMenuContextHelpId(
    HMENU);
static const long MB_OK = 0x00000000L;
static const long MB_OKCANCEL = 0x00000001L;
static const long MB_ABORTRETRYIGNORE = 0x00000002L;
static const long MB_YESNOCANCEL = 0x00000003L;
static const long MB_YESNO = 0x00000004L;
static const long MB_RETRYCANCEL = 0x00000005L;
static const long MB_CANCELTRYCONTINUE = 0x00000006L;
static const long MB_ICONHAND = 0x00000010L;
static const long MB_ICONQUESTION = 0x00000020L;
static const long MB_ICONEXCLAMATION = 0x00000030L;
static const long MB_ICONASTERISK = 0x00000040L;
static const long MB_USERICON = 0x00000080L;
static const int MB_ICONWARNING = MB_ICONEXCLAMATION;
static const int MB_ICONERROR = MB_ICONHAND;
static const int MB_ICONINFORMATION = MB_ICONASTERISK;
static const int MB_ICONSTOP = MB_ICONHAND;
static const long MB_DEFBUTTON1 = 0x00000000L;
static const long MB_DEFBUTTON2 = 0x00000100L;
static const long MB_DEFBUTTON3 = 0x00000200L;
static const long MB_DEFBUTTON4 = 0x00000300L;
static const long MB_APPLMODAL = 0x00000000L;
static const long MB_SYSTEMMODAL = 0x00001000L;
static const long MB_TASKMODAL = 0x00002000L;
static const long MB_HELP = 0x00004000L;
static const long MB_NOFOCUS = 0x00008000L;
static const long MB_SETFOREGROUND = 0x00010000L;
static const long MB_DEFAULT_DESKTOP_ONLY = 0x00020000L;
static const long MB_TOPMOST = 0x00040000L;
static const long MB_RIGHT = 0x00080000L;
static const long MB_RTLREADING = 0x00100000L;
static const long MB_SERVICE_NOTIFICATION = 0x00200000L;
static const long MB_SERVICE_NOTIFICATION_NT3X = 0x00040000L;
static const int MB_TYPEMASK = 0x0000000FL;
static const long MB_ICONMASK = 0x000000F0L;
static const long MB_DEFMASK = 0x00000F00L;
static const long MB_MODEMASK = 0x00003000L;
static const long MB_MISCMASK = 0x0000C000L;
int
MessageBoxA(
    HWND hWnd,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType);
int
MessageBoxW(
    HWND hWnd,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);
static const int MessageBox = MessageBoxA;
int
MessageBoxExA(
    HWND hWnd,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType,
    WORD wLanguageId);
int
MessageBoxExW(
    HWND hWnd,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType,
    WORD wLanguageId);
static const int MessageBoxEx = MessageBoxExA;
typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
int
MessageBoxIndirectA(
    const MSGBOXPARAMSA * lpmbp);
int
MessageBoxIndirectW(
    const MSGBOXPARAMSW * lpmbp);
static const int MessageBoxIndirect = MessageBoxIndirectA;
BOOL
MessageBeep(
    UINT uType);
int
ShowCursor(
    BOOL bShow);
BOOL
SetCursorPos(
    int X,
    int Y);
BOOL
SetPhysicalCursorPos(
    int X,
    int Y);
HCURSOR
SetCursor(
    HCURSOR hCursor);
BOOL
GetCursorPos(
    LPPOINT lpPoint);
BOOL
GetPhysicalCursorPos(
    LPPOINT lpPoint);
BOOL
ClipCursor(
    const RECT *lpRect);
BOOL
GetClipCursor(
    LPRECT lpRect);
HCURSOR
GetCursor(
    void);
BOOL
CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap,
    int nWidth,
    int nHeight);
UINT
GetCaretBlinkTime(
    void);
BOOL
SetCaretBlinkTime(
    UINT uMSeconds);
BOOL
DestroyCaret(
    void);
BOOL
HideCaret(
    HWND hWnd);
BOOL
ShowCaret(
    HWND hWnd);
BOOL
SetCaretPos(
    int X,
    int Y);
BOOL
GetCaretPos(
    LPPOINT lpPoint);
BOOL
ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint);
BOOL
ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint);
BOOL
LogicalToPhysicalPoint(
    HWND hWnd,
    LPPOINT lpPoint);
BOOL
PhysicalToLogicalPoint(
    HWND hWnd,
    LPPOINT lpPoint);
int
MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    UINT cPoints);
HWND
WindowFromPoint(
    POINT Point);
HWND
WindowFromPhysicalPoint(
    POINT Point);
HWND
ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point);
static const int CWP_ALL = 0x0000;
static const int CWP_SKIPINVISIBLE = 0x0001;
static const int CWP_SKIPDISABLED = 0x0002;
static const int CWP_SKIPTRANSPARENT = 0x0004;
HWND
ChildWindowFromPointEx(
    HWND hwnd,
    POINT pt,
    UINT flags);
static const int CTLCOLOR_MSGBOX = 0;
static const int CTLCOLOR_EDIT = 1;
static const int CTLCOLOR_LISTBOX = 2;
static const int CTLCOLOR_BTN = 3;
static const int CTLCOLOR_DLG = 4;
static const int CTLCOLOR_SCROLLBAR = 5;
static const int CTLCOLOR_STATIC = 6;
static const int CTLCOLOR_MAX = 7;
static const int COLOR_SCROLLBAR = 0;
static const int COLOR_BACKGROUND = 1;
static const int COLOR_ACTIVECAPTION = 2;
static const int COLOR_INACTIVECAPTION = 3;
static const int COLOR_MENU = 4;
static const int COLOR_WINDOW = 5;
static const int COLOR_WINDOWFRAME = 6;
static const int COLOR_MENUTEXT = 7;
static const int COLOR_WINDOWTEXT = 8;
static const int COLOR_CAPTIONTEXT = 9;
static const int COLOR_ACTIVEBORDER = 10;
static const int COLOR_INACTIVEBORDER = 11;
static const int COLOR_APPWORKSPACE = 12;
static const int COLOR_HIGHLIGHT = 13;
static const int COLOR_HIGHLIGHTTEXT = 14;
static const int COLOR_BTNFACE = 15;
static const int COLOR_BTNSHADOW = 16;
static const int COLOR_GRAYTEXT = 17;
static const int COLOR_BTNTEXT = 18;
static const int COLOR_INACTIVECAPTIONTEXT = 19;
static const int COLOR_BTNHIGHLIGHT = 20;
static const int COLOR_3DDKSHADOW = 21;
static const int COLOR_3DLIGHT = 22;
static const int COLOR_INFOTEXT = 23;
static const int COLOR_INFOBK = 24;
static const int COLOR_HOTLIGHT = 26;
static const int COLOR_GRADIENTACTIVECAPTION = 27;
static const int COLOR_GRADIENTINACTIVECAPTION = 28;
static const int COLOR_MENUHILIGHT = 29;
static const int COLOR_MENUBAR = 30;
static const int COLOR_DESKTOP = COLOR_BACKGROUND;
static const int COLOR_3DFACE = COLOR_BTNFACE;
static const int COLOR_3DSHADOW = COLOR_BTNSHADOW;
static const int COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT;
static const int COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT;
static const int COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT;
DWORD
GetSysColor(
    int nIndex);
HBRUSH
GetSysColorBrush(
    int nIndex);
BOOL
SetSysColors(
    int cElements,
    const INT * lpaElements,
    const COLORREF * lpaRgbValues);
BOOL
DrawFocusRect(
    HDC hDC,
    const RECT * lprc);
int
FillRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);
int
FrameRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);
BOOL
InvertRect(
    HDC hDC,
    const RECT *lprc);
BOOL
SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom);
BOOL
SetRectEmpty(
    LPRECT lprc);
BOOL
CopyRect(
    LPRECT lprcDst,
    const RECT *lprcSrc);
BOOL
InflateRect(
    LPRECT lprc,
    int dx,
    int dy);
BOOL
IntersectRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);
BOOL
UnionRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);
BOOL
SubtractRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);
BOOL
OffsetRect(
    LPRECT lprc,
    int dx,
    int dy);
BOOL
IsRectEmpty(
    const RECT *lprc);
BOOL
EqualRect(
    const RECT *lprc1,
    const RECT *lprc2);
BOOL
PtInRect(
    const RECT *lprc,
    POINT pt);
WORD
GetWindowWord(
    HWND hWnd,
    int nIndex);
WORD
SetWindowWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);
LONG
GetWindowLongA(
    HWND hWnd,
    int nIndex);
LONG
GetWindowLongW(
    HWND hWnd,
    int nIndex);
static const int GetWindowLong = GetWindowLongA;
LONG
SetWindowLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
LONG
SetWindowLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
static const int SetWindowLong = SetWindowLongA;
LONG_PTR
GetWindowLongPtrA(
    HWND hWnd,
    int nIndex);
LONG_PTR
GetWindowLongPtrW(
    HWND hWnd,
    int nIndex);
static const int GetWindowLongPtr = GetWindowLongPtrA;
LONG_PTR
SetWindowLongPtrA(
    HWND hWnd,
    int nIndex,
    LONG_PTR dwNewLong);
LONG_PTR
SetWindowLongPtrW(
    HWND hWnd,
    int nIndex,
    LONG_PTR dwNewLong);
static const int SetWindowLongPtr = SetWindowLongPtrA;
WORD
GetClassWord(
    HWND hWnd,
    int nIndex);
WORD
SetClassWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);
DWORD
GetClassLongA(
    HWND hWnd,
    int nIndex);
DWORD
GetClassLongW(
    HWND hWnd,
    int nIndex);
static const int GetClassLong = GetClassLongA;
DWORD
SetClassLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
DWORD
SetClassLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
static const int SetClassLong = SetClassLongA;
ULONG_PTR
GetClassLongPtrA(
    HWND hWnd,
    int nIndex);
ULONG_PTR
GetClassLongPtrW(
    HWND hWnd,
    int nIndex);
static const int GetClassLongPtr = GetClassLongPtrA;
ULONG_PTR
SetClassLongPtrA(
    HWND hWnd,
    int nIndex,
    LONG_PTR dwNewLong);
ULONG_PTR
SetClassLongPtrW(
    HWND hWnd,
    int nIndex,
    LONG_PTR dwNewLong);
static const int SetClassLongPtr = SetClassLongPtrA;
BOOL
GetProcessDefaultLayout(
    DWORD *pdwDefaultLayout);
BOOL
SetProcessDefaultLayout(
    DWORD dwDefaultLayout);
HWND
GetDesktopWindow(
    void);
HWND
GetParent(
    HWND hWnd);
HWND
SetParent(
    HWND hWndChild,
    HWND hWndNewParent);
BOOL
EnumChildWindows(
    HWND hWndParent,
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);
HWND
FindWindowA(
    LPCSTR lpClassName,
    LPCSTR lpWindowName);
HWND
FindWindowW(
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName);
static const int FindWindow = FindWindowA;
HWND
FindWindowExA(
    HWND hWndParent,
    HWND hWndChildAfter,
    LPCSTR lpszClass,
    LPCSTR lpszWindow);
HWND
FindWindowExW(
    HWND hWndParent,
    HWND hWndChildAfter,
    LPCWSTR lpszClass,
    LPCWSTR lpszWindow);
static const int FindWindowEx = FindWindowExA;
HWND
GetShellWindow(
    void);
BOOL
RegisterShellHookWindow(
    HWND hwnd);
BOOL
DeregisterShellHookWindow(
    HWND hwnd);
BOOL
EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);
BOOL
EnumThreadWindows(
    DWORD dwThreadId,
    WNDENUMPROC lpfn,
    LPARAM lParam);
static const int EnumTaskWindows(hTask,lpfn,lParam) = EnumThreadWindows(HandleToUlong(hTask), lpfn, lParam);
int
GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount
    );
int
GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount
    );
static const int GetClassName = GetClassNameA;
HWND
GetTopWindow(
    HWND hWnd);
static const int GetNextWindow(hWnd,wCmd) = GetWindow(hWnd, wCmd);
static const int GetSysModalWindow() = (NULL);
static const int SetSysModalWindow(hWnd) = (NULL);
DWORD
GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId);
BOOL
IsGUIThread(
    BOOL bConvert);
static const int GetWindowTask(hWnd) = ((HANDLE)(DWORD_PTR)GetWindowThreadProcessId(hWnd, NULL));
HWND
GetLastActivePopup(
    HWND hWnd);
static const int GW_HWNDFIRST = 0;
static const int GW_HWNDLAST = 1;
static const int GW_HWNDNEXT = 2;
static const int GW_HWNDPREV = 3;
static const int GW_OWNER = 4;
static const int GW_CHILD = 5;
static const int GW_ENABLEDPOPUP = 6;
static const int GW_MAX = 6;
HWND
GetWindow(
    HWND hWnd,
    UINT uCmd);
HHOOK
SetWindowsHookA(
    int nFilterType,
    HOOKPROC pfnFilterProc);
HHOOK
SetWindowsHookW(
    int nFilterType,
    HOOKPROC pfnFilterProc);
static const int SetWindowsHook = SetWindowsHookA;
BOOL
UnhookWindowsHook(
    int nCode,
    HOOKPROC pfnFilterProc);
HHOOK
SetWindowsHookExA(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);
HHOOK
SetWindowsHookExW(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);
static const int SetWindowsHookEx = SetWindowsHookExA;
BOOL
UnhookWindowsHookEx(
    HHOOK hhk);
LRESULT
CallNextHookEx(
    HHOOK hhk,
    int nCode,
    WPARAM wParam,
    LPARAM lParam);
static const int DefHookProc(nCode,wParam,lParam,phhk) = CallNextHookEx(*phhk, nCode, wParam, lParam);
static const long MF_INSERT = 0x00000000L;
static const long MF_CHANGE = 0x00000080L;
static const long MF_APPEND = 0x00000100L;
static const long MF_DELETE = 0x00000200L;
static const long MF_REMOVE = 0x00001000L;
static const long MF_BYCOMMAND = 0x00000000L;
static const long MF_BYPOSITION = 0x00000400L;
static const long MF_SEPARATOR = 0x00000800L;
static const long MF_ENABLED = 0x00000000L;
static const long MF_GRAYED = 0x00000001L;
static const long MF_DISABLED = 0x00000002L;
static const long MF_UNCHECKED = 0x00000000L;
static const long MF_CHECKED = 0x00000008L;
static const long MF_USECHECKBITMAPS = 0x00000200L;
static const long MF_STRING = 0x00000000L;
static const long MF_BITMAP = 0x00000004L;
static const long MF_OWNERDRAW = 0x00000100L;
static const long MF_POPUP = 0x00000010L;
static const long MF_MENUBARBREAK = 0x00000020L;
static const long MF_MENUBREAK = 0x00000040L;
static const long MF_UNHILITE = 0x00000000L;
static const long MF_HILITE = 0x00000080L;
static const long MF_DEFAULT = 0x00001000L;
static const long MF_SYSMENU = 0x00002000L;
static const long MF_HELP = 0x00004000L;
static const long MF_RIGHTJUSTIFY = 0x00004000L;
static const long MF_MOUSESELECT = 0x00008000L;
static const long MF_END = 0x00000080L;
static const int MFT_STRING = MF_STRING;
static const int MFT_BITMAP = MF_BITMAP;
static const int MFT_MENUBARBREAK = MF_MENUBARBREAK;
static const int MFT_MENUBREAK = MF_MENUBREAK;
static const int MFT_OWNERDRAW = MF_OWNERDRAW;
static const long MFT_RADIOCHECK = 0x00000200L;
static const int MFT_SEPARATOR = MF_SEPARATOR;
static const long MFT_RIGHTORDER = 0x00002000L;
static const int MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY;
static const long MFS_GRAYED = 0x00000003L;
static const int MFS_DISABLED = MFS_GRAYED;
static const int MFS_CHECKED = MF_CHECKED;
static const int MFS_HILITE = MF_HILITE;
static const int MFS_ENABLED = MF_ENABLED;
static const int MFS_UNCHECKED = MF_UNCHECKED;
static const int MFS_UNHILITE = MF_UNHILITE;
static const int MFS_DEFAULT = MF_DEFAULT;
BOOL
CheckMenuRadioItem(
    HMENU hmenu,
    UINT first,
    UINT last,
    UINT check,
    UINT flags);
typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;
typedef struct { // version 0
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
static const long MF_END = 0x00000080L;
static const int SC_SIZE = 0xF000;
static const int SC_MOVE = 0xF010;
static const int SC_MINIMIZE = 0xF020;
static const int SC_MAXIMIZE = 0xF030;
static const int SC_NEXTWINDOW = 0xF040;
static const int SC_PREVWINDOW = 0xF050;
static const int SC_CLOSE = 0xF060;
static const int SC_VSCROLL = 0xF070;
static const int SC_HSCROLL = 0xF080;
static const int SC_MOUSEMENU = 0xF090;
static const int SC_KEYMENU = 0xF100;
static const int SC_ARRANGE = 0xF110;
static const int SC_RESTORE = 0xF120;
static const int SC_TASKLIST = 0xF130;
static const int SC_SCREENSAVE = 0xF140;
static const int SC_HOTKEY = 0xF150;
static const int SC_DEFAULT = 0xF160;
static const int SC_MONITORPOWER = 0xF170;
static const int SC_CONTEXTHELP = 0xF180;
static const double SC_SEPARATOR = 0xF00F;
static const int SCF_ISSECURE = 0x00000001;
static const int GET_SC_WPARAM(wParam) = ((int)wParam & 0xFFF0);
static const int SC_ICON = SC_MINIMIZE;
static const int SC_ZOOM = SC_MAXIMIZE;
HBITMAP
LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName);
HBITMAP
LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName);
static const int LoadBitmap = LoadBitmapA;
HCURSOR
LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName);
HCURSOR
LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName);
static const int LoadCursor = LoadCursorA;
HCURSOR
LoadCursorFromFileA(
    LPCSTR lpFileName);
HCURSOR
LoadCursorFromFileW(
    LPCWSTR lpFileName);
static const int LoadCursorFromFile = LoadCursorFromFileA;
HCURSOR
CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    const void *pvANDPlane,
    const void *pvXORPlane);
BOOL
DestroyCursor(
    HCURSOR hCursor);
static const int CopyCursor(pcur) = ((HCURSOR)CopyIcon((HICON)(pcur)));
static const int IDC_ARROW = MAKEINTRESOURCE(32512);
static const int IDC_IBEAM = MAKEINTRESOURCE(32513);
static const int IDC_WAIT = MAKEINTRESOURCE(32514);
static const int IDC_CROSS = MAKEINTRESOURCE(32515);
static const int IDC_UPARROW = MAKEINTRESOURCE(32516);
static const int IDC_SIZE = MAKEINTRESOURCE(32640);
static const int IDC_ICON = MAKEINTRESOURCE(32641);
static const int IDC_SIZENWSE = MAKEINTRESOURCE(32642);
static const int IDC_SIZENESW = MAKEINTRESOURCE(32643);
static const int IDC_SIZEWE = MAKEINTRESOURCE(32644);
static const int IDC_SIZENS = MAKEINTRESOURCE(32645);
static const int IDC_SIZEALL = MAKEINTRESOURCE(32646);
static const int IDC_NO = MAKEINTRESOURCE(32648);
static const int IDC_HAND = MAKEINTRESOURCE(32649);
static const int IDC_APPSTARTING = MAKEINTRESOURCE(32650);
static const int IDC_HELP = MAKEINTRESOURCE(32651);
BOOL
SetSystemCursor(
    HCURSOR hcur,
    DWORD id);
typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;
HICON
LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName);
HICON
LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName);
static const int LoadIcon = LoadIconA;
UINT
PrivateExtractIconsA(
    LPCSTR szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    HICON *phicon,
    UINT *piconid,
    UINT nIcons,
    UINT flags);
UINT
PrivateExtractIconsW(
    LPCWSTR szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    HICON *phicon,
    UINT *piconid,
    UINT nIcons,
    UINT flags);
static const int PrivateExtractIcons = PrivateExtractIconsA;
HICON
CreateIcon(
    HINSTANCE hInstance,
    int nWidth,
    int nHeight,
    BYTE cPlanes,
    BYTE cBitsPixel,
    const BYTE *lpbANDbits,
    const BYTE *lpbXORbits);
BOOL
DestroyIcon(
    HICON hIcon);
int
LookupIconIdFromDirectory(
    PBYTE presbits,
    BOOL fIcon);
int
LookupIconIdFromDirectoryEx(
    PBYTE presbits,
    BOOL fIcon,
    int cxDesired,
    int cyDesired,
    UINT Flags);
HICON
CreateIconFromResource(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL fIcon,
    DWORD dwVer);
HICON
CreateIconFromResourceEx(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL fIcon,
    DWORD dwVer,
    int cxDesired,
    int cyDesired,
    UINT Flags);
typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;
static const int IMAGE_BITMAP = 0;
static const int IMAGE_ICON = 1;
static const int IMAGE_CURSOR = 2;
static const int IMAGE_ENHMETAFILE = 3;
static const int LR_DEFAULTCOLOR = 0x00000000;
static const int LR_MONOCHROME = 0x00000001;
static const int LR_COLOR = 0x00000002;
static const int LR_COPYRETURNORG = 0x00000004;
static const int LR_COPYDELETEORG = 0x00000008;
static const int LR_LOADFROMFILE = 0x00000010;
static const int LR_LOADTRANSPARENT = 0x00000020;
static const int LR_DEFAULTSIZE = 0x00000040;
static const int LR_VGACOLOR = 0x00000080;
static const int LR_LOADMAP3DCOLORS = 0x00001000;
static const int LR_CREATEDIBSECTION = 0x00002000;
static const int LR_COPYFROMRESOURCE = 0x00004000;
static const int LR_SHARED = 0x00008000;
HANDLE
LoadImageA(
    HINSTANCE hInst,
    LPCSTR name,
    UINT type,
    int cx,
    int cy,
    UINT fuLoad);
HANDLE
LoadImageW(
    HINSTANCE hInst,
    LPCWSTR name,
    UINT type,
    int cx,
    int cy,
    UINT fuLoad);
static const int LoadImage = LoadImageA;
HANDLE
CopyImage(
    HANDLE h,
    UINT type,
    int cx,
    int cy,
    UINT flags);
static const int DI_MASK = 0x0001;
static const int DI_IMAGE = 0x0002;
static const int DI_NORMAL = 0x0003;
static const int DI_COMPAT = 0x0004;
static const int DI_DEFAULTSIZE = 0x0008;
static const int DI_NOMIRROR = 0x0010;
 BOOL DrawIconEx(
    HDC hdc,
    int xLeft,
    int yTop,
    HICON hIcon,
    int cxWidth,
    int cyWidth,
    UINT istepIfAniCur,
    HBRUSH hbrFlickerFreeDraw,
    UINT diFlags);
HICON
CreateIconIndirect(
    PICONINFO piconinfo);
HICON
CopyIcon(
    HICON hIcon);
BOOL
GetIconInfo(
    HICON hIcon,
    PICONINFO piconinfo);
typedef struct _ICONINFOEXA {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;
typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
BOOL
GetIconInfoExA(
    HICON hicon,
    PICONINFOEXA piconinfo);
BOOL
GetIconInfoExW(
    HICON hicon,
    PICONINFOEXW piconinfo);
static const int GetIconInfoEx = GetIconInfoExA;
static const int RES_ICON = 1;
static const int RES_CURSOR = 2;
static const int ORD_LANGDRIVER = 1;
static const int IDI_APPLICATION = MAKEINTRESOURCE(32512);
static const int IDI_HAND = MAKEINTRESOURCE(32513);
static const int IDI_QUESTION = MAKEINTRESOURCE(32514);
static const int IDI_EXCLAMATION = MAKEINTRESOURCE(32515);
static const int IDI_ASTERISK = MAKEINTRESOURCE(32516);
static const int IDI_WINLOGO = MAKEINTRESOURCE(32517);
static const int IDI_SHIELD = MAKEINTRESOURCE(32518);
static const int IDI_WARNING = IDI_EXCLAMATION;
static const int IDI_ERROR = IDI_HAND;
static const int IDI_INFORMATION = IDI_ASTERISK;
int
LoadStringA(
    HINSTANCE hInstance,
    UINT uID,
    LPSTR lpBuffer,
    int cchBufferMax);
int
LoadStringW(
    HINSTANCE hInstance,
    UINT uID,
    LPWSTR lpBuffer,
    int cchBufferMax);
static const int LoadString = LoadStringA;
static const int IDOK = 1;
static const int IDCANCEL = 2;
static const int IDABORT = 3;
static const int IDRETRY = 4;
static const int IDIGNORE = 5;
static const int IDYES = 6;
static const int IDNO = 7;
static const int IDCLOSE = 8;
static const int IDHELP = 9;
static const int IDTRYAGAIN = 10;
static const int IDCONTINUE = 11;
static const int IDTIMEOUT = 32000;
static const long ES_LEFT = 0x0000L;
static const long ES_CENTER = 0x0001L;
static const long ES_RIGHT = 0x0002L;
static const long ES_MULTILINE = 0x0004L;
static const long ES_UPPERCASE = 0x0008L;
static const long ES_LOWERCASE = 0x0010L;
static const long ES_PASSWORD = 0x0020L;
static const long ES_AUTOVSCROLL = 0x0040L;
static const long ES_AUTOHSCROLL = 0x0080L;
static const long ES_NOHIDESEL = 0x0100L;
static const long ES_OEMCONVERT = 0x0400L;
static const long ES_READONLY = 0x0800L;
static const long ES_WANTRETURN = 0x1000L;
static const long ES_NUMBER = 0x2000L;
static const int EN_SETFOCUS = 0x0100;
static const int EN_KILLFOCUS = 0x0200;
static const int EN_CHANGE = 0x0300;
static const int EN_UPDATE = 0x0400;
static const int EN_ERRSPACE = 0x0500;
static const int EN_MAXTEXT = 0x0501;
static const int EN_HSCROLL = 0x0601;
static const int EN_VSCROLL = 0x0602;
static const int EN_ALIGN_LTR_EC = 0x0700;
static const int EN_ALIGN_RTL_EC = 0x0701;
static const int EC_LEFTMARGIN = 0x0001;
static const int EC_RIGHTMARGIN = 0x0002;
static const int EC_USEFONTINFO = 0xffff;
static const int EMSIS_COMPOSITIONSTRING = 0x0001;
static const int EIMES_GETCOMPSTRATONCE = 0x0001;
static const int EIMES_CANCELCOMPSTRINFOCUS = 0x0002;
static const int EIMES_COMPLETECOMPSTRKILLFOCUS = 0x0004;
static const int EM_GETSEL = 0x00B0;
static const int EM_SETSEL = 0x00B1;
static const int EM_GETRECT = 0x00B2;
static const int EM_SETRECT = 0x00B3;
static const int EM_SETRECTNP = 0x00B4;
static const int EM_SCROLL = 0x00B5;
static const int EM_LINESCROLL = 0x00B6;
static const int EM_SCROLLCARET = 0x00B7;
static const int EM_GETMODIFY = 0x00B8;
static const int EM_SETMODIFY = 0x00B9;
static const int EM_GETLINECOUNT = 0x00BA;
static const int EM_LINEINDEX = 0x00BB;
static const int EM_SETHANDLE = 0x00BC;
static const int EM_GETHANDLE = 0x00BD;
static const int EM_GETTHUMB = 0x00BE;
static const int EM_LINELENGTH = 0x00C1;
static const int EM_REPLACESEL = 0x00C2;
static const int EM_GETLINE = 0x00C4;
static const int EM_LIMITTEXT = 0x00C5;
static const int EM_CANUNDO = 0x00C6;
static const int EM_UNDO = 0x00C7;
static const int EM_FMTLINES = 0x00C8;
static const int EM_LINEFROMCHAR = 0x00C9;
static const int EM_SETTABSTOPS = 0x00CB;
static const int EM_SETPASSWORDCHAR = 0x00CC;
static const int EM_EMPTYUNDOBUFFER = 0x00CD;
static const int EM_GETFIRSTVISIBLELINE = 0x00CE;
static const int EM_SETREADONLY = 0x00CF;
static const int EM_SETWORDBREAKPROC = 0x00D0;
static const int EM_GETWORDBREAKPROC = 0x00D1;
static const int EM_GETPASSWORDCHAR = 0x00D2;
static const int EM_SETMARGINS = 0x00D3;
static const int EM_GETMARGINS = 0x00D4;
static const int EM_SETLIMITTEXT = EM_LIMITTEXT;
static const int EM_GETLIMITTEXT = 0x00D5;
static const int EM_POSFROMCHAR = 0x00D6;
static const int EM_CHARFROMPOS = 0x00D7;
static const int EM_SETIMESTATUS = 0x00D8;
static const int EM_GETIMESTATUS = 0x00D9;
static const int WB_LEFT = 0;
static const int WB_RIGHT = 1;
static const int WB_ISDELIMITER = 2;
static const long BS_PUSHBUTTON = 0x00000000L;
static const long BS_DEFPUSHBUTTON = 0x00000001L;
static const long BS_CHECKBOX = 0x00000002L;
static const long BS_AUTOCHECKBOX = 0x00000003L;
static const long BS_RADIOBUTTON = 0x00000004L;
static const long BS_3STATE = 0x00000005L;
static const long BS_AUTO3STATE = 0x00000006L;
static const long BS_GROUPBOX = 0x00000007L;
static const long BS_USERBUTTON = 0x00000008L;
static const long BS_AUTORADIOBUTTON = 0x00000009L;
static const int BS_PUSHBOX = 0x0000000AL;
static const int BS_OWNERDRAW = 0x0000000BL;
static const int BS_TYPEMASK = 0x0000000FL;
static const long BS_LEFTTEXT = 0x00000020L;
static const long BS_TEXT = 0x00000000L;
static const long BS_ICON = 0x00000040L;
static const long BS_BITMAP = 0x00000080L;
static const long BS_LEFT = 0x00000100L;
static const long BS_RIGHT = 0x00000200L;
static const long BS_CENTER = 0x00000300L;
static const long BS_TOP = 0x00000400L;
static const long BS_BOTTOM = 0x00000800L;
static const long BS_VCENTER = 0x00000C00L;
static const long BS_PUSHLIKE = 0x00001000L;
static const long BS_MULTILINE = 0x00002000L;
static const long BS_NOTIFY = 0x00004000L;
static const long BS_FLAT = 0x00008000L;
static const int BS_RIGHTBUTTON = BS_LEFTTEXT;
static const int BN_CLICKED = 0;
static const int BN_PAINT = 1;
static const int BN_HILITE = 2;
static const int BN_UNHILITE = 3;
static const int BN_DISABLE = 4;
static const int BN_DOUBLECLICKED = 5;
static const int BN_PUSHED = BN_HILITE;
static const int BN_UNPUSHED = BN_UNHILITE;
static const int BN_DBLCLK = BN_DOUBLECLICKED;
static const int BN_SETFOCUS = 6;
static const int BN_KILLFOCUS = 7;
static const int BM_GETCHECK = 0x00F0;
static const int BM_SETCHECK = 0x00F1;
static const int BM_GETSTATE = 0x00F2;
static const int BM_SETSTATE = 0x00F3;
static const int BM_SETSTYLE = 0x00F4;
static const int BM_CLICK = 0x00F5;
static const int BM_GETIMAGE = 0x00F6;
static const int BM_SETIMAGE = 0x00F7;
static const int BM_SETDONTCLICK = 0x00F8;
static const int BST_UNCHECKED = 0x0000;
static const int BST_CHECKED = 0x0001;
static const int BST_INDETERMINATE = 0x0002;
static const int BST_PUSHED = 0x0004;
static const int BST_FOCUS = 0x0008;
static const long SS_LEFT = 0x00000000L;
static const long SS_CENTER = 0x00000001L;
static const long SS_RIGHT = 0x00000002L;
static const long SS_ICON = 0x00000003L;
static const long SS_BLACKRECT = 0x00000004L;
static const long SS_GRAYRECT = 0x00000005L;
static const long SS_WHITERECT = 0x00000006L;
static const long SS_BLACKFRAME = 0x00000007L;
static const long SS_GRAYFRAME = 0x00000008L;
static const long SS_WHITEFRAME = 0x00000009L;
static const int SS_USERITEM = 0x0000000AL;
static const int SS_SIMPLE = 0x0000000BL;
static const int SS_LEFTNOWORDWRAP = 0x0000000CL;
static const long double SS_OWNERDRAW = 0x0000000DL;
static const int SS_BITMAP = 0x0000000EL;
static const int SS_ENHMETAFILE = 0x0000000FL;
static const long SS_ETCHEDHORZ = 0x00000010L;
static const long SS_ETCHEDVERT = 0x00000011L;
static const long SS_ETCHEDFRAME = 0x00000012L;
static const int SS_TYPEMASK = 0x0000001FL;
static const long SS_REALSIZECONTROL = 0x00000040L;
static const long SS_NOPREFIX = 0x00000080L;
static const long SS_NOTIFY = 0x00000100L;
static const long SS_CENTERIMAGE = 0x00000200L;
static const long SS_RIGHTJUST = 0x00000400L;
static const long SS_REALSIZEIMAGE = 0x00000800L;
static const long SS_SUNKEN = 0x00001000L;
static const long SS_EDITCONTROL = 0x00002000L;
static const long SS_ENDELLIPSIS = 0x00004000L;
static const long SS_PATHELLIPSIS = 0x00008000L;
static const long SS_WORDELLIPSIS = 0x0000C000L;
static const long SS_ELLIPSISMASK = 0x0000C000L;
static const int STM_SETICON = 0x0170;
static const int STM_GETICON = 0x0171;
static const int STM_SETIMAGE = 0x0172;
static const int STM_GETIMAGE = 0x0173;
static const int STN_CLICKED = 0;
static const int STN_DBLCLK = 1;
static const int STN_ENABLE = 2;
static const int STN_DISABLE = 3;
static const int STM_MSGMAX = 0x0174;
static const int WC_DIALOG = (MAKEINTATOM(0x8002));
static const int DWL_MSGRESULT = 0;
static const int DWL_DLGPROC = 4;
static const int DWL_USER = 8;
static const int DWLP_MSGRESULT = 0;
static const int DWLP_DLGPROC = DWLP_MSGRESULT + sizeof(LRESULT);
static const int DWLP_USER = DWLP_DLGPROC + sizeof(DLGPROC);
BOOL
IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg);
BOOL
IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg);
static const int IsDialogMessage = IsDialogMessageA;
BOOL
MapDialogRect(
    HWND hDlg,
    LPRECT lpRect);
int
DlgDirListA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);
int
DlgDirListW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);
static const int DlgDirList = DlgDirListA;
static const int DDL_READWRITE = 0x0000;
static const int DDL_READONLY = 0x0001;
static const int DDL_HIDDEN = 0x0002;
static const int DDL_SYSTEM = 0x0004;
static const int DDL_DIRECTORY = 0x0010;
static const int DDL_ARCHIVE = 0x0020;
static const int DDL_POSTMSGS = 0x2000;
static const int DDL_DRIVES = 0x4000;
static const int DDL_EXCLUSIVE = 0x8000;
BOOL
DlgDirSelectExA(
    HWND hwndDlg,
    LPSTR lpString,
    int chCount,
    int idListBox);
BOOL
DlgDirSelectExW(
    HWND hwndDlg,
    LPWSTR lpString,
    int chCount,
    int idListBox);
static const int DlgDirSelectEx = DlgDirSelectExA;
int
DlgDirListComboBoxA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);
int
DlgDirListComboBoxW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);
static const int DlgDirListComboBox = DlgDirListComboBoxA;
BOOL
DlgDirSelectComboBoxExA(
    HWND hwndDlg,
    LPSTR lpString,
    int cchOut,
    int idComboBox);
BOOL
DlgDirSelectComboBoxExW(
    HWND hwndDlg,
    LPWSTR lpString,
    int cchOut,
    int idComboBox);
static const int DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExA;
static const long DS_ABSALIGN = 0x01L;
static const long DS_SYSMODAL = 0x02L;
static const long DS_LOCALEDIT = 0x20L;
static const long DS_SETFONT = 0x40L;
static const long DS_MODALFRAME = 0x80L;
static const long DS_NOIDLEMSG = 0x100L;
static const long DS_SETFOREGROUND = 0x200L;
static const long DS_3DLOOK = 0x0004L;
static const long DS_FIXEDSYS = 0x0008L;
static const long DS_NOFAILCREATE = 0x0010L;
static const long DS_CONTROL = 0x0400L;
static const long DS_CENTER = 0x0800L;
static const long DS_CENTERMOUSE = 0x1000L;
static const long DS_CONTEXTHELP = 0x2000L;
static const int DS_SHELLFONT = (DS_SETFONT | DS_FIXEDSYS);
static const int DM_GETDEFID = (WM_USER+0);
static const int DM_SETDEFID = (WM_USER+1);
static const int DM_REPOSITION = (WM_USER+2);
static const int DC_HASDEFID = 0x534B;
static const int DLGC_WANTARROWS = 0x0001;
static const int DLGC_WANTTAB = 0x0002;
static const int DLGC_WANTALLKEYS = 0x0004;
static const int DLGC_WANTMESSAGE = 0x0004;
static const int DLGC_HASSETSEL = 0x0008;
static const int DLGC_DEFPUSHBUTTON = 0x0010;
static const int DLGC_UNDEFPUSHBUTTON = 0x0020;
static const int DLGC_RADIOBUTTON = 0x0040;
static const int DLGC_WANTCHARS = 0x0080;
static const int DLGC_STATIC = 0x0100;
static const int DLGC_BUTTON = 0x2000;
static const long LB_CTLCODE = 0L;
static const int LB_OKAY = 0;
static const int LB_ERR = (-1);
static const int LB_ERRSPACE = (-2);
static const int LBN_ERRSPACE = (-2);
static const int LBN_SELCHANGE = 1;
static const int LBN_DBLCLK = 2;
static const int LBN_SELCANCEL = 3;
static const int LBN_SETFOCUS = 4;
static const int LBN_KILLFOCUS = 5;
static const int LB_ADDSTRING = 0x0180;
static const int LB_INSERTSTRING = 0x0181;
static const int LB_DELETESTRING = 0x0182;
static const int LB_SELITEMRANGEEX = 0x0183;
static const int LB_RESETCONTENT = 0x0184;
static const int LB_SETSEL = 0x0185;
static const int LB_SETCURSEL = 0x0186;
static const int LB_GETSEL = 0x0187;
static const int LB_GETCURSEL = 0x0188;
static const int LB_GETTEXT = 0x0189;
static const int LB_GETTEXTLEN = 0x018A;
static const int LB_GETCOUNT = 0x018B;
static const int LB_SELECTSTRING = 0x018C;
static const int LB_DIR = 0x018D;
static const int LB_GETTOPINDEX = 0x018E;
static const double LB_FINDSTRING = 0x018F;
static const int LB_GETSELCOUNT = 0x0190;
static const int LB_GETSELITEMS = 0x0191;
static const int LB_SETTABSTOPS = 0x0192;
static const int LB_GETHORIZONTALEXTENT = 0x0193;
static const int LB_SETHORIZONTALEXTENT = 0x0194;
static const int LB_SETCOLUMNWIDTH = 0x0195;
static const int LB_ADDFILE = 0x0196;
static const int LB_SETTOPINDEX = 0x0197;
static const int LB_GETITEMRECT = 0x0198;
static const int LB_GETITEMDATA = 0x0199;
static const int LB_SETITEMDATA = 0x019A;
static const int LB_SELITEMRANGE = 0x019B;
static const int LB_SETANCHORINDEX = 0x019C;
static const int LB_GETANCHORINDEX = 0x019D;
static const int LB_SETCARETINDEX = 0x019E;
static const double LB_GETCARETINDEX = 0x019F;
static const int LB_SETITEMHEIGHT = 0x01A0;
static const int LB_GETITEMHEIGHT = 0x01A1;
static const int LB_FINDSTRINGEXACT = 0x01A2;
static const int LB_SETLOCALE = 0x01A5;
static const int LB_GETLOCALE = 0x01A6;
static const int LB_SETCOUNT = 0x01A7;
static const int LB_INITSTORAGE = 0x01A8;
static const int LB_ITEMFROMPOINT = 0x01A9;
static const int LB_GETLISTBOXINFO = 0x01B2;
static const int LB_MSGMAX = 0x01B3;
static const long LBS_NOTIFY = 0x0001L;
static const long LBS_SORT = 0x0002L;
static const long LBS_NOREDRAW = 0x0004L;
static const long LBS_MULTIPLESEL = 0x0008L;
static const long LBS_OWNERDRAWFIXED = 0x0010L;
static const long LBS_OWNERDRAWVARIABLE = 0x0020L;
static const long LBS_HASSTRINGS = 0x0040L;
static const long LBS_USETABSTOPS = 0x0080L;
static const long LBS_NOINTEGRALHEIGHT = 0x0100L;
static const long LBS_MULTICOLUMN = 0x0200L;
static const long LBS_WANTKEYBOARDINPUT = 0x0400L;
static const long LBS_EXTENDEDSEL = 0x0800L;
static const long LBS_DISABLENOSCROLL = 0x1000L;
static const long LBS_NODATA = 0x2000L;
static const long LBS_NOSEL = 0x4000L;
static const long LBS_COMBOBOX = 0x8000L;
static const int LBS_STANDARD = (LBS_NOTIFY | LBS_SORT | WS_VSCROLL | WS_BORDER);
static const int CB_OKAY = 0;
static const int CB_ERR = (-1);
static const int CB_ERRSPACE = (-2);
static const int CBN_ERRSPACE = (-1);
static const int CBN_SELCHANGE = 1;
static const int CBN_DBLCLK = 2;
static const int CBN_SETFOCUS = 3;
static const int CBN_KILLFOCUS = 4;
static const int CBN_EDITCHANGE = 5;
static const int CBN_EDITUPDATE = 6;
static const int CBN_DROPDOWN = 7;
static const int CBN_CLOSEUP = 8;
static const int CBN_SELENDOK = 9;
static const int CBN_SELENDCANCEL = 10;
static const long CBS_SIMPLE = 0x0001L;
static const long CBS_DROPDOWN = 0x0002L;
static const long CBS_DROPDOWNLIST = 0x0003L;
static const long CBS_OWNERDRAWFIXED = 0x0010L;
static const long CBS_OWNERDRAWVARIABLE = 0x0020L;
static const long CBS_AUTOHSCROLL = 0x0040L;
static const long CBS_OEMCONVERT = 0x0080L;
static const long CBS_SORT = 0x0100L;
static const long CBS_HASSTRINGS = 0x0200L;
static const long CBS_NOINTEGRALHEIGHT = 0x0400L;
static const long CBS_DISABLENOSCROLL = 0x0800L;
static const long CBS_UPPERCASE = 0x2000L;
static const long CBS_LOWERCASE = 0x4000L;
static const int CB_GETEDITSEL = 0x0140;
static const int CB_LIMITTEXT = 0x0141;
static const int CB_SETEDITSEL = 0x0142;
static const int CB_ADDSTRING = 0x0143;
static const int CB_DELETESTRING = 0x0144;
static const int CB_DIR = 0x0145;
static const int CB_GETCOUNT = 0x0146;
static const int CB_GETCURSEL = 0x0147;
static const int CB_GETLBTEXT = 0x0148;
static const int CB_GETLBTEXTLEN = 0x0149;
static const int CB_INSERTSTRING = 0x014A;
static const int CB_RESETCONTENT = 0x014B;
static const int CB_FINDSTRING = 0x014C;
static const int CB_SELECTSTRING = 0x014D;
static const int CB_SETCURSEL = 0x014E;
static const double CB_SHOWDROPDOWN = 0x014F;
static const int CB_GETITEMDATA = 0x0150;
static const int CB_SETITEMDATA = 0x0151;
static const int CB_GETDROPPEDCONTROLRECT = 0x0152;
static const int CB_SETITEMHEIGHT = 0x0153;
static const int CB_GETITEMHEIGHT = 0x0154;
static const int CB_SETEXTENDEDUI = 0x0155;
static const int CB_GETEXTENDEDUI = 0x0156;
static const int CB_GETDROPPEDSTATE = 0x0157;
static const int CB_FINDSTRINGEXACT = 0x0158;
static const int CB_SETLOCALE = 0x0159;
static const int CB_GETLOCALE = 0x015A;
static const int CB_GETTOPINDEX = 0x015b;
static const int CB_SETTOPINDEX = 0x015c;
static const int CB_GETHORIZONTALEXTENT = 0x015d;
static const int CB_SETHORIZONTALEXTENT = 0x015e;
static const int CB_GETDROPPEDWIDTH = 0x015f;
static const int CB_SETDROPPEDWIDTH = 0x0160;
static const int CB_INITSTORAGE = 0x0161;
static const int CB_GETCOMBOBOXINFO = 0x0164;
static const int CB_MSGMAX = 0x0165;
static const long SBS_HORZ = 0x0000L;
static const long SBS_VERT = 0x0001L;
static const long SBS_TOPALIGN = 0x0002L;
static const long SBS_LEFTALIGN = 0x0002L;
static const long SBS_BOTTOMALIGN = 0x0004L;
static const long SBS_RIGHTALIGN = 0x0004L;
static const long SBS_SIZEBOXTOPLEFTALIGN = 0x0002L;
static const long SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x0004L;
static const long SBS_SIZEBOX = 0x0008L;
static const long SBS_SIZEGRIP = 0x0010L;
static const int SBM_SETPOS = 0x00E0;
static const int SBM_GETPOS = 0x00E1;
static const int SBM_SETRANGE = 0x00E2;
static const int SBM_SETRANGEREDRAW = 0x00E6;
static const int SBM_GETRANGE = 0x00E3;
static const int SBM_ENABLE_ARROWS = 0x00E4;
static const int SBM_SETSCROLLINFO = 0x00E9;
static const int SBM_GETSCROLLINFO = 0x00EA;
static const int SBM_GETSCROLLBARINFO = 0x00EB;
static const int SIF_RANGE = 0x0001;
static const int SIF_PAGE = 0x0002;
static const int SIF_POS = 0x0004;
static const int SIF_DISABLENOSCROLL = 0x0008;
static const int SIF_TRACKPOS = 0x0010;
static const int SIF_ALL = (SIF_RANGE | SIF_PAGE | SIF_POS | SIF_TRACKPOS);
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;
int
SetScrollInfo(
    HWND hwnd,
    int nBar,
    LPCSCROLLINFO lpsi,
    BOOL redraw);
BOOL
GetScrollInfo(
    HWND hwnd,
    int nBar,
    LPSCROLLINFO lpsi);
static const int MDIS_ALLCHILDSTYLES = 0x0001;
static const int MDITILE_VERTICAL = 0x0000;
static const int MDITILE_HORIZONTAL = 0x0001;
static const int MDITILE_SKIPDISABLED = 0x0002;
static const int MDITILE_ZORDER = 0x0004;
typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam; /* app-defined stuff */
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam; /* app-defined stuff */
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;
LRESULT
DefFrameProcA(
    HWND hWnd,
    HWND hWndMDIClient,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
DefFrameProcW(
    HWND hWnd,
    HWND hWndMDIClient,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
static const int DefFrameProc = DefFrameProcA;
LRESULT
DefMDIChildProcA(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
LRESULT
DefMDIChildProcW(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
static const int DefMDIChildProc = DefMDIChildProcA;
BOOL
TranslateMDISysAccel(
    HWND hWndClient,
    LPMSG lpMsg);
UINT
ArrangeIconicWindows(
    HWND hWnd);
HWND
CreateMDIWindowA(
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam);
HWND
CreateMDIWindowW(
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam);
static const int CreateMDIWindow = CreateMDIWindowA;
WORD
TileWindows(
    HWND hwndParent,
    UINT wHow,
    const RECT * lpRect,
    UINT cKids,
    const HWND * lpKids);
WORD
 CascadeWindows(
    HWND hwndParent,
    UINT wHow,
    const RECT * lpRect,
    UINT cKids,
    const HWND * lpKids);
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;
typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
static const long HELP_CONTEXT = 0x0001L;
static const long HELP_QUIT = 0x0002L;
static const long HELP_INDEX = 0x0003L;
static const long HELP_CONTENTS = 0x0003L;
static const long HELP_HELPONHELP = 0x0004L;
static const long HELP_SETINDEX = 0x0005L;
static const long HELP_SETCONTENTS = 0x0005L;
static const long HELP_CONTEXTPOPUP = 0x0008L;
static const long HELP_FORCEFILE = 0x0009L;
static const long HELP_KEY = 0x0101L;
static const long HELP_COMMAND = 0x0102L;
static const long HELP_PARTIALKEY = 0x0105L;
static const long HELP_MULTIKEY = 0x0201L;
static const long HELP_SETWINPOS = 0x0203L;
static const int HELP_CONTEXTMENU = 0x000a;
static const int HELP_FINDER = 0x000b;
static const int HELP_WM_HELP = 0x000c;
static const int HELP_SETPOPUP_POS = 0x000d;
static const int HELP_TCARD = 0x8000;
static const int HELP_TCARD_DATA = 0x0010;
static const int HELP_TCARD_OTHER_CALLER = 0x0011;
static const int IDH_NO_HELP = 28440;
static const int IDH_MISSING_CONTEXT = 28441;
static const int IDH_GENERIC_HELP_BUTTON = 28442;
static const int IDH_OK = 28443;
static const int IDH_CANCEL = 28444;
static const int IDH_HELP = 28445;
BOOL
WinHelpA(
    HWND hWndMain,
    LPCSTR lpszHelp,
    UINT uCommand,
    ULONG_PTR dwData);
BOOL
WinHelpW(
    HWND hWndMain,
    LPCWSTR lpszHelp,
    UINT uCommand,
    ULONG_PTR dwData);
static const int WinHelp = WinHelpA;
static const int GR_GDIOBJECTS = 0;
static const int GR_USEROBJECTS = 1;
static const int GR_GDIOBJECTS_PEAK = 2;
static const int GR_USEROBJECTS_PEAK = 4;
static const int GR_GLOBAL = ((HANDLE)-2);
DWORD
GetGuiResources(
    HANDLE hProcess,
    DWORD uiFlags);
static const int SPI_GETBEEP = 0x0001;
static const int SPI_SETBEEP = 0x0002;
static const int SPI_GETMOUSE = 0x0003;
static const int SPI_SETMOUSE = 0x0004;
static const int SPI_GETBORDER = 0x0005;
static const int SPI_SETBORDER = 0x0006;
static const int SPI_GETKEYBOARDSPEED = 0x000A;
static const int SPI_SETKEYBOARDSPEED = 0x000B;
static const int SPI_LANGDRIVER = 0x000C;
static const int SPI_ICONHORIZONTALSPACING = 0x000D;
static const int SPI_GETSCREENSAVETIMEOUT = 0x000E;
static const double SPI_SETSCREENSAVETIMEOUT = 0x000F;
static const int SPI_GETSCREENSAVEACTIVE = 0x0010;
static const int SPI_SETSCREENSAVEACTIVE = 0x0011;
static const int SPI_GETGRIDGRANULARITY = 0x0012;
static const int SPI_SETGRIDGRANULARITY = 0x0013;
static const int SPI_SETDESKWALLPAPER = 0x0014;
static const int SPI_SETDESKPATTERN = 0x0015;
static const int SPI_GETKEYBOARDDELAY = 0x0016;
static const int SPI_SETKEYBOARDDELAY = 0x0017;
static const int SPI_ICONVERTICALSPACING = 0x0018;
static const int SPI_GETICONTITLEWRAP = 0x0019;
static const int SPI_SETICONTITLEWRAP = 0x001A;
static const int SPI_GETMENUDROPALIGNMENT = 0x001B;
static const int SPI_SETMENUDROPALIGNMENT = 0x001C;
static const int SPI_SETDOUBLECLKWIDTH = 0x001D;
static const int SPI_SETDOUBLECLKHEIGHT = 0x001E;
static const double SPI_GETICONTITLELOGFONT = 0x001F;
static const int SPI_SETDOUBLECLICKTIME = 0x0020;
static const int SPI_SETMOUSEBUTTONSWAP = 0x0021;
static const int SPI_SETICONTITLELOGFONT = 0x0022;
static const int SPI_GETFASTTASKSWITCH = 0x0023;
static const int SPI_SETFASTTASKSWITCH = 0x0024;
static const int SPI_SETDRAGFULLWINDOWS = 0x0025;
static const int SPI_GETDRAGFULLWINDOWS = 0x0026;
static const int SPI_GETNONCLIENTMETRICS = 0x0029;
static const int SPI_SETNONCLIENTMETRICS = 0x002A;
static const int SPI_GETMINIMIZEDMETRICS = 0x002B;
static const int SPI_SETMINIMIZEDMETRICS = 0x002C;
static const int SPI_GETICONMETRICS = 0x002D;
static const int SPI_SETICONMETRICS = 0x002E;
static const double SPI_SETWORKAREA = 0x002F;
static const int SPI_GETWORKAREA = 0x0030;
static const int SPI_SETPENWINDOWS = 0x0031;
static const int SPI_GETHIGHCONTRAST = 0x0042;
static const int SPI_SETHIGHCONTRAST = 0x0043;
static const int SPI_GETKEYBOARDPREF = 0x0044;
static const int SPI_SETKEYBOARDPREF = 0x0045;
static const int SPI_GETSCREENREADER = 0x0046;
static const int SPI_SETSCREENREADER = 0x0047;
static const int SPI_GETANIMATION = 0x0048;
static const int SPI_SETANIMATION = 0x0049;
static const int SPI_GETFONTSMOOTHING = 0x004A;
static const int SPI_SETFONTSMOOTHING = 0x004B;
static const int SPI_SETDRAGWIDTH = 0x004C;
static const int SPI_SETDRAGHEIGHT = 0x004D;
static const int SPI_SETHANDHELD = 0x004E;
static const double SPI_GETLOWPOWERTIMEOUT = 0x004F;
static const int SPI_GETPOWEROFFTIMEOUT = 0x0050;
static const int SPI_SETLOWPOWERTIMEOUT = 0x0051;
static const int SPI_SETPOWEROFFTIMEOUT = 0x0052;
static const int SPI_GETLOWPOWERACTIVE = 0x0053;
static const int SPI_GETPOWEROFFACTIVE = 0x0054;
static const int SPI_SETLOWPOWERACTIVE = 0x0055;
static const int SPI_SETPOWEROFFACTIVE = 0x0056;
static const int SPI_SETCURSORS = 0x0057;
static const int SPI_SETICONS = 0x0058;
static const int SPI_GETDEFAULTINPUTLANG = 0x0059;
static const int SPI_SETDEFAULTINPUTLANG = 0x005A;
static const int SPI_SETLANGTOGGLE = 0x005B;
static const int SPI_GETWINDOWSEXTENSION = 0x005C;
static const int SPI_SETMOUSETRAILS = 0x005D;
static const int SPI_GETMOUSETRAILS = 0x005E;
static const int SPI_SETSCREENSAVERRUNNING = 0x0061;
static const int SPI_SCREENSAVERRUNNING = SPI_SETSCREENSAVERRUNNING;
static const int SPI_GETFILTERKEYS = 0x0032;
static const int SPI_SETFILTERKEYS = 0x0033;
static const int SPI_GETTOGGLEKEYS = 0x0034;
static const int SPI_SETTOGGLEKEYS = 0x0035;
static const int SPI_GETMOUSEKEYS = 0x0036;
static const int SPI_SETMOUSEKEYS = 0x0037;
static const int SPI_GETSHOWSOUNDS = 0x0038;
static const int SPI_SETSHOWSOUNDS = 0x0039;
static const int SPI_GETSTICKYKEYS = 0x003A;
static const int SPI_SETSTICKYKEYS = 0x003B;
static const int SPI_GETACCESSTIMEOUT = 0x003C;
static const int SPI_SETACCESSTIMEOUT = 0x003D;
static const int SPI_GETSERIALKEYS = 0x003E;
static const double SPI_SETSERIALKEYS = 0x003F;
static const int SPI_GETSOUNDSENTRY = 0x0040;
static const int SPI_SETSOUNDSENTRY = 0x0041;
static const double SPI_GETSNAPTODEFBUTTON = 0x005F;
static const int SPI_SETSNAPTODEFBUTTON = 0x0060;
static const int SPI_GETMOUSEHOVERWIDTH = 0x0062;
static const int SPI_SETMOUSEHOVERWIDTH = 0x0063;
static const int SPI_GETMOUSEHOVERHEIGHT = 0x0064;
static const int SPI_SETMOUSEHOVERHEIGHT = 0x0065;
static const int SPI_GETMOUSEHOVERTIME = 0x0066;
static const int SPI_SETMOUSEHOVERTIME = 0x0067;
static const int SPI_GETWHEELSCROLLLINES = 0x0068;
static const int SPI_SETWHEELSCROLLLINES = 0x0069;
static const int SPI_GETMENUSHOWDELAY = 0x006A;
static const int SPI_SETMENUSHOWDELAY = 0x006B;
static const int SPI_GETWHEELSCROLLCHARS = 0x006C;
static const int SPI_SETWHEELSCROLLCHARS = 0x006D;
static const int SPI_GETSHOWIMEUI = 0x006E;
static const double SPI_SETSHOWIMEUI = 0x006F;
static const int SPI_GETMOUSESPEED = 0x0070;
static const int SPI_SETMOUSESPEED = 0x0071;
static const int SPI_GETSCREENSAVERRUNNING = 0x0072;
static const int SPI_GETDESKWALLPAPER = 0x0073;
static const int SPI_GETAUDIODESCRIPTION = 0x0074;
static const int SPI_SETAUDIODESCRIPTION = 0x0075;
static const int SPI_GETSCREENSAVESECURE = 0x0076;
static const int SPI_SETSCREENSAVESECURE = 0x0077;
static const int SPI_GETHUNGAPPTIMEOUT = 0x0078;
static const int SPI_SETHUNGAPPTIMEOUT = 0x0079;
static const int SPI_GETWAITTOKILLTIMEOUT = 0x007A;
static const int SPI_SETWAITTOKILLTIMEOUT = 0x007B;
static const int SPI_GETWAITTOKILLSERVICETIMEOUT = 0x007C;
static const int SPI_SETWAITTOKILLSERVICETIMEOUT = 0x007D;
static const int SPI_GETMOUSEDOCKTHRESHOLD = 0x007E;
static const double SPI_SETMOUSEDOCKTHRESHOLD = 0x007F;
static const int SPI_GETPENDOCKTHRESHOLD = 0x0080;
static const int SPI_SETPENDOCKTHRESHOLD = 0x0081;
static const int SPI_GETWINARRANGING = 0x0082;
static const int SPI_SETWINARRANGING = 0x0083;
static const int SPI_GETMOUSEDRAGOUTTHRESHOLD = 0x0084;
static const int SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0085;
static const int SPI_GETPENDRAGOUTTHRESHOLD = 0x0086;
static const int SPI_SETPENDRAGOUTTHRESHOLD = 0x0087;
static const int SPI_GETMOUSESIDEMOVETHRESHOLD = 0x0088;
static const int SPI_SETMOUSESIDEMOVETHRESHOLD = 0x0089;
static const int SPI_GETPENSIDEMOVETHRESHOLD = 0x008A;
static const int SPI_SETPENSIDEMOVETHRESHOLD = 0x008B;
static const int SPI_GETDRAGFROMMAXIMIZE = 0x008C;
static const int SPI_SETDRAGFROMMAXIMIZE = 0x008D;
static const int SPI_GETSNAPSIZING = 0x008E;
static const double SPI_SETSNAPSIZING = 0x008F;
static const int SPI_GETDOCKMOVING = 0x0090;
static const int SPI_SETDOCKMOVING = 0x0091;
static const int SPI_GETACTIVEWINDOWTRACKING = 0x1000;
static const int SPI_SETACTIVEWINDOWTRACKING = 0x1001;
static const int SPI_GETMENUANIMATION = 0x1002;
static const int SPI_SETMENUANIMATION = 0x1003;
static const int SPI_GETCOMBOBOXANIMATION = 0x1004;
static const int SPI_SETCOMBOBOXANIMATION = 0x1005;
static const int SPI_GETLISTBOXSMOOTHSCROLLING = 0x1006;
static const int SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007;
static const int SPI_GETGRADIENTCAPTIONS = 0x1008;
static const int SPI_SETGRADIENTCAPTIONS = 0x1009;
static const int SPI_GETKEYBOARDCUES = 0x100A;
static const int SPI_SETKEYBOARDCUES = 0x100B;
static const int SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES;
static const int SPI_SETMENUUNDERLINES = SPI_SETKEYBOARDCUES;
static const int SPI_GETACTIVEWNDTRKZORDER = 0x100C;
static const int SPI_SETACTIVEWNDTRKZORDER = 0x100D;
static const int SPI_GETHOTTRACKING = 0x100E;
static const double SPI_SETHOTTRACKING = 0x100F;
static const int SPI_GETMENUFADE = 0x1012;
static const int SPI_SETMENUFADE = 0x1013;
static const int SPI_GETSELECTIONFADE = 0x1014;
static const int SPI_SETSELECTIONFADE = 0x1015;
static const int SPI_GETTOOLTIPANIMATION = 0x1016;
static const int SPI_SETTOOLTIPANIMATION = 0x1017;
static const int SPI_GETTOOLTIPFADE = 0x1018;
static const int SPI_SETTOOLTIPFADE = 0x1019;
static const int SPI_GETCURSORSHADOW = 0x101A;
static const int SPI_SETCURSORSHADOW = 0x101B;
static const int SPI_GETMOUSESONAR = 0x101C;
static const int SPI_SETMOUSESONAR = 0x101D;
static const int SPI_GETMOUSECLICKLOCK = 0x101E;
static const double SPI_SETMOUSECLICKLOCK = 0x101F;
static const int SPI_GETMOUSEVANISH = 0x1020;
static const int SPI_SETMOUSEVANISH = 0x1021;
static const int SPI_GETFLATMENU = 0x1022;
static const int SPI_SETFLATMENU = 0x1023;
static const int SPI_GETDROPSHADOW = 0x1024;
static const int SPI_SETDROPSHADOW = 0x1025;
static const int SPI_GETBLOCKSENDINPUTRESETS = 0x1026;
static const int SPI_SETBLOCKSENDINPUTRESETS = 0x1027;
static const int SPI_GETUIEFFECTS = 0x103E;
static const double SPI_SETUIEFFECTS = 0x103F;
static const int SPI_GETDISABLEOVERLAPPEDCONTENT = 0x1040;
static const int SPI_SETDISABLEOVERLAPPEDCONTENT = 0x1041;
static const int SPI_GETCLIENTAREAANIMATION = 0x1042;
static const int SPI_SETCLIENTAREAANIMATION = 0x1043;
static const int SPI_GETCLEARTYPE = 0x1048;
static const int SPI_SETCLEARTYPE = 0x1049;
static const int SPI_GETSPEECHRECOGNITION = 0x104A;
static const int SPI_SETSPEECHRECOGNITION = 0x104B;
static const int SPI_GETFOREGROUNDLOCKTIMEOUT = 0x2000;
static const int SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001;
static const int SPI_GETACTIVEWNDTRKTIMEOUT = 0x2002;
static const int SPI_SETACTIVEWNDTRKTIMEOUT = 0x2003;
static const int SPI_GETFOREGROUNDFLASHCOUNT = 0x2004;
static const int SPI_SETFOREGROUNDFLASHCOUNT = 0x2005;
static const int SPI_GETCARETWIDTH = 0x2006;
static const int SPI_SETCARETWIDTH = 0x2007;
static const int SPI_GETMOUSECLICKLOCKTIME = 0x2008;
static const int SPI_SETMOUSECLICKLOCKTIME = 0x2009;
static const int SPI_GETFONTSMOOTHINGTYPE = 0x200A;
static const int SPI_SETFONTSMOOTHINGTYPE = 0x200B;
static const int FE_FONTSMOOTHINGSTANDARD = 0x0001;
static const int FE_FONTSMOOTHINGCLEARTYPE = 0x0002;
static const int SPI_GETFONTSMOOTHINGCONTRAST = 0x200C;
static const int SPI_SETFONTSMOOTHINGCONTRAST = 0x200D;
static const int SPI_GETFOCUSBORDERWIDTH = 0x200E;
static const double SPI_SETFOCUSBORDERWIDTH = 0x200F;
static const int SPI_GETFOCUSBORDERHEIGHT = 0x2010;
static const int SPI_SETFOCUSBORDERHEIGHT = 0x2011;
static const int SPI_GETFONTSMOOTHINGORIENTATION = 0x2012;
static const int SPI_SETFONTSMOOTHINGORIENTATION = 0x2013;
static const int FE_FONTSMOOTHINGORIENTATIONBGR = 0x0000;
static const int FE_FONTSMOOTHINGORIENTATIONRGB = 0x0001;
static const int SPI_GETMINIMUMHITRADIUS = 0x2014;
static const int SPI_SETMINIMUMHITRADIUS = 0x2015;
static const int SPI_GETMESSAGEDURATION = 0x2016;
static const int SPI_SETMESSAGEDURATION = 0x2017;
static const int SPIF_UPDATEINIFILE = 0x0001;
static const int SPIF_SENDWININICHANGE = 0x0002;
static const int SPIF_SENDCHANGE = SPIF_SENDWININICHANGE;
static const int METRICS_USEDEFAULT = -1;
typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
    int iPaddedBorderWidth;
} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
    int iPaddedBorderWidth;
} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
static const long ARW_BOTTOMLEFT = 0x0000L;
static const long ARW_BOTTOMRIGHT = 0x0001L;
static const long ARW_TOPLEFT = 0x0002L;
static const long ARW_TOPRIGHT = 0x0003L;
static const long ARW_STARTMASK = 0x0003L;
static const long ARW_STARTRIGHT = 0x0001L;
static const long ARW_STARTTOP = 0x0002L;
static const long ARW_LEFT = 0x0000L;
static const long ARW_RIGHT = 0x0000L;
static const long ARW_UP = 0x0004L;
static const long ARW_DOWN = 0x0004L;
static const long ARW_HIDE = 0x0008L;
typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;
typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;
typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;
typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;
typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
static const int SERKF_SERIALKEYSON = 0x00000001;
static const int SERKF_AVAILABLE = 0x00000002;
static const int SERKF_INDICATOR = 0x00000004;
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
static const int HCF_HIGHCONTRASTON = 0x00000001;
static const int HCF_AVAILABLE = 0x00000002;
static const int HCF_HOTKEYACTIVE = 0x00000004;
static const int HCF_CONFIRMHOTKEY = 0x00000008;
static const int HCF_HOTKEYSOUND = 0x00000010;
static const int HCF_INDICATOR = 0x00000020;
static const int HCF_HOTKEYAVAILABLE = 0x00000040;
static const int HCF_LOGONDESKTOP = 0x00000100;
static const int HCF_DEFAULTDESKTOP = 0x00000200;
static const int CDS_UPDATEREGISTRY = 0x00000001;
static const int CDS_TEST = 0x00000002;
static const int CDS_FULLSCREEN = 0x00000004;
static const int CDS_GLOBAL = 0x00000008;
static const int CDS_SET_PRIMARY = 0x00000010;
static const int CDS_VIDEOPARAMETERS = 0x00000020;
static const int CDS_ENABLE_UNSAFE_MODES = 0x00000100;
static const int CDS_DISABLE_UNSAFE_MODES = 0x00000200;
static const int CDS_RESET = 0x40000000;
static const int CDS_RESET_EX = 0x20000000;
static const int CDS_NORESET = 0x10000000;
typedef struct _VIDEOPARAMETERS {
    GUID Guid; // GUID for this structure
    ULONG dwOffset; // leave it 0 for now.
    ULONG dwCommand; // VP_COMMAND_*            SET or GET
    ULONG dwFlags; // bitfield, defined below SET or GET
    ULONG dwMode; // bitfield, defined below SET or GET
    ULONG dwTVStandard; // bitfield, defined below SET or GET
    ULONG dwAvailableModes; // bitfield, defined below GET
    ULONG dwAvailableTVStandard; // bitfield, defined below GET
    ULONG dwFlickerFilter; // value                   SET or GET
    ULONG dwOverScanX; // value                   SET or GET
    ULONG dwOverScanY; //                         SET or GET
    ULONG dwMaxUnscaledX; // value                   SET or GET
    ULONG dwMaxUnscaledY; //                         SET or GET
    ULONG dwPositionX; // value                   SET or GET
    ULONG dwPositionY; //                         SET or GET
    ULONG dwBrightness; // value                   SET or GET
    ULONG dwContrast; // value                   SET or GET
    ULONG dwCPType; // copy protection type    SET or GET
    ULONG dwCPCommand; // VP_CP_CMD_
    ULONG dwCPStandard; // what TV standards CP is available on. GET
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits; // (a dword for alignment) SET(bits 0 and 1 valid).
    UCHAR bOEMCopyProtection[256]; // oem specific copy protection data SET or GET
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
static const int VP_COMMAND_GET = 0x0001;
static const int VP_COMMAND_SET = 0x0002;
static const int VP_FLAGS_TV_MODE = 0x0001;
static const int VP_FLAGS_TV_STANDARD = 0x0002;
static const int VP_FLAGS_FLICKER = 0x0004;
static const int VP_FLAGS_OVERSCAN = 0x0008;
static const int VP_FLAGS_MAX_UNSCALED = 0x0010;
static const int VP_FLAGS_POSITION = 0x0020;
static const int VP_FLAGS_BRIGHTNESS = 0x0040;
static const int VP_FLAGS_CONTRAST = 0x0080;
static const int VP_FLAGS_COPYPROTECT = 0x0100;
static const int VP_MODE_WIN_GRAPHICS = 0x0001;
static const int VP_MODE_TV_PLAYBACK = 0x0002;
static const int VP_TV_STANDARD_NTSC_M = 0x0001;
static const int VP_TV_STANDARD_NTSC_M_J = 0x0002;
static const int VP_TV_STANDARD_PAL_B = 0x0004;
static const int VP_TV_STANDARD_PAL_D = 0x0008;
static const int VP_TV_STANDARD_PAL_H = 0x0010;
static const int VP_TV_STANDARD_PAL_I = 0x0020;
static const int VP_TV_STANDARD_PAL_M = 0x0040;
static const int VP_TV_STANDARD_PAL_N = 0x0080;
static const int VP_TV_STANDARD_SECAM_B = 0x0100;
static const int VP_TV_STANDARD_SECAM_D = 0x0200;
static const int VP_TV_STANDARD_SECAM_G = 0x0400;
static const int VP_TV_STANDARD_SECAM_H = 0x0800;
static const int VP_TV_STANDARD_SECAM_K = 0x1000;
static const int VP_TV_STANDARD_SECAM_K1 = 0x2000;
static const int VP_TV_STANDARD_SECAM_L = 0x4000;
static const int VP_TV_STANDARD_WIN_VGA = 0x8000;
static const int VP_TV_STANDARD_NTSC_433 = 0x00010000;
static const int VP_TV_STANDARD_PAL_G = 0x00020000;
static const int VP_TV_STANDARD_PAL_60 = 0x00040000;
static const int VP_TV_STANDARD_SECAM_L1 = 0x00080000;
static const int VP_CP_TYPE_APS_TRIGGER = 0x0001;
static const int VP_CP_TYPE_MACROVISION = 0x0002;
static const int VP_CP_CMD_ACTIVATE = 0x0001;
static const int VP_CP_CMD_DEACTIVATE = 0x0002;
static const int VP_CP_CMD_CHANGE = 0x0004;
static const int DISP_CHANGE_SUCCESSFUL = 0;
static const int DISP_CHANGE_RESTART = 1;
static const int DISP_CHANGE_FAILED = -1;
static const int DISP_CHANGE_BADMODE = -2;
static const int DISP_CHANGE_NOTUPDATED = -3;
static const int DISP_CHANGE_BADFLAGS = -4;
static const int DISP_CHANGE_BADPARAM = -5;
static const int DISP_CHANGE_BADDUALVIEW = -6;
LONG
ChangeDisplaySettingsA(
    DEVMODEA* lpDevMode,
    DWORD dwFlags);
LONG
ChangeDisplaySettingsW(
    DEVMODEW* lpDevMode,
    DWORD dwFlags);
static const int ChangeDisplaySettings = ChangeDisplaySettingsA;
LONG
ChangeDisplaySettingsExA(
    LPCSTR lpszDeviceName,
    DEVMODEA* lpDevMode,
    HWND hwnd,
    DWORD dwflags,
    LPVOID lParam);
LONG
ChangeDisplaySettingsExW(
    LPCWSTR lpszDeviceName,
    DEVMODEW* lpDevMode,
    HWND hwnd,
    DWORD dwflags,
    LPVOID lParam);
static const int ChangeDisplaySettingsEx = ChangeDisplaySettingsExA;
static const int ENUM_CURRENT_SETTINGS = ((DWORD)-1);
static const int ENUM_REGISTRY_SETTINGS = ((DWORD)-2);
BOOL
EnumDisplaySettingsA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    DEVMODEA* lpDevMode);
BOOL
EnumDisplaySettingsW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    DEVMODEW* lpDevMode);
static const int EnumDisplaySettings = EnumDisplaySettingsA;
BOOL
EnumDisplaySettingsExA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    DEVMODEA* lpDevMode,
    DWORD dwFlags);
BOOL
EnumDisplaySettingsExW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    DEVMODEW* lpDevMode,
    DWORD dwFlags);
static const int EnumDisplaySettingsEx = EnumDisplaySettingsExA;
static const int EDS_RAWMODE = 0x00000002;
static const int EDS_ROTATEDMODE = 0x00000004;
BOOL
EnumDisplayDevicesA(
    LPCSTR lpDevice,
    DWORD iDevNum,
    PDISPLAY_DEVICEA lpDisplayDevice,
    DWORD dwFlags);
BOOL
EnumDisplayDevicesW(
    LPCWSTR lpDevice,
    DWORD iDevNum,
    PDISPLAY_DEVICEW lpDisplayDevice,
    DWORD dwFlags);
static const int EnumDisplayDevices = EnumDisplayDevicesA;
static const int EDD_GET_DEVICE_INTERFACE_NAME = 0x00000001;
LONG
GetDisplayConfigBufferSizes(
    UINT32 flags,
    UINT32* numPathArrayElements,
    UINT32* numModeInfoArrayElements);
LONG
SetDisplayConfig(
    UINT32 numPathArrayElements,
    DISPLAYCONFIG_PATH_INFO* pathArray,
    UINT32 numModeInfoArrayElements,
    DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    UINT32 flags);
LONG
QueryDisplayConfig(
    UINT32 flags,
    UINT32* numPathArrayElements,
    DISPLAYCONFIG_PATH_INFO* pathArray,
    UINT32* numModeInfoArrayElements,
    DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);
LONG
DisplayConfigGetDeviceInfo(
    DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);
LONG
DisplayConfigSetDeviceInfo(
    DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);
BOOL
SystemParametersInfoA(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
BOOL
SystemParametersInfoW(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
static const int SystemParametersInfo = SystemParametersInfoA;
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec; // Acceptance Delay
    DWORD iDelayMSec; // Delay Until Repeat
    DWORD iRepeatMSec; // Repeat Rate
    DWORD iBounceMSec; // Debounce Time
} FILTERKEYS, *LPFILTERKEYS;
static const int FKF_FILTERKEYSON = 0x00000001;
static const int FKF_AVAILABLE = 0x00000002;
static const int FKF_HOTKEYACTIVE = 0x00000004;
static const int FKF_CONFIRMHOTKEY = 0x00000008;
static const int FKF_HOTKEYSOUND = 0x00000010;
static const int FKF_INDICATOR = 0x00000020;
static const int FKF_CLICKON = 0x00000040;
typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
static const int SKF_STICKYKEYSON = 0x00000001;
static const int SKF_AVAILABLE = 0x00000002;
static const int SKF_HOTKEYACTIVE = 0x00000004;
static const int SKF_CONFIRMHOTKEY = 0x00000008;
static const int SKF_HOTKEYSOUND = 0x00000010;
static const int SKF_INDICATOR = 0x00000020;
static const int SKF_AUDIBLEFEEDBACK = 0x00000040;
static const int SKF_TRISTATE = 0x00000080;
static const int SKF_TWOKEYSOFF = 0x00000100;
static const int SKF_LALTLATCHED = 0x10000000;
static const int SKF_LCTLLATCHED = 0x04000000;
static const int SKF_LSHIFTLATCHED = 0x01000000;
static const int SKF_RALTLATCHED = 0x20000000;
static const int SKF_RCTLLATCHED = 0x08000000;
static const int SKF_RSHIFTLATCHED = 0x02000000;
static const int SKF_LWINLATCHED = 0x40000000;
static const int SKF_RWINLATCHED = 0x80000000;
static const int SKF_LALTLOCKED = 0x00100000;
static const int SKF_LCTLLOCKED = 0x00040000;
static const int SKF_LSHIFTLOCKED = 0x00010000;
static const int SKF_RALTLOCKED = 0x00200000;
static const int SKF_RCTLLOCKED = 0x00080000;
static const int SKF_RSHIFTLOCKED = 0x00020000;
static const int SKF_LWINLOCKED = 0x00400000;
static const int SKF_RWINLOCKED = 0x00800000;
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
static const int MKF_MOUSEKEYSON = 0x00000001;
static const int MKF_AVAILABLE = 0x00000002;
static const int MKF_HOTKEYACTIVE = 0x00000004;
static const int MKF_CONFIRMHOTKEY = 0x00000008;
static const int MKF_HOTKEYSOUND = 0x00000010;
static const int MKF_INDICATOR = 0x00000020;
static const int MKF_MODIFIERS = 0x00000040;
static const int MKF_REPLACENUMBERS = 0x00000080;
static const int MKF_LEFTBUTTONSEL = 0x10000000;
static const int MKF_RIGHTBUTTONSEL = 0x20000000;
static const int MKF_LEFTBUTTONDOWN = 0x01000000;
static const int MKF_RIGHTBUTTONDOWN = 0x02000000;
static const int MKF_MOUSEMODE = 0x80000000;
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
static const int ATF_TIMEOUTON = 0x00000001;
static const int ATF_ONOFFFEEDBACK = 0x00000002;
static const int SSGF_NONE = 0;
static const int SSGF_DISPLAY = 3;
static const int SSTF_NONE = 0;
static const int SSTF_CHARS = 1;
static const int SSTF_BORDER = 2;
static const int SSTF_DISPLAY = 3;
static const int SSWF_NONE = 0;
static const int SSWF_TITLE = 1;
static const int SSWF_WINDOW = 2;
static const int SSWF_DISPLAY = 3;
static const int SSWF_CUSTOM = 4;
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
static const int SSF_SOUNDSENTRYON = 0x00000001;
static const int SSF_AVAILABLE = 0x00000002;
static const int SSF_INDICATOR = 0x00000004;
BOOL
SoundSentry(void);
typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
static const int TKF_TOGGLEKEYSON = 0x00000001;
static const int TKF_AVAILABLE = 0x00000002;
static const int TKF_HOTKEYACTIVE = 0x00000004;
static const int TKF_CONFIRMHOTKEY = 0x00000008;
static const int TKF_HOTKEYSOUND = 0x00000010;
static const int TKF_INDICATOR = 0x00000020;
typedef struct tagAUDIODESCRIPTION {
    UINT cbSize; // sizeof(AudioDescriptionType)
    BOOL Enabled; // On/Off
    LCID Locale; // locale ID for language
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;
void
SetDebugErrorLevel(
    DWORD dwLevel);
static const int SLE_ERROR = 0x00000001;
static const int SLE_MINORERROR = 0x00000002;
static const int SLE_WARNING = 0x00000003;
void
SetLastErrorEx(
    DWORD dwErrCode,
    DWORD dwType);
int
InternalGetWindowText(
    HWND hWnd,
    LPWSTR pString,
    int cchMaxCount);
BOOL
EndTask(
    HWND hWnd,
    BOOL fShutDown,
    BOOL fForce);
BOOL
CancelShutdown(
    void);
static const int MONITOR_DEFAULTTONULL = 0x00000000;
static const int MONITOR_DEFAULTTOPRIMARY = 0x00000001;
static const int MONITOR_DEFAULTTONEAREST = 0x00000002;
HMONITOR
MonitorFromPoint(
    POINT pt,
    DWORD dwFlags);
HMONITOR
MonitorFromRect(
    LPCRECT lprc,
    DWORD dwFlags);
HMONITOR
MonitorFromWindow(
    HWND hwnd,
    DWORD dwFlags);
static const int MONITORINFOF_PRIMARY = 0x00000001;
typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;
typedef struct tagMONITORINFOEXA
{
    MONITORINFO;
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
    MONITORINFO;
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;
typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
BOOL
GetMonitorInfoA(
    HMONITOR hMonitor,
    LPMONITORINFO lpmi);
BOOL
GetMonitorInfoW(
    HMONITOR hMonitor,
    LPMONITORINFO lpmi);
static const int GetMonitorInfo = GetMonitorInfoA;
typedef BOOL (* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);
BOOL
EnumDisplayMonitors(
    HDC hdc,
    LPCRECT lprcClip,
    MONITORENUMPROC lpfnEnum,
    LPARAM dwData);
void
NotifyWinEvent(
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild);
typedef void (* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);
HWINEVENTHOOK
SetWinEventHook(
    DWORD eventMin,
    DWORD eventMax,
    HMODULE hmodWinEventProc,
    WINEVENTPROC pfnWinEventProc,
    DWORD idProcess,
    DWORD idThread,
    DWORD dwFlags);
BOOL
IsWinEventHookInstalled(
    DWORD event);
static const int WINEVENT_OUTOFCONTEXT = 0x0000;
static const int WINEVENT_SKIPOWNTHREAD = 0x0001;
static const int WINEVENT_SKIPOWNPROCESS = 0x0002;
static const int WINEVENT_INCONTEXT = 0x0004;
BOOL
UnhookWinEvent(
    HWINEVENTHOOK hWinEventHook);
static const int CHILDID_SELF = 0;
static const int INDEXID_OBJECT = 0;
static const int INDEXID_CONTAINER = 0;
static const int OBJID_WINDOW = ((LONG)0x00000000);
static const int OBJID_SYSMENU = ((LONG)0xFFFFFFFF);
static const int OBJID_TITLEBAR = ((LONG)0xFFFFFFFE);
static const int OBJID_MENU = ((LONG)0xFFFFFFFD);
static const int OBJID_CLIENT = ((LONG)0xFFFFFFFC);
static const int OBJID_VSCROLL = ((LONG)0xFFFFFFFB);
static const int OBJID_HSCROLL = ((LONG)0xFFFFFFFA);
static const int OBJID_SIZEGRIP = ((LONG)0xFFFFFFF9);
static const int OBJID_CARET = ((LONG)0xFFFFFFF8);
static const int OBJID_CURSOR = ((LONG)0xFFFFFFF7);
static const int OBJID_ALERT = ((LONG)0xFFFFFFF6);
static const int OBJID_SOUND = ((LONG)0xFFFFFFF5);
static const int OBJID_QUERYCLASSNAMEIDX = ((LONG)0xFFFFFFF4);
static const int OBJID_NATIVEOM = ((LONG)0xFFFFFFF0);
static const int EVENT_MIN = 0x00000001;
static const int EVENT_MAX = 0x7FFFFFFF;
static const int EVENT_SYSTEM_SOUND = 0x0001;
static const int EVENT_SYSTEM_ALERT = 0x0002;
static const int EVENT_SYSTEM_FOREGROUND = 0x0003;
static const int EVENT_SYSTEM_MENUSTART = 0x0004;
static const int EVENT_SYSTEM_MENUEND = 0x0005;
static const int EVENT_SYSTEM_MENUPOPUPSTART = 0x0006;
static const int EVENT_SYSTEM_MENUPOPUPEND = 0x0007;
static const int EVENT_SYSTEM_CAPTURESTART = 0x0008;
static const int EVENT_SYSTEM_CAPTUREEND = 0x0009;
static const int EVENT_SYSTEM_MOVESIZESTART = 0x000A;
static const int EVENT_SYSTEM_MOVESIZEEND = 0x000B;
static const int EVENT_SYSTEM_CONTEXTHELPSTART = 0x000C;
static const int EVENT_SYSTEM_CONTEXTHELPEND = 0x000D;
static const int EVENT_SYSTEM_DRAGDROPSTART = 0x000E;
static const double EVENT_SYSTEM_DRAGDROPEND = 0x000F;
static const int EVENT_SYSTEM_DIALOGSTART = 0x0010;
static const int EVENT_SYSTEM_DIALOGEND = 0x0011;
static const int EVENT_SYSTEM_SCROLLINGSTART = 0x0012;
static const int EVENT_SYSTEM_SCROLLINGEND = 0x0013;
static const int EVENT_SYSTEM_SWITCHSTART = 0x0014;
static const int EVENT_SYSTEM_SWITCHEND = 0x0015;
static const int EVENT_SYSTEM_MINIMIZESTART = 0x0016;
static const int EVENT_SYSTEM_MINIMIZEEND = 0x0017;
static const int EVENT_SYSTEM_DESKTOPSWITCH = 0x0020;
static const int EVENT_SYSTEM_END = 0x00FF;
static const int EVENT_OEM_DEFINED_START = 0x0101;
static const int EVENT_OEM_DEFINED_END = 0x01FF;
static const int EVENT_UIA_EVENTID_START = 0x4E00;
static const int EVENT_UIA_EVENTID_END = 0x4EFF;
static const int EVENT_UIA_PROPID_START = 0x7500;
static const int EVENT_UIA_PROPID_END = 0x75FF;
static const int EVENT_CONSOLE_CARET = 0x4001;
static const int EVENT_CONSOLE_UPDATE_REGION = 0x4002;
static const int EVENT_CONSOLE_UPDATE_SIMPLE = 0x4003;
static const int EVENT_CONSOLE_UPDATE_SCROLL = 0x4004;
static const int EVENT_CONSOLE_LAYOUT = 0x4005;
static const int EVENT_CONSOLE_START_APPLICATION = 0x4006;
static const int EVENT_CONSOLE_END_APPLICATION = 0x4007;
static const int CONSOLE_APPLICATION_16BIT = 0x0000;
static const int CONSOLE_CARET_SELECTION = 0x0001;
static const int CONSOLE_CARET_VISIBLE = 0x0002;
static const int EVENT_CONSOLE_END = 0x40FF;
static const int EVENT_OBJECT_CREATE = 0x8000;
static const int EVENT_OBJECT_DESTROY = 0x8001;
static const int EVENT_OBJECT_SHOW = 0x8002;
static const int EVENT_OBJECT_HIDE = 0x8003;
static const int EVENT_OBJECT_REORDER = 0x8004;
static const int EVENT_OBJECT_FOCUS = 0x8005;
static const int EVENT_OBJECT_SELECTION = 0x8006;
static const int EVENT_OBJECT_SELECTIONADD = 0x8007;
static const int EVENT_OBJECT_SELECTIONREMOVE = 0x8008;
static const int EVENT_OBJECT_SELECTIONWITHIN = 0x8009;
static const int EVENT_OBJECT_STATECHANGE = 0x800A;
static const int EVENT_OBJECT_LOCATIONCHANGE = 0x800B;
static const int EVENT_OBJECT_NAMECHANGE = 0x800C;
static const int EVENT_OBJECT_DESCRIPTIONCHANGE = 0x800D;
static const int EVENT_OBJECT_VALUECHANGE = 0x800E;
static const double EVENT_OBJECT_PARENTCHANGE = 0x800F;
static const int EVENT_OBJECT_HELPCHANGE = 0x8010;
static const int EVENT_OBJECT_DEFACTIONCHANGE = 0x8011;
static const int EVENT_OBJECT_ACCELERATORCHANGE = 0x8012;
static const int EVENT_OBJECT_INVOKED = 0x8013;
static const int EVENT_OBJECT_TEXTSELECTIONCHANGED = 0x8014;
static const int EVENT_OBJECT_CONTENTSCROLLED = 0x8015;
static const int EVENT_SYSTEM_ARRANGMENTPREVIEW = 0x8016;
static const int EVENT_OBJECT_END = 0x80FF;
static const int EVENT_AIA_START = 0xA000;
static const int EVENT_AIA_END = 0xAFFF;
static const int SOUND_SYSTEM_STARTUP = 1;
static const int SOUND_SYSTEM_SHUTDOWN = 2;
static const int SOUND_SYSTEM_BEEP = 3;
static const int SOUND_SYSTEM_ERROR = 4;
static const int SOUND_SYSTEM_QUESTION = 5;
static const int SOUND_SYSTEM_WARNING = 6;
static const int SOUND_SYSTEM_INFORMATION = 7;
static const int SOUND_SYSTEM_MAXIMIZE = 8;
static const int SOUND_SYSTEM_MINIMIZE = 9;
static const int SOUND_SYSTEM_RESTOREUP = 10;
static const int SOUND_SYSTEM_RESTOREDOWN = 11;
static const int SOUND_SYSTEM_APPSTART = 12;
static const int SOUND_SYSTEM_FAULT = 13;
static const int SOUND_SYSTEM_APPEND = 14;
static const int SOUND_SYSTEM_MENUCOMMAND = 15;
static const int SOUND_SYSTEM_MENUPOPUP = 16;
static const int CSOUND_SYSTEM = 16;
static const int ALERT_SYSTEM_INFORMATIONAL = 1;
static const int ALERT_SYSTEM_WARNING = 2;
static const int ALERT_SYSTEM_ERROR = 3;
static const int ALERT_SYSTEM_QUERY = 4;
static const int ALERT_SYSTEM_CRITICAL = 5;
static const int CALERT_SYSTEM = 6;
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
static const int GUI_CARETBLINKING = 0x00000001;
static const int GUI_INMOVESIZE = 0x00000002;
static const int GUI_INMENUMODE = 0x00000004;
static const int GUI_SYSTEMMENUMODE = 0x00000008;
static const int GUI_POPUPMENUMODE = 0x00000010;
static const int GUI_16BITTASK = 0x00000000;
BOOL
GetGUIThreadInfo(
    DWORD idThread,
    PGUITHREADINFO pgui);
BOOL
BlockInput(
    BOOL fBlockIt);
static const int USER_DEFAULT_SCREEN_DPI = 96;
BOOL
SetProcessDPIAware(
    void);
BOOL
IsProcessDPIAware(
    void);
UINT
GetWindowModuleFileNameA(
    HWND hwnd,
    LPSTR pszFileName,
    UINT cchFileNameMax);
UINT
GetWindowModuleFileNameW(
    HWND hwnd,
    LPWSTR pszFileName,
    UINT cchFileNameMax);
static const int GetWindowModuleFileName = GetWindowModuleFileNameA;
static const int STATE_SYSTEM_UNAVAILABLE = 0x00000001;
static const int STATE_SYSTEM_SELECTED = 0x00000002;
static const int STATE_SYSTEM_FOCUSED = 0x00000004;
static const int STATE_SYSTEM_PRESSED = 0x00000008;
static const int STATE_SYSTEM_CHECKED = 0x00000010;
static const int STATE_SYSTEM_MIXED = 0x00000020;
static const int STATE_SYSTEM_INDETERMINATE = STATE_SYSTEM_MIXED;
static const int STATE_SYSTEM_READONLY = 0x00000040;
static const int STATE_SYSTEM_HOTTRACKED = 0x00000080;
static const int STATE_SYSTEM_DEFAULT = 0x00000100;
static const int STATE_SYSTEM_EXPANDED = 0x00000200;
static const int STATE_SYSTEM_COLLAPSED = 0x00000400;
static const int STATE_SYSTEM_BUSY = 0x00000800;
static const int STATE_SYSTEM_FLOATING = 0x00001000;
static const int STATE_SYSTEM_MARQUEED = 0x00002000;
static const int STATE_SYSTEM_ANIMATED = 0x00004000;
static const int STATE_SYSTEM_INVISIBLE = 0x00008000;
static const int STATE_SYSTEM_OFFSCREEN = 0x00010000;
static const int STATE_SYSTEM_SIZEABLE = 0x00020000;
static const int STATE_SYSTEM_MOVEABLE = 0x00040000;
static const int STATE_SYSTEM_SELFVOICING = 0x00080000;
static const int STATE_SYSTEM_FOCUSABLE = 0x00100000;
static const int STATE_SYSTEM_SELECTABLE = 0x00200000;
static const int STATE_SYSTEM_LINKED = 0x00400000;
static const int STATE_SYSTEM_TRAVERSED = 0x00800000;
static const int STATE_SYSTEM_MULTISELECTABLE = 0x01000000;
static const int STATE_SYSTEM_EXTSELECTABLE = 0x02000000;
static const int STATE_SYSTEM_ALERT_LOW = 0x04000000;
static const int STATE_SYSTEM_ALERT_MEDIUM = 0x08000000;
static const int STATE_SYSTEM_ALERT_HIGH = 0x10000000;
static const int STATE_SYSTEM_PROTECTED = 0x20000000;
static const int STATE_SYSTEM_VALID = 0x3FFFFFFF;
static const int CCHILDREN_TITLEBAR = 5;
static const int CCHILDREN_SCROLLBAR = 5;
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;
static const int CURSOR_SHOWING = 0x00000001;
BOOL
GetCursorInfo(
    PCURSORINFO pci);
typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;
static const int WS_ACTIVECAPTION = 0x0001;
BOOL
GetWindowInfo(
    HWND hwnd,
    PWINDOWINFO pwi);
typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;
BOOL
GetTitleBarInfo(
    HWND hwnd,
    PTITLEBARINFO pti);
typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar; // rect of bar, popup, item
    HMENU hMenu; // real menu handle of bar, popup
    HWND hwndMenu; // hwnd of item submenu if one
    BOOL fBarFocused:1; // bar, popup has the focus
    BOOL fFocused:1; // item has the focus
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;
BOOL
GetMenuBarInfo(
    HWND hwnd,
    LONG idObject,
    LONG idItem,
    PMENUBARINFO pmbi);
typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;
BOOL
GetScrollBarInfo(
    HWND hwnd,
    LONG idObject,
    PSCROLLBARINFO psbi);
typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;
BOOL
GetComboBoxInfo(
    HWND hwndCombo,
    PCOMBOBOXINFO pcbi);
static const int GA_PARENT = 1;
static const int GA_ROOT = 2;
static const int GA_ROOTOWNER = 3;
HWND
GetAncestor(
    HWND hwnd,
    UINT gaFlags);
HWND
RealChildWindowFromPoint(
    HWND hwndParent,
    POINT ptParentClientCoords);
UINT
RealGetWindowClassA(
    HWND hwnd,
    LPSTR ptszClassName,
    UINT cchClassNameMax);
UINT
RealGetWindowClassW(
    HWND hwnd,
    LPWSTR ptszClassName,
    UINT cchClassNameMax);
static const int RealGetWindowClass = RealGetWindowClassA;
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;
BOOL
GetAltTabInfoA(
    HWND hwnd,
    int iItem,
    PALTTABINFO pati,
    LPSTR pszItemText,
    UINT cchItemText);
BOOL
GetAltTabInfoW(
    HWND hwnd,
    int iItem,
    PALTTABINFO pati,
    LPWSTR pszItemText,
    UINT cchItemText);
static const int GetAltTabInfo = GetAltTabInfoA;
DWORD
GetListBoxInfo(
    HWND hwnd);
BOOL
LockWorkStation(
    void);
BOOL
UserHandleGrantAccess(
    HANDLE hUserHandle,
    HANDLE hJob,
    BOOL bGrant);
struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;
static const int GET_RAWINPUT_CODE_WPARAM(wParam) = ((wParam) & 0xff);
static const int RIM_INPUT = 0;
static const int RIM_INPUTSINK = 1;
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
static const int RIM_TYPEMOUSE = 0;
static const int RIM_TYPEKEYBOARD = 1;
static const int RIM_TYPEHID = 2;
typedef struct tagRAWMOUSE {
    USHORT usFlags;
    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
static const int RI_MOUSE_LEFT_BUTTON_DOWN = 0x0001;
static const int RI_MOUSE_LEFT_BUTTON_UP = 0x0002;
static const int RI_MOUSE_RIGHT_BUTTON_DOWN = 0x0004;
static const int RI_MOUSE_RIGHT_BUTTON_UP = 0x0008;
static const int RI_MOUSE_MIDDLE_BUTTON_DOWN = 0x0010;
static const int RI_MOUSE_MIDDLE_BUTTON_UP = 0x0020;
static const int RI_MOUSE_BUTTON_1_DOWN = RI_MOUSE_LEFT_BUTTON_DOWN;
static const int RI_MOUSE_BUTTON_1_UP = RI_MOUSE_LEFT_BUTTON_UP;
static const int RI_MOUSE_BUTTON_2_DOWN = RI_MOUSE_RIGHT_BUTTON_DOWN;
static const int RI_MOUSE_BUTTON_2_UP = RI_MOUSE_RIGHT_BUTTON_UP;
static const int RI_MOUSE_BUTTON_3_DOWN = RI_MOUSE_MIDDLE_BUTTON_DOWN;
static const int RI_MOUSE_BUTTON_3_UP = RI_MOUSE_MIDDLE_BUTTON_UP;
static const int RI_MOUSE_BUTTON_4_DOWN = 0x0040;
static const int RI_MOUSE_BUTTON_4_UP = 0x0080;
static const int RI_MOUSE_BUTTON_5_DOWN = 0x0100;
static const int RI_MOUSE_BUTTON_5_UP = 0x0200;
static const int RI_MOUSE_WHEEL = 0x0400;
static const int MOUSE_MOVE_RELATIVE = 0;
static const int MOUSE_MOVE_ABSOLUTE = 1;
static const int MOUSE_VIRTUAL_DESKTOP = 0x02;
static const int MOUSE_ATTRIBUTES_CHANGED = 0x04;
static const int MOUSE_MOVE_NOCOALESCE = 0x08;
typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
static const int KEYBOARD_OVERRUN_MAKE_CODE = 0xFF;
static const int RI_KEY_MAKE = 0;
static const int RI_KEY_BREAK = 1;
static const int RI_KEY_E0 = 2;
static const int RI_KEY_E1 = 4;
static const int RI_KEY_TERMSRV_SET_LED = 8;
static const int RI_KEY_TERMSRV_SHADOW = 0x10;
typedef struct tagRAWHID {
    DWORD dwSizeHid; // byte size of each report
    DWORD dwCount; // number of input packed
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;
typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
static const int RAWINPUT_ALIGN(x) = (((x) + sizeof(QWORD) - 1) & ~(sizeof(QWORD) - 1));
static const int NEXTRAWINPUTBLOCK(ptr) = ((PRAWINPUT)RAWINPUT_ALIGN((ULONG_PTR)((PBYTE)(ptr) + (ptr)->header.dwSize)));
static const int RID_INPUT = 0x10000003;
static const int RID_HEADER = 0x10000005;
UINT
GetRawInputData(
    HRAWINPUT hRawInput,
    UINT uiCommand,
    LPVOID pData,
    PUINT pcbSize,
    UINT cbSizeHeader);
static const int RIDI_PREPARSEDDATA = 0x20000005;
static const int RIDI_DEVICENAME = 0x20000007;
static const int RIDI_DEVICEINFO = 0x2000000b;
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;
typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;
typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;
typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;
UINT
GetRawInputDeviceInfoA(
    HANDLE hDevice,
    UINT uiCommand,
    LPVOID pData,
    PUINT pcbSize);
UINT
GetRawInputDeviceInfoW(
    HANDLE hDevice,
    UINT uiCommand,
    LPVOID pData,
    PUINT pcbSize);
static const int GetRawInputDeviceInfo = GetRawInputDeviceInfoA;
UINT
GetRawInputBuffer(
    PRAWINPUT pData,
    PUINT pcbSize,
    UINT cbSizeHeader);
typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage; // Toplevel collection UsagePage
    USHORT usUsage; // Toplevel collection Usage
    DWORD dwFlags;
    HWND hwndTarget; // Target hwnd. NULL = follows keyboard focus
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;
typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
static const int RIDEV_REMOVE = 0x00000001;
static const int RIDEV_EXCLUDE = 0x00000010;
static const int RIDEV_PAGEONLY = 0x00000020;
static const int RIDEV_NOLEGACY = 0x00000030;
static const int RIDEV_INPUTSINK = 0x00000100;
static const int RIDEV_CAPTUREMOUSE = 0x00000200;
static const int RIDEV_NOHOTKEYS = 0x00000200;
static const int RIDEV_APPKEYS = 0x00000400;
static const int RIDEV_EXINPUTSINK = 0x00001000;
static const int RIDEV_DEVNOTIFY = 0x00002000;
static const int RIDEV_EXMODEMASK = 0x000000F0;
static const int RIDEV_EXMODE(mode) = ((mode) & RIDEV_EXMODEMASK);
static const int GIDC_ARRIVAL = 1;
static const int GIDC_REMOVAL = 2;
static const int GET_DEVICE_CHANGE_WPARAM(wParam) = (LOWORD(wParam));
BOOL
RegisterRawInputDevices(
    PCRAWINPUTDEVICE pRawInputDevices,
    UINT uiNumDevices,
    UINT cbSize);
UINT
GetRegisteredRawInputDevices(
    PRAWINPUTDEVICE pRawInputDevices,
    PUINT puiNumDevices,
    UINT cbSize);
typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;
UINT
GetRawInputDeviceList(
    PRAWINPUTDEVICELIST pRawInputDeviceList,
    PUINT puiNumDevices,
    UINT cbSize);
LRESULT
DefRawInputProc(
    PRAWINPUT* paRawInput,
    INT nInput,
    UINT cbSizeHeader);
static const int MSGFLT_ADD = 1;
static const int MSGFLT_REMOVE = 2;
BOOL
ChangeWindowMessageFilter(
    UINT message,
    DWORD dwFlag);
static const int MSGFLTINFO_NONE = (0);
static const int MSGFLTINFO_ALREADYALLOWED_FORWND = (1);
static const int MSGFLTINFO_ALREADYDISALLOWED_FORWND = (2);
static const int MSGFLTINFO_ALLOWED_HIGHER = (3);
typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;
static const int MSGFLT_RESET = (0);
static const int MSGFLT_ALLOW = (1);
static const int MSGFLT_DISALLOW = (2);
BOOL
ChangeWindowMessageFilterEx(
    HWND hwnd, // Window
    UINT message, // WM_ message
    DWORD action, // Message filter action value
    PCHANGEFILTERSTRUCT pChangeFilterStruct); // Optional
struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;
static const int GF_BEGIN = 0x00000001;
static const int GF_INERTIA = 0x00000002;
static const int GF_END = 0x00000004;
static const int GID_BEGIN = 1;
static const int GID_END = 2;
static const int GID_ZOOM = 3;
static const int GID_PAN = 4;
static const int GID_ROTATE = 5;
static const int GID_TWOFINGERTAP = 6;
static const int GID_PRESSANDTAP = 7;
static const int GID_ROLLOVER = GID_PRESSANDTAP;
typedef struct tagGESTUREINFO {
    UINT cbSize; // size, in bytes, of this structure (including variable length Args field)
    DWORD dwFlags; // see GF_* flags
    DWORD dwID; // gesture ID, see GID_* defines
    HWND hwndTarget; // handle to window targeted by this gesture
    POINTS ptsLocation; // current location of this gesture
    DWORD dwInstanceID; // internally used
    DWORD dwSequenceID; // internally used
    ULONGLONG ullArguments; // arguments for gestures whose arguments fit in 8 BYTES
    UINT cbExtraArgs; // size, in bytes, of extra arguments, if any, that accompany this gesture
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize; // size, in bytes, of this structure
    DWORD dwFlags; // unused
    HWND hwndTarget; // handle to window targeted by the gesture
    POINTS ptsLocation; // starting location
    DWORD dwInstanceID; // internally used
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;
static const double GID_ROTATE_ANGLE_TO_ARGUMENT(_arg_) = ((USHORT)((((_arg_) + 2.0 * 3.14159265) / (4.0 * 3.14159265)) * 65535.0));
static const double GID_ROTATE_ANGLE_FROM_ARGUMENT(_arg_) = ((((double)(_arg_) / 65535.0) * 4.0 * 3.14159265) - 2.0 * 3.14159265);
BOOL
GetGestureInfo(
    HGESTUREINFO hGestureInfo,
    PGESTUREINFO pGestureInfo);
BOOL
GetGestureExtraArgs(
    HGESTUREINFO hGestureInfo,
    UINT cbExtraArgs,
    PBYTE pExtraArgs);
BOOL
CloseGestureInfoHandle(
    HGESTUREINFO hGestureInfo);
typedef struct tagGESTURECONFIG {
    DWORD dwID; // gesture ID
    DWORD dwWant; // settings related to gesture ID that are to be turned on
    DWORD dwBlock; // settings related to gesture ID that are to be turned off
} GESTURECONFIG, *PGESTURECONFIG;
static const int GC_ALLGESTURES = 0x00000001;
static const int GC_ZOOM = 0x00000001;
static const int GC_PAN = 0x00000001;
static const int GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 0x00000002;
static const int GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 0x00000004;
static const int GC_PAN_WITH_GUTTER = 0x00000008;
static const int GC_PAN_WITH_INERTIA = 0x00000010;
static const int GC_ROTATE = 0x00000001;
static const int GC_TWOFINGERTAP = 0x00000001;
static const int GC_PRESSANDTAP = 0x00000001;
static const int GC_ROLLOVER = GC_PRESSANDTAP;
static const int GESTURECONFIGMAXCOUNT = 256;
BOOL
SetGestureConfig(
    HWND hwnd, // window for which configuration is specified
    DWORD dwReserved, // reserved, must be 0
    UINT cIDs, // count of GESTURECONFIG structures
    PGESTURECONFIG pGestureConfig, // array of GESTURECONFIG structures, dwIDs will be processed in the
    UINT cbSize); // sizeof(GESTURECONFIG)
static const int GCF_INCLUDE_ANCESTORS = 0x00000001;
BOOL
GetGestureConfig(
    HWND hwnd, // window for which configuration is required
    DWORD dwReserved, // reserved, must be 0
    DWORD dwFlags, // see GCF_* flags
    PUINT pcIDs, // *pcIDs contains the size, in number of GESTURECONFIG structures,
    PGESTURECONFIG pGestureConfig,
    UINT cbSize); // sizeof(GESTURECONFIG)
static const int NID_INTEGRATED_TOUCH = 0x00000001;
static const int NID_EXTERNAL_TOUCH = 0x00000002;
static const int NID_INTEGRATED_PEN = 0x00000004;
static const int NID_EXTERNAL_PEN = 0x00000008;
static const int NID_MULTI_INPUT = 0x00000040;
static const int NID_READY = 0x00000080;
static const int MAX_STR_BLOCKREASON = 256;
BOOL
ShutdownBlockReasonCreate(
    HWND hWnd,
    LPCWSTR pwszReason);
BOOL
ShutdownBlockReasonQuery(
    HWND hWnd,
    LPWSTR pwszBuff,
    DWORD *pcchBuff);
BOOL
ShutdownBlockReasonDestroy(
    HWND hWnd);
static const int WINNORMALIZEAPI = ;
static const int MAX_LEADBYTES = 12;
static const int MAX_DEFAULTCHAR = 2;
static const int HIGH_SURROGATE_START = 0xd800;
static const int HIGH_SURROGATE_END = 0xdbff;
static const int LOW_SURROGATE_START = 0xdc00;
static const int LOW_SURROGATE_END = 0xdfff;
static const int MB_PRECOMPOSED = 0x00000001;
static const int MB_COMPOSITE = 0x00000002;
static const int MB_USEGLYPHCHARS = 0x00000004;
static const int MB_ERR_INVALID_CHARS = 0x00000008;
static const int WC_COMPOSITECHECK = 0x00000200;
static const int WC_DISCARDNS = 0x00000010;
static const int WC_SEPCHARS = 0x00000020;
static const int WC_DEFAULTCHAR = 0x00000040;
static const int WC_ERR_INVALID_CHARS = 0x00000080;
static const int WC_NO_BEST_FIT_CHARS = 0x00000400;
static const int CT_CTYPE1 = 0x00000001;
static const int CT_CTYPE2 = 0x00000002;
static const int CT_CTYPE3 = 0x00000004;
static const int C1_UPPER = 0x0001;
static const int C1_LOWER = 0x0002;
static const int C1_DIGIT = 0x0004;
static const int C1_SPACE = 0x0008;
static const int C1_PUNCT = 0x0010;
static const int C1_CNTRL = 0x0020;
static const int C1_BLANK = 0x0040;
static const int C1_XDIGIT = 0x0080;
static const int C1_ALPHA = 0x0100;
static const int C1_DEFINED = 0x0200;
static const int C2_LEFTTORIGHT = 0x0001;
static const int C2_RIGHTTOLEFT = 0x0002;
static const int C2_EUROPENUMBER = 0x0003;
static const int C2_EUROPESEPARATOR = 0x0004;
static const int C2_EUROPETERMINATOR = 0x0005;
static const int C2_ARABICNUMBER = 0x0006;
static const int C2_COMMONSEPARATOR = 0x0007;
static const int C2_BLOCKSEPARATOR = 0x0008;
static const int C2_SEGMENTSEPARATOR = 0x0009;
static const int C2_WHITESPACE = 0x000A;
static const int C2_OTHERNEUTRAL = 0x000B;
static const int C2_NOTAPPLICABLE = 0x0000;
static const int C3_NONSPACING = 0x0001;
static const int C3_DIACRITIC = 0x0002;
static const int C3_VOWELMARK = 0x0004;
static const int C3_SYMBOL = 0x0008;
static const int C3_KATAKANA = 0x0010;
static const int C3_HIRAGANA = 0x0020;
static const int C3_HALFWIDTH = 0x0040;
static const int C3_FULLWIDTH = 0x0080;
static const int C3_IDEOGRAPH = 0x0100;
static const int C3_KASHIDA = 0x0200;
static const int C3_LEXICAL = 0x0400;
static const int C3_HIGHSURROGATE = 0x0800;
static const int C3_LOWSURROGATE = 0x1000;
static const int C3_ALPHA = 0x8000;
static const int C3_NOTAPPLICABLE = 0x0000;
static const int NORM_IGNORECASE = 0x00000001;
static const int NORM_IGNORENONSPACE = 0x00000002;
static const int NORM_IGNORESYMBOLS = 0x00000004;
static const int LINGUISTIC_IGNORECASE = 0x00000010;
static const int LINGUISTIC_IGNOREDIACRITIC = 0x00000020;
static const int NORM_IGNOREKANATYPE = 0x00010000;
static const int NORM_IGNOREWIDTH = 0x00020000;
static const int NORM_LINGUISTIC_CASING = 0x08000000;
static const int MAP_FOLDCZONE = 0x00000010;
static const int MAP_PRECOMPOSED = 0x00000020;
static const int MAP_COMPOSITE = 0x00000040;
static const int MAP_FOLDDIGITS = 0x00000080;
static const int MAP_EXPAND_LIGATURES = 0x00002000;
static const int LCMAP_LOWERCASE = 0x00000100;
static const int LCMAP_UPPERCASE = 0x00000200;
static const int LCMAP_TITLECASE = 0x00000300;
static const int LCMAP_SORTKEY = 0x00000400;
static const int LCMAP_BYTEREV = 0x00000800;
static const int LCMAP_HIRAGANA = 0x00100000;
static const int LCMAP_KATAKANA = 0x00200000;
static const int LCMAP_HALFWIDTH = 0x00400000;
static const int LCMAP_FULLWIDTH = 0x00800000;
static const int LCMAP_LINGUISTIC_CASING = 0x01000000;
static const int LCMAP_SIMPLIFIED_CHINESE = 0x02000000;
static const int LCMAP_TRADITIONAL_CHINESE = 0x04000000;
static const int FIND_STARTSWITH = 0x00100000;
static const int FIND_ENDSWITH = 0x00200000;
static const int FIND_FROMSTART = 0x00400000;
static const int FIND_FROMEND = 0x00800000;
static const int LGRPID_INSTALLED = 0x00000001;
static const int LGRPID_SUPPORTED = 0x00000002;
static const int LCID_INSTALLED = 0x00000001;
static const int LCID_SUPPORTED = 0x00000002;
static const int LCID_ALTERNATE_SORTS = 0x00000004;
static const int LOCALE_ALL = 0;
static const int LOCALE_WINDOWS = 0x00000001;
static const int LOCALE_SUPPLEMENTAL = 0x00000002;
static const int LOCALE_ALTERNATE_SORTS = 0x00000004;
static const int LOCALE_REPLACEMENT = 0x00000008;
static const int LOCALE_NEUTRALDATA = 0x00000010;
static const int LOCALE_SPECIFICDATA = 0x00000020;
static const int CP_INSTALLED = 0x00000001;
static const int CP_SUPPORTED = 0x00000002;
static const int SORT_STRINGSORT = 0x00001000;
static const int SORT_DIGITSASNUMBERS = 0x00000008;
static const int CSTR_LESS_THAN = 1;
static const int CSTR_EQUAL = 2;
static const int CSTR_GREATER_THAN = 3;
static const int CP_ACP = 0;
static const int CP_OEMCP = 1;
static const int CP_MACCP = 2;
static const int CP_THREAD_ACP = 3;
static const int CP_SYMBOL = 42;
static const int CP_UTF7 = 65000;
static const int CP_UTF8 = 65001;
static const int CTRY_DEFAULT = 0;
static const int CTRY_ALBANIA = 355;
static const int CTRY_ALGERIA = 213;
static const int CTRY_ARGENTINA = 54;
static const int CTRY_ARMENIA = 374;
static const int CTRY_AUSTRALIA = 61;
static const int CTRY_AUSTRIA = 43;
static const int CTRY_AZERBAIJAN = 994;
static const int CTRY_BAHRAIN = 973;
static const int CTRY_BELARUS = 375;
static const int CTRY_BELGIUM = 32;
static const int CTRY_BELIZE = 501;
static const int CTRY_BOLIVIA = 591;
static const int CTRY_BRAZIL = 55;
static const int CTRY_BRUNEI_DARUSSALAM = 673;
static const int CTRY_BULGARIA = 359;
static const int CTRY_CANADA = 2;
static const int CTRY_CARIBBEAN = 1;
static const int CTRY_CHILE = 56;
static const int CTRY_COLOMBIA = 57;
static const int CTRY_COSTA_RICA = 506;
static const int CTRY_CROATIA = 385;
static const int CTRY_CZECH = 420;
static const int CTRY_DENMARK = 45;
static const int CTRY_DOMINICAN_REPUBLIC = 1;
static const int CTRY_ECUADOR = 593;
static const int CTRY_EGYPT = 20;
static const int CTRY_EL_SALVADOR = 503;
static const int CTRY_ESTONIA = 372;
static const int CTRY_FAEROE_ISLANDS = 298;
static const int CTRY_FINLAND = 358;
static const int CTRY_FRANCE = 33;
static const int CTRY_GEORGIA = 995;
static const int CTRY_GERMANY = 49;
static const int CTRY_GREECE = 30;
static const int CTRY_GUATEMALA = 502;
static const int CTRY_HONDURAS = 504;
static const int CTRY_HONG_KONG = 852;
static const int CTRY_HUNGARY = 36;
static const int CTRY_ICELAND = 354;
static const int CTRY_INDIA = 91;
static const int CTRY_INDONESIA = 62;
static const int CTRY_IRAN = 981;
static const int CTRY_IRAQ = 964;
static const int CTRY_IRELAND = 353;
static const int CTRY_ISRAEL = 972;
static const int CTRY_ITALY = 39;
static const int CTRY_JAMAICA = 1;
static const int CTRY_JAPAN = 81;
static const int CTRY_JORDAN = 962;
static const int CTRY_KAZAKSTAN = 7;
static const int CTRY_KENYA = 254;
static const int CTRY_KUWAIT = 965;
static const int CTRY_KYRGYZSTAN = 996;
static const int CTRY_LATVIA = 371;
static const int CTRY_LEBANON = 961;
static const int CTRY_LIBYA = 218;
static const int CTRY_LIECHTENSTEIN = 41;
static const int CTRY_LITHUANIA = 370;
static const int CTRY_LUXEMBOURG = 352;
static const int CTRY_MACAU = 853;
static const int CTRY_MACEDONIA = 389;
static const int CTRY_MALAYSIA = 60;
static const int CTRY_MALDIVES = 960;
static const int CTRY_MEXICO = 52;
static const int CTRY_MONACO = 33;
static const int CTRY_MONGOLIA = 976;
static const int CTRY_MOROCCO = 212;
static const int CTRY_NETHERLANDS = 31;
static const int CTRY_NEW_ZEALAND = 64;
static const int CTRY_NICARAGUA = 505;
static const int CTRY_NORWAY = 47;
static const int CTRY_OMAN = 968;
static const int CTRY_PAKISTAN = 92;
static const int CTRY_PANAMA = 507;
static const int CTRY_PARAGUAY = 595;
static const int CTRY_PERU = 51;
static const int CTRY_PHILIPPINES = 63;
static const int CTRY_POLAND = 48;
static const int CTRY_PORTUGAL = 351;
static const int CTRY_PRCHINA = 86;
static const int CTRY_PUERTO_RICO = 1;
static const int CTRY_QATAR = 974;
static const int CTRY_ROMANIA = 40;
static const int CTRY_RUSSIA = 7;
static const int CTRY_SAUDI_ARABIA = 966;
static const int CTRY_SERBIA = 381;
static const int CTRY_SINGAPORE = 65;
static const int CTRY_SLOVAK = 421;
static const int CTRY_SLOVENIA = 386;
static const int CTRY_SOUTH_AFRICA = 27;
static const int CTRY_SOUTH_KOREA = 82;
static const int CTRY_SPAIN = 34;
static const int CTRY_SWEDEN = 46;
static const int CTRY_SWITZERLAND = 41;
static const int CTRY_SYRIA = 963;
static const int CTRY_TAIWAN = 886;
static const int CTRY_TATARSTAN = 7;
static const int CTRY_THAILAND = 66;
static const int CTRY_TRINIDAD_Y_TOBAGO = 1;
static const int CTRY_TUNISIA = 216;
static const int CTRY_TURKEY = 90;
static const int CTRY_UAE = 971;
static const int CTRY_UKRAINE = 380;
static const int CTRY_UNITED_KINGDOM = 44;
static const int CTRY_UNITED_STATES = 1;
static const int CTRY_URUGUAY = 598;
static const int CTRY_UZBEKISTAN = 7;
static const int CTRY_VENEZUELA = 58;
static const int CTRY_VIET_NAM = 84;
static const int CTRY_YEMEN = 967;
static const int CTRY_ZIMBABWE = 263;
static const int LOCALE_NOUSEROVERRIDE = 0x80000000;
static const int LOCALE_USE_CP_ACP = 0x40000000;
static const int LOCALE_RETURN_NUMBER = 0x20000000;
static const int LOCALE_RETURN_GENITIVE_NAMES = 0x10000000;
static const int LOCALE_ALLOW_NEUTRAL_NAMES = 0x08000000;
static const int LOCALE_SLOCALIZEDDISPLAYNAME = 0x00000002;
static const int LOCALE_SENGLISHDISPLAYNAME = 0x00000072;
static const int LOCALE_SNATIVEDISPLAYNAME = 0x00000073;
static const int LOCALE_SLOCALIZEDLANGUAGENAME = 0x0000006f;
static const int LOCALE_SENGLISHLANGUAGENAME = 0x00001001;
static const int LOCALE_SNATIVELANGUAGENAME = 0x00000004;
static const int LOCALE_SLOCALIZEDCOUNTRYNAME = 0x00000006;
static const int LOCALE_SENGLISHCOUNTRYNAME = 0x00001002;
static const int LOCALE_SNATIVECOUNTRYNAME = 0x00000008;
static const int LOCALE_SLANGUAGE = 0x00000002;
static const int LOCALE_SLANGDISPLAYNAME = 0x0000006f;
static const int LOCALE_SENGLANGUAGE = 0x00001001;
static const int LOCALE_SNATIVELANGNAME = 0x00000004;
static const int LOCALE_SCOUNTRY = 0x00000006;
static const int LOCALE_SENGCOUNTRY = 0x00001002;
static const int LOCALE_SNATIVECTRYNAME = 0x00000008;
static const int LOCALE_ILANGUAGE = 0x00000001;
static const int LOCALE_SABBREVLANGNAME = 0x00000003;
static const int LOCALE_ICOUNTRY = 0x00000005;
static const int LOCALE_SABBREVCTRYNAME = 0x00000007;
static const int LOCALE_IGEOID = 0x0000005B;
static const int LOCALE_IDEFAULTLANGUAGE = 0x00000009;
static const int LOCALE_IDEFAULTCOUNTRY = 0x0000000A;
static const int LOCALE_IDEFAULTCODEPAGE = 0x0000000B;
static const int LOCALE_IDEFAULTANSICODEPAGE = 0x00001004;
static const int LOCALE_IDEFAULTMACCODEPAGE = 0x00001011;
static const int LOCALE_SLIST = 0x0000000C;
static const int LOCALE_IMEASURE = 0x0000000D;
static const int LOCALE_SDECIMAL = 0x0000000E;
static const double LOCALE_STHOUSAND = 0x0000000F;
static const int LOCALE_SGROUPING = 0x00000010;
static const int LOCALE_IDIGITS = 0x00000011;
static const int LOCALE_ILZERO = 0x00000012;
static const int LOCALE_INEGNUMBER = 0x00001010;
static const int LOCALE_SNATIVEDIGITS = 0x00000013;
static const int LOCALE_SCURRENCY = 0x00000014;
static const int LOCALE_SINTLSYMBOL = 0x00000015;
static const int LOCALE_SMONDECIMALSEP = 0x00000016;
static const int LOCALE_SMONTHOUSANDSEP = 0x00000017;
static const int LOCALE_SMONGROUPING = 0x00000018;
static const int LOCALE_ICURRDIGITS = 0x00000019;
static const int LOCALE_IINTLCURRDIGITS = 0x0000001A;
static const int LOCALE_ICURRENCY = 0x0000001B;
static const int LOCALE_INEGCURR = 0x0000001C;
static const int LOCALE_SDATE = 0x0000001D;
static const int LOCALE_STIME = 0x0000001E;
static const double LOCALE_SSHORTDATE = 0x0000001F;
static const int LOCALE_SLONGDATE = 0x00000020;
static const int LOCALE_STIMEFORMAT = 0x00001003;
static const int LOCALE_IDATE = 0x00000021;
static const int LOCALE_ILDATE = 0x00000022;
static const int LOCALE_ITIME = 0x00000023;
static const int LOCALE_ITIMEMARKPOSN = 0x00001005;
static const int LOCALE_ICENTURY = 0x00000024;
static const int LOCALE_ITLZERO = 0x00000025;
static const int LOCALE_IDAYLZERO = 0x00000026;
static const int LOCALE_IMONLZERO = 0x00000027;
static const int LOCALE_S1159 = 0x00000028;
static const int LOCALE_S2359 = 0x00000029;
static const int LOCALE_ICALENDARTYPE = 0x00001009;
static const int LOCALE_IOPTIONALCALENDAR = 0x0000100B;
static const int LOCALE_IFIRSTDAYOFWEEK = 0x0000100C;
static const int LOCALE_IFIRSTWEEKOFYEAR = 0x0000100D;
static const int LOCALE_SDAYNAME1 = 0x0000002A;
static const int LOCALE_SDAYNAME2 = 0x0000002B;
static const int LOCALE_SDAYNAME3 = 0x0000002C;
static const int LOCALE_SDAYNAME4 = 0x0000002D;
static const int LOCALE_SDAYNAME5 = 0x0000002E;
static const double LOCALE_SDAYNAME6 = 0x0000002F;
static const int LOCALE_SDAYNAME7 = 0x00000030;
static const int LOCALE_SABBREVDAYNAME1 = 0x00000031;
static const int LOCALE_SABBREVDAYNAME2 = 0x00000032;
static const int LOCALE_SABBREVDAYNAME3 = 0x00000033;
static const int LOCALE_SABBREVDAYNAME4 = 0x00000034;
static const int LOCALE_SABBREVDAYNAME5 = 0x00000035;
static const int LOCALE_SABBREVDAYNAME6 = 0x00000036;
static const int LOCALE_SABBREVDAYNAME7 = 0x00000037;
static const int LOCALE_SMONTHNAME1 = 0x00000038;
static const int LOCALE_SMONTHNAME2 = 0x00000039;
static const int LOCALE_SMONTHNAME3 = 0x0000003A;
static const int LOCALE_SMONTHNAME4 = 0x0000003B;
static const int LOCALE_SMONTHNAME5 = 0x0000003C;
static const int LOCALE_SMONTHNAME6 = 0x0000003D;
static const int LOCALE_SMONTHNAME7 = 0x0000003E;
static const double LOCALE_SMONTHNAME8 = 0x0000003F;
static const int LOCALE_SMONTHNAME9 = 0x00000040;
static const int LOCALE_SMONTHNAME10 = 0x00000041;
static const int LOCALE_SMONTHNAME11 = 0x00000042;
static const int LOCALE_SMONTHNAME12 = 0x00000043;
static const int LOCALE_SMONTHNAME13 = 0x0000100E;
static const int LOCALE_SABBREVMONTHNAME1 = 0x00000044;
static const int LOCALE_SABBREVMONTHNAME2 = 0x00000045;
static const int LOCALE_SABBREVMONTHNAME3 = 0x00000046;
static const int LOCALE_SABBREVMONTHNAME4 = 0x00000047;
static const int LOCALE_SABBREVMONTHNAME5 = 0x00000048;
static const int LOCALE_SABBREVMONTHNAME6 = 0x00000049;
static const int LOCALE_SABBREVMONTHNAME7 = 0x0000004A;
static const int LOCALE_SABBREVMONTHNAME8 = 0x0000004B;
static const int LOCALE_SABBREVMONTHNAME9 = 0x0000004C;
static const int LOCALE_SABBREVMONTHNAME10 = 0x0000004D;
static const int LOCALE_SABBREVMONTHNAME11 = 0x0000004E;
static const double LOCALE_SABBREVMONTHNAME12 = 0x0000004F;
static const double LOCALE_SABBREVMONTHNAME13 = 0x0000100F;
static const int LOCALE_SPOSITIVESIGN = 0x00000050;
static const int LOCALE_SNEGATIVESIGN = 0x00000051;
static const int LOCALE_IPOSSIGNPOSN = 0x00000052;
static const int LOCALE_INEGSIGNPOSN = 0x00000053;
static const int LOCALE_IPOSSYMPRECEDES = 0x00000054;
static const int LOCALE_IPOSSEPBYSPACE = 0x00000055;
static const int LOCALE_INEGSYMPRECEDES = 0x00000056;
static const int LOCALE_INEGSEPBYSPACE = 0x00000057;
static const int LOCALE_FONTSIGNATURE = 0x00000058;
static const int LOCALE_SISO639LANGNAME = 0x00000059;
static const int LOCALE_SISO3166CTRYNAME = 0x0000005A;
static const int LOCALE_IDEFAULTEBCDICCODEPAGE = 0x00001012;
static const int LOCALE_IPAPERSIZE = 0x0000100A;
static const int LOCALE_SENGCURRNAME = 0x00001007;
static const int LOCALE_SNATIVECURRNAME = 0x00001008;
static const int LOCALE_SYEARMONTH = 0x00001006;
static const int LOCALE_SSORTNAME = 0x00001013;
static const int LOCALE_IDIGITSUBSTITUTION = 0x00001014;
static const int LOCALE_SNAME = 0x0000005c;
static const int LOCALE_SDURATION = 0x0000005d;
static const int LOCALE_SKEYBOARDSTOINSTALL = 0x0000005e;
static const int LOCALE_SSHORTESTDAYNAME1 = 0x00000060;
static const int LOCALE_SSHORTESTDAYNAME2 = 0x00000061;
static const int LOCALE_SSHORTESTDAYNAME3 = 0x00000062;
static const int LOCALE_SSHORTESTDAYNAME4 = 0x00000063;
static const int LOCALE_SSHORTESTDAYNAME5 = 0x00000064;
static const int LOCALE_SSHORTESTDAYNAME6 = 0x00000065;
static const int LOCALE_SSHORTESTDAYNAME7 = 0x00000066;
static const int LOCALE_SISO639LANGNAME2 = 0x00000067;
static const int LOCALE_SISO3166CTRYNAME2 = 0x00000068;
static const int LOCALE_SNAN = 0x00000069;
static const int LOCALE_SPOSINFINITY = 0x0000006a;
static const int LOCALE_SNEGINFINITY = 0x0000006b;
static const int LOCALE_SSCRIPTS = 0x0000006c;
static const int LOCALE_SPARENT = 0x0000006d;
static const int LOCALE_SCONSOLEFALLBACKNAME = 0x0000006e;
static const int LOCALE_IREADINGLAYOUT = 0x00000070;
static const int LOCALE_INEUTRAL = 0x00000071;
static const int LOCALE_INEGATIVEPERCENT = 0x00000074;
static const int LOCALE_IPOSITIVEPERCENT = 0x00000075;
static const int LOCALE_SPERCENT = 0x00000076;
static const int LOCALE_SPERMILLE = 0x00000077;
static const int LOCALE_SMONTHDAY = 0x00000078;
static const int LOCALE_SSHORTTIME = 0x00000079;
static const int LOCALE_SOPENTYPELANGUAGETAG = 0x0000007a;
static const int LOCALE_SSORTLOCALE = 0x0000007b;
static const int TIME_NOMINUTESORSECONDS = 0x00000001;
static const int TIME_NOSECONDS = 0x00000002;
static const int TIME_NOTIMEMARKER = 0x00000004;
static const int TIME_FORCE24HOURFORMAT = 0x00000008;
static const int DATE_SHORTDATE = 0x00000001;
static const int DATE_LONGDATE = 0x00000002;
static const int DATE_USE_ALT_CALENDAR = 0x00000004;
static const int DATE_YEARMONTH = 0x00000008;
static const int DATE_LTRREADING = 0x00000010;
static const int DATE_RTLREADING = 0x00000020;
static const int DATE_AUTOLAYOUT = 0x00000040;
static const int CAL_NOUSEROVERRIDE = LOCALE_NOUSEROVERRIDE;
static const int CAL_USE_CP_ACP = LOCALE_USE_CP_ACP;
static const int CAL_RETURN_NUMBER = LOCALE_RETURN_NUMBER;
static const int CAL_RETURN_GENITIVE_NAMES = LOCALE_RETURN_GENITIVE_NAMES;
static const int CAL_ICALINTVALUE = 0x00000001;
static const int CAL_SCALNAME = 0x00000002;
static const int CAL_IYEAROFFSETRANGE = 0x00000003;
static const int CAL_SERASTRING = 0x00000004;
static const int CAL_SSHORTDATE = 0x00000005;
static const int CAL_SLONGDATE = 0x00000006;
static const int CAL_SDAYNAME1 = 0x00000007;
static const int CAL_SDAYNAME2 = 0x00000008;
static const int CAL_SDAYNAME3 = 0x00000009;
static const int CAL_SDAYNAME4 = 0x0000000a;
static const int CAL_SDAYNAME5 = 0x0000000b;
static const int CAL_SDAYNAME6 = 0x0000000c;
static const int CAL_SDAYNAME7 = 0x0000000d;
static const int CAL_SABBREVDAYNAME1 = 0x0000000e;
static const int CAL_SABBREVDAYNAME2 = 0x0000000f;
static const int CAL_SABBREVDAYNAME3 = 0x00000010;
static const int CAL_SABBREVDAYNAME4 = 0x00000011;
static const int CAL_SABBREVDAYNAME5 = 0x00000012;
static const int CAL_SABBREVDAYNAME6 = 0x00000013;
static const int CAL_SABBREVDAYNAME7 = 0x00000014;
static const int CAL_SMONTHNAME1 = 0x00000015;
static const int CAL_SMONTHNAME2 = 0x00000016;
static const int CAL_SMONTHNAME3 = 0x00000017;
static const int CAL_SMONTHNAME4 = 0x00000018;
static const int CAL_SMONTHNAME5 = 0x00000019;
static const int CAL_SMONTHNAME6 = 0x0000001a;
static const int CAL_SMONTHNAME7 = 0x0000001b;
static const int CAL_SMONTHNAME8 = 0x0000001c;
static const int CAL_SMONTHNAME9 = 0x0000001d;
static const int CAL_SMONTHNAME10 = 0x0000001e;
static const int CAL_SMONTHNAME11 = 0x0000001f;
static const int CAL_SMONTHNAME12 = 0x00000020;
static const int CAL_SMONTHNAME13 = 0x00000021;
static const int CAL_SABBREVMONTHNAME1 = 0x00000022;
static const int CAL_SABBREVMONTHNAME2 = 0x00000023;
static const int CAL_SABBREVMONTHNAME3 = 0x00000024;
static const int CAL_SABBREVMONTHNAME4 = 0x00000025;
static const int CAL_SABBREVMONTHNAME5 = 0x00000026;
static const int CAL_SABBREVMONTHNAME6 = 0x00000027;
static const int CAL_SABBREVMONTHNAME7 = 0x00000028;
static const int CAL_SABBREVMONTHNAME8 = 0x00000029;
static const int CAL_SABBREVMONTHNAME9 = 0x0000002a;
static const int CAL_SABBREVMONTHNAME10 = 0x0000002b;
static const int CAL_SABBREVMONTHNAME11 = 0x0000002c;
static const int CAL_SABBREVMONTHNAME12 = 0x0000002d;
static const int CAL_SABBREVMONTHNAME13 = 0x0000002e;
static const int CAL_SYEARMONTH = 0x0000002f;
static const int CAL_ITWODIGITYEARMAX = 0x00000030;
static const int CAL_SSHORTESTDAYNAME1 = 0x00000031;
static const int CAL_SSHORTESTDAYNAME2 = 0x00000032;
static const int CAL_SSHORTESTDAYNAME3 = 0x00000033;
static const int CAL_SSHORTESTDAYNAME4 = 0x00000034;
static const int CAL_SSHORTESTDAYNAME5 = 0x00000035;
static const int CAL_SSHORTESTDAYNAME6 = 0x00000036;
static const int CAL_SSHORTESTDAYNAME7 = 0x00000037;
static const int CAL_SMONTHDAY = 0x00000038;
static const int CAL_SABBREVERASTRING = 0x00000039;
static const int ENUM_ALL_CALENDARS = 0xffffffff;
static const int CAL_GREGORIAN = 1;
static const int CAL_GREGORIAN_US = 2;
static const int CAL_JAPAN = 3;
static const int CAL_TAIWAN = 4;
static const int CAL_KOREA = 5;
static const int CAL_HIJRI = 6;
static const int CAL_THAI = 7;
static const int CAL_HEBREW = 8;
static const int CAL_GREGORIAN_ME_FRENCH = 9;
static const int CAL_GREGORIAN_ARABIC = 10;
static const int CAL_GREGORIAN_XLIT_ENGLISH = 11;
static const int CAL_GREGORIAN_XLIT_FRENCH = 12;
static const int CAL_UMALQURA = 23;
static const int LGRPID_WESTERN_EUROPE = 0x0001;
static const int LGRPID_CENTRAL_EUROPE = 0x0002;
static const int LGRPID_BALTIC = 0x0003;
static const int LGRPID_GREEK = 0x0004;
static const int LGRPID_CYRILLIC = 0x0005;
static const int LGRPID_TURKIC = 0x0006;
static const int LGRPID_TURKISH = 0x0006;
static const int LGRPID_JAPANESE = 0x0007;
static const int LGRPID_KOREAN = 0x0008;
static const int LGRPID_TRADITIONAL_CHINESE = 0x0009;
static const int LGRPID_SIMPLIFIED_CHINESE = 0x000a;
static const int LGRPID_THAI = 0x000b;
static const int LGRPID_HEBREW = 0x000c;
static const int LGRPID_ARABIC = 0x000d;
static const int LGRPID_VIETNAMESE = 0x000e;
static const int LGRPID_INDIC = 0x000f;
static const int LGRPID_GEORGIAN = 0x0010;
static const int LGRPID_ARMENIAN = 0x0011;
static const int MUI_LANGUAGE_ID = 0x4;
static const int MUI_LANGUAGE_NAME = 0x8;
static const int MUI_MERGE_SYSTEM_FALLBACK = 0x10;
static const int MUI_MERGE_USER_FALLBACK = 0x20;
static const int MUI_UI_FALLBACK = MUI_MERGE_SYSTEM_FALLBACK | MUI_MERGE_USER_FALLBACK;
static const int MUI_THREAD_LANGUAGES = 0x40;
static const int MUI_CONSOLE_FILTER = 0x100;
static const int MUI_COMPLEX_SCRIPT_FILTER = 0x200;
static const int MUI_RESET_FILTERS = 0x001;
static const int MUI_USER_PREFERRED_UI_LANGUAGES = 0x10;
static const int MUI_USE_INSTALLED_LANGUAGES = 0x20;
static const int MUI_USE_SEARCH_ALL_LANGUAGES = 0x40;
static const int MUI_LANG_NEUTRAL_PE_FILE = 0x100;
static const int MUI_NON_LANG_NEUTRAL_FILE = 0x200;
static const int MUI_MACHINE_LANGUAGE_SETTINGS = 0x400;
static const int MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 0x001;
static const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 0x002;
static const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 0x004;
static const int MUI_QUERY_TYPE = 0x001;
static const int MUI_QUERY_CHECKSUM = 0x002;
static const int MUI_QUERY_LANGUAGE_NAME = 0x004;
static const int MUI_QUERY_RESOURCE_TYPES = 0x008;
static const int MUI_FILEINFO_VERSION = 0x001;
static const int MUI_FULL_LANGUAGE = 0x01;
static const int MUI_PARTIAL_LANGUAGE = 0x02;
static const int MUI_LIP_LANGUAGE = 0x04;
static const int MUI_LANGUAGE_INSTALLED = 0x20;
static const int MUI_LANGUAGE_LICENSED = 0x40;
static const int MUI_CALLBACK_ALL_FLAGS = MUI_CALLBACK_FLAG_UPGRADED_INSTALLATION;
typedef DWORD LGRPID;
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef DWORD CALID;
typedef struct _cpinfo {
    UINT MaxCharSize; // max length (in bytes) of a char
    BYTE DefaultChar[2]; // default character
    BYTE LeadByte[12]; // lead byte ranges
} CPINFO, *LPCPINFO;
typedef struct _cpinfoexA {
    UINT MaxCharSize; // max length (in bytes) of a char
    BYTE DefaultChar[2]; // default character (MB)
    BYTE LeadByte[12]; // lead byte ranges
    WCHAR UnicodeDefaultChar; // default character (Unicode)
    UINT CodePage; // code page id
    CHAR CodePageName[260]; // code page name (Unicode)
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize; // max length (in bytes) of a char
    BYTE DefaultChar[2]; // default character (MB)
    BYTE LeadByte[12]; // lead byte ranges
    WCHAR UnicodeDefaultChar; // default character (Unicode)
    UINT CodePage; // code page id
    WCHAR CodePageName[260]; // code page name (Unicode)
} CPINFOEXW, *LPCPINFOEXW;
typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
typedef struct _numberfmtA {
    UINT NumDigits; // number of decimal digits
    UINT LeadingZero; // if leading zero in decimal fields
    UINT Grouping; // group size left of decimal
    LPSTR lpDecimalSep; // ptr to decimal separator string
    LPSTR lpThousandSep; // ptr to thousand separator string
    UINT NegativeOrder; // negative number ordering
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits; // number of decimal digits
    UINT LeadingZero; // if leading zero in decimal fields
    UINT Grouping; // group size left of decimal
    LPWSTR lpDecimalSep; // ptr to decimal separator string
    LPWSTR lpThousandSep; // ptr to thousand separator string
    UINT NegativeOrder; // negative number ordering
} NUMBERFMTW, *LPNUMBERFMTW;
typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef struct _currencyfmtA {
    UINT NumDigits; // number of decimal digits
    UINT LeadingZero; // if leading zero in decimal fields
    UINT Grouping; // group size left of decimal
    LPSTR lpDecimalSep; // ptr to decimal separator string
    LPSTR lpThousandSep; // ptr to thousand separator string
    UINT NegativeOrder; // negative currency ordering
    UINT PositiveOrder; // positive currency ordering
    LPSTR lpCurrencySymbol; // ptr to currency symbol string
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits; // number of decimal digits
    UINT LeadingZero; // if leading zero in decimal fields
    UINT Grouping; // group size left of decimal
    LPWSTR lpDecimalSep; // ptr to decimal separator string
    LPWSTR lpThousandSep; // ptr to thousand separator string
    UINT NegativeOrder; // negative currency ordering
    UINT PositiveOrder; // positive currency ordering
    LPWSTR lpCurrencySymbol; // ptr to currency symbol string
} CURRENCYFMTW, *LPCURRENCYFMTW;
typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize; // 12 bytes
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;
typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize; // sizeof(NLSVERSIONINFOEX) == 32 bytes
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId; // Use NLSVERSIONINFO instead
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;
typedef LONG GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;
static const int GEOID_NOT_AVAILABLE = -1;
enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
};
enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
};
typedef enum _NORM_FORM {
    NormalizationOther = 0, // Not supported
    NormalizationC = 0x1, // Each base plus combining characters to the canonical precomposed equivalent.
    NormalizationD = 0x2, // Each precomposed character to its canonical decomposed equivalent.
    NormalizationKC = 0x5, // Each base plus combining characters to the canonical precomposed
    NormalizationKD = 0x6 // Each precomposed character to its canonical decomposed equivalent
} NORM_FORM;
static const int IDN_ALLOW_UNASSIGNED = 0x01;
static const int IDN_USE_STD3_ASCII_RULES = 0x02;
static const int VS_ALLOW_LATIN = 0x0001;
static const int GSS_ALLOW_INHERITED_COMMON = 0x0001;
typedef BOOL (* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (* GEO_ENUMPROC)(GEOID);
static const int LANGUAGEGROUP_ENUMPROC = LANGUAGEGROUP_ENUMPROCA;
static const int LANGGROUPLOCALE_ENUMPROC = LANGGROUPLOCALE_ENUMPROCA;
static const int UILANGUAGE_ENUMPROC = UILANGUAGE_ENUMPROCA;
static const int LOCALE_ENUMPROC = LOCALE_ENUMPROCA;
static const int CODEPAGE_ENUMPROC = CODEPAGE_ENUMPROCA;
static const int DATEFMT_ENUMPROC = DATEFMT_ENUMPROCA;
static const int DATEFMT_ENUMPROCEX = DATEFMT_ENUMPROCEXA;
static const int TIMEFMT_ENUMPROC = TIMEFMT_ENUMPROCA;
static const int CALINFO_ENUMPROC = CALINFO_ENUMPROCA;
static const int CALINFO_ENUMPROCEX = CALINFO_ENUMPROCEXA;
typedef struct _FILEMUIINFO {
    DWORD dwSize; // Size of the structure including buffer size [in]
    DWORD dwVersion; // Version of the structure [in]
    DWORD dwFileType; // Type of the file [out]
    BYTE pChecksum[16]; // Checksum of the file [out]
    BYTE pServiceChecksum[16]; // Checksum of the file [out]
    DWORD dwLanguageNameOffset; // Language name of the file [out]
    DWORD dwTypeIDMainSize; // Number of TypeIDs in main module [out]
    DWORD dwTypeIDMainOffset; // Array of TypeIDs (DWORD) in main module [out]
    DWORD dwTypeNameMainOffset; // Multistring array of TypeNames in main module [out]
    DWORD dwTypeIDMUISize; // Number of TypeIDs in MUI module [out]
    DWORD dwTypeIDMUIOffset; // Array of TypeIDs (DWORD) in MUI module [out]
    DWORD dwTypeNameMUIOffset; // Multistring array of TypeNames in MUI module [out]
    BYTE abBuffer[8]; // Buffer for extra data [in] (Size 4 is for padding)
} FILEMUIINFO, *PFILEMUIINFO;
static const int IS_HIGH_SURROGATE(wch) = (((wch) >= HIGH_SURROGATE_START) && ((wch) <= HIGH_SURROGATE_END));
static const int IS_LOW_SURROGATE(wch) = (((wch) >= LOW_SURROGATE_START) && ((wch) <= LOW_SURROGATE_END));
static const int IS_SURROGATE_PAIR(hs,ls) = (IS_HIGH_SURROGATE(hs) && IS_LOW_SURROGATE(ls));
static const int FILEMUIINFO_GET_CULTURE(pInfo) = ((LPWSTR)((pInfo->dwLanguageNameOffset>0)?(ULONG_PTR)pInfo+pInfo->dwLanguageNameOffset:NULL));
static const int FILEMUIINFO_GET_MAIN_TYPEIDS(pInfo) = ((DWORD*)((pInfo->dwTypeIDMainOffset>0)?(ULONG_PTR)pInfo+pInfo->dwTypeIDMainOffset:NULL));
static const int FILEMUIINFO_GET_MAIN_TYPEID(pInfo,iType) = (((iType<pInfo->dwTypeIDMainSize)&&(pInfo->dwTypeIDMainOffset>0))?*((DWORD*)((ULONG_PTR)pInfo+pInfo->dwTypeIDMainOffset)+iType):0);
static const int FILEMUIINFO_GET_MAIN_TYPENAMES(pInfo) = ((LPWSTR)((pInfo->dwTypeNameMainOffset>0)?(ULONG_PTR)pInfo+pInfo->dwTypeNameMainOffset:NULL));
static const int FILEMUIINFO_GET_MUI_TYPEIDS(pInfo) = ((DWORD*)((pInfo->dwTypeIDMUIOffset>0)?(ULONG_PTR)pInfo+pInfo->dwTypeIDMUIOffset:NULL));
static const int FILEMUIINFO_GET_MUI_TYPEID(pInfo,iType) = (((iType<pInfo->dwTypeIDMUISize)&&(pInfo->dwTypeIDMUIOffset>0))?*((DWORD*)((ULONG_PTR)pInfo+pInfo->dwTypeIDMUIOffset)+iType):0);
static const int FILEMUIINFO_GET_MUI_TYPENAMES(pInfo) = ((LPWSTR)((pInfo->dwTypeNameMUIOffset>0)?(ULONG_PTR)pInfo+pInfo->dwTypeNameMUIOffset:NULL));
BOOL
IsValidCodePage(
    UINT CodePage);
UINT
GetACP(void);
UINT
GetOEMCP(void);
BOOL
GetCPInfo(
    UINT CodePage,
    LPCPINFO lpCPInfo);
BOOL
GetCPInfoExA(
    UINT CodePage,
    DWORD dwFlags,
    LPCPINFOEXA lpCPInfoEx);
BOOL
GetCPInfoExW(
    UINT CodePage,
    DWORD dwFlags,
    LPCPINFOEXW lpCPInfoEx);
static const int GetCPInfoEx = GetCPInfoExA;
BOOL
IsDBCSLeadByte(
    BYTE TestChar);
BOOL
IsDBCSLeadByteEx(
    UINT CodePage,
    BYTE TestChar);
int
MultiByteToWideChar(
    UINT CodePage,
    DWORD dwFlags,
    LPCSTR lpMultiByteStr,
    int cbMultiByte,
    LPWSTR lpWideCharStr,
    int cchWideChar);
int
WideCharToMultiByte(
    UINT CodePage,
    DWORD dwFlags,
    LPCWSTR lpWideCharStr,
    int cchWideChar,
    LPSTR lpMultiByteStr,
    int cbMultiByte,
    LPCSTR lpDefaultChar,
    LPBOOL lpUsedDefaultChar);
int
CompareStringA(
    LCID Locale,
    DWORD dwCmpFlags,
    PCNZCH lpString1,
    int cchCount1,
    PCNZCH lpString2,
    int cchCount2);
int
CompareStringW(
    LCID Locale,
    DWORD dwCmpFlags,
    PCNZWCH lpString1,
    int cchCount1,
    PCNZWCH lpString2,
    int cchCount2);
static const int CompareString = CompareStringA;
int
FindNLSString(
    LCID Locale,
    DWORD dwFindNLSStringFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    LPINT pcchFound);
int
FindStringOrdinal(
    DWORD dwFindStringOrdinalFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    BOOL bIgnoreCase);
int
LCMapStringA(
    LCID Locale,
    DWORD dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest);
int
LCMapStringW(
    LCID Locale,
    DWORD dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest);
static const int LCMapString = LCMapStringA;
int
GetLocaleInfoA(
    LCID Locale,
    LCTYPE LCType,
    LPSTR lpLCData,
    int cchData);
int
GetLocaleInfoW(
    LCID Locale,
    LCTYPE LCType,
    LPWSTR lpLCData,
    int cchData);
static const int GetLocaleInfo = GetLocaleInfoA;
BOOL
SetLocaleInfoA(
    LCID Locale,
    LCTYPE LCType,
    LPCSTR lpLCData);
BOOL
SetLocaleInfoW(
    LCID Locale,
    LCTYPE LCType,
    LPCWSTR lpLCData);
static const int SetLocaleInfo = SetLocaleInfoA;
int
GetCalendarInfoA(
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType,
    LPSTR lpCalData,
    int cchData,
    LPDWORD lpValue);
int
GetCalendarInfoW(
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType,
    LPWSTR lpCalData,
    int cchData,
    LPDWORD lpValue);
static const int GetCalendarInfo = GetCalendarInfoA;
BOOL
SetCalendarInfoA(
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType,
    LPCSTR lpCalData);
BOOL
SetCalendarInfoW(
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType,
    LPCWSTR lpCalData);
static const int SetCalendarInfo = SetCalendarInfoA;
int
LCIDToLocaleName(
    LCID Locale,
    LPWSTR lpName,
    int cchName,
    DWORD dwFlags);
LCID
LocaleNameToLCID(
    LPCWSTR lpName,
    DWORD dwFlags);
int
GetTimeFormatA(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpTime,
    LPCSTR lpFormat,
    LPSTR lpTimeStr,
    int cchTime);
int
GetTimeFormatW(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR lpTimeStr,
    int cchTime);
static const int GetTimeFormat = GetTimeFormatA;
int
GetDurationFormat(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpDuration,
    ULONGLONG ullDuration,
    LPCWSTR lpFormat,
    LPWSTR lpDurationStr,
    int cchDuration);
int
GetDateFormatA(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpDate,
    LPCSTR lpFormat,
    LPSTR lpDateStr,
    int cchDate);
int
GetDateFormatW(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR lpDateStr,
    int cchDate);
static const int GetDateFormat = GetDateFormatA;
int
GetNumberFormatA(
    LCID Locale,
    DWORD dwFlags,
    LPCSTR lpValue,
    const NUMBERFMTA *lpFormat,
    LPSTR lpNumberStr,
    int cchNumber);
int
GetNumberFormatW(
    LCID Locale,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR lpNumberStr,
    int cchNumber);
static const int GetNumberFormat = GetNumberFormatA;
int
GetCurrencyFormatA(
    LCID Locale,
    DWORD dwFlags,
    LPCSTR lpValue,
    const CURRENCYFMTA *lpFormat,
    LPSTR lpCurrencyStr,
    int cchCurrency);
int
GetCurrencyFormatW(
    LCID Locale,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR lpCurrencyStr,
    int cchCurrency);
static const int GetCurrencyFormat = GetCurrencyFormatA;
BOOL
EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);
BOOL
EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);
static const int EnumCalendarInfo = EnumCalendarInfoA;
BOOL
EnumCalendarInfoExA(
    CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);
BOOL
EnumCalendarInfoExW(
    CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);
static const int EnumCalendarInfoEx = EnumCalendarInfoExA;
BOOL
EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);
BOOL
EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);
static const int EnumTimeFormats = EnumTimeFormatsA;
BOOL
EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);
BOOL
EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);
static const int EnumDateFormats = EnumDateFormatsA;
BOOL
EnumDateFormatsExA(
    DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
    LCID Locale,
    DWORD dwFlags);
BOOL
EnumDateFormatsExW(
    DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
    LCID Locale,
    DWORD dwFlags);
static const int EnumDateFormatsEx = EnumDateFormatsExA;
BOOL
IsValidLanguageGroup(
    LGRPID LanguageGroup,
    DWORD dwFlags);
BOOL
GetNLSVersion(
    NLS_FUNCTION Function,
    LCID Locale,
    LPNLSVERSIONINFO lpVersionInformation);
BOOL
IsNLSDefinedString(
    NLS_FUNCTION Function,
    DWORD dwFlags,
    LPNLSVERSIONINFO lpVersionInformation,
    LPCWSTR lpString,
    INT cchStr);
BOOL
IsValidLocale(
    LCID Locale,
    DWORD dwFlags);
int
GetGeoInfoA(
    GEOID Location,
    GEOTYPE GeoType,
    LPSTR lpGeoData,
    int cchData,
    LANGID LangId);
int
GetGeoInfoW(
    GEOID Location,
    GEOTYPE GeoType,
    LPWSTR lpGeoData,
    int cchData,
    LANGID LangId);
static const int GetGeoInfo = GetGeoInfoA;
BOOL
EnumSystemGeoID(
    GEOCLASS GeoClass,
    GEOID ParentGeoId,
    GEO_ENUMPROC lpGeoEnumProc);
GEOID
GetUserGeoID(
    GEOCLASS GeoClass);
BOOL
SetUserGeoID(
    GEOID GeoId);
LCID
ConvertDefaultLocale(
    LCID Locale);
LCID
GetThreadLocale(void);
BOOL
SetThreadLocale(
    LCID Locale
    );
LANGID
GetSystemDefaultUILanguage(void);
LANGID
GetUserDefaultUILanguage(void);
LANGID
GetSystemDefaultLangID(void);
LANGID
GetUserDefaultLangID(void);
LCID
GetSystemDefaultLCID(void);
LCID
GetUserDefaultLCID(void);
LANGID
SetThreadUILanguage( LANGID LangId);
LANGID
GetThreadUILanguage(void);
BOOL
GetProcessPreferredUILanguages(
    DWORD dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer
);
BOOL
SetProcessPreferredUILanguages(
    DWORD dwFlags,
    PCZZWSTR pwszLanguagesBuffer,
    PULONG pulNumLanguages
);
BOOL
GetUserPreferredUILanguages (
    DWORD dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer
);
BOOL
GetSystemPreferredUILanguages (
    DWORD dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer
);
BOOL
GetThreadPreferredUILanguages(
    DWORD dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer
);
BOOL
SetThreadPreferredUILanguages(
    DWORD dwFlags,
    PCZZWSTR pwszLanguagesBuffer,
    PULONG pulNumLanguages
);
BOOL
GetFileMUIInfo(
                        DWORD dwFlags,
    PCWSTR pcwszFilePath,
    PFILEMUIINFO pFileMUIInfo,
    DWORD* pcbFileMUIInfo);
BOOL
GetFileMUIPath(
    DWORD dwFlags,
    PCWSTR pcwszFilePath ,
    PWSTR pwszLanguage,
    PULONG pcchLanguage,
    PWSTR pwszFileMUIPath,
    PULONG pcchFileMUIPath,
    PULONGLONG pululEnumerator
);
BOOL
GetUILanguageInfo(
    DWORD dwFlags,
    PCZZWSTR pwmszLanguage,
    PZZWSTR pwszFallbackLanguages,
    PDWORD pcchFallbackLanguages,
    PDWORD pAttributes
);
BOOL
NotifyUILanguageChange(
    DWORD dwFlags,
    PCWSTR pcwstrNewLanguage,
    PCWSTR pcwstrPreviousLanguage,
    DWORD dwReserved,
    PDWORD pdwStatusRtrn
);
BOOL
GetStringTypeExA(
    LCID Locale,
    DWORD dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);
BOOL
GetStringTypeExW(
    LCID Locale,
    DWORD dwInfoType,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);
static const int GetStringTypeEx = GetStringTypeExA;
BOOL
GetStringTypeA(
    LCID Locale,
    DWORD dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);
BOOL
GetStringTypeW(
    DWORD dwInfoType,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);
int
FoldStringA(
    DWORD dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest);
int
FoldStringW(
    DWORD dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest);
static const int FoldString = FoldStringA;
BOOL
EnumSystemLanguageGroupsA(
    LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
    DWORD dwFlags,
    LONG_PTR lParam);
BOOL
EnumSystemLanguageGroupsW(
    LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
    DWORD dwFlags,
    LONG_PTR lParam);
static const int EnumSystemLanguageGroups = EnumSystemLanguageGroupsA;
BOOL
EnumLanguageGroupLocalesA(
    LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
    LGRPID LanguageGroup,
    DWORD dwFlags,
    LONG_PTR lParam);
BOOL
EnumLanguageGroupLocalesW(
    LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
    LGRPID LanguageGroup,
    DWORD dwFlags,
    LONG_PTR lParam);
static const int EnumLanguageGroupLocales = EnumLanguageGroupLocalesA;
BOOL
EnumUILanguagesA(
    UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
    DWORD dwFlags,
    LONG_PTR lParam);
BOOL
EnumUILanguagesW(
    UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
    DWORD dwFlags,
    LONG_PTR lParam);
static const int EnumUILanguages = EnumUILanguagesA;
BOOL
EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    DWORD dwFlags);
BOOL
EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    DWORD dwFlags);
static const int EnumSystemLocales = EnumSystemLocalesA;
BOOL
EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    DWORD dwFlags);
BOOL
EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    DWORD dwFlags);
static const int EnumSystemCodePages = EnumSystemCodePagesA;
int
 NormalizeString( NORM_FORM NormForm,
                        LPCWSTR lpSrcString,
                        int cwSrcLength,
                        LPWSTR lpDstString,
                        int cwDstLength );
BOOL
 IsNormalizedString( NORM_FORM NormForm,
                           LPCWSTR lpString,
                           int cwLength );
int
 IdnToAscii( DWORD dwFlags,
                  LPCWSTR lpUnicodeCharStr,
                  int cchUnicodeChar,
                  LPWSTR lpASCIICharStr,
                  int cchASCIIChar);
int
 IdnToNameprepUnicode( DWORD dwFlags,
                            LPCWSTR lpUnicodeCharStr,
                            int cchUnicodeChar,
                            LPWSTR lpNameprepCharStr,
                            int cchNameprepChar);
int
 IdnToUnicode( DWORD dwFlags,
                    LPCWSTR lpASCIICharStr,
                    int cchASCIIChar,
                    LPWSTR lpUnicodeCharStr,
                    int cchUnicodeChar);
BOOL
 VerifyScripts(
    DWORD dwFlags, // optional behavior flags
    LPCWSTR lpLocaleScripts, // Locale list of scripts string
    int cchLocaleScripts, // size of locale script list string
    LPCWSTR lpTestScripts, // test scripts string
    int cchTestScripts); // size of test list string
int
 GetStringScripts(
        DWORD dwFlags, // optional behavior flags
        LPCWSTR lpString, // Unicode character input string
        int cchString, // size of input string
        LPWSTR lpScripts, // Script list output string
        int cchScripts); // size of output string
static const int LOCALE_NAME_USER_DEFAULT = NULL;
static const char LOCALE_NAME_INVARIANT = L"";
static const char LOCALE_NAME_SYSTEM_DEFAULT = L"!x-sys-default-locale";
int
GetLocaleInfoEx(
    LPCWSTR lpLocaleName,
    LCTYPE LCType,
    LPWSTR lpLCData,
    int cchData
);
int
GetCalendarInfoEx(
    LPCWSTR lpLocaleName,
    CALID Calendar,
    LPCWSTR lpReserved,
    CALTYPE CalType,
    LPWSTR lpCalData,
    int cchData,
    LPDWORD lpValue
);
int
GetTimeFormatEx(
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR lpTimeStr,
    int cchTime
);
int
GetDateFormatEx(
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR lpDateStr,
    int cchDate,
    LPCWSTR lpCalendar
);
int
GetDurationFormatEx(
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    const SYSTEMTIME *lpDuration,
    ULONGLONG ullDuration,
    LPCWSTR lpFormat,
    LPWSTR lpDurationStr,
    int cchDuration
);
int
GetNumberFormatEx(
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR lpNumberStr,
    int cchNumber
);
int
GetCurrencyFormatEx(
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR lpCurrencyStr,
    int cchCurrency
);
int
GetUserDefaultLocaleName(
    LPWSTR lpLocaleName,
    int cchLocaleName
);
int
GetSystemDefaultLocaleName(
    LPWSTR lpLocaleName,
    int cchLocaleName
);
BOOL
GetNLSVersionEx(
    NLS_FUNCTION function,
    LPCWSTR lpLocaleName,
    LPNLSVERSIONINFOEX lpVersionInformation
);
int
CompareStringEx(
    LPCWSTR lpLocaleName,
    DWORD dwCmpFlags,
    LPCWSTR lpString1,
    int cchCount1,
    LPCWSTR lpString2,
    int cchCount2,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    LPARAM lParam
);
int
FindNLSStringEx(
    LPCWSTR lpLocaleName,
    DWORD dwFindNLSStringFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    LPINT pcchFound,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    LPARAM lParam
);
int
LCMapStringEx(
    LPCWSTR lpLocaleName,
    DWORD dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    LPARAM lParam
);
int
CompareStringOrdinal(
    LPCWSTR lpString1,
    int cchCount1,
    LPCWSTR lpString2,
    int cchCount2,
    BOOL bIgnoreCase
);
BOOL
IsValidLocaleName(
    LPCWSTR lpLocaleName
);
typedef BOOL (* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);
BOOL
EnumCalendarInfoExEx(
    CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
    LPCWSTR lpLocaleName,
    CALID Calendar,
    LPCWSTR lpReserved,
    CALTYPE CalType,
    LPARAM lParam
);
typedef BOOL (* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);
BOOL
EnumDateFormatsExEx(
    DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    LPARAM lParam
);
typedef BOOL (* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);
BOOL
EnumTimeFormatsEx(
    TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
    LPCWSTR lpLocaleName,
    DWORD dwFlags,
    LPARAM lParam
);
typedef BOOL (* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);
BOOL
EnumSystemLocalesEx(
    LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
    DWORD dwFlags,
    LPARAM lParam,
    LPVOID lpReserved
);
int
ResolveLocaleName(
    LPCWSTR lpNameToResolve,
    LPWSTR lpLocaleName,
    int cchLocaleName
);
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;
typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;
typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
static const int RIGHT_ALT_PRESSED = 0x0001;
static const int LEFT_ALT_PRESSED = 0x0002;
static const int RIGHT_CTRL_PRESSED = 0x0004;
static const int LEFT_CTRL_PRESSED = 0x0008;
static const int SHIFT_PRESSED = 0x0010;
static const int NUMLOCK_ON = 0x0020;
static const int SCROLLLOCK_ON = 0x0040;
static const int CAPSLOCK_ON = 0x0080;
static const int ENHANCED_KEY = 0x0100;
static const int NLS_DBCSCHAR = 0x00010000;
static const int NLS_ALPHANUMERIC = 0x00000000;
static const int NLS_KATAKANA = 0x00020000;
static const int NLS_HIRAGANA = 0x00040000;
static const int NLS_ROMAN = 0x00400000;
static const int NLS_IME_CONVERSION = 0x00800000;
static const int NLS_IME_DISABLE = 0x20000000;
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
static const int FROM_LEFT_1ST_BUTTON_PRESSED = 0x0001;
static const int RIGHTMOST_BUTTON_PRESSED = 0x0002;
static const int FROM_LEFT_2ND_BUTTON_PRESSED = 0x0004;
static const int FROM_LEFT_3RD_BUTTON_PRESSED = 0x0008;
static const int FROM_LEFT_4TH_BUTTON_PRESSED = 0x0010;
static const int MOUSE_MOVED = 0x0001;
static const int DOUBLE_CLICK = 0x0002;
static const int MOUSE_WHEELED = 0x0004;
static const int MOUSE_HWHEELED = 0x0008;
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;
typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;
typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
static const int KEY_EVENT = 0x0001;
static const int MOUSE_EVENT = 0x0002;
static const int WINDOW_BUFFER_SIZE_EVENT = 0x0004;
static const int MENU_EVENT = 0x0008;
static const int FOCUS_EVENT = 0x0010;
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
static const int FOREGROUND_BLUE = 0x0001;
static const int FOREGROUND_GREEN = 0x0002;
static const int FOREGROUND_RED = 0x0004;
static const int FOREGROUND_INTENSITY = 0x0008;
static const int BACKGROUND_BLUE = 0x0010;
static const int BACKGROUND_GREEN = 0x0020;
static const int BACKGROUND_RED = 0x0040;
static const int BACKGROUND_INTENSITY = 0x0080;
static const int COMMON_LVB_LEADING_BYTE = 0x0100;
static const int COMMON_LVB_TRAILING_BYTE = 0x0200;
static const int COMMON_LVB_GRID_HORIZONTAL = 0x0400;
static const int COMMON_LVB_GRID_LVERTICAL = 0x0800;
static const int COMMON_LVB_GRID_RVERTICAL = 0x1000;
static const int COMMON_LVB_REVERSE_VIDEO = 0x4000;
static const int COMMON_LVB_UNDERSCORE = 0x8000;
static const int COMMON_LVB_SBCSDBCS = 0x0300;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;
typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;
typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;
typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
static const int HISTORY_NO_DUP_FLAG = 0x1;
typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
static const int CONSOLE_NO_SELECTION = 0x0000;
static const int CONSOLE_SELECTION_IN_PROGRESS = 0x0001;
static const int CONSOLE_SELECTION_NOT_EMPTY = 0x0002;
static const int CONSOLE_MOUSE_SELECTION = 0x0004;
static const int CONSOLE_MOUSE_DOWN = 0x0008;
typedef
BOOL
( *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );
static const int CTRL_C_EVENT = 0;
static const int CTRL_BREAK_EVENT = 1;
static const int CTRL_CLOSE_EVENT = 2;
static const int CTRL_LOGOFF_EVENT = 5;
static const int CTRL_SHUTDOWN_EVENT = 6;
static const int ENABLE_PROCESSED_INPUT = 0x0001;
static const int ENABLE_LINE_INPUT = 0x0002;
static const int ENABLE_ECHO_INPUT = 0x0004;
static const int ENABLE_WINDOW_INPUT = 0x0008;
static const int ENABLE_MOUSE_INPUT = 0x0010;
static const int ENABLE_INSERT_MODE = 0x0020;
static const int ENABLE_QUICK_EDIT_MODE = 0x0040;
static const int ENABLE_EXTENDED_FLAGS = 0x0080;
static const int ENABLE_AUTO_POSITION = 0x0100;
static const int ENABLE_PROCESSED_OUTPUT = 0x0001;
static const int ENABLE_WRAP_AT_EOL_OUTPUT = 0x0002;
BOOL
PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
BOOL
PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
static const int PeekConsoleInput = PeekConsoleInputA;
BOOL
ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
BOOL
ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
static const int ReadConsoleInput = ReadConsoleInputA;
BOOL
WriteConsoleInputA(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
BOOL
WriteConsoleInputW(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
static const int WriteConsoleInput = WriteConsoleInputA;
BOOL
ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
BOOL
ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
static const int ReadConsoleOutput = ReadConsoleOutputA;
BOOL
WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
BOOL
WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
static const int WriteConsoleOutput = WriteConsoleOutputA;
BOOL
ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
BOOL
ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
static const int ReadConsoleOutputCharacter = ReadConsoleOutputCharacterA;
BOOL
ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead
    );
BOOL
WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
BOOL
WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
static const int WriteConsoleOutputCharacter = WriteConsoleOutputCharacterA;
BOOL
WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    const WORD *lpAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );
BOOL
FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    CHAR cCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
BOOL
FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    WCHAR cCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
static const int FillConsoleOutputCharacter = FillConsoleOutputCharacterA;
BOOL
FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD wAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );
BOOL
GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode
    );
BOOL
GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents
    );
static const int CONSOLE_REAL_OUTPUT_HANDLE = (LongToHandle(-2));
static const int CONSOLE_REAL_INPUT_HANDLE = (LongToHandle(-3));
BOOL
GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );
BOOL
GetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
BOOL
SetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
COORD
GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    );
BOOL
GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );
BOOL
GetCurrentConsoleFont(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );
BOOL
GetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
BOOL
SetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
BOOL
GetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
BOOL
SetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
COORD
GetConsoleFontSize(
    HANDLE hConsoleOutput,
    DWORD nFont
    );
BOOL
GetConsoleSelectionInfo(
    PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );
BOOL
GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    );
BOOL
SetConsoleMode(
    HANDLE hConsoleHandle,
    DWORD dwMode
    );
BOOL
SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    );
BOOL
FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    );
BOOL
SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize
    );
BOOL
SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition
    );
BOOL
SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );
BOOL
ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );
BOOL
ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );
static const int ScrollConsoleScreenBuffer = ScrollConsoleScreenBufferA;
BOOL
SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    BOOL bAbsolute,
    const SMALL_RECT *lpConsoleWindow
    );
BOOL
SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    WORD wAttributes
    );
BOOL
SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    BOOL Add);
BOOL
GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    DWORD dwProcessGroupId);
BOOL
AllocConsole(
    void);
BOOL
FreeConsole(
    void);
BOOL
AttachConsole(
    DWORD dwProcessId);
static const int ATTACH_PARENT_PROCESS = ((DWORD)-1);
DWORD
GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize
    );
DWORD
GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize
    );
static const int GetConsoleTitle = GetConsoleTitleA;
DWORD
GetConsoleOriginalTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize);
DWORD
GetConsoleOriginalTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize);
static const int GetConsoleOriginalTitle = GetConsoleOriginalTitleA;
BOOL
SetConsoleTitleA(
    LPCSTR lpConsoleTitle
    );
BOOL
SetConsoleTitleW(
    LPCWSTR lpConsoleTitle
    );
static const int SetConsoleTitle = SetConsoleTitleA;
typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;
BOOL
ReadConsoleA(
    HANDLE hConsoleInput,
       LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
BOOL
ReadConsoleW(
    HANDLE hConsoleInput,
       LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
static const int ReadConsole = ReadConsoleA;
BOOL
WriteConsoleA(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved);
BOOL
WriteConsoleW(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved);
static const int WriteConsole = WriteConsoleA;
static const int CONSOLE_TEXTMODE_BUFFER = 1;
HANDLE
CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    const SECURITY_ATTRIBUTES *lpSecurityAttributes,
    DWORD dwFlags,
    LPVOID lpScreenBufferData
    );
UINT
GetConsoleCP(
    void);
BOOL
SetConsoleCP(
    UINT wCodePageID
    );
UINT
GetConsoleOutputCP(
    void);
BOOL
SetConsoleOutputCP(
    UINT wCodePageID
    );
static const int CONSOLE_FULLSCREEN = 1;
static const int CONSOLE_FULLSCREEN_HARDWARE = 2;
BOOL
GetConsoleDisplayMode(
    LPDWORD lpModeFlags);
static const int CONSOLE_FULLSCREEN_MODE = 1;
static const int CONSOLE_WINDOWED_MODE = 2;
BOOL
SetConsoleDisplayMode(
    HANDLE hConsoleOutput,
    DWORD dwFlags,
    PCOORD lpNewScreenBufferDimensions);
HWND
GetConsoleWindow(
    void
    );
DWORD
GetConsoleProcessList(
    LPDWORD lpdwProcessList,
    DWORD dwProcessCount);
BOOL
AddConsoleAliasA(
    LPSTR Source,
    LPSTR Target,
    LPSTR ExeName);
BOOL
AddConsoleAliasW(
    LPWSTR Source,
    LPWSTR Target,
    LPWSTR ExeName);
static const int AddConsoleAlias = AddConsoleAliasA;
DWORD
GetConsoleAliasA(
    LPSTR Source,
    LPSTR TargetBuffer,
    DWORD TargetBufferLength,
    LPSTR ExeName);
DWORD
GetConsoleAliasW(
    LPWSTR Source,
    LPWSTR TargetBuffer,
    DWORD TargetBufferLength,
    LPWSTR ExeName);
static const int GetConsoleAlias = GetConsoleAliasA;
DWORD
GetConsoleAliasesLengthA(
    LPSTR ExeName);
DWORD
GetConsoleAliasesLengthW(
    LPWSTR ExeName);
static const int GetConsoleAliasesLength = GetConsoleAliasesLengthA;
DWORD
GetConsoleAliasExesLengthA(
    void);
DWORD
GetConsoleAliasExesLengthW(
    void);
static const int GetConsoleAliasExesLength = GetConsoleAliasExesLengthA;
DWORD
GetConsoleAliasesA(
    LPSTR AliasBuffer,
    DWORD AliasBufferLength,
    LPSTR ExeName);
DWORD
GetConsoleAliasesW(
    LPWSTR AliasBuffer,
    DWORD AliasBufferLength,
    LPWSTR ExeName);
static const int GetConsoleAliases = GetConsoleAliasesA;
DWORD
GetConsoleAliasExesA(
    LPSTR ExeNameBuffer,
    DWORD ExeNameBufferLength);
DWORD
GetConsoleAliasExesW(
    LPWSTR ExeNameBuffer,
    DWORD ExeNameBufferLength);
static const int GetConsoleAliasExes = GetConsoleAliasExesA;
static const int VS_FILE_INFO = RT_VERSION;
static const int VS_VERSION_INFO = 1;
static const int VS_USER_DEFINED = 100;
static const int VS_FFI_SIGNATURE = 0xFEEF04BDL;
static const long VS_FFI_STRUCVERSION = 0x00010000L;
static const int VS_FFI_FILEFLAGSMASK = 0x0000003FL;
static const long VS_FF_DEBUG = 0x00000001L;
static const long VS_FF_PRERELEASE = 0x00000002L;
static const long VS_FF_PATCHED = 0x00000004L;
static const long VS_FF_PRIVATEBUILD = 0x00000008L;
static const long VS_FF_INFOINFERRED = 0x00000010L;
static const long VS_FF_SPECIALBUILD = 0x00000020L;
static const long VOS_UNKNOWN = 0x00000000L;
static const long VOS_DOS = 0x00010000L;
static const long VOS_OS216 = 0x00020000L;
static const long VOS_OS232 = 0x00030000L;
static const long VOS_NT = 0x00040000L;
static const long VOS_WINCE = 0x00050000L;
static const long VOS__BASE = 0x00000000L;
static const long VOS__WINDOWS16 = 0x00000001L;
static const long VOS__PM16 = 0x00000002L;
static const long VOS__PM32 = 0x00000003L;
static const long VOS__WINDOWS32 = 0x00000004L;
static const long VOS_DOS_WINDOWS16 = 0x00010001L;
static const long VOS_DOS_WINDOWS32 = 0x00010004L;
static const long VOS_OS216_PM16 = 0x00020002L;
static const long VOS_OS232_PM32 = 0x00030003L;
static const long VOS_NT_WINDOWS32 = 0x00040004L;
static const long VFT_UNKNOWN = 0x00000000L;
static const long VFT_APP = 0x00000001L;
static const long VFT_DLL = 0x00000002L;
static const long VFT_DRV = 0x00000003L;
static const long VFT_FONT = 0x00000004L;
static const long VFT_VXD = 0x00000005L;
static const long VFT_STATIC_LIB = 0x00000007L;
static const long VFT2_UNKNOWN = 0x00000000L;
static const long VFT2_DRV_PRINTER = 0x00000001L;
static const long VFT2_DRV_KEYBOARD = 0x00000002L;
static const long VFT2_DRV_LANGUAGE = 0x00000003L;
static const long VFT2_DRV_DISPLAY = 0x00000004L;
static const long VFT2_DRV_MOUSE = 0x00000005L;
static const long VFT2_DRV_NETWORK = 0x00000006L;
static const long VFT2_DRV_SYSTEM = 0x00000007L;
static const long VFT2_DRV_INSTALLABLE = 0x00000008L;
static const long VFT2_DRV_SOUND = 0x00000009L;
static const int VFT2_DRV_COMM = 0x0000000AL;
static const int VFT2_DRV_INPUTMETHOD = 0x0000000BL;
static const int VFT2_DRV_VERSIONED_PRINTER = 0x0000000CL;
static const long VFT2_FONT_RASTER = 0x00000001L;
static const long VFT2_FONT_VECTOR = 0x00000002L;
static const long VFT2_FONT_TRUETYPE = 0x00000003L;
static const int VFFF_ISSHAREDFILE = 0x0001;
static const int VFF_CURNEDEST = 0x0001;
static const int VFF_FILEINUSE = 0x0002;
static const int VFF_BUFFTOOSMALL = 0x0004;
static const int VIFF_FORCEINSTALL = 0x0001;
static const int VIFF_DONTDELETEOLD = 0x0002;
static const long VIF_TEMPFILE = 0x00000001L;
static const long VIF_MISMATCH = 0x00000002L;
static const long VIF_SRCOLD = 0x00000004L;
static const long VIF_DIFFLANG = 0x00000008L;
static const long VIF_DIFFCODEPG = 0x00000010L;
static const long VIF_DIFFTYPE = 0x00000020L;
static const long VIF_WRITEPROT = 0x00000040L;
static const long VIF_FILEINUSE = 0x00000080L;
static const long VIF_OUTOFSPACE = 0x00000100L;
static const long VIF_ACCESSVIOLATION = 0x00000200L;
static const long VIF_SHARINGVIOLATION = 0x00000400L;
static const long VIF_CANNOTCREATE = 0x00000800L;
static const long VIF_CANNOTDELETE = 0x00001000L;
static const long VIF_CANNOTRENAME = 0x00002000L;
static const long VIF_CANNOTDELETECUR = 0x00004000L;
static const long VIF_OUTOFMEMORY = 0x00008000L;
static const long VIF_CANNOTREADSRC = 0x00010000L;
static const long VIF_CANNOTREADDST = 0x00020000L;
static const long VIF_BUFFTOOSMALL = 0x00040000L;
static const long VIF_CANNOTLOADLZ32 = 0x00080000L;
static const long VIF_CANNOTLOADCABINET = 0x00100000L;
static const int FILE_VER_GET_LOCALISED = 0x01;
static const int FILE_VER_GET_NEUTRAL = 0x02;
static const int FILE_VER_GET_PREFETCHED = 0x04;
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature; /* e.g. 0xfeef04bd */
    DWORD dwStrucVersion; /* e.g. 0x00000042 = "0.42" */
    DWORD dwFileVersionMS; /* e.g. 0x00030075 = "3.75" */
    DWORD dwFileVersionLS; /* e.g. 0x00000031 = "0.31" */
    DWORD dwProductVersionMS; /* e.g. 0x00030010 = "3.10" */
    DWORD dwProductVersionLS; /* e.g. 0x00000031 = "0.31" */
    DWORD dwFileFlagsMask; /* = 0x3F for version "0.42" */
    DWORD dwFileFlags; /* e.g. VFF_DEBUG | VFF_PRERELEASE */
    DWORD dwFileOS; /* e.g. VOS_DOS_WINDOWS16 */
    DWORD dwFileType; /* e.g. VFT_DRIVER */
    DWORD dwFileSubtype; /* e.g. VFT2_DRV_KEYBOARD */
    DWORD dwFileDateMS; /* e.g. 0 */
    DWORD dwFileDateLS; /* e.g. 0 */
} VS_FIXEDFILEINFO;
DWORD
VerFindFileA(
        DWORD uFlags,
        LPCSTR szFileName,
        LPCSTR szWinDir,
        LPCSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
VerFindFileW(
        DWORD uFlags,
        LPCWSTR szFileName,
        LPCWSTR szWinDir,
        LPCWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );
static const int VerFindFile = VerFindFileA;
DWORD
VerInstallFileA(
        DWORD uFlags,
        LPCSTR szSrcFileName,
        LPCSTR szDestFileName,
        LPCSTR szSrcDir,
        LPCSTR szDestDir,
        LPCSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
VerInstallFileW(
        DWORD uFlags,
        LPCWSTR szSrcFileName,
        LPCWSTR szDestFileName,
        LPCWSTR szSrcDir,
        LPCWSTR szDestDir,
        LPCWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
static const int VerInstallFile = VerInstallFileA;
DWORD
GetFileVersionInfoSizeA(
        LPCSTR lptstrFilename, /* Filename of version stamped file */
        LPDWORD lpdwHandle /* Information for use by GetFileVersionInfo */
        );
DWORD
GetFileVersionInfoSizeW(
        LPCWSTR lptstrFilename, /* Filename of version stamped file */
        LPDWORD lpdwHandle /* Information for use by GetFileVersionInfo */
        );
static const int GetFileVersionInfoSize = GetFileVersionInfoSizeA;
BOOL
GetFileVersionInfoA(
        LPCSTR lptstrFilename, /* Filename of version stamped file */
        DWORD dwHandle, /* Information from GetFileVersionSize */
        DWORD dwLen, /* Length of buffer for info */
        LPVOID lpData /* Buffer to place the data structure */
        );
BOOL
GetFileVersionInfoW(
        LPCWSTR lptstrFilename, /* Filename of version stamped file */
        DWORD dwHandle, /* Information from GetFileVersionSize */
        DWORD dwLen, /* Length of buffer for info */
        LPVOID lpData /* Buffer to place the data structure */
        );
static const int GetFileVersionInfo = GetFileVersionInfoA;
DWORD GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);
static const int GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExA;
BOOL GetFileVersionInfoExA( DWORD dwFlags,
                                    LPCSTR lpwstrFilename,
                                    DWORD dwHandle,
                                    DWORD dwLen,
                                    LPVOID lpData);
BOOL GetFileVersionInfoExW( DWORD dwFlags,
                                    LPCWSTR lpwstrFilename,
                                    DWORD dwHandle,
                                    DWORD dwLen,
                                    LPVOID lpData);
static const int GetFileVersionInfoEx = GetFileVersionInfoExA;
DWORD
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD cchLang
        );
DWORD
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD cchLang
        );
static const int VerLanguageName = VerLanguageNameA;
BOOL
VerQueryValueA(
        LPCVOID pBlock,
        LPCSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
VerQueryValueW(
        LPCVOID pBlock,
        LPCWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
static const int VerQueryValue = VerQueryValueA;
static const int RRF_RT_REG_NONE = 0x00000001;
static const int RRF_RT_REG_SZ = 0x00000002;
static const int RRF_RT_REG_EXPAND_SZ = 0x00000004;
static const int RRF_RT_REG_BINARY = 0x00000008;
static const int RRF_RT_REG_DWORD = 0x00000010;
static const int RRF_RT_REG_MULTI_SZ = 0x00000020;
static const int RRF_RT_REG_QWORD = 0x00000040;
static const int RRF_RT_DWORD = (RRF_RT_REG_BINARY | RRF_RT_REG_DWORD);
static const int RRF_RT_QWORD = (RRF_RT_REG_BINARY | RRF_RT_REG_QWORD);
static const int RRF_RT_ANY = 0x0000ffff;
static const int RRF_NOEXPAND = 0x10000000;
static const int RRF_ZEROONFAILURE = 0x20000000;
static const int REG_PROCESS_APPKEY = 0x00000001;
static const int REG_MUI_STRING_TRUNCATE = 0x00000001;
typedef ACCESS_MASK REGSAM;
static const int HKEY_CLASSES_ROOT = (( HKEY ) (ULONG_PTR)((LONG)0x80000000) );
static const int HKEY_CURRENT_USER = (( HKEY ) (ULONG_PTR)((LONG)0x80000001) );
static const int HKEY_LOCAL_MACHINE = (( HKEY ) (ULONG_PTR)((LONG)0x80000002) );
static const int HKEY_USERS = (( HKEY ) (ULONG_PTR)((LONG)0x80000003) );
static const int HKEY_PERFORMANCE_DATA = (( HKEY ) (ULONG_PTR)((LONG)0x80000004) );
static const int HKEY_PERFORMANCE_TEXT = (( HKEY ) (ULONG_PTR)((LONG)0x80000050) );
static const int HKEY_PERFORMANCE_NLSTEXT = (( HKEY ) (ULONG_PTR)((LONG)0x80000060) );
static const int HKEY_CURRENT_CONFIG = (( HKEY ) (ULONG_PTR)((LONG)0x80000005) );
static const int HKEY_DYN_DATA = (( HKEY ) (ULONG_PTR)((LONG)0x80000006) );
static const int HKEY_CURRENT_USER_LOCAL_SETTINGS = (( HKEY ) (ULONG_PTR)((LONG)0x80000007) );
static const int REG_SECURE_CONNECTION = 1;
static const int PROVIDER_KEEPS_VALUE_LENGTH = 0x1;
struct val_context {
    int valuelen; // the total length of this value
    LPVOID value_context; // provider's context
    LPVOID val_buff_ptr; // where in the ouput buffer the value is.
};
typedef struct val_context *PVALCONTEXT;
typedef struct pvalueA { // Provider supplied value/context.
    LPSTR pv_valuename; // The value name pointer
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW { // Provider supplied value/context.
    LPWSTR pv_valuename; // The value name pointer
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;
typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
typedef
DWORD
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);
typedef QUERYHANDLER *PQUERYHANDLER;
typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags; // capability flags (none defined yet).
    LPVOID pi_key_context;
}REG_PROVIDER;
typedef struct provider_info *PPROVIDER;
typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;
typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
static const int WIN31_CLASS = NULL;
typedef LONG LSTATUS;
LSTATUS
RegCloseKey (
    HKEY hKey
    );
LSTATUS
RegOverridePredefKey (
    HKEY hKey,
    HKEY hNewHKey
    );
LSTATUS
RegOpenUserClassesRoot(
    HANDLE hToken,
    DWORD dwOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
LSTATUS
RegOpenCurrentUser(
    REGSAM samDesired,
    PHKEY phkResult
    );
LSTATUS
RegDisablePredefinedCache(
    void
    );
LSTATUS
RegDisablePredefinedCacheEx(
    void
    );
LSTATUS
RegConnectRegistryA (
    LPCSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );
LSTATUS
RegConnectRegistryW (
    LPCWSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );
static const int RegConnectRegistry = RegConnectRegistryA;
LSTATUS
RegConnectRegistryExA (
    LPCSTR lpMachineName,
    HKEY hKey,
    ULONG Flags,
    PHKEY phkResult
    );
LSTATUS
RegConnectRegistryExW (
    LPCWSTR lpMachineName,
    HKEY hKey,
    ULONG Flags,
    PHKEY phkResult
    );
static const int RegConnectRegistryEx = RegConnectRegistryExA;
LSTATUS
RegCreateKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
LSTATUS
RegCreateKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );
static const int RegCreateKey = RegCreateKeyA;
LSTATUS
RegCreateKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );
LSTATUS
RegCreateKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );
static const int RegCreateKeyEx = RegCreateKeyExA;
LSTATUS
RegCreateKeyTransactedA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
    HANDLE hTransaction,
    PVOID pExtendedParemeter
    );
LSTATUS
RegCreateKeyTransactedW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
    HANDLE hTransaction,
    PVOID pExtendedParemeter
    );
static const int RegCreateKeyTransacted = RegCreateKeyTransactedA;
LSTATUS
RegDeleteKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
LSTATUS
RegDeleteKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );
static const int RegDeleteKey = RegDeleteKeyA;
LSTATUS
RegDeleteKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    REGSAM samDesired,
    DWORD Reserved
    );
LSTATUS
RegDeleteKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    REGSAM samDesired,
    DWORD Reserved
    );
static const int RegDeleteKeyEx = RegDeleteKeyExA;
LSTATUS
RegDeleteKeyTransactedA (
    HKEY hKey,
    LPCSTR lpSubKey,
    REGSAM samDesired,
    DWORD Reserved,
    HANDLE hTransaction,
    PVOID pExtendedParameter
    );
LSTATUS
RegDeleteKeyTransactedW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    REGSAM samDesired,
    DWORD Reserved,
    HANDLE hTransaction,
    PVOID pExtendedParameter
    );
static const int RegDeleteKeyTransacted = RegDeleteKeyTransactedA;
LONG
RegDisableReflectionKey (
    HKEY hBase
    );
LONG
RegEnableReflectionKey (
    HKEY hBase
    );
LONG
RegQueryReflectionKey (
    HKEY hBase,
    BOOL *bIsReflectionDisabled
    );
LSTATUS
RegDeleteValueA (
    HKEY hKey,
    LPCSTR lpValueName
    );
LSTATUS
RegDeleteValueW (
    HKEY hKey,
    LPCWSTR lpValueName
    );
static const int RegDeleteValue = RegDeleteValueA;
LSTATUS
RegEnumKeyA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    DWORD cchName
    );
LSTATUS
RegEnumKeyW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    DWORD cchName
    );
static const int RegEnumKey = RegEnumKeyA;
LSTATUS
RegEnumKeyExA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    LPDWORD lpcchName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcchClass,
    PFILETIME lpftLastWriteTime
    );
LSTATUS
RegEnumKeyExW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    LPDWORD lpcchName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcchClass,
    PFILETIME lpftLastWriteTime
    );
static const int RegEnumKeyEx = RegEnumKeyExA;
LSTATUS
RegEnumValueA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcchValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
LSTATUS
RegEnumValueW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcchValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
static const int RegEnumValue = RegEnumValueA;
LSTATUS
RegFlushKey (
    HKEY hKey
    );
LSTATUS
RegGetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPDWORD lpcbSecurityDescriptor
    );
LSTATUS
RegLoadKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpFile
    );
LSTATUS
RegLoadKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpFile
    );
static const int RegLoadKey = RegLoadKeyA;
LSTATUS
RegNotifyChangeKeyValue (
    HKEY hKey,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    HANDLE hEvent,
    BOOL fAsynchronous
    );
LSTATUS
RegOpenKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
LSTATUS
RegOpenKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );
static const int RegOpenKey = RegOpenKeyA;
LSTATUS
RegOpenKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
LSTATUS
RegOpenKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
static const int RegOpenKeyEx = RegOpenKeyExA;
LSTATUS
RegOpenKeyTransactedA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult,
    HANDLE hTransaction,
    PVOID pExtendedParemeter
    );
LSTATUS
RegOpenKeyTransactedW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult,
    HANDLE hTransaction,
    PVOID pExtendedParemeter
    );
static const int RegOpenKeyTransacted = RegOpenKeyTransactedA;
LSTATUS
RegQueryInfoKeyA (
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcchClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );
LSTATUS
RegQueryInfoKeyW (
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcchClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );
static const int RegQueryInfoKey = RegQueryInfoKeyA;
LSTATUS
RegQueryValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPSTR lpData,
    PLONG lpcbData
    );
LSTATUS
RegQueryValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPWSTR lpData,
    PLONG lpcbData
    );
static const int RegQueryValue = RegQueryValueA;
LSTATUS
RegQueryMultipleValuesA (
    HKEY hKey,
    PVALENTA val_list,
    DWORD num_vals,
    LPSTR lpValueBuf,
    LPDWORD ldwTotsize
    );
LSTATUS
RegQueryMultipleValuesW (
    HKEY hKey,
    PVALENTW val_list,
    DWORD num_vals,
    LPWSTR lpValueBuf,
    LPDWORD ldwTotsize
    );
static const int RegQueryMultipleValues = RegQueryMultipleValuesA;
LSTATUS
RegQueryValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
LSTATUS
RegQueryValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
static const int RegQueryValueEx = RegQueryValueExA;
LSTATUS
RegReplaceKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpNewFile,
    LPCSTR lpOldFile
    );
LSTATUS
RegReplaceKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpNewFile,
    LPCWSTR lpOldFile
    );
static const int RegReplaceKey = RegReplaceKeyA;
LSTATUS
RegRestoreKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    DWORD dwFlags
    );
LSTATUS
RegRestoreKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    DWORD dwFlags
    );
static const int RegRestoreKey = RegRestoreKeyA;
LSTATUS
RegRenameKey(
    HKEY hKey,
    LPCWSTR lpSubKeyName,
    LPCWSTR lpNewKeyName
    );
LSTATUS
RegSaveKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
LSTATUS
RegSaveKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
static const int RegSaveKey = RegSaveKeyA;
LSTATUS
RegSetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
LSTATUS
RegSetValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD dwType,
    LPCSTR lpData,
    DWORD cbData
    );
LSTATUS
RegSetValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD dwType,
    LPCWSTR lpData,
    DWORD cbData
    );
static const int RegSetValue = RegSetValueA;
LSTATUS
RegSetValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
LSTATUS
RegSetValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
static const int RegSetValueEx = RegSetValueExA;
LSTATUS
RegUnLoadKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
LSTATUS
RegUnLoadKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );
static const int RegUnLoadKey = RegUnLoadKeyA;
LSTATUS
RegDeleteKeyValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpValueName
    );
LSTATUS
RegDeleteKeyValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValueName
    );
static const int RegDeleteKeyValue = RegDeleteKeyValueA;
LSTATUS
RegSetKeyValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpValueName,
    DWORD dwType,
    LPCVOID lpData,
    DWORD cbData
    );
LSTATUS
RegSetKeyValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValueName,
    DWORD dwType,
    LPCVOID lpData,
    DWORD cbData
    );
static const int RegSetKeyValue = RegSetKeyValueA;
LSTATUS
RegDeleteTreeA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
LSTATUS
RegDeleteTreeW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );
static const int RegDeleteTree = RegDeleteTreeA;
LSTATUS
RegCopyTreeA (
    HKEY hKeySrc,
    LPCSTR lpSubKey,
    HKEY hKeyDest
    );
LSTATUS
RegCopyTreeW (
    HKEY hKeySrc,
    LPCWSTR lpSubKey,
    HKEY hKeyDest
    );
static const int RegCopyTree = RegCopyTreeA;
LSTATUS
RegGetValueA (
    HKEY hkey,
    LPCSTR lpSubKey,
    LPCSTR lpValue,
    DWORD dwFlags,
    LPDWORD pdwType,
    PVOID pvData,
    LPDWORD pcbData
    );
LSTATUS
RegGetValueW (
    HKEY hkey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValue,
    DWORD dwFlags,
    LPDWORD pdwType,
    PVOID pvData,
    LPDWORD pcbData
    );
static const int RegGetValue = RegGetValueA;
LSTATUS
RegLoadMUIStringA (
                    HKEY hKey,
                    LPCSTR pszValue,
                    LPSTR pszOutBuf,
                    DWORD cbOutBuf,
                    LPDWORD pcbData,
                    DWORD Flags,
                    LPCSTR pszDirectory
                    );
LSTATUS
RegLoadMUIStringW (
                    HKEY hKey,
                    LPCWSTR pszValue,
                    LPWSTR pszOutBuf,
                    DWORD cbOutBuf,
                    LPDWORD pcbData,
                    DWORD Flags,
                    LPCWSTR pszDirectory
                    );
static const int RegLoadMUIString = RegLoadMUIStringA;
LSTATUS
RegLoadAppKeyA (
        LPCSTR lpFile,
        PHKEY phkResult,
        REGSAM samDesired,
        DWORD dwOptions,
        DWORD Reserved
    );
LSTATUS
RegLoadAppKeyW (
        LPCWSTR lpFile,
        PHKEY phkResult,
        REGSAM samDesired,
        DWORD dwOptions,
        DWORD Reserved
    );
static const int RegLoadAppKey = RegLoadAppKeyA;
BOOL
InitiateSystemShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );
BOOL
InitiateSystemShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );
static const int InitiateSystemShutdown = InitiateSystemShutdownA;
BOOL
AbortSystemShutdownA(
    LPSTR lpMachineName
    );
BOOL
AbortSystemShutdownW(
    LPWSTR lpMachineName
    );
static const int AbortSystemShutdown = AbortSystemShutdownA;
static const int SHTDN_REASON_FLAG_COMMENT_REQUIRED = 0x01000000;
static const int SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 0x02000000;
static const int SHTDN_REASON_FLAG_CLEAN_UI = 0x04000000;
static const int SHTDN_REASON_FLAG_DIRTY_UI = 0x08000000;
static const int SHTDN_REASON_FLAG_USER_DEFINED = 0x40000000;
static const int SHTDN_REASON_FLAG_PLANNED = 0x80000000;
static const int SHTDN_REASON_MAJOR_OTHER = 0x00000000;
static const int SHTDN_REASON_MAJOR_NONE = 0x00000000;
static const int SHTDN_REASON_MAJOR_HARDWARE = 0x00010000;
static const int SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 0x00020000;
static const int SHTDN_REASON_MAJOR_SOFTWARE = 0x00030000;
static const int SHTDN_REASON_MAJOR_APPLICATION = 0x00040000;
static const int SHTDN_REASON_MAJOR_SYSTEM = 0x00050000;
static const int SHTDN_REASON_MAJOR_POWER = 0x00060000;
static const int SHTDN_REASON_MAJOR_LEGACY_API = 0x00070000;
static const int SHTDN_REASON_MINOR_OTHER = 0x00000000;
static const int SHTDN_REASON_MINOR_NONE = 0x000000ff;
static const int SHTDN_REASON_MINOR_MAINTENANCE = 0x00000001;
static const int SHTDN_REASON_MINOR_INSTALLATION = 0x00000002;
static const int SHTDN_REASON_MINOR_UPGRADE = 0x00000003;
static const int SHTDN_REASON_MINOR_RECONFIG = 0x00000004;
static const int SHTDN_REASON_MINOR_HUNG = 0x00000005;
static const int SHTDN_REASON_MINOR_UNSTABLE = 0x00000006;
static const int SHTDN_REASON_MINOR_DISK = 0x00000007;
static const int SHTDN_REASON_MINOR_PROCESSOR = 0x00000008;
static const int SHTDN_REASON_MINOR_NETWORKCARD = 0x00000009;
static const int SHTDN_REASON_MINOR_POWER_SUPPLY = 0x0000000a;
static const int SHTDN_REASON_MINOR_CORDUNPLUGGED = 0x0000000b;
static const int SHTDN_REASON_MINOR_ENVIRONMENT = 0x0000000c;
static const int SHTDN_REASON_MINOR_HARDWARE_DRIVER = 0x0000000d;
static const int SHTDN_REASON_MINOR_OTHERDRIVER = 0x0000000e;
static const double SHTDN_REASON_MINOR_BLUESCREEN = 0x0000000F;
static const int SHTDN_REASON_MINOR_SERVICEPACK = 0x00000010;
static const int SHTDN_REASON_MINOR_HOTFIX = 0x00000011;
static const int SHTDN_REASON_MINOR_SECURITYFIX = 0x00000012;
static const int SHTDN_REASON_MINOR_SECURITY = 0x00000013;
static const int SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 0x00000014;
static const int SHTDN_REASON_MINOR_WMI = 0x00000015;
static const int SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 0x00000016;
static const int SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 0x00000017;
static const int SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 0x00000018;
static const int SHTDN_REASON_MINOR_MMC = 0x00000019;
static const int SHTDN_REASON_MINOR_SYSTEMRESTORE = 0x0000001a;
static const int SHTDN_REASON_MINOR_TERMSRV = 0x00000020;
static const int SHTDN_REASON_MINOR_DC_PROMOTION = 0x00000021;
static const int SHTDN_REASON_MINOR_DC_DEMOTION = 0x00000022;
static const int SHTDN_REASON_UNKNOWN = SHTDN_REASON_MINOR_NONE;
static const int SHTDN_REASON_LEGACY_API = (SHTDN_REASON_MAJOR_LEGACY_API | SHTDN_REASON_FLAG_PLANNED);
static const int SHTDN_REASON_VALID_BIT_MASK = 0xc0ffffff;
static const int PCLEANUI = (SHTDN_REASON_FLAG_PLANNED | SHTDN_REASON_FLAG_CLEAN_UI);
static const int UCLEANUI = (SHTDN_REASON_FLAG_CLEAN_UI);
static const int PDIRTYUI = (SHTDN_REASON_FLAG_PLANNED | SHTDN_REASON_FLAG_DIRTY_UI);
static const int UDIRTYUI = (SHTDN_REASON_FLAG_DIRTY_UI);
static const int MAX_REASON_NAME_LEN = 64;
static const int MAX_REASON_DESC_LEN = 256;
static const int MAX_REASON_BUGID_LEN = 32;
static const int MAX_REASON_COMMENT_LEN = 512;
static const int SHUTDOWN_TYPE_LEN = 32;
static const int POLICY_SHOWREASONUI_NEVER = 0;
static const int POLICY_SHOWREASONUI_ALWAYS = 1;
static const int POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;
static const int POLICY_SHOWREASONUI_SERVERONLY = 3;
static const int SNAPSHOT_POLICY_NEVER = 0;
static const int SNAPSHOT_POLICY_ALWAYS = 1;
static const int SNAPSHOT_POLICY_UNPLANNED = 2;
static const int MAX_NUM_REASONS = 256;
static const int REASON_SWINSTALL = (SHTDN_REASON_MAJOR_SOFTWARE|SHTDN_REASON_MINOR_INSTALLATION);
static const int REASON_HWINSTALL = (SHTDN_REASON_MAJOR_HARDWARE|SHTDN_REASON_MINOR_INSTALLATION);
static const int REASON_SERVICEHANG = (SHTDN_REASON_MAJOR_SOFTWARE|SHTDN_REASON_MINOR_HUNG);
static const int REASON_UNSTABLE = (SHTDN_REASON_MAJOR_SYSTEM|SHTDN_REASON_MINOR_UNSTABLE);
static const int REASON_SWHWRECONF = (SHTDN_REASON_MAJOR_SOFTWARE|SHTDN_REASON_MINOR_RECONFIG);
static const int REASON_OTHER = (SHTDN_REASON_MAJOR_OTHER|SHTDN_REASON_MINOR_OTHER);
static const int REASON_UNKNOWN = SHTDN_REASON_UNKNOWN;
static const int REASON_LEGACY_API = SHTDN_REASON_LEGACY_API;
static const int REASON_PLANNED_FLAG = SHTDN_REASON_FLAG_PLANNED;
static const int MAX_SHUTDOWN_TIMEOUT = (10*365*24*60*60);
BOOL
InitiateSystemShutdownExA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown,
    DWORD dwReason
    );
BOOL
InitiateSystemShutdownExW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown,
    DWORD dwReason
    );
static const int InitiateSystemShutdownEx = InitiateSystemShutdownExA;
static const int SHUTDOWN_FORCE_OTHERS = 0x00000001;
static const int SHUTDOWN_FORCE_SELF = 0x00000002;
static const int SHUTDOWN_RESTART = 0x00000004;
static const int SHUTDOWN_POWEROFF = 0x00000008;
static const int SHUTDOWN_NOREBOOT = 0x00000010;
static const int SHUTDOWN_GRACE_OVERRIDE = 0x00000020;
static const int SHUTDOWN_INSTALL_UPDATES = 0x00000040;
static const int SHUTDOWN_RESTARTAPPS = 0x00000080;
static const int SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 0x00000100;
DWORD
InitiateShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwGracePeriod,
    DWORD dwShutdownFlags,
    DWORD dwReason
    );
DWORD
InitiateShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwGracePeriod,
    DWORD dwShutdownFlags,
    DWORD dwReason
    );
static const int InitiateShutdown = InitiateShutdownA;
LSTATUS
RegSaveKeyExA (
    HKEY hKey,
    LPCSTR lpFile,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD Flags
    );
LSTATUS
RegSaveKeyExW (
    HKEY hKey,
    LPCWSTR lpFile,
    const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD Flags
    );
static const int RegSaveKeyEx = RegSaveKeyExA;
static const int WNNC_NET_MSNET = 0x00010000;
static const int WNNC_NET_SMB = 0x00020000;
static const int WNNC_NET_NETWARE = 0x00030000;
static const int WNNC_NET_VINES = 0x00040000;
static const int WNNC_NET_10NET = 0x00050000;
static const int WNNC_NET_LOCUS = 0x00060000;
static const int WNNC_NET_SUN_PC_NFS = 0x00070000;
static const int WNNC_NET_LANSTEP = 0x00080000;
static const int WNNC_NET_9TILES = 0x00090000;
static const int WNNC_NET_LANTASTIC = 0x000A0000;
static const int WNNC_NET_AS400 = 0x000B0000;
static const int WNNC_NET_FTP_NFS = 0x000C0000;
static const int WNNC_NET_PATHWORKS = 0x000D0000;
static const int WNNC_NET_LIFENET = 0x000E0000;
static const int WNNC_NET_POWERLAN = 0x000F0000;
static const int WNNC_NET_BWNFS = 0x00100000;
static const int WNNC_NET_COGENT = 0x00110000;
static const int WNNC_NET_FARALLON = 0x00120000;
static const int WNNC_NET_APPLETALK = 0x00130000;
static const int WNNC_NET_INTERGRAPH = 0x00140000;
static const int WNNC_NET_SYMFONET = 0x00150000;
static const int WNNC_NET_CLEARCASE = 0x00160000;
static const int WNNC_NET_FRONTIER = 0x00170000;
static const int WNNC_NET_BMC = 0x00180000;
static const int WNNC_NET_DCE = 0x00190000;
static const int WNNC_NET_AVID = 0x001A0000;
static const int WNNC_NET_DOCUSPACE = 0x001B0000;
static const int WNNC_NET_MANGOSOFT = 0x001C0000;
static const int WNNC_NET_SERNET = 0x001D0000;
static const int WNNC_NET_RIVERFRONT1 = 0X001E0000;
static const int WNNC_NET_RIVERFRONT2 = 0x001F0000;
static const int WNNC_NET_DECORB = 0x00200000;
static const int WNNC_NET_PROTSTOR = 0x00210000;
static const int WNNC_NET_FJ_REDIR = 0x00220000;
static const int WNNC_NET_DISTINCT = 0x00230000;
static const int WNNC_NET_TWINS = 0x00240000;
static const int WNNC_NET_RDR2SAMPLE = 0x00250000;
static const int WNNC_NET_CSC = 0x00260000;
static const int WNNC_NET_3IN1 = 0x00270000;
static const int WNNC_NET_EXTENDNET = 0x00290000;
static const int WNNC_NET_STAC = 0x002A0000;
static const int WNNC_NET_FOXBAT = 0x002B0000;
static const int WNNC_NET_YAHOO = 0x002C0000;
static const int WNNC_NET_EXIFS = 0x002D0000;
static const int WNNC_NET_DAV = 0x002E0000;
static const int WNNC_NET_KNOWARE = 0x002F0000;
static const int WNNC_NET_OBJECT_DIRE = 0x00300000;
static const int WNNC_NET_MASFAX = 0x00310000;
static const int WNNC_NET_HOB_NFS = 0x00320000;
static const int WNNC_NET_SHIVA = 0x00330000;
static const int WNNC_NET_IBMAL = 0x00340000;
static const int WNNC_NET_LOCK = 0x00350000;
static const int WNNC_NET_TERMSRV = 0x00360000;
static const int WNNC_NET_SRT = 0x00370000;
static const int WNNC_NET_QUINCY = 0x00380000;
static const int WNNC_NET_OPENAFS = 0x00390000;
static const int WNNC_NET_AVID1 = 0X003A0000;
static const int WNNC_NET_DFS = 0x003B0000;
static const int WNNC_NET_KWNP = 0x003C0000;
static const int WNNC_NET_ZENWORKS = 0x003D0000;
static const int WNNC_NET_DRIVEONWEB = 0x003E0000;
static const int WNNC_NET_VMWARE = 0x003F0000;
static const int WNNC_NET_RSFX = 0x00400000;
static const int WNNC_NET_MFILES = 0x00410000;
static const int WNNC_NET_MS_NFS = 0x00420000;
static const int WNNC_NET_GOOGLE = 0x00430000;
static const int WNNC_CRED_MANAGER = 0xFFFF0000;
static const int WNNC_NET_LANMAN = WNNC_NET_SMB;
static const int RESOURCE_CONNECTED = 0x00000001;
static const int RESOURCE_GLOBALNET = 0x00000002;
static const int RESOURCE_REMEMBERED = 0x00000003;
static const int RESOURCE_RECENT = 0x00000004;
static const int RESOURCE_CONTEXT = 0x00000005;
static const int RESOURCETYPE_ANY = 0x00000000;
static const int RESOURCETYPE_DISK = 0x00000001;
static const int RESOURCETYPE_PRINT = 0x00000002;
static const int RESOURCETYPE_RESERVED = 0x00000008;
static const int RESOURCETYPE_UNKNOWN = 0xFFFFFFFF;
static const int RESOURCEUSAGE_CONNECTABLE = 0x00000001;
static const int RESOURCEUSAGE_CONTAINER = 0x00000002;
static const int RESOURCEUSAGE_NOLOCALDEVICE = 0x00000004;
static const int RESOURCEUSAGE_SIBLING = 0x00000008;
static const int RESOURCEUSAGE_ATTACHED = 0x00000010;
static const int RESOURCEUSAGE_ALL = (RESOURCEUSAGE_CONNECTABLE | RESOURCEUSAGE_CONTAINER | RESOURCEUSAGE_ATTACHED);
static const int RESOURCEUSAGE_RESERVED = 0x80000000;
static const int RESOURCEDISPLAYTYPE_GENERIC = 0x00000000;
static const int RESOURCEDISPLAYTYPE_DOMAIN = 0x00000001;
static const int RESOURCEDISPLAYTYPE_SERVER = 0x00000002;
static const int RESOURCEDISPLAYTYPE_SHARE = 0x00000003;
static const int RESOURCEDISPLAYTYPE_FILE = 0x00000004;
static const int RESOURCEDISPLAYTYPE_GROUP = 0x00000005;
static const int RESOURCEDISPLAYTYPE_NETWORK = 0x00000006;
static const int RESOURCEDISPLAYTYPE_ROOT = 0x00000007;
static const int RESOURCEDISPLAYTYPE_SHAREADMIN = 0x00000008;
static const int RESOURCEDISPLAYTYPE_DIRECTORY = 0x00000009;
static const int RESOURCEDISPLAYTYPE_TREE = 0x0000000A;
static const int RESOURCEDISPLAYTYPE_NDSCONTAINER = 0x0000000B;
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;
typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
static const int NETPROPERTY_PERSISTENT = 1;
static const int CONNECT_UPDATE_PROFILE = 0x00000001;
static const int CONNECT_UPDATE_RECENT = 0x00000002;
static const int CONNECT_TEMPORARY = 0x00000004;
static const int CONNECT_INTERACTIVE = 0x00000008;
static const int CONNECT_PROMPT = 0x00000010;
static const int CONNECT_NEED_DRIVE = 0x00000020;
static const int CONNECT_REFCOUNT = 0x00000040;
static const int CONNECT_REDIRECT = 0x00000080;
static const int CONNECT_LOCALDRIVE = 0x00000100;
static const int CONNECT_CURRENT_MEDIA = 0x00000200;
static const int CONNECT_DEFERRED = 0x00000400;
static const int CONNECT_RESERVED = 0xFF000000;
static const int CONNECT_COMMANDLINE = 0x00000800;
static const int CONNECT_CMD_SAVECRED = 0x00001000;
static const int CONNECT_CRED_RESET = 0x00002000;
DWORD
WNetAddConnectionA(
    LPCSTR lpRemoteName,
    LPCSTR lpPassword,
    LPCSTR lpLocalName
    );
DWORD
WNetAddConnectionW(
    LPCWSTR lpRemoteName,
    LPCWSTR lpPassword,
    LPCWSTR lpLocalName
    );
static const int WNetAddConnection = WNetAddConnectionA;
DWORD
WNetAddConnection2A(
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserName,
    DWORD dwFlags
    );
DWORD
WNetAddConnection2W(
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserName,
    DWORD dwFlags
    );
static const int WNetAddConnection2 = WNetAddConnection2A;
DWORD
WNetAddConnection3A(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserName,
    DWORD dwFlags
    );
DWORD
WNetAddConnection3W(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserName,
    DWORD dwFlags
    );
static const int WNetAddConnection3 = WNetAddConnection3A;
DWORD
WNetCancelConnectionA(
    LPCSTR lpName,
    BOOL fForce
    );
DWORD
WNetCancelConnectionW(
    LPCWSTR lpName,
    BOOL fForce
    );
static const int WNetCancelConnection = WNetCancelConnectionA;
DWORD
WNetCancelConnection2A(
    LPCSTR lpName,
    DWORD dwFlags,
    BOOL fForce
    );
DWORD
WNetCancelConnection2W(
    LPCWSTR lpName,
    DWORD dwFlags,
    BOOL fForce
    );
static const int WNetCancelConnection2 = WNetCancelConnection2A;
DWORD
WNetGetConnectionA(
    LPCSTR lpLocalName,
    LPSTR lpRemoteName,
    LPDWORD lpnLength
    );
DWORD
WNetGetConnectionW(
    LPCWSTR lpLocalName,
    LPWSTR lpRemoteName,
    LPDWORD lpnLength
    );
static const int WNetGetConnection = WNetGetConnectionA;
DWORD
WNetRestoreSingleConnectionW(
    HWND hwndParent,
    LPCWSTR lpDevice,
    BOOL fUseUI
    );
DWORD
WNetUseConnectionA(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserId,
    DWORD dwFlags,
    LPSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult
    );
DWORD
WNetUseConnectionW(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserId,
    DWORD dwFlags,
    LPWSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult
    );
static const int WNetUseConnection = WNetUseConnectionA;
DWORD
WNetConnectionDialog(
    HWND hwnd,
    DWORD dwType
    );
DWORD
WNetDisconnectDialog(
    HWND hwnd,
    DWORD dwType
    );
typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure; /* size of this structure in bytes */
    HWND hwndOwner; /* owner window for the dialog */
    LPNETRESOURCEA lpConnRes;/* Requested Resource info    */
    DWORD dwFlags; /* flags (see below) */
    DWORD dwDevNum; /* number of devices connected to */
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure; /* size of this structure in bytes */
    HWND hwndOwner; /* owner window for the dialog */
    LPNETRESOURCEW lpConnRes;/* Requested Resource info    */
    DWORD dwFlags; /* flags (see below) */
    DWORD dwDevNum; /* number of devices connected to */
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
static const int CONNDLG_RO_PATH = 0x00000001;
static const int CONNDLG_CONN_POINT = 0x00000002;
static const int CONNDLG_USE_MRU = 0x00000004;
static const int CONNDLG_HIDE_BOX = 0x00000008;
static const int CONNDLG_PERSIST = 0x00000010;
static const int CONNDLG_NOT_PERSIST = 0x00000020;
DWORD
WNetConnectionDialog1A(
    LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD
WNetConnectionDialog1W(
    LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );
static const int WNetConnectionDialog1 = WNetConnectionDialog1A;
typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure; /* size of this structure in bytes */
    HWND hwndOwner; /* owner window for the dialog */
    LPSTR lpLocalName; /* local device name */
    LPSTR lpRemoteName; /* network resource name */
    DWORD dwFlags; /* flags */
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure; /* size of this structure in bytes */
    HWND hwndOwner; /* owner window for the dialog */
    LPWSTR lpLocalName; /* local device name */
    LPWSTR lpRemoteName; /* network resource name */
    DWORD dwFlags; /* flags */
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
static const int DISC_UPDATE_PROFILE = 0x00000001;
static const int DISC_NO_FORCE = 0x00000040;
DWORD
WNetDisconnectDialog1A(
    LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD
WNetDisconnectDialog1W(
    LPDISCDLGSTRUCTW lpConnDlgStruct
    );
static const int WNetDisconnectDialog1 = WNetDisconnectDialog1A;
DWORD
WNetOpenEnumA(
    DWORD dwScope,
    DWORD dwType,
    DWORD dwUsage,
    LPNETRESOURCEA lpNetResource,
    LPHANDLE lphEnum
    );
DWORD
WNetOpenEnumW(
    DWORD dwScope,
    DWORD dwType,
    DWORD dwUsage,
    LPNETRESOURCEW lpNetResource,
    LPHANDLE lphEnum
    );
static const int WNetOpenEnum = WNetOpenEnumA;
DWORD
WNetEnumResourceA(
    HANDLE hEnum,
    LPDWORD lpcCount,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize
    );
DWORD
WNetEnumResourceW(
    HANDLE hEnum,
    LPDWORD lpcCount,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize
    );
static const int WNetEnumResource = WNetEnumResourceA;
DWORD
WNetCloseEnum(
    HANDLE hEnum
    );
DWORD
WNetGetResourceParentA(
    LPNETRESOURCEA lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer
    );
DWORD
WNetGetResourceParentW(
    LPNETRESOURCEW lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer
    );
static const int WNetGetResourceParent = WNetGetResourceParentA;
DWORD
WNetGetResourceInformationA(
    LPNETRESOURCEA lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
    LPSTR *lplpSystem
    );
DWORD
WNetGetResourceInformationW(
    LPNETRESOURCEW lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
    LPWSTR *lplpSystem
    );
static const int WNetGetResourceInformation = WNetGetResourceInformationA;
static const int UNIVERSAL_NAME_INFO_LEVEL = 0x00000001;
static const int REMOTE_NAME_INFO_LEVEL = 0x00000002;
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
DWORD
WNetGetUniversalNameA(
    LPCSTR lpLocalPath,
    DWORD dwInfoLevel,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize
    );
DWORD
WNetGetUniversalNameW(
    LPCWSTR lpLocalPath,
    DWORD dwInfoLevel,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize
    );
static const int WNetGetUniversalName = WNetGetUniversalNameA;
DWORD
WNetGetUserA(
    LPCSTR lpName,
    LPSTR lpUserName,
    LPDWORD lpnLength
    );
DWORD
WNetGetUserW(
    LPCWSTR lpName,
    LPWSTR lpUserName,
    LPDWORD lpnLength
    );
static const int WNetGetUser = WNetGetUserA;
static const int WNFMT_MULTILINE = 0x01;
static const int WNFMT_ABBREVIATED = 0x02;
static const int WNFMT_INENUM = 0x10;
static const int WNFMT_CONNECTION = 0x20;
DWORD
WNetGetProviderNameA(
    DWORD dwNetType,
    LPSTR lpProviderName,
    LPDWORD lpBufferSize
    );
DWORD
WNetGetProviderNameW(
    DWORD dwNetType,
    LPWSTR lpProviderName,
    LPDWORD lpBufferSize
    );
static const int WNetGetProviderName = WNetGetProviderNameA;
typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;
static const int NETINFO_DLL16 = 0x00000001;
static const int NETINFO_DISKRED = 0x00000004;
static const int NETINFO_PRINTERRED = 0x00000008;
DWORD
WNetGetNetworkInformationA(
    LPCSTR lpProvider,
    LPNETINFOSTRUCT lpNetInfoStruct
    );
DWORD
WNetGetNetworkInformationW(
    LPCWSTR lpProvider,
    LPNETINFOSTRUCT lpNetInfoStruct
    );
static const int WNetGetNetworkInformation = WNetGetNetworkInformationA;
DWORD
WNetGetLastErrorA(
    LPDWORD lpError,
    LPSTR lpErrorBuf,
    DWORD nErrorBufSize,
    LPSTR lpNameBuf,
    DWORD nNameBufSize
    );
DWORD
WNetGetLastErrorW(
    LPDWORD lpError,
    LPWSTR lpErrorBuf,
    DWORD nErrorBufSize,
    LPWSTR lpNameBuf,
    DWORD nNameBufSize
    );
static const int WNetGetLastError = WNetGetLastErrorA;
static const int WN_SUCCESS = NO_ERROR;
static const int WN_NO_ERROR = NO_ERROR;
static const int WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED;
static const int WN_CANCEL = ERROR_CANCELLED;
static const int WN_RETRY = ERROR_RETRY;
static const int WN_NET_ERROR = ERROR_UNEXP_NET_ERR;
static const int WN_MORE_DATA = ERROR_MORE_DATA;
static const int WN_BAD_POINTER = ERROR_INVALID_ADDRESS;
static const int WN_BAD_VALUE = ERROR_INVALID_PARAMETER;
static const int WN_BAD_USER = ERROR_BAD_USERNAME;
static const int WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD;
static const int WN_ACCESS_DENIED = ERROR_ACCESS_DENIED;
static const int WN_FUNCTION_BUSY = ERROR_BUSY;
static const int WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR;
static const int WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY;
static const int WN_NO_NETWORK = ERROR_NO_NETWORK;
static const int WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR;
static const int WN_BAD_LEVEL = ERROR_INVALID_LEVEL;
static const int WN_BAD_HANDLE = ERROR_INVALID_HANDLE;
static const int WN_NOT_INITIALIZING = ERROR_ALREADY_INITIALIZED;
static const int WN_NO_MORE_DEVICES = ERROR_NO_MORE_DEVICES;
static const int WN_NOT_CONNECTED = ERROR_NOT_CONNECTED;
static const int WN_OPEN_FILES = ERROR_OPEN_FILES;
static const int WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE;
static const int WN_BAD_NETNAME = ERROR_BAD_NET_NAME;
static const int WN_BAD_LOCALNAME = ERROR_BAD_DEVICE;
static const int WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED;
static const int WN_DEVICE_ERROR = ERROR_GEN_FAILURE;
static const int WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL;
static const int WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH;
static const int WN_BAD_PROVIDER = ERROR_BAD_PROVIDER;
static const int WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE;
static const int WN_BAD_PROFILE = ERROR_BAD_PROFILE;
static const int WN_BAD_DEV_TYPE = ERROR_BAD_DEV_TYPE;
static const int WN_DEVICE_ALREADY_REMEMBERED = ERROR_DEVICE_ALREADY_REMEMBERED;
static const int WN_CONNECTED_OTHER_PASSWORD = ERROR_CONNECTED_OTHER_PASSWORD;
static const int WN_CONNECTED_OTHER_PASSWORD_DEFAULT = ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
static const int WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS;
static const int WN_NOT_CONTAINER = ERROR_NOT_CONTAINER;
static const int WN_NOT_AUTHENTICATED = ERROR_NOT_AUTHENTICATED;
static const int WN_NOT_LOGGED_ON = ERROR_NOT_LOGGED_ON;
static const int WN_NOT_VALIDATED = ERROR_NO_LOGON_SERVERS;
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;
static const int WNCON_FORNETCARD = 0x00000001;
static const int WNCON_NOTROUTED = 0x00000002;
static const int WNCON_SLOWLINK = 0x00000004;
static const int WNCON_DYNAMIC = 0x00000008;
DWORD
MultinetGetConnectionPerformanceA(
    LPNETRESOURCEA lpNetResource,
    LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
DWORD
MultinetGetConnectionPerformanceW(
    LPNETRESOURCEW lpNetResource,
    LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
static const int MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceA;
static const int _STRALIGN_USE_SECURE_CRT = 1;
static const int _WINDOWS_INSECURE_DEPRECATE = ;
static const int WSTR_ALIGNED(s) = (((DWORD_PTR)(s) & (sizeof(WCHAR)-1)) == 0);
LPUWSTR
uaw_CharUpperW(
    LPUWSTR String
    );
int
uaw_lstrcmpW(
    PCUWSTR String1,
    PCUWSTR String2
    );
int
uaw_lstrcmpiW(
    PCUWSTR String1,
    PCUWSTR String2
    );
int
uaw_lstrlenW(
    LPCUWSTR String
    );
PUWSTR
uaw_wcschr(
    PCUWSTR String,
    WCHAR Character
    );
PUWSTR
uaw_wcscpy(
    PUWSTR Destination,
    PCUWSTR Source
    );
int
uaw_wcsicmp(
    PCUWSTR String1,
    PCUWSTR String2
    );
size_t
uaw_wcslen(
    PCUWSTR String
    );
PUWSTR
uaw_wcsrchr(
    PCUWSTR String,
    WCHAR Character
    );
LPUWSTR
static
ua_CharUpperW(
    LPUWSTR String
    )
{
    if ((((DWORD_PTR)(String) & (sizeof(WCHAR)-1)) == 0)) {
        return CharUpperW( (PWSTR)String );
    } else {
        return uaw_CharUpperW( String );
    }
}
int
static
ua_lstrcmpW(
    LPCUWSTR String1,
    LPCUWSTR String2
    )
{
    if ((((DWORD_PTR)(String1) & (sizeof(WCHAR)-1)) == 0) && (((DWORD_PTR)(String2) & (sizeof(WCHAR)-1)) == 0)) {
        return lstrcmpW( (LPCWSTR)String1, (LPCWSTR)String2);
    } else {
        return uaw_lstrcmpW( String1, String2 );
    }
}
int
static
ua_lstrcmpiW(
    LPCUWSTR String1,
    LPCUWSTR String2
    )
{
    if ((((DWORD_PTR)(String1) & (sizeof(WCHAR)-1)) == 0) && (((DWORD_PTR)(String2) & (sizeof(WCHAR)-1)) == 0)) {
        return lstrcmpiW( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_lstrcmpiW( String1, String2 );
    }
}
int
static
ua_lstrlenW(
    LPCUWSTR String
    )
{
    if ((((DWORD_PTR)(String) & (sizeof(WCHAR)-1)) == 0)) {
        return lstrlenW( (PCWSTR)String );
    } else {
        return uaw_lstrlenW( String );
    }
}
typedef WCHAR *PUWSTR_C;
PUWSTR_C
static
ua_wcschr(
    PCUWSTR String,
    WCHAR Character
    )
{
    if ((((DWORD_PTR)(String) & (sizeof(WCHAR)-1)) == 0)) {
        return wcschr((PCWSTR)String, Character);
    } else {
        return (PUWSTR_C)uaw_wcschr(String, Character);
    }
}
PUWSTR_C
static
ua_wcsrchr(
    PCUWSTR String,
    WCHAR Character
    )
{
    if ((((DWORD_PTR)(String) & (sizeof(WCHAR)-1)) == 0)) {
        return wcsrchr((PCWSTR)String, Character);
    } else {
        return (PUWSTR_C)uaw_wcsrchr(String, Character);
    }
}
PUWSTR
static
ua_wcscpy(
    PUWSTR Destination,
    PCUWSTR Source
    )
{
    if ((((DWORD_PTR)(Source) & (sizeof(WCHAR)-1)) == 0) && (((DWORD_PTR)(Destination) & (sizeof(WCHAR)-1)) == 0)) {
        return wcscpy( (PWSTR)Destination, (PCWSTR)Source );
    } else {
        return uaw_wcscpy( Destination, Source );
    }
}
PUWSTR
static
ua_wcscpy_s(
    PUWSTR Destination,
    size_t DestinationSize,
    PCUWSTR Source
    )
{
    if ((((DWORD_PTR)(Source) & (sizeof(WCHAR)-1)) == 0) && (((DWORD_PTR)(Destination) & (sizeof(WCHAR)-1)) == 0)) {
        return (wcscpy_s( (PWSTR)Destination, DestinationSize, (PCWSTR)Source ) == 0 ? Destination : ((void *)0));
    } else {
        return uaw_wcscpy( Destination, Source );
    }
}
size_t
static
ua_wcslen(
    PCUWSTR String
    )
{
    if ((((DWORD_PTR)(String) & (sizeof(WCHAR)-1)) == 0)) {
        return wcslen( (PCWSTR)String );
    } else {
        return uaw_wcslen( String );
    }
}
int
static
ua_wcsicmp(
    PCUWSTR String1,
    PCUWSTR String2
    )
{
    if ((((DWORD_PTR)(String1) & (sizeof(WCHAR)-1)) == 0) && (((DWORD_PTR)(String2) & (sizeof(WCHAR)-1)) == 0)) {
        return _wcsicmp( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_wcsicmp( String1, String2 );
    }
}
static const int __UA_WCSLEN = ua_wcslen;
static const int __UA_WSTRSIZE(s) = ((__UA_WCSLEN(s)+1)*sizeof(WCHAR));
static const int __UA_STACKCOPY(p,s) = memcpy(_alloca(s),p,s);
static const int WSTR_ALIGNED_STACK_COPY(d,s) = { PCUWSTR __ua_src; size_t __ua_size; PWSTR __ua_dst; __ua_src = (s); if (WSTR_ALIGNED(__ua_src)) { __ua_dst = (PWSTR)__ua_src; } else { __ua_size = __UA_WSTRSIZE(__ua_src); __ua_dst = (PWSTR)_alloca(__ua_size); memcpy(__ua_dst,__ua_src,__ua_size); } *(d) = (PCWSTR)__ua_dst; };
static const int ASTR_ALIGNED_STACK_COPY(d,s) = (*(d) = (PCSTR)(s));
static const int __UA_STRUC_ALIGNED(t,s) = (((DWORD_PTR)(s) & (TYPE_ALIGNMENT(t)-1)) == 0);
static const int STRUC_ALIGNED_STACK_COPY(t,s) = __UA_STRUC_ALIGNED(t,s) ? ((t const *)(s)) : ((t const *)__UA_STACKCOPY((s),sizeof(t)));
static const int TSTR_ALIGNED_STACK_COPY(d,s) = ASTR_ALIGNED_STACK_COPY(d,s);
static const int TSTR_ALIGNED(x) = TRUE;
static const int ua_CharUpper = CharUpperA;
static const int ua_lstrcmp = lstrcmpA;
static const int ua_lstrcmpi = lstrcmpiA;
static const int ua_lstrlen = lstrlenA;
static const int ua_tcscpy = strcpy;
static const int ua_tcscpy_s = strcpy_s;
static const char SERVICES_ACTIVE_DATABASEW = L"ServicesActive";
static const char SERVICES_FAILED_DATABASEW = L"ServicesFailed";
static const char SERVICES_ACTIVE_DATABASEA = "ServicesActive";
static const char SERVICES_FAILED_DATABASEA = "ServicesFailed";
static const int SC_GROUP_IDENTIFIERW = L'+';
static const int SC_GROUP_IDENTIFIERA = '+';
static const int SERVICES_ACTIVE_DATABASE = SERVICES_ACTIVE_DATABASEA;
static const int SERVICES_FAILED_DATABASE = SERVICES_FAILED_DATABASEA;
static const int SC_GROUP_IDENTIFIER = SC_GROUP_IDENTIFIERA;
static const int SERVICE_NO_CHANGE = 0xffffffff;
static const int SERVICE_ACTIVE = 0x00000001;
static const int SERVICE_INACTIVE = 0x00000002;
static const int SERVICE_STATE_ALL = (SERVICE_ACTIVE | SERVICE_INACTIVE);
static const int SERVICE_CONTROL_STOP = 0x00000001;
static const int SERVICE_CONTROL_PAUSE = 0x00000002;
static const int SERVICE_CONTROL_CONTINUE = 0x00000003;
static const int SERVICE_CONTROL_INTERROGATE = 0x00000004;
static const int SERVICE_CONTROL_SHUTDOWN = 0x00000005;
static const int SERVICE_CONTROL_PARAMCHANGE = 0x00000006;
static const int SERVICE_CONTROL_NETBINDADD = 0x00000007;
static const int SERVICE_CONTROL_NETBINDREMOVE = 0x00000008;
static const int SERVICE_CONTROL_NETBINDENABLE = 0x00000009;
static const int SERVICE_CONTROL_NETBINDDISABLE = 0x0000000A;
static const int SERVICE_CONTROL_DEVICEEVENT = 0x0000000B;
static const int SERVICE_CONTROL_HARDWAREPROFILECHANGE = 0x0000000C;
static const int SERVICE_CONTROL_POWEREVENT = 0x0000000D;
static const int SERVICE_CONTROL_SESSIONCHANGE = 0x0000000E;
static const double SERVICE_CONTROL_PRESHUTDOWN = 0x0000000F;
static const int SERVICE_CONTROL_TIMECHANGE = 0x00000010;
static const int SERVICE_CONTROL_TRIGGEREVENT = 0x00000020;
static const int SERVICE_STOPPED = 0x00000001;
static const int SERVICE_START_PENDING = 0x00000002;
static const int SERVICE_STOP_PENDING = 0x00000003;
static const int SERVICE_RUNNING = 0x00000004;
static const int SERVICE_CONTINUE_PENDING = 0x00000005;
static const int SERVICE_PAUSE_PENDING = 0x00000006;
static const int SERVICE_PAUSED = 0x00000007;
static const int SERVICE_ACCEPT_STOP = 0x00000001;
static const int SERVICE_ACCEPT_PAUSE_CONTINUE = 0x00000002;
static const int SERVICE_ACCEPT_SHUTDOWN = 0x00000004;
static const int SERVICE_ACCEPT_PARAMCHANGE = 0x00000008;
static const int SERVICE_ACCEPT_NETBINDCHANGE = 0x00000010;
static const int SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 0x00000020;
static const int SERVICE_ACCEPT_POWEREVENT = 0x00000040;
static const int SERVICE_ACCEPT_SESSIONCHANGE = 0x00000080;
static const int SERVICE_ACCEPT_PRESHUTDOWN = 0x00000100;
static const int SERVICE_ACCEPT_TIMECHANGE = 0x00000200;
static const int SERVICE_ACCEPT_TRIGGEREVENT = 0x00000400;
static const int SC_MANAGER_CONNECT = 0x0001;
static const int SC_MANAGER_CREATE_SERVICE = 0x0002;
static const int SC_MANAGER_ENUMERATE_SERVICE = 0x0004;
static const int SC_MANAGER_LOCK = 0x0008;
static const int SC_MANAGER_QUERY_LOCK_STATUS = 0x0010;
static const int SC_MANAGER_MODIFY_BOOT_CONFIG = 0x0020;
static const int SC_MANAGER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SC_MANAGER_CONNECT | SC_MANAGER_CREATE_SERVICE | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_LOCK | SC_MANAGER_QUERY_LOCK_STATUS | SC_MANAGER_MODIFY_BOOT_CONFIG);
static const int SERVICE_QUERY_CONFIG = 0x0001;
static const int SERVICE_CHANGE_CONFIG = 0x0002;
static const int SERVICE_QUERY_STATUS = 0x0004;
static const int SERVICE_ENUMERATE_DEPENDENTS = 0x0008;
static const int SERVICE_START = 0x0010;
static const int SERVICE_STOP = 0x0020;
static const int SERVICE_PAUSE_CONTINUE = 0x0040;
static const int SERVICE_INTERROGATE = 0x0080;
static const int SERVICE_USER_DEFINED_CONTROL = 0x0100;
static const int SERVICE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SERVICE_QUERY_CONFIG | SERVICE_CHANGE_CONFIG | SERVICE_QUERY_STATUS | SERVICE_ENUMERATE_DEPENDENTS | SERVICE_START | SERVICE_STOP | SERVICE_PAUSE_CONTINUE | SERVICE_INTERROGATE | SERVICE_USER_DEFINED_CONTROL);
static const int SERVICE_RUNS_IN_SYSTEM_PROCESS = 0x00000001;
static const int SERVICE_CONFIG_DESCRIPTION = 1;
static const int SERVICE_CONFIG_FAILURE_ACTIONS = 2;
static const int SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;
static const int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;
static const int SERVICE_CONFIG_SERVICE_SID_INFO = 5;
static const int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;
static const int SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;
static const int SERVICE_CONFIG_TRIGGER_INFO = 8;
static const int SERVICE_CONFIG_PREFERRED_NODE = 9;
static const int SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;
static const int SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;
static const int SERVICE_NOTIFY_STATUS_CHANGE = SERVICE_NOTIFY_STATUS_CHANGE_2;
static const int SERVICE_NOTIFY_STOPPED = 0x00000001;
static const int SERVICE_NOTIFY_START_PENDING = 0x00000002;
static const int SERVICE_NOTIFY_STOP_PENDING = 0x00000004;
static const int SERVICE_NOTIFY_RUNNING = 0x00000008;
static const int SERVICE_NOTIFY_CONTINUE_PENDING = 0x00000010;
static const int SERVICE_NOTIFY_PAUSE_PENDING = 0x00000020;
static const int SERVICE_NOTIFY_PAUSED = 0x00000040;
static const int SERVICE_NOTIFY_CREATED = 0x00000080;
static const int SERVICE_NOTIFY_DELETED = 0x00000100;
static const int SERVICE_NOTIFY_DELETE_PENDING = 0x00000200;
static const int SERVICE_STOP_REASON_FLAG_MIN = 0x00000000;
static const int SERVICE_STOP_REASON_FLAG_UNPLANNED = 0x10000000;
static const int SERVICE_STOP_REASON_FLAG_CUSTOM = 0x20000000;
static const int SERVICE_STOP_REASON_FLAG_PLANNED = 0x40000000;
static const int SERVICE_STOP_REASON_FLAG_MAX = 0x80000000;
static const int SERVICE_STOP_REASON_MAJOR_MIN = 0x00000000;
static const int SERVICE_STOP_REASON_MAJOR_OTHER = 0x00010000;
static const int SERVICE_STOP_REASON_MAJOR_HARDWARE = 0x00020000;
static const int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 0x00030000;
static const int SERVICE_STOP_REASON_MAJOR_SOFTWARE = 0x00040000;
static const int SERVICE_STOP_REASON_MAJOR_APPLICATION = 0x00050000;
static const int SERVICE_STOP_REASON_MAJOR_NONE = 0x00060000;
static const int SERVICE_STOP_REASON_MAJOR_MAX = 0x00070000;
static const int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 0x00400000;
static const int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 0x00ff0000;
static const int SERVICE_STOP_REASON_MINOR_MIN = 0x00000000;
static const int SERVICE_STOP_REASON_MINOR_OTHER = 0x00000001;
static const int SERVICE_STOP_REASON_MINOR_MAINTENANCE = 0x00000002;
static const int SERVICE_STOP_REASON_MINOR_INSTALLATION = 0x00000003;
static const int SERVICE_STOP_REASON_MINOR_UPGRADE = 0x00000004;
static const int SERVICE_STOP_REASON_MINOR_RECONFIG = 0x00000005;
static const int SERVICE_STOP_REASON_MINOR_HUNG = 0x00000006;
static const int SERVICE_STOP_REASON_MINOR_UNSTABLE = 0x00000007;
static const int SERVICE_STOP_REASON_MINOR_DISK = 0x00000008;
static const int SERVICE_STOP_REASON_MINOR_NETWORKCARD = 0x00000009;
static const int SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 0x0000000a;
static const int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 0x0000000b;
static const int SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 0x0000000c;
static const int SERVICE_STOP_REASON_MINOR_SERVICEPACK = 0x0000000d;
static const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 0x0000000e;
static const int SERVICE_STOP_REASON_MINOR_SECURITYFIX = 0x0000000f;
static const int SERVICE_STOP_REASON_MINOR_SECURITY = 0x00000010;
static const int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 0x00000011;
static const int SERVICE_STOP_REASON_MINOR_WMI = 0x00000012;
static const int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 0x00000013;
static const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 0x00000014;
static const int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 0x00000015;
static const int SERVICE_STOP_REASON_MINOR_MMC = 0x00000016;
static const int SERVICE_STOP_REASON_MINOR_NONE = 0x00000017;
static const int SERVICE_STOP_REASON_MINOR_MAX = 0x00000018;
static const int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 0x00000100;
static const int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 0x0000FFFF;
static const int SERVICE_CONTROL_STATUS_REASON_INFO = 1;
static const int SERVICE_SID_TYPE_NONE = 0x00000000;
static const int SERVICE_SID_TYPE_UNRESTRICTED = 0x00000001;
static const int SERVICE_SID_TYPE_RESTRICTED = ( 0x00000002 | SERVICE_SID_TYPE_UNRESTRICTED );
static const int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;
static const int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;
static const int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;
static const int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;
static const int SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;
static const int SERVICE_TRIGGER_TYPE_CUSTOM = 20;
static const int SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;
static const int SERVICE_TRIGGER_DATA_TYPE_STRING = 2;
const GUID /* 4f27f2de-14e2-430b-a549-7cd48cbc8245 */ NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
const GUID /* cc4ba62a-162e-4648-847a-b6bdf993e335 */ NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
const GUID /* 1ce20aba-9851-4421-9430-1ddeb766e809 */ DOMAIN_JOIN_GUID;
const GUID /* ddaf516e-58c2-4866-9574-c3b615d42ea1 */ DOMAIN_LEAVE_GUID;
const GUID /* b7569e07-8421-4ee0-ad10-86915afdad09 */ FIREWALL_PORT_OPEN_GUID;
const GUID /* a144ed38-8e12-4de4-9d96-e64740b1a524 */ FIREWALL_PORT_CLOSE_GUID;
const GUID /* 659FCAE6-5BDB-4DA9-B1FF-CA2A178D46E0 */ MACHINE_POLICY_PRESENT_GUID;
const GUID /* 54FB46C8-F089-464C-B1FD-59D1B62C3B50 */ USER_POLICY_PRESENT_GUID;
static const int SERVICE_TRIGGER_ACTION_SERVICE_START = 1;
static const int SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;
static const char SERVICE_TRIGGER_STARTED_ARGUMENT = L"TriggerStarted";
typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;
typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart; // Delayed autostart flag
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;
typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures; // Failure actions flag
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;
typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType; // Service SID type
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges; // Required privileges multi-sz
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges; // Required privileges multi-sz
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout; // Timeout in msecs
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;
typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType; // Data type -- one of SERVICE_TRIGGER_DATA_TYPE_* constants
    DWORD cbData; // Size of trigger specific data
    PBYTE pData; // Trigger specific data
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType; // One of SERVICE_TRIGGER_TYPE_* constants
    DWORD dwAction; // One of SERVICE_TRIGGER_ACTION_* constants
    GUID * pTriggerSubtype; // Provider GUID if the trigger type is SERVICE_TRIGGER_TYPE_CUSTOM
    DWORD cDataItems; // Number of data items in pDataItems array
    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems; // Trigger specific data
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;
typedef struct _SERVICE_TRIGGER_INFO {
    DWORD cTriggers; // Number of triggers in the pTriggers array
    PSERVICE_TRIGGER pTriggers; // Array of triggers
    PBYTE pReserved; // Reserved, must be NULL
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;
typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT usPreferredNode; // Preferred node
    BOOLEAN fDelete; // Delete the preferred node setting
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;
typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER liNewTime; // New time
    LARGE_INTEGER liOldTime; // Old time
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;
struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;
struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;
typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;
typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;
typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef LPVOID SC_LOCK;
typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
typedef void ( *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );
typedef void ( *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors
    );
static const int LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef void ( *LPHANDLER_FUNCTION)(
    DWORD dwControl
    );
typedef DWORD ( *LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );
typedef
void
( * PFN_SC_NOTIFY_CALLBACK ) (
    PVOID pParameter
    );
typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;
typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;
typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
BOOL
ChangeServiceConfigA(
    SC_HANDLE hService,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCSTR lpBinaryPathName,
    LPCSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCSTR lpDependencies,
    LPCSTR lpServiceStartName,
    LPCSTR lpPassword,
    LPCSTR lpDisplayName
    );
BOOL
ChangeServiceConfigW(
    SC_HANDLE hService,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCWSTR lpDependencies,
    LPCWSTR lpServiceStartName,
    LPCWSTR lpPassword,
    LPCWSTR lpDisplayName
    );
static const int ChangeServiceConfig = ChangeServiceConfigA;
BOOL
ChangeServiceConfig2A(
    SC_HANDLE hService,
    DWORD dwInfoLevel,
    LPVOID lpInfo
    );
BOOL
ChangeServiceConfig2W(
    SC_HANDLE hService,
    DWORD dwInfoLevel,
    LPVOID lpInfo
    );
static const int ChangeServiceConfig2 = ChangeServiceConfig2A;
BOOL
CloseServiceHandle(
    SC_HANDLE hSCObject
    );
BOOL
ControlService(
    SC_HANDLE hService,
    DWORD dwControl,
    LPSERVICE_STATUS lpServiceStatus
    );
SC_HANDLE
CreateServiceA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    LPCSTR lpDisplayName,
    DWORD dwDesiredAccess,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCSTR lpBinaryPathName,
    LPCSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCSTR lpDependencies,
    LPCSTR lpServiceStartName,
    LPCSTR lpPassword
    );
SC_HANDLE
CreateServiceW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    LPCWSTR lpDisplayName,
    DWORD dwDesiredAccess,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCWSTR lpDependencies,
    LPCWSTR lpServiceStartName,
    LPCWSTR lpPassword
    );
static const int CreateService = CreateServiceA;
BOOL
DeleteService(
    SC_HANDLE hService
    );
BOOL
EnumDependentServicesA(
    SC_HANDLE hService,
    DWORD dwServiceState,
                    LPENUM_SERVICE_STATUSA lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned
    );
BOOL
EnumDependentServicesW(
    SC_HANDLE hService,
    DWORD dwServiceState,
                    LPENUM_SERVICE_STATUSW lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned
    );
static const int EnumDependentServices = EnumDependentServicesA;
BOOL
EnumServicesStatusA(
    SC_HANDLE hSCManager,
    DWORD dwServiceType,
    DWORD dwServiceState,
                    LPENUM_SERVICE_STATUSA lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle
    );
BOOL
EnumServicesStatusW(
    SC_HANDLE hSCManager,
    DWORD dwServiceType,
    DWORD dwServiceState,
                    LPENUM_SERVICE_STATUSW lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle
    );
static const int EnumServicesStatus = EnumServicesStatusA;
BOOL
EnumServicesStatusExA(
    SC_HANDLE hSCManager,
    SC_ENUM_TYPE InfoLevel,
    DWORD dwServiceType,
    DWORD dwServiceState,
                    LPBYTE lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
    LPCSTR pszGroupName
    );
BOOL
EnumServicesStatusExW(
    SC_HANDLE hSCManager,
    SC_ENUM_TYPE InfoLevel,
    DWORD dwServiceType,
    DWORD dwServiceState,
                    LPBYTE lpServices,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
    LPCWSTR pszGroupName
    );
static const int EnumServicesStatusEx = EnumServicesStatusExA;
BOOL
GetServiceKeyNameA(
    SC_HANDLE hSCManager,
    LPCSTR lpDisplayName,
                    LPSTR lpServiceName,
    LPDWORD lpcchBuffer
    );
BOOL
GetServiceKeyNameW(
    SC_HANDLE hSCManager,
    LPCWSTR lpDisplayName,
                    LPWSTR lpServiceName,
    LPDWORD lpcchBuffer
    );
static const int GetServiceKeyName = GetServiceKeyNameA;
BOOL
GetServiceDisplayNameA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
                    LPSTR lpDisplayName,
    LPDWORD lpcchBuffer
    );
BOOL
GetServiceDisplayNameW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
                    LPWSTR lpDisplayName,
    LPDWORD lpcchBuffer
    );
static const int GetServiceDisplayName = GetServiceDisplayNameA;
SC_LOCK
LockServiceDatabase(
    SC_HANDLE hSCManager
    );
BOOL
NotifyBootConfigStatus(
    BOOL BootAcceptable
    );
SC_HANDLE
OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD dwDesiredAccess
    );
SC_HANDLE
OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    DWORD dwDesiredAccess
    );
static const int OpenSCManager = OpenSCManagerA;
SC_HANDLE
OpenServiceA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    DWORD dwDesiredAccess
    );
SC_HANDLE
OpenServiceW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    DWORD dwDesiredAccess
    );
static const int OpenService = OpenServiceA;
BOOL
QueryServiceConfigA(
    SC_HANDLE hService,
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
QueryServiceConfigW(
    SC_HANDLE hService,
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
static const int QueryServiceConfig = QueryServiceConfigA;
BOOL
QueryServiceConfig2A(
    SC_HANDLE hService,
    DWORD dwInfoLevel,
                    LPBYTE lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
QueryServiceConfig2W(
    SC_HANDLE hService,
    DWORD dwInfoLevel,
                    LPBYTE lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
static const int QueryServiceConfig2 = QueryServiceConfig2A;
BOOL
QueryServiceLockStatusA(
    SC_HANDLE hSCManager,
                    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
QueryServiceLockStatusW(
    SC_HANDLE hSCManager,
                    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
static const int QueryServiceLockStatus = QueryServiceLockStatusA;
BOOL
QueryServiceObjectSecurity(
    SC_HANDLE hService,
    SECURITY_INFORMATION dwSecurityInformation,
                    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
BOOL
QueryServiceStatus(
    SC_HANDLE hService,
    LPSERVICE_STATUS lpServiceStatus
    );
BOOL
QueryServiceStatusEx(
    SC_HANDLE hService,
    SC_STATUS_TYPE InfoLevel,
                    LPBYTE lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded
    );
SERVICE_STATUS_HANDLE
RegisterServiceCtrlHandlerA(
    LPCSTR lpServiceName,
            LPHANDLER_FUNCTION lpHandlerProc
    );
SERVICE_STATUS_HANDLE
RegisterServiceCtrlHandlerW(
    LPCWSTR lpServiceName,
            LPHANDLER_FUNCTION lpHandlerProc
    );
static const int RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerA;
SERVICE_STATUS_HANDLE
RegisterServiceCtrlHandlerExA(
    LPCSTR lpServiceName,
            LPHANDLER_FUNCTION_EX lpHandlerProc,
    LPVOID lpContext
    );
SERVICE_STATUS_HANDLE
RegisterServiceCtrlHandlerExW(
    LPCWSTR lpServiceName,
            LPHANDLER_FUNCTION_EX lpHandlerProc,
    LPVOID lpContext
    );
static const int RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExA;
BOOL
SetServiceObjectSecurity(
    SC_HANDLE hService,
    SECURITY_INFORMATION dwSecurityInformation,
    PSECURITY_DESCRIPTOR lpSecurityDescriptor
    );
BOOL
SetServiceStatus(
    SERVICE_STATUS_HANDLE hServiceStatus,
    LPSERVICE_STATUS lpServiceStatus
    );
BOOL
StartServiceCtrlDispatcherA(
    const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
BOOL
StartServiceCtrlDispatcherW(
    const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );
static const int StartServiceCtrlDispatcher = StartServiceCtrlDispatcherA;
BOOL
StartServiceA(
    SC_HANDLE hService,
    DWORD dwNumServiceArgs,
                    LPCSTR *lpServiceArgVectors
    );
BOOL
StartServiceW(
    SC_HANDLE hService,
    DWORD dwNumServiceArgs,
                    LPCWSTR *lpServiceArgVectors
    );
static const int StartService = StartServiceA;
BOOL
UnlockServiceDatabase(
    SC_LOCK ScLock
    );
DWORD
NotifyServiceStatusChangeA (
    SC_HANDLE hService,
    DWORD dwNotifyMask,
    PSERVICE_NOTIFYA pNotifyBuffer
    );
DWORD
NotifyServiceStatusChangeW (
    SC_HANDLE hService,
    DWORD dwNotifyMask,
    PSERVICE_NOTIFYW pNotifyBuffer
    );
static const int NotifyServiceStatusChange = NotifyServiceStatusChangeA;
BOOL
ControlServiceExA(
    SC_HANDLE hService,
    DWORD dwControl,
    DWORD dwInfoLevel,
    PVOID pControlParams
    );
BOOL
ControlServiceExW(
    SC_HANDLE hService,
    DWORD dwControl,
    DWORD dwInfoLevel,
    PVOID pControlParams
    );
static const int ControlServiceEx = ControlServiceExA;
typedef struct _MODEMDEVCAPS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;
    DWORD dwDialOptions; // bitmap of supported values
    DWORD dwCallSetupFailTimer; // maximum in seconds
    DWORD dwInactivityTimeout; // maximum in seconds
    DWORD dwSpeakerVolume; // bitmap of supported values
    DWORD dwSpeakerMode; // bitmap of supported values
    DWORD dwModemOptions; // bitmap of supported values
    DWORD dwMaxDTERate; // maximum value in bit/s
    DWORD dwMaxDCERate; // maximum value in bit/s
    BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;
typedef struct _MODEMSETTINGS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwCallSetupFailTimer; // seconds
    DWORD dwInactivityTimeout; // seconds
    DWORD dwSpeakerVolume; // level
    DWORD dwSpeakerMode; // mode
    DWORD dwPreferredModemOptions; // bitmap
    DWORD dwNegotiatedModemOptions; // bitmap
    DWORD dwNegotiatedDCERate; // bit/s
    BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
static const int DIALOPTION_BILLING = 0x00000040;
static const int DIALOPTION_QUIET = 0x00000080;
static const int DIALOPTION_DIALTONE = 0x00000100;
static const int MDMVOLFLAG_LOW = 0x00000001;
static const int MDMVOLFLAG_MEDIUM = 0x00000002;
static const int MDMVOLFLAG_HIGH = 0x00000004;
static const int MDMVOL_LOW = 0x00000000;
static const int MDMVOL_MEDIUM = 0x00000001;
static const int MDMVOL_HIGH = 0x00000002;
static const int MDMSPKRFLAG_OFF = 0x00000001;
static const int MDMSPKRFLAG_DIAL = 0x00000002;
static const int MDMSPKRFLAG_ON = 0x00000004;
static const int MDMSPKRFLAG_CALLSETUP = 0x00000008;
static const int MDMSPKR_OFF = 0x00000000;
static const int MDMSPKR_DIAL = 0x00000001;
static const int MDMSPKR_ON = 0x00000002;
static const int MDMSPKR_CALLSETUP = 0x00000003;
static const int MDM_COMPRESSION = 0x00000001;
static const int MDM_ERROR_CONTROL = 0x00000002;
static const int MDM_FORCED_EC = 0x00000004;
static const int MDM_CELLULAR = 0x00000008;
static const int MDM_FLOWCONTROL_HARD = 0x00000010;
static const int MDM_FLOWCONTROL_SOFT = 0x00000020;
static const int MDM_CCITT_OVERRIDE = 0x00000040;
static const int MDM_SPEED_ADJUST = 0x00000080;
static const int MDM_TONE_DIAL = 0x00000100;
static const int MDM_BLIND_DIAL = 0x00000200;
static const int MDM_V23_OVERRIDE = 0x00000400;
static const int MDM_DIAGNOSTICS = 0x00000800;
static const int MDM_MASK_BEARERMODE = 0x0000f000;
static const int MDM_SHIFT_BEARERMODE = 12;
static const int MDM_MASK_PROTOCOLID = 0x000f0000;
static const int MDM_SHIFT_PROTOCOLID = 16;
static const int MDM_MASK_PROTOCOLDATA = 0x0ff00000;
static const int MDM_SHIFT_PROTOCOLDATA = 20;
static const int MDM_MASK_PROTOCOLINFO = (MDM_MASK_PROTOCOLID|MDM_MASK_PROTOCOLDATA);
static const int MDM_SHIFT_PROTOCOLINFO = MDM_SHIFT_PROTOCOLID;
static const int MDM_MASK_EXTENDEDINFO = (MDM_MASK_BEARERMODE|MDM_MASK_PROTOCOLINFO);
static const int MDM_SHIFT_EXTENDEDINFO = MDM_SHIFT_BEARERMODE;
static const int MDM_GET_BEARERMODE(_dwOptions) = (((_dwOptions)&MDM_MASK_BEARERMODE) >> MDM_SHIFT_BEARERMODE);
static const int MDM_SET_BEARERMODE(_dwOptions,_bm) = (((_dwOptions) &= ~MDM_MASK_BEARERMODE), ((_dwOptions) |= (((_bm)<<MDM_SHIFT_BEARERMODE)&MDM_MASK_BEARERMODE)));
static const int MDM_GET_PROTOCOLID(_dwOptions) = (((_dwOptions)&MDM_MASK_PROTOCOLID) >> MDM_SHIFT_PROTOCOLID);
static const int MDM_SET_PROTOCOLID(_dwOptions,_prot) = (((_dwOptions) &= ~MDM_MASK_PROTOCOLID), ((_dwOptions) |= (((_prot)<<MDM_SHIFT_PROTOCOLID)&MDM_MASK_PROTOCOLID)));
static const int MDM_GET_PROTOCOLDATA(_dwOptions) = (((_dwOptions)&MDM_MASK_PROTOCOLDATA) >> MDM_SHIFT_PROTOCOLDATA);
static const int MDM_SET_PROTOCOLDATA(_dwOptions,_pd) = (((_dwOptions) &= ~MDM_MASK_PROTOCOLDATA), ((_dwOptions) |= (((_pd)<<MDM_SHIFT_PROTOCOLDATA)&MDM_MASK_PROTOCOLDATA)));
static const int MDM_GET_PROTOCOLINFO(_dwOptions) = ((_dwOptions)&MDM_MASK_PROTOCOLINFO);
static const int MDM_SET_PROTOCOLINFO(_dwOptions,_pinfo) = (((_dwOptions) &= ~MDM_MASK_PROTOCOLINFO), ((_dwOptions) |= ((_pinfo)&MDM_MASK_PROTOCOLINFO)));
static const int MDM_GEN_PROTOCOLINFO(_pid,_pdata) = ((((_pid )<<MDM_SHIFT_PROTOCOLID )&MDM_MASK_PROTOCOLID ) |(((_pdata)<<MDM_SHIFT_PROTOCOLDATA)&MDM_MASK_PROTOCOLDATA));
static const int MDM_GET_EXTENDEDINFO(_dwOptions) = ((_dwOptions)&MDM_MASK_EXTENDEDINFO);
static const int MDM_SET_EXTENDEDINFO(_dwOptions,_extinfo) = (((_dwOptions) &= ~MDM_MASK_EXTENDEDINFO), ((_dwOptions) |= ((_extinfo) & MDM_MASK_EXTENDEDINFO)));
static const int MDM_GEN_EXTENDEDINFO(_bearermode,_pinfo) = (((_pinfo)&MDM_MASK_PROTOCOLINFO ) |(((_bearermode)<<MDM_SHIFT_BEARERMODE)&MDM_MASK_BEARERMODE));
static const int MDM_BEARERMODE_ANALOG = 0x0;
static const int MDM_BEARERMODE_ISDN = 0x1;
static const int MDM_BEARERMODE_GSM = 0x2;
static const int MDM_PROTOCOLID_DEFAULT = 0x0;
static const int MDM_PROTOCOLID_HDLCPPP = 0x1;
static const int MDM_PROTOCOLID_V128 = 0x2;
static const int MDM_PROTOCOLID_X75 = 0x3;
static const int MDM_PROTOCOLID_V110 = 0x4;
static const int MDM_PROTOCOLID_V120 = 0x5;
static const int MDM_PROTOCOLID_AUTO = 0x6;
static const int MDM_PROTOCOLID_ANALOG = 0x7;
static const int MDM_PROTOCOLID_GPRS = 0x8;
static const int MDM_PROTOCOLID_PIAFS = 0x9;
static const int MDM_SHIFT_HDLCPPP_SPEED = 0x0;
static const int MDM_MASK_HDLCPPP_SPEED = 0x7;
static const int MDM_HDLCPPP_SPEED_DEFAULT = 0x0;
static const int MDM_HDLCPPP_SPEED_64K = 0x1;
static const int MDM_HDLCPPP_SPEED_56K = 0x2;
static const int MDM_SHIFT_HDLCPPP_AUTH = 0x3;
static const int MDM_MASK_HDLCPPP_AUTH = (0x7<<3);
static const int MDM_HDLCPPP_AUTH_DEFAULT = 0x0;
static const int MDM_HDLCPPP_AUTH_NONE = 0x1;
static const int MDM_HDLCPPP_AUTH_PAP = 0x2;
static const int MDM_HDLCPPP_AUTH_CHAP = 0x3;
static const int MDM_HDLCPPP_AUTH_MSCHAP = 0x4;
static const int MDM_SHIFT_HDLCPPP_ML = 0x6;
static const int MDM_MASK_HDLCPPP_ML = (0x3<<6);
static const int MDM_HDLCPPP_ML_DEFAULT = 0x0;
static const int MDM_HDLCPPP_ML_NONE = 0x1;
static const int MDM_HDLCPPP_ML_2 = 0x2;
static const int MDM_GEN_HDLCPPP_PROTOCOL_DATA(_speed,_auth,_ml) = ((((_speed)<<MDM_SHIFT_HDLCPPP_SPEED)&MDM_MASK_HDLCPPP_SPEED) |(((_auth )<<MDM_SHIFT_HDLCPPP_AUTH )&MDM_MASK_HDLCPPP_AUTH ) |(((_ml )<<MDM_SHIFT_HDLCPPP_ML )&MDM_MASK_HDLCPPP_ML ));
static const int MDM_PROTOCOL_HDLCPPP_64K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_64K, MDM_HDLCPPP_AUTH_DEFAULT, MDM_HDLCPPP_ML_DEFAULT ) );
static const int MDM_PROTOCOL_HDLCPPP_56K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_56K, MDM_HDLCPPP_AUTH_DEFAULT, MDM_HDLCPPP_ML_DEFAULT ) );
static const int MDM_PROTOCOL_HDLCPPP_112K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_56K, MDM_HDLCPPP_AUTH_DEFAULT, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_112K_PAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_56K, MDM_HDLCPPP_AUTH_PAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_112K_CHAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_56K, MDM_HDLCPPP_AUTH_CHAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_56K, MDM_HDLCPPP_AUTH_MSCHAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_128K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_64K, MDM_HDLCPPP_AUTH_DEFAULT, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_128K_PAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_64K, MDM_HDLCPPP_AUTH_PAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_128K_CHAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_64K, MDM_HDLCPPP_AUTH_CHAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_HDLCPPP, MDM_GEN_HDLCPPP_PROTOCOL_DATA ( MDM_HDLCPPP_SPEED_64K, MDM_HDLCPPP_AUTH_MSCHAP, MDM_HDLCPPP_ML_2 ) );
static const int MDM_SHIFT_V120_SPEED = 0x0;
static const int MDM_MASK_V120_SPEED = 0x7;
static const int MDM_V120_SPEED_DEFAULT = 0x0;
static const int MDM_V120_SPEED_64K = 0x1;
static const int MDM_V120_SPEED_56K = 0x2;
static const int MDM_SHIFT_V120_ML = 0x6;
static const int MDM_MASK_V120_ML = (0x3<<6);
static const int MDM_V120_ML_DEFAULT = 0x0;
static const int MDM_V120_ML_NONE = 0x1;
static const int MDM_V120_ML_2 = 0x2;
static const int MDM_GEN_V120_PROTOCOL_DATA(_speed,_ml) = ((((_speed)<<MDM_SHIFT_V120_SPEED)&MDM_MASK_V120_SPEED) |(((_ml )<<MDM_SHIFT_V120_ML )&MDM_MASK_V120_ML ));
static const int MDM_PROTOCOL_V120_64K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V120, MDM_GEN_V120_PROTOCOL_DATA ( MDM_V120_SPEED_64K, MDM_V120_ML_NONE ) );
static const int MDM_PROTOCOL_V120_56K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V120, MDM_GEN_V120_PROTOCOL_DATA ( MDM_V120_SPEED_56K, MDM_V120_ML_NONE ) );
static const int MDM_PROTOCOL_V120_112K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V120, MDM_GEN_V120_PROTOCOL_DATA ( MDM_V120_SPEED_56K, MDM_V120_ML_2 ) );
static const int MDM_PROTOCOL_V120_128K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V120, MDM_GEN_V120_PROTOCOL_DATA ( MDM_V120_SPEED_64K, MDM_V120_ML_2 ) );
static const int MDM_SHIFT_X75_DATA = 0x0;
static const int MDM_MASK_X75_DATA = 0x7;
static const int MDM_X75_DATA_DEFAULT = 0x0;
static const int MDM_X75_DATA_64K = 0x1;
static const int MDM_X75_DATA_128K = 0x2;
static const int MDM_X75_DATA_T_70 = 0x3;
static const int MDM_X75_DATA_BTX = 0x4;
static const int MDM_GEN_X75_PROTOCOL_DATA(_data) = (((_data)<<MDM_SHIFT_X75_DATA)&MDM_MASK_X75_DATA);
static const int MDM_PROTOCOL_X75_64K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_X75, MDM_GEN_X75_PROTOCOL_DATA ( MDM_X75_DATA_64K ) );
static const int MDM_PROTOCOL_X75_128K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_X75, MDM_GEN_X75_PROTOCOL_DATA ( MDM_X75_DATA_128K ) );
static const int MDM_PROTOCOL_X75_T_70 = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_X75, MDM_GEN_X75_PROTOCOL_DATA ( MDM_X75_DATA_T_70 ) );
static const int MDM_PROTOCOL_X75_BTX = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_X75, MDM_GEN_X75_PROTOCOL_DATA ( MDM_X75_DATA_BTX ) );
static const int MDM_SHIFT_V110_SPEED = 0x0;
static const int MDM_MASK_V110_SPEED = 0xf;
static const int MDM_V110_SPEED_DEFAULT = 0x0;
static const int MDM_V110_SPEED_1DOT2K = 0x1;
static const int MDM_V110_SPEED_2DOT4K = 0x2;
static const int MDM_V110_SPEED_4DOT8K = 0x3;
static const int MDM_V110_SPEED_9DOT6K = 0x4;
static const int MDM_V110_SPEED_12DOT0K = 0x5;
static const int MDM_V110_SPEED_14DOT4K = 0x6;
static const int MDM_V110_SPEED_19DOT2K = 0x7;
static const int MDM_V110_SPEED_28DOT8K = 0x8;
static const int MDM_V110_SPEED_38DOT4K = 0x9;
static const int MDM_V110_SPEED_57DOT6K = 0xA;
static const int MDM_GEN_V110_PROTOCOL_DATA(_data) = (((_data)<<MDM_SHIFT_V110_SPEED)&MDM_MASK_V110_SPEED);
static const int MDM_PROTOCOL_V110_1DOT2K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_1DOT2K ) );
static const int MDM_PROTOCOL_V110_2DOT4K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_2DOT4K ) );
static const int MDM_PROTOCOL_V110_4DOT8K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_4DOT8K ) );
static const int MDM_PROTOCOL_V110_9DOT6K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_9DOT6K ) );
static const int MDM_PROTOCOL_V110_12DOT0K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_12DOT0K ) );
static const int MDM_PROTOCOL_V110_14DOT4K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_14DOT4K ) );
static const int MDM_PROTOCOL_V110_19DOT2K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_19DOT2K ) );
static const int MDM_PROTOCOL_V110_28DOT8K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_28DOT8K ) );
static const int MDM_PROTOCOL_V110_38DOT4K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_38DOT4K ) );
static const int MDM_PROTOCOL_V110_57DOT6K = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_V110, MDM_GEN_V110_PROTOCOL_DATA ( MDM_V110_SPEED_57DOT6K ) );
static const int MDM_SHIFT_AUTO_SPEED = 0x0;
static const int MDM_MASK_AUTO_SPEED = 0x7;
static const int MDM_AUTO_SPEED_DEFAULT = 0x0;
static const int MDM_SHIFT_AUTO_ML = 0x6;
static const int MDM_MASK_AUTO_ML = (0x3<<6);
static const int MDM_AUTO_ML_DEFAULT = 0x0;
static const int MDM_AUTO_ML_NONE = 0x1;
static const int MDM_AUTO_ML_2 = 0x2;
static const int MDM_GEN_AUTO_PROTOCOL_DATA(_speed,_ml) = ((((_speed)<<MDM_SHIFT_AUTO_SPEED)&MDM_MASK_AUTO_SPEED) |(((_ml )<<MDM_SHIFT_AUTO_ML )&MDM_MASK_AUTO_ML));
static const int MDM_PROTOCOL_AUTO_1CH = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_AUTO, MDM_GEN_AUTO_PROTOCOL_DATA ( MDM_AUTO_SPEED_DEFAULT, MDM_AUTO_ML_NONE ) );
static const int MDM_PROTOCOL_AUTO_2CH = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_AUTO, MDM_GEN_AUTO_PROTOCOL_DATA ( MDM_AUTO_SPEED_DEFAULT, MDM_AUTO_ML_2 ) );
static const int MDM_ANALOG_RLP_ON = 0x0;
static const int MDM_ANALOG_RLP_OFF = 0x1;
static const int MDM_ANALOG_V34 = 0x2;
static const int MDM_GEN_ANALOG_PROTOCOL_DATA(_rlp) = (_rlp);
static const int MDM_PROTOCOL_ANALOG_RLP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_ANALOG, MDM_GEN_ANALOG_PROTOCOL_DATA ( MDM_ANALOG_RLP_ON ) );
static const int MDM_PROTOCOL_ANALOG_NRLP = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_ANALOG, MDM_GEN_ANALOG_PROTOCOL_DATA ( MDM_ANALOG_RLP_OFF ) );
static const int MDM_PROTOCOL_ANALOG_V34 = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_ANALOG, MDM_GEN_ANALOG_PROTOCOL_DATA ( MDM_ANALOG_V34 ) );
static const int MDM_PROTOCOL_GPRS = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_GPRS, 0 );
static const int MDM_PIAFS_INCOMING = 0;
static const int MDM_PIAFS_OUTGOING = 1;
static const int MDM_PROTOCOL_PIAFS_INCOMING = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_PIAFS, MDM_PIAFS_INCOMING );
static const int MDM_PROTOCOL_PIAFS_OUTGOING = MDM_GEN_PROTOCOLINFO( MDM_PROTOCOLID_PIAFS, MDM_PIAFS_OUTGOING );
struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;
typedef HKL *LPHKL;
typedef UINT *LPUINT;
typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;
typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;
typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;
typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;
static const int STYLE_DESCRIPTION_SIZE = 32;
typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;
typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
static const int IMEMENUITEM_STRING_SIZE = 80;
typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;
typedef BOOL (* IMCENUMPROC)(HIMC, LPARAM);
HKL ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
static const int ImmInstallIME = ImmInstallIMEA;
HWND ImmGetDefaultIMEWnd( HWND);
UINT ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);
static const int ImmGetDescription = ImmGetDescriptionA;
UINT ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);
static const int ImmGetIMEFileName = ImmGetIMEFileNameA;
DWORD ImmGetProperty( HKL, DWORD);
BOOL ImmIsIME( HKL);
BOOL ImmSimulateHotKey( HWND, DWORD);
HIMC ImmCreateContext(void);
BOOL ImmDestroyContext( HIMC);
HIMC ImmGetContext( HWND);
BOOL ImmReleaseContext( HWND, HIMC);
HIMC ImmAssociateContext( HWND, HIMC);
BOOL ImmAssociateContextEx( HWND, HIMC, DWORD);
LONG ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
static const int ImmGetCompositionString = ImmGetCompositionStringA;
BOOL ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
static const int ImmSetCompositionString = ImmSetCompositionStringA;
DWORD ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);
static const int ImmGetCandidateListCount = ImmGetCandidateListCountA;
DWORD ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
static const int ImmGetCandidateList = ImmGetCandidateListA;
DWORD ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);
static const int ImmGetGuideLine = ImmGetGuideLineA;
BOOL ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL ImmGetOpenStatus( HIMC);
BOOL ImmSetOpenStatus( HIMC, BOOL);
BOOL ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);
static const int ImmGetCompositionFont = ImmGetCompositionFontA;
BOOL ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);
static const int ImmSetCompositionFont = ImmSetCompositionFontA;
BOOL ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);
static const int ImmConfigureIME = ImmConfigureIMEA;
LRESULT ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT ImmEscapeW( HKL, HIMC, UINT, LPVOID);
static const int ImmEscape = ImmEscapeA;
DWORD ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
static const int ImmGetConversionList = ImmGetConversionListA;
BOOL ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);
BOOL ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);
BOOL ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);
static const int ImmIsUIMessage = ImmIsUIMessageA;
UINT ImmGetVirtualKey( HWND);
typedef int ( *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int ( *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);
static const int REGISTERWORDENUMPROC = REGISTERWORDENUMPROCA;
BOOL ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);
static const int ImmRegisterWord = ImmRegisterWordA;
BOOL ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);
static const int ImmUnregisterWord = ImmUnregisterWordA;
UINT ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);
static const int ImmGetRegisterWordStyle = ImmGetRegisterWordStyleA;
UINT ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);
static const int ImmEnumRegisterWord = ImmEnumRegisterWordA;
BOOL ImmDisableIME( DWORD);
BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);
static const int ImmGetImeMenuItems = ImmGetImeMenuItemsA;
BOOL ImmDisableTextFrameService(DWORD idThread);
static const int IMC_GETCANDIDATEPOS = 0x0007;
static const int IMC_SETCANDIDATEPOS = 0x0008;
static const int IMC_GETCOMPOSITIONFONT = 0x0009;
static const int IMC_SETCOMPOSITIONFONT = 0x000A;
static const int IMC_GETCOMPOSITIONWINDOW = 0x000B;
static const int IMC_SETCOMPOSITIONWINDOW = 0x000C;
static const double IMC_GETSTATUSWINDOWPOS = 0x000F;
static const int IMC_SETSTATUSWINDOWPOS = 0x0010;
static const int IMC_CLOSESTATUSWINDOW = 0x0021;
static const int IMC_OPENSTATUSWINDOW = 0x0022;
static const int NI_OPENCANDIDATE = 0x0010;
static const int NI_CLOSECANDIDATE = 0x0011;
static const int NI_SELECTCANDIDATESTR = 0x0012;
static const int NI_CHANGECANDIDATELIST = 0x0013;
static const int NI_FINALIZECONVERSIONRESULT = 0x0014;
static const int NI_COMPOSITIONSTR = 0x0015;
static const int NI_SETCANDIDATE_PAGESTART = 0x0016;
static const int NI_SETCANDIDATE_PAGESIZE = 0x0017;
static const int NI_IMEMENUSELECTED = 0x0018;
static const int ISC_SHOWUICANDIDATEWINDOW = 0x00000001;
static const int ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000;
static const int ISC_SHOWUIGUIDELINE = 0x40000000;
static const double ISC_SHOWUIALLCANDIDATEWINDOW = 0x0000000F;
static const double ISC_SHOWUIALL = 0xC000000F;
static const int CPS_COMPLETE = 0x0001;
static const int CPS_CONVERT = 0x0002;
static const int CPS_REVERT = 0x0003;
static const int CPS_CANCEL = 0x0004;
static const int MOD_ALT = 0x0001;
static const int MOD_CONTROL = 0x0002;
static const int MOD_SHIFT = 0x0004;
static const int MOD_LEFT = 0x8000;
static const int MOD_RIGHT = 0x4000;
static const int MOD_ON_KEYUP = 0x0800;
static const int MOD_IGNORE_ALL_MODIFIER = 0x0400;
static const int IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10;
static const int IME_CHOTKEY_SHAPE_TOGGLE = 0x11;
static const int IME_CHOTKEY_SYMBOL_TOGGLE = 0x12;
static const int IME_JHOTKEY_CLOSE_OPEN = 0x30;
static const int IME_KHOTKEY_SHAPE_TOGGLE = 0x50;
static const int IME_KHOTKEY_HANJACONVERT = 0x51;
static const int IME_KHOTKEY_ENGLISH = 0x52;
static const int IME_THOTKEY_IME_NONIME_TOGGLE = 0x70;
static const int IME_THOTKEY_SHAPE_TOGGLE = 0x71;
static const int IME_THOTKEY_SYMBOL_TOGGLE = 0x72;
static const int IME_HOTKEY_DSWITCH_FIRST = 0x100;
static const double IME_HOTKEY_DSWITCH_LAST = 0x11F;
static const int IME_HOTKEY_PRIVATE_FIRST = 0x200;
static const int IME_ITHOTKEY_RESEND_RESULTSTR = 0x200;
static const int IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201;
static const int IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202;
static const int IME_ITHOTKEY_RECONVERTSTRING = 0x203;
static const double IME_HOTKEY_PRIVATE_LAST = 0x21F;
static const int GCS_COMPREADSTR = 0x0001;
static const int GCS_COMPREADATTR = 0x0002;
static const int GCS_COMPREADCLAUSE = 0x0004;
static const int GCS_COMPSTR = 0x0008;
static const int GCS_COMPATTR = 0x0010;
static const int GCS_COMPCLAUSE = 0x0020;
static const int GCS_CURSORPOS = 0x0080;
static const int GCS_DELTASTART = 0x0100;
static const int GCS_RESULTREADSTR = 0x0200;
static const int GCS_RESULTREADCLAUSE = 0x0400;
static const int GCS_RESULTSTR = 0x0800;
static const int GCS_RESULTCLAUSE = 0x1000;
static const int CS_INSERTCHAR = 0x2000;
static const int CS_NOMOVECARET = 0x4000;
static const int IMEVER_0310 = 0x0003000A;
static const int IMEVER_0400 = 0x00040000;
static const int IME_PROP_AT_CARET = 0x00010000;
static const int IME_PROP_SPECIAL_UI = 0x00020000;
static const int IME_PROP_CANDLIST_START_FROM_1 = 0x00040000;
static const int IME_PROP_UNICODE = 0x00080000;
static const int IME_PROP_COMPLETE_ON_UNSELECT = 0x00100000;
static const int UI_CAP_2700 = 0x00000001;
static const int UI_CAP_ROT90 = 0x00000002;
static const int UI_CAP_ROTANY = 0x00000004;
static const int SCS_CAP_COMPSTR = 0x00000001;
static const int SCS_CAP_MAKEREAD = 0x00000002;
static const int SCS_CAP_SETRECONVERTSTRING = 0x00000004;
static const int SELECT_CAP_CONVERSION = 0x00000001;
static const int SELECT_CAP_SENTENCE = 0x00000002;
static const int GGL_LEVEL = 0x00000001;
static const int GGL_INDEX = 0x00000002;
static const int GGL_STRING = 0x00000003;
static const int GGL_PRIVATE = 0x00000004;
static const int GL_LEVEL_NOGUIDELINE = 0x00000000;
static const int GL_LEVEL_FATAL = 0x00000001;
static const int GL_LEVEL_ERROR = 0x00000002;
static const int GL_LEVEL_WARNING = 0x00000003;
static const int GL_LEVEL_INFORMATION = 0x00000004;
static const int GL_ID_UNKNOWN = 0x00000000;
static const int GL_ID_NOMODULE = 0x00000001;
static const int GL_ID_NODICTIONARY = 0x00000010;
static const int GL_ID_CANNOTSAVE = 0x00000011;
static const int GL_ID_NOCONVERT = 0x00000020;
static const int GL_ID_TYPINGERROR = 0x00000021;
static const int GL_ID_TOOMANYSTROKE = 0x00000022;
static const int GL_ID_READINGCONFLICT = 0x00000023;
static const int GL_ID_INPUTREADING = 0x00000024;
static const int GL_ID_INPUTRADICAL = 0x00000025;
static const int GL_ID_INPUTCODE = 0x00000026;
static const int GL_ID_INPUTSYMBOL = 0x00000027;
static const int GL_ID_CHOOSECANDIDATE = 0x00000028;
static const int GL_ID_REVERSECONVERSION = 0x00000029;
static const int GL_ID_PRIVATE_FIRST = 0x00008000;
static const int GL_ID_PRIVATE_LAST = 0x0000FFFF;
static const int IGP_GETIMEVERSION = (DWORD)(-4);
static const int IGP_PROPERTY = 0x00000004;
static const int IGP_CONVERSION = 0x00000008;
static const int IGP_SENTENCE = 0x0000000c;
static const int IGP_UI = 0x00000010;
static const int IGP_SETCOMPSTR = 0x00000014;
static const int IGP_SELECT = 0x00000018;
static const int SCS_SETSTR = (GCS_COMPREADSTR|GCS_COMPSTR);
static const int SCS_CHANGEATTR = (GCS_COMPREADATTR|GCS_COMPATTR);
static const int SCS_CHANGECLAUSE = (GCS_COMPREADCLAUSE|GCS_COMPCLAUSE);
static const int SCS_SETRECONVERTSTRING = 0x00010000;
static const int SCS_QUERYRECONVERTSTRING = 0x00020000;
static const int ATTR_INPUT = 0x00;
static const int ATTR_TARGET_CONVERTED = 0x01;
static const int ATTR_CONVERTED = 0x02;
static const int ATTR_TARGET_NOTCONVERTED = 0x03;
static const int ATTR_INPUT_ERROR = 0x04;
static const int ATTR_FIXEDCONVERTED = 0x05;
static const int CFS_DEFAULT = 0x0000;
static const int CFS_RECT = 0x0001;
static const int CFS_POINT = 0x0002;
static const int CFS_FORCE_POSITION = 0x0020;
static const int CFS_CANDIDATEPOS = 0x0040;
static const int CFS_EXCLUDE = 0x0080;
static const int GCL_CONVERSION = 0x0001;
static const int GCL_REVERSECONVERSION = 0x0002;
static const int GCL_REVERSE_LENGTH = 0x0003;
static const int IME_CMODE_ALPHANUMERIC = 0x0000;
static const int IME_CMODE_NATIVE = 0x0001;
static const int IME_CMODE_CHINESE = IME_CMODE_NATIVE;
static const int IME_CMODE_HANGUL = IME_CMODE_NATIVE;
static const int IME_CMODE_JAPANESE = IME_CMODE_NATIVE;
static const int IME_CMODE_KATAKANA = 0x0002;
static const int IME_CMODE_LANGUAGE = 0x0003;
static const int IME_CMODE_FULLSHAPE = 0x0008;
static const int IME_CMODE_ROMAN = 0x0010;
static const int IME_CMODE_CHARCODE = 0x0020;
static const int IME_CMODE_HANJACONVERT = 0x0040;
static const int IME_CMODE_HANGEUL = IME_CMODE_NATIVE;
static const int IME_CMODE_SOFTKBD = 0x0080;
static const int IME_CMODE_NOCONVERSION = 0x0100;
static const int IME_CMODE_EUDC = 0x0200;
static const int IME_CMODE_SYMBOL = 0x0400;
static const int IME_CMODE_FIXED = 0x0800;
static const int IME_CMODE_RESERVED = 0xF0000000;
static const int IME_SMODE_NONE = 0x0000;
static const int IME_SMODE_PLAURALCLAUSE = 0x0001;
static const int IME_SMODE_SINGLECONVERT = 0x0002;
static const int IME_SMODE_AUTOMATIC = 0x0004;
static const int IME_SMODE_PHRASEPREDICT = 0x0008;
static const int IME_SMODE_CONVERSATION = 0x0010;
static const int IME_SMODE_RESERVED = 0x0000F000;
static const int IME_CAND_UNKNOWN = 0x0000;
static const int IME_CAND_READ = 0x0001;
static const int IME_CAND_CODE = 0x0002;
static const int IME_CAND_MEANING = 0x0003;
static const int IME_CAND_RADICAL = 0x0004;
static const int IME_CAND_STROKE = 0x0005;
static const int IMN_CLOSESTATUSWINDOW = 0x0001;
static const int IMN_OPENSTATUSWINDOW = 0x0002;
static const int IMN_CHANGECANDIDATE = 0x0003;
static const int IMN_CLOSECANDIDATE = 0x0004;
static const int IMN_OPENCANDIDATE = 0x0005;
static const int IMN_SETCONVERSIONMODE = 0x0006;
static const int IMN_SETSENTENCEMODE = 0x0007;
static const int IMN_SETOPENSTATUS = 0x0008;
static const int IMN_SETCANDIDATEPOS = 0x0009;
static const int IMN_SETCOMPOSITIONFONT = 0x000A;
static const int IMN_SETCOMPOSITIONWINDOW = 0x000B;
static const int IMN_SETSTATUSWINDOWPOS = 0x000C;
static const int IMN_GUIDELINE = 0x000D;
static const int IMN_PRIVATE = 0x000E;
static const int IMR_COMPOSITIONWINDOW = 0x0001;
static const int IMR_CANDIDATEWINDOW = 0x0002;
static const int IMR_COMPOSITIONFONT = 0x0003;
static const int IMR_RECONVERTSTRING = 0x0004;
static const int IMR_CONFIRMRECONVERTSTRING = 0x0005;
static const int IMR_QUERYCHARPOSITION = 0x0006;
static const int IMR_DOCUMENTFEED = 0x0007;
static const int IMM_ERROR_NODATA = (-1);
static const int IMM_ERROR_GENERAL = (-2);
static const int IME_CONFIG_GENERAL = 1;
static const int IME_CONFIG_REGISTERWORD = 2;
static const int IME_CONFIG_SELECTDICTIONARY = 3;
static const int IME_ESC_QUERY_SUPPORT = 0x0003;
static const int IME_ESC_RESERVED_FIRST = 0x0004;
static const int IME_ESC_RESERVED_LAST = 0x07FF;
static const int IME_ESC_PRIVATE_FIRST = 0x0800;
static const int IME_ESC_PRIVATE_LAST = 0x0FFF;
static const int IME_ESC_SEQUENCE_TO_INTERNAL = 0x1001;
static const int IME_ESC_GET_EUDC_DICTIONARY = 0x1003;
static const int IME_ESC_SET_EUDC_DICTIONARY = 0x1004;
static const int IME_ESC_MAX_KEY = 0x1005;
static const int IME_ESC_IME_NAME = 0x1006;
static const int IME_ESC_SYNC_HOTKEY = 0x1007;
static const int IME_ESC_HANJA_MODE = 0x1008;
static const int IME_ESC_AUTOMATA = 0x1009;
static const int IME_ESC_PRIVATE_HOTKEY = 0x100a;
static const int IME_ESC_GETHELPFILENAME = 0x100b;
static const int IME_REGWORD_STYLE_EUDC = 0x00000001;
static const int IME_REGWORD_STYLE_USER_FIRST = 0x80000000;
static const int IME_REGWORD_STYLE_USER_LAST = 0xFFFFFFFF;
static const int IACE_CHILDREN = 0x0001;
static const int IACE_DEFAULT = 0x0010;
static const int IACE_IGNORENOCONTEXT = 0x0020;
static const int IGIMIF_RIGHTMENU = 0x0001;
static const int IGIMII_CMODE = 0x0001;
static const int IGIMII_SMODE = 0x0002;
static const int IGIMII_CONFIGURE = 0x0004;
static const int IGIMII_TOOLS = 0x0008;
static const int IGIMII_HELP = 0x0010;
static const int IGIMII_OTHER = 0x0020;
static const int IGIMII_INPUTTOOLS = 0x0040;
static const int IMFT_RADIOCHECK = 0x00001;
static const int IMFT_SEPARATOR = 0x00002;
static const int IMFT_SUBMENU = 0x00004;
static const int IMFS_GRAYED = MFS_GRAYED;
static const int IMFS_DISABLED = MFS_DISABLED;
static const int IMFS_CHECKED = MFS_CHECKED;
static const int IMFS_HILITE = MFS_HILITE;
static const int IMFS_ENABLED = MFS_ENABLED;
static const int IMFS_UNCHECKED = MFS_UNCHECKED;
static const int IMFS_UNHILITE = MFS_UNHILITE;
static const int IMFS_DEFAULT = MFS_DEFAULT;
static const int SOFTKEYBOARD_TYPE_T1 = 0x0001;
static const int SOFTKEYBOARD_TYPE_C1 = 0x0002;
static const int WINSOCK_VERSION = MAKEWORD(2,2);
static const int WINSOCK_API_LINKAGE = ;
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned __int64 u_int64;
static const int WS2DEF_INLINE = inline;
typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;
static const int s_addr = S_un.S_addr;
static const int s_host = S_un.S_un_b.s_b2;
static const int s_net = S_un.S_un_b.s_b1;
static const int s_imp = S_un.S_un_w.s_w2;
static const int s_impno = S_un.S_un_b.s_b4;
static const int s_lh = S_un.S_un_b.s_b3;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
typedef USHORT ADDRESS_FAMILY;
static const int AF_UNSPEC = 0;
static const int AF_UNIX = 1;
static const int AF_INET = 2;
static const int AF_IMPLINK = 3;
static const int AF_PUP = 4;
static const int AF_CHAOS = 5;
static const int AF_NS = 6;
static const int AF_IPX = AF_NS;
static const int AF_ISO = 7;
static const int AF_OSI = AF_ISO;
static const int AF_ECMA = 8;
static const int AF_DATAKIT = 9;
static const int AF_CCITT = 10;
static const int AF_SNA = 11;
static const int AF_DECnet = 12;
static const int AF_DLI = 13;
static const int AF_LAT = 14;
static const int AF_HYLINK = 15;
static const int AF_APPLETALK = 16;
static const int AF_NETBIOS = 17;
static const int AF_VOICEVIEW = 18;
static const int AF_FIREFOX = 19;
static const int AF_UNKNOWN1 = 20;
static const int AF_BAN = 21;
static const int AF_ATM = 22;
static const int AF_INET6 = 23;
static const int AF_CLUSTER = 24;
static const int AF_12844 = 25;
static const int AF_IRDA = 26;
static const int AF_NETDES = 28;
static const int AF_TCNPROCESS = 29;
static const int AF_TCNMESSAGE = 30;
static const int AF_ICLFXBM = 31;
static const int AF_BTH = 32;
static const int AF_LINK = 33;
static const int AF_MAX = 34;
static const int SOCK_STREAM = 1;
static const int SOCK_DGRAM = 2;
static const int SOCK_RAW = 3;
static const int SOCK_RDM = 4;
static const int SOCK_SEQPACKET = 5;
static const int SOL_SOCKET = 0xffff;
static const int SO_DEBUG = 0x0001;
static const int SO_ACCEPTCONN = 0x0002;
static const int SO_REUSEADDR = 0x0004;
static const int SO_KEEPALIVE = 0x0008;
static const int SO_DONTROUTE = 0x0010;
static const int SO_BROADCAST = 0x0020;
static const int SO_USELOOPBACK = 0x0040;
static const int SO_LINGER = 0x0080;
static const int SO_OOBINLINE = 0x0100;
static const int SO_DONTLINGER = (int)(~SO_LINGER);
static const int SO_EXCLUSIVEADDRUSE = ((int)(~SO_REUSEADDR));
static const int SO_SNDBUF = 0x1001;
static const int SO_RCVBUF = 0x1002;
static const int SO_SNDLOWAT = 0x1003;
static const int SO_RCVLOWAT = 0x1004;
static const int SO_SNDTIMEO = 0x1005;
static const int SO_RCVTIMEO = 0x1006;
static const int SO_ERROR = 0x1007;
static const int SO_TYPE = 0x1008;
static const int SO_BSP_STATE = 0x1009;
static const int SO_GROUP_ID = 0x2001;
static const int SO_GROUP_PRIORITY = 0x2002;
static const int SO_MAX_MSG_SIZE = 0x2003;
static const int SO_CONDITIONAL_ACCEPT = 0x3002;
static const int SO_PAUSE_ACCEPT = 0x3003;
static const int SO_COMPARTMENT_ID = 0x3004;
static const int SO_RANDOMIZE_PORT = 0x3005;
static const int SO_PORT_SCALABILITY = 0x3006;
static const int WSK_SO_BASE = 0x4000;
static const int TCP_NODELAY = 0x0001;
typedef struct sockaddr {
    ADDRESS_FAMILY sa_family; // Address family.
    CHAR sa_data[14]; // Up to 14 bytes of direct address.
} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;
typedef struct _SOCKET_ADDRESS {
    LPSOCKADDR lpSockaddr;
    INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;
typedef struct _SOCKET_ADDRESS_LIST {
    INT iAddressCount;
    SOCKET_ADDRESS Address[1];
} SOCKET_ADDRESS_LIST, *PSOCKET_ADDRESS_LIST, *LPSOCKET_ADDRESS_LIST;
static const int SIZEOF_SOCKET_ADDRESS_LIST(AddressCount) = (FIELD_OFFSET(SOCKET_ADDRESS_LIST, Address) + AddressCount * sizeof(SOCKET_ADDRESS));
typedef struct _CSADDR_INFO {
    SOCKET_ADDRESS LocalAddr ;
    SOCKET_ADDRESS RemoteAddr ;
    INT iSocketType ;
    INT iProtocol ;
} CSADDR_INFO, *PCSADDR_INFO, * LPCSADDR_INFO ;
static const int _SS_MAXSIZE = 128;
static const int _SS_ALIGNSIZE = (sizeof(__int64));
static const int _SS_PAD1SIZE = (_SS_ALIGNSIZE - sizeof(USHORT));
static const int _SS_PAD2SIZE = (_SS_MAXSIZE - (sizeof(USHORT) + _SS_PAD1SIZE + _SS_ALIGNSIZE));
typedef struct sockaddr_storage {
    ADDRESS_FAMILY ss_family; // address family
    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))]; // 6 byte pad, this is to make
    __int64 __ss_align; // Field to force desired structure
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))]; // 112 byte pad to achieve desired size;
} SOCKADDR_STORAGE_LH, *PSOCKADDR_STORAGE_LH, *LPSOCKADDR_STORAGE_LH;
typedef struct sockaddr_storage_xp {
    short ss_family; // Address family.
    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))]; // 6 byte pad, this is to make
    __int64 __ss_align; // Field to force desired structure
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))]; // 112 byte pad to achieve desired size;
} SOCKADDR_STORAGE_XP, *PSOCKADDR_STORAGE_XP, *LPSOCKADDR_STORAGE_XP;
typedef SOCKADDR_STORAGE_LH SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE, *LPSOCKADDR_STORAGE;
static const int IOC_UNIX = 0x00000000;
static const int IOC_WS2 = 0x08000000;
static const int IOC_PROTOCOL = 0x10000000;
static const int IOC_VENDOR = 0x18000000;
static const int IOC_WSK = (IOC_WS2|0x07000000);
static const int _WSAIO(x,y) = (IOC_VOID|(x)|(y));
static const int _WSAIOR(x,y) = (IOC_OUT|(x)|(y));
static const int _WSAIOW(x,y) = (IOC_IN|(x)|(y));
static const int _WSAIORW(x,y) = (IOC_INOUT|(x)|(y));
static const int SIO_ASSOCIATE_HANDLE = _WSAIOW(IOC_WS2,1);
static const int SIO_ENABLE_CIRCULAR_QUEUEING = _WSAIO(IOC_WS2,2);
static const int SIO_FIND_ROUTE = _WSAIOR(IOC_WS2,3);
static const int SIO_FLUSH = _WSAIO(IOC_WS2,4);
static const int SIO_GET_BROADCAST_ADDRESS = _WSAIOR(IOC_WS2,5);
static const int SIO_GET_EXTENSION_FUNCTION_POINTER = _WSAIORW(IOC_WS2,6);
static const int SIO_GET_QOS = _WSAIORW(IOC_WS2,7);
static const int SIO_GET_GROUP_QOS = _WSAIORW(IOC_WS2,8);
static const int SIO_MULTIPOINT_LOOPBACK = _WSAIOW(IOC_WS2,9);
static const int SIO_MULTICAST_SCOPE = _WSAIOW(IOC_WS2,10);
static const int SIO_SET_QOS = _WSAIOW(IOC_WS2,11);
static const int SIO_SET_GROUP_QOS = _WSAIOW(IOC_WS2,12);
static const int SIO_TRANSLATE_HANDLE = _WSAIORW(IOC_WS2,13);
static const int SIO_ROUTING_INTERFACE_QUERY = _WSAIORW(IOC_WS2,20);
static const int SIO_ROUTING_INTERFACE_CHANGE = _WSAIOW(IOC_WS2,21);
static const int SIO_ADDRESS_LIST_QUERY = _WSAIOR(IOC_WS2,22);
static const int SIO_ADDRESS_LIST_CHANGE = _WSAIO(IOC_WS2,23);
static const int SIO_QUERY_TARGET_PNP_HANDLE = _WSAIOR(IOC_WS2,24);
static const int SIO_ADDRESS_LIST_SORT = _WSAIORW(IOC_WS2,25);
static const int SIO_RESERVED_1 = _WSAIOW(IOC_WS2,26);
static const int SIO_RESERVED_2 = _WSAIOW(IOC_WS2,33);
static const int IPPROTO_IP = 0;
typedef enum {
    IPPROTO_HOPOPTS = 0, // IPv6 Hop-by-Hop options
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_GGP = 3,
    IPPROTO_IPV4 = 4,
    IPPROTO_ST = 5,
    IPPROTO_TCP = 6,
    IPPROTO_CBT = 7,
    IPPROTO_EGP = 8,
    IPPROTO_IGP = 9,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_RDP = 27,
    IPPROTO_IPV6 = 41, // IPv6 header
    IPPROTO_ROUTING = 43, // IPv6 Routing header
    IPPROTO_FRAGMENT = 44, // IPv6 fragmentation header
    IPPROTO_ESP = 50, // encapsulating security payload
    IPPROTO_AH = 51, // authentication header
    IPPROTO_ICMPV6 = 58, // ICMPv6
    IPPROTO_NONE = 59, // IPv6 no next header
    IPPROTO_DSTOPTS = 60, // IPv6 Destination options
    IPPROTO_ND = 77,
    IPPROTO_ICLFXBM = 78,
    IPPROTO_PIM = 103,
    IPPROTO_PGM = 113,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
    IPPROTO_RESERVED_RAW = 257,
    IPPROTO_RESERVED_IPSEC = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD = 259,
    IPPROTO_RESERVED_MAX = 260
} IPPROTO, *PIPROTO;
static const int IPPORT_TCPMUX = 1;
static const int IPPORT_ECHO = 7;
static const int IPPORT_DISCARD = 9;
static const int IPPORT_SYSTAT = 11;
static const int IPPORT_DAYTIME = 13;
static const int IPPORT_NETSTAT = 15;
static const int IPPORT_QOTD = 17;
static const int IPPORT_MSP = 18;
static const int IPPORT_CHARGEN = 19;
static const int IPPORT_FTP_DATA = 20;
static const int IPPORT_FTP = 21;
static const int IPPORT_TELNET = 23;
static const int IPPORT_SMTP = 25;
static const int IPPORT_TIMESERVER = 37;
static const int IPPORT_NAMESERVER = 42;
static const int IPPORT_WHOIS = 43;
static const int IPPORT_MTP = 57;
static const int IPPORT_TFTP = 69;
static const int IPPORT_RJE = 77;
static const int IPPORT_FINGER = 79;
static const int IPPORT_TTYLINK = 87;
static const int IPPORT_SUPDUP = 95;
static const int IPPORT_POP3 = 110;
static const int IPPORT_NTP = 123;
static const int IPPORT_EPMAP = 135;
static const int IPPORT_NETBIOS_NS = 137;
static const int IPPORT_NETBIOS_DGM = 138;
static const int IPPORT_NETBIOS_SSN = 139;
static const int IPPORT_IMAP = 143;
static const int IPPORT_SNMP = 161;
static const int IPPORT_SNMP_TRAP = 162;
static const int IPPORT_IMAP3 = 220;
static const int IPPORT_LDAP = 389;
static const int IPPORT_HTTPS = 443;
static const int IPPORT_MICROSOFT_DS = 445;
static const int IPPORT_EXECSERVER = 512;
static const int IPPORT_LOGINSERVER = 513;
static const int IPPORT_CMDSERVER = 514;
static const int IPPORT_EFSSERVER = 520;
static const int IPPORT_BIFFUDP = 512;
static const int IPPORT_WHOSERVER = 513;
static const int IPPORT_ROUTESERVER = 520;
static const int IPPORT_RESERVED = 1024;
static const int IPPORT_REGISTERED_MIN = IPPORT_RESERVED;
static const int IPPORT_REGISTERED_MAX = 0xbfff;
static const int IPPORT_DYNAMIC_MIN = 0xc000;
static const int IPPORT_DYNAMIC_MAX = 0xffff;
static const int IN_CLASSA(i) = (((LONG)(i) & 0x80000000) == 0);
static const int IN_CLASSA_NET = 0xff000000;
static const int IN_CLASSA_NSHIFT = 24;
static const int IN_CLASSA_HOST = 0x00ffffff;
static const int IN_CLASSA_MAX = 128;
static const int IN_CLASSB(i) = (((LONG)(i) & 0xc0000000) == 0x80000000);
static const int IN_CLASSB_NET = 0xffff0000;
static const int IN_CLASSB_NSHIFT = 16;
static const int IN_CLASSB_HOST = 0x0000ffff;
static const int IN_CLASSB_MAX = 65536;
static const int IN_CLASSC(i) = (((LONG)(i) & 0xe0000000) == 0xc0000000);
static const int IN_CLASSC_NET = 0xffffff00;
static const int IN_CLASSC_NSHIFT = 8;
static const int IN_CLASSC_HOST = 0x000000ff;
static const int IN_CLASSD(i) = (((long)(i) & 0xf0000000) == 0xe0000000);
static const int IN_CLASSD_NET = 0xf0000000;
static const int IN_CLASSD_NSHIFT = 28;
static const int IN_CLASSD_HOST = 0x0fffffff;
static const int IN_MULTICAST(i) = IN_CLASSD(i);
static const int INADDR_ANY = (ULONG)0x00000000;
static const int INADDR_LOOPBACK = 0x7f000001;
static const int INADDR_BROADCAST = (ULONG)0xffffffff;
static const int INADDR_NONE = 0xffffffff;
typedef enum {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
} SCOPE_LEVEL;
typedef struct {
    union {
        struct {
            ULONG Zone : 28;
            ULONG Level : 4;
        };
        ULONG Value;
    };
} SCOPE_ID, *PSCOPE_ID;
static const int SCOPEID_UNSPECIFIED_INIT = { 0 };
typedef struct sockaddr_in {
    ADDRESS_FAMILY sin_family;
    USHORT sin_port;
    IN_ADDR sin_addr;
    CHAR sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN;
typedef struct sockaddr_dl {
    ADDRESS_FAMILY sdl_family;
    UCHAR sdl_data[8];
    UCHAR sdl_zero[4];
} SOCKADDR_DL, *PSOCKADDR_DL;
static const int IOCPARM_MASK = 0x7f;
static const int IOC_VOID = 0x20000000;
static const int IOC_OUT = 0x40000000;
static const int IOC_IN = 0x80000000;
static const int IOC_INOUT = (IOC_IN|IOC_OUT);
static const int _IO(x,y) = (IOC_VOID|((x)<<8)|(y));
static const int _IOR(x,y,t) = (IOC_OUT|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
static const int _IOW(x,y,t) = (IOC_IN|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
typedef struct _WSABUF {
    ULONG len; /* the length of the buffer */
    CHAR *buf; /* the pointer to the buffer */
} WSABUF, * LPWSABUF;
typedef struct _WSAMSG {
    LPSOCKADDR name; /* Remote address */
    INT namelen; /* Remote address length */
    LPWSABUF lpBuffers; /* Data buffer array */
    ULONG dwBufferCount; /* Number of elements in the array */
    WSABUF Control; /* Control buffer */
    ULONG dwFlags; /* Flags */
} WSAMSG, *PWSAMSG, * LPWSAMSG;
static const int _WSACMSGHDR = cmsghdr;
typedef struct cmsghdr {
    SIZE_T cmsg_len;
    INT cmsg_level;
    INT cmsg_type;
} WSACMSGHDR, *PWSACMSGHDR, *LPWSACMSGHDR;
typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
static const int WSA_CMSGHDR_ALIGN(length) = ( ((length) + TYPE_ALIGNMENT(WSACMSGHDR)-1) & (~(TYPE_ALIGNMENT(WSACMSGHDR)-1)) );
static const int WSA_CMSGDATA_ALIGN(length) = ( ((length) + MAX_NATURAL_ALIGNMENT-1) & (~(MAX_NATURAL_ALIGNMENT-1)) );
static const int CMSGHDR_ALIGN = WSA_CMSGHDR_ALIGN;
static const int CMSGDATA_ALIGN = WSA_CMSGDATA_ALIGN;
static const int WSA_CMSG_FIRSTHDR(msg) = ( ((msg)->Control.len >= sizeof(WSACMSGHDR)) ? (LPWSACMSGHDR)(msg)->Control.buf : (LPWSACMSGHDR)NULL );
static const int CMSG_FIRSTHDR = WSA_CMSG_FIRSTHDR;
static const int WSA_CMSG_NXTHDR(msg,cmsg) = ( ((cmsg) == NULL) ? WSA_CMSG_FIRSTHDR(msg) : ( ( ((PUCHAR)(cmsg) + WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len) + sizeof(WSACMSGHDR) ) > (PUCHAR)((msg)->Control.buf) + (msg)->Control.len ) ? (LPWSACMSGHDR)NULL : (LPWSACMSGHDR)((PUCHAR)(cmsg) + WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len)) ) );
static const int CMSG_NXTHDR = WSA_CMSG_NXTHDR;
static const int WSA_CMSG_DATA(cmsg) = ( (PUCHAR)(cmsg) + WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) );
static const int WSA_CMSG_SPACE(length) = (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR) + WSA_CMSGHDR_ALIGN(length)));
static const int CMSG_SPACE = WSA_CMSG_SPACE;
static const int WSA_CMSG_LEN(length) = (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) + length);
static const int CMSG_LEN = WSA_CMSG_LEN;
static const int MSG_TRUNC = 0x0100;
static const int MSG_CTRUNC = 0x0200;
static const int MSG_BCAST = 0x0400;
static const int MSG_MCAST = 0x0800;
static const int AI_PASSIVE = 0x00000001;
static const int AI_CANONNAME = 0x00000002;
static const int AI_NUMERICHOST = 0x00000004;
static const int AI_NUMERICSERV = 0x00000008;
static const int AI_ALL = 0x00000100;
static const int AI_ADDRCONFIG = 0x00000400;
static const int AI_V4MAPPED = 0x00000800;
static const int AI_NON_AUTHORITATIVE = 0x00004000;
static const int AI_SECURE = 0x00008000;
static const int AI_RETURN_PREFERRED_NAMES = 0x00010000;
static const int AI_FQDN = 0x00020000;
static const int AI_FILESERVER = 0x00040000;
typedef struct addrinfo
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    char * ai_canonname; // Canonical name for nodename
    struct sockaddr * ai_addr; // Binary address
    struct addrinfo * ai_next; // Next structure in linked list
}
ADDRINFOA, *PADDRINFOA;
typedef struct addrinfoW
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    PWSTR ai_canonname; // Canonical name for nodename
    struct sockaddr * ai_addr; // Binary address
    struct addrinfoW * ai_next; // Next structure in linked list
}
ADDRINFOW, *PADDRINFOW;
typedef struct addrinfoexA
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    char *ai_canonname; // Canonical name for nodename
    struct sockaddr *ai_addr; // Binary address
    void *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexA *ai_next; // Next structure in linked list
} ADDRINFOEXA, *PADDRINFOEXA, *LPADDRINFOEXA;
typedef struct addrinfoexW
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    PWSTR ai_canonname; // Canonical name for nodename
    struct sockaddr *ai_addr; // Binary address
    void *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexW *ai_next; // Next structure in linked list
} ADDRINFOEXW, *PADDRINFOEXW, *LPADDRINFOEXW;
static const int NS_ALL = (0);
static const int NS_SAP = (1);
static const int NS_NDS = (2);
static const int NS_PEER_BROWSE = (3);
static const int NS_SLP = (5);
static const int NS_DHCP = (6);
static const int NS_TCPIP_LOCAL = (10);
static const int NS_TCPIP_HOSTS = (11);
static const int NS_DNS = (12);
static const int NS_NETBT = (13);
static const int NS_WINS = (14);
static const int NS_NLA = (15);
static const int NS_BTH = (16);
static const int NS_NBP = (20);
static const int NS_MS = (30);
static const int NS_STDA = (31);
static const int NS_NTDS = (32);
static const int NS_EMAIL = (37);
static const int NS_PNRPNAME = (38);
static const int NS_PNRPCLOUD = (39);
static const int NS_X500 = (40);
static const int NS_NIS = (41);
static const int NS_NISPLUS = (42);
static const int NS_WRQ = (50);
static const int NS_NETDES = (60);
static const int NI_NOFQDN = 0x01;
static const int NI_NUMERICHOST = 0x02;
static const int NI_NAMEREQD = 0x04;
static const int NI_NUMERICSERV = 0x08;
static const int NI_DGRAM = 0x10;
static const int NI_MAXHOST = 1025;
static const int NI_MAXSERV = 32;
typedef UINT_PTR SOCKET;
static const int FD_SETSIZE = 64;
typedef struct fd_set {
        u_int fd_count; /* how many are SET? */
        SOCKET fd_array[64]; /* an array of SOCKETs */
} fd_set;
 int __WSAFDIsSet(SOCKET fd, fd_set *);
static const int FD_CLR(fd,set) = do { u_int __i; for (__i = 0; __i < ((fd_set FAR *)(set))->fd_count ; __i++) { if (((fd_set FAR *)(set))->fd_array[__i] == fd) { while (__i < ((fd_set FAR *)(set))->fd_count-1) { ((fd_set FAR *)(set))->fd_array[__i] = ((fd_set FAR *)(set))->fd_array[__i+1]; __i++; } ((fd_set FAR *)(set))->fd_count--; break; } } } while(0);
static const int FD_SET(fd,set) = do { u_int __i; for (__i = 0; __i < ((fd_set FAR *)(set))->fd_count; __i++) { if (((fd_set FAR *)(set))->fd_array[__i] == (fd)) { break; } } if (__i == ((fd_set FAR *)(set))->fd_count) { if (((fd_set FAR *)(set))->fd_count < FD_SETSIZE) { ((fd_set FAR *)(set))->fd_array[__i] = (fd); ((fd_set FAR *)(set))->fd_count++; } } } while(0);
static const int FD_ZERO(set) = (((fd_set FAR *)(set))->fd_count=0);
static const int FD_ISSET(fd,set) = __WSAFDIsSet((SOCKET)(fd), (fd_set FAR *)(set));
struct timeval {
        long tv_sec; /* seconds */
        long tv_usec; /* and microseconds */
};
static const int timerisset(tvp) = ((tvp)->tv_sec || (tvp)->tv_usec);
static const int timercmp(tvp,uvp,cmp) = ((tvp)->tv_sec cmp (uvp)->tv_sec || (tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec);
static const int timerclear(tvp) = (tvp)->tv_sec = (tvp)->tv_usec = 0;
static const int IOCPARM_MASK = 0x7f;
static const int IOC_VOID = 0x20000000;
static const int IOC_OUT = 0x40000000;
static const int IOC_IN = 0x80000000;
static const int IOC_INOUT = (IOC_IN|IOC_OUT);
static const int _IO(x,y) = (IOC_VOID|((x)<<8)|(y));
static const int _IOR(x,y,t) = (IOC_OUT|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
static const int _IOW(x,y,t) = (IOC_IN|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
static const int FIONREAD = _IOR('f', 127, u_long);
static const int FIONBIO = _IOW('f', 126, u_long);
static const int FIOASYNC = _IOW('f', 125, u_long);
static const int SIOCSHIWAT = _IOW('s', 0, u_long);
static const int SIOCGHIWAT = _IOR('s', 1, u_long);
static const int SIOCSLOWAT = _IOW('s', 2, u_long);
static const int SIOCGLOWAT = _IOR('s', 3, u_long);
static const int SIOCATMARK = _IOR('s', 7, u_long);
struct hostent {
        char * h_name; /* official name of host */
        char * * h_aliases; /* alias list */
        short h_addrtype; /* host address type */
        short h_length; /* length of address */
        char * * h_addr_list; /* list of addresses */
static const int h_addr = h_addr_list[0];
};
struct netent {
        char * n_name; /* official name of net */
        char * * n_aliases; /* alias list */
        short n_addrtype; /* net address type */
        u_long n_net; /* network # */
};
struct servent {
        char * s_name; /* official service name */
        char * * s_aliases; /* alias list */
        char * s_proto; /* protocol to use */
        short s_port; /* port # */
};
struct protoent {
        char * p_name; /* official protocol name */
        char * * p_aliases; /* alias list */
        short p_proto; /* protocol # */
};
static const int IPPORT_ECHO = 7;
static const int IPPORT_DISCARD = 9;
static const int IPPORT_SYSTAT = 11;
static const int IPPORT_DAYTIME = 13;
static const int IPPORT_NETSTAT = 15;
static const int IPPORT_FTP = 21;
static const int IPPORT_TELNET = 23;
static const int IPPORT_SMTP = 25;
static const int IPPORT_TIMESERVER = 37;
static const int IPPORT_NAMESERVER = 42;
static const int IPPORT_WHOIS = 43;
static const int IPPORT_MTP = 57;
static const int IPPORT_TFTP = 69;
static const int IPPORT_RJE = 77;
static const int IPPORT_FINGER = 79;
static const int IPPORT_TTYLINK = 87;
static const int IPPORT_SUPDUP = 95;
static const int IPPORT_EXECSERVER = 512;
static const int IPPORT_LOGINSERVER = 513;
static const int IPPORT_CMDSERVER = 514;
static const int IPPORT_EFSSERVER = 520;
static const int IPPORT_BIFFUDP = 512;
static const int IPPORT_WHOSERVER = 513;
static const int IPPORT_ROUTESERVER = 520;
static const int IPPORT_RESERVED = 1024;
static const int IMPLINK_IP = 155;
static const int IMPLINK_LOWEXPER = 156;
static const int IMPLINK_HIGHEXPER = 158;
static const int ADDR_ANY = INADDR_ANY;
static const int WSADESCRIPTION_LEN = 256;
static const int WSASYS_STATUS_LEN = 128;
typedef struct WSAData {
        WORD wVersion;
        WORD wHighVersion;
        unsigned short iMaxSockets;
        unsigned short iMaxUdpDg;
        char * lpVendorInfo;
        char szDescription[256 +1];
        char szSystemStatus[128 +1];
} WSADATA, * LPWSADATA;
static const int INVALID_SOCKET = (SOCKET)(~0);
static const int SOCKET_ERROR = (-1);
static const int FROM_PROTOCOL_INFO = (-1);
static const int SOCK_STREAM = 1;
static const int SOCK_DGRAM = 2;
static const int SOCK_RAW = 3;
static const int SOCK_RDM = 4;
static const int SOCK_SEQPACKET = 5;
static const int SO_DEBUG = 0x0001;
static const int SO_ACCEPTCONN = 0x0002;
static const int SO_REUSEADDR = 0x0004;
static const int SO_KEEPALIVE = 0x0008;
static const int SO_DONTROUTE = 0x0010;
static const int SO_BROADCAST = 0x0020;
static const int SO_USELOOPBACK = 0x0040;
static const int SO_LINGER = 0x0080;
static const int SO_OOBINLINE = 0x0100;
static const int SO_DONTLINGER = (int)(~SO_LINGER);
static const int SO_EXCLUSIVEADDRUSE = ((int)(~SO_REUSEADDR));
static const int SO_SNDBUF = 0x1001;
static const int SO_RCVBUF = 0x1002;
static const int SO_SNDLOWAT = 0x1003;
static const int SO_RCVLOWAT = 0x1004;
static const int SO_SNDTIMEO = 0x1005;
static const int SO_RCVTIMEO = 0x1006;
static const int SO_ERROR = 0x1007;
static const int SO_TYPE = 0x1008;
static const int SO_GROUP_ID = 0x2001;
static const int SO_GROUP_PRIORITY = 0x2002;
static const int SO_MAX_MSG_SIZE = 0x2003;
static const int SO_PROTOCOL_INFOA = 0x2004;
static const int SO_PROTOCOL_INFOW = 0x2005;
static const int SO_PROTOCOL_INFO = SO_PROTOCOL_INFOA;
static const int PVD_CONFIG = 0x3001;
static const int SO_CONDITIONAL_ACCEPT = 0x3002;
struct sockproto {
        u_short sp_family; /* address family */
        u_short sp_protocol; /* protocol */
};
static const int PF_UNSPEC = AF_UNSPEC;
static const int PF_UNIX = AF_UNIX;
static const int PF_INET = AF_INET;
static const int PF_IMPLINK = AF_IMPLINK;
static const int PF_PUP = AF_PUP;
static const int PF_CHAOS = AF_CHAOS;
static const int PF_NS = AF_NS;
static const int PF_IPX = AF_IPX;
static const int PF_ISO = AF_ISO;
static const int PF_OSI = AF_OSI;
static const int PF_ECMA = AF_ECMA;
static const int PF_DATAKIT = AF_DATAKIT;
static const int PF_CCITT = AF_CCITT;
static const int PF_SNA = AF_SNA;
static const int PF_DECnet = AF_DECnet;
static const int PF_DLI = AF_DLI;
static const int PF_LAT = AF_LAT;
static const int PF_HYLINK = AF_HYLINK;
static const int PF_APPLETALK = AF_APPLETALK;
static const int PF_VOICEVIEW = AF_VOICEVIEW;
static const int PF_FIREFOX = AF_FIREFOX;
static const int PF_UNKNOWN1 = AF_UNKNOWN1;
static const int PF_BAN = AF_BAN;
static const int PF_ATM = AF_ATM;
static const int PF_INET6 = AF_INET6;
static const int PF_BTH = AF_BTH;
static const int PF_MAX = AF_MAX;
struct linger {
        u_short l_onoff; /* option on/off */
        u_short l_linger; /* linger time */
};
static const int SOL_SOCKET = 0xffff;
static const int SOMAXCONN = 0x7fffffff;
static const int MSG_OOB = 0x1;
static const int MSG_PEEK = 0x2;
static const int MSG_DONTROUTE = 0x4;
static const int MSG_WAITALL = 0x8;
static const int MSG_PARTIAL = 0x8000;
static const int MSG_INTERRUPT = 0x10;
static const int MSG_MAXIOVLEN = 16;
static const int MAXGETHOSTSTRUCT = 1024;
static const int FD_READ_BIT = 0;
static const int FD_READ = (1 << FD_READ_BIT);
static const int FD_WRITE_BIT = 1;
static const int FD_WRITE = (1 << FD_WRITE_BIT);
static const int FD_OOB_BIT = 2;
static const int FD_OOB = (1 << FD_OOB_BIT);
static const int FD_ACCEPT_BIT = 3;
static const int FD_ACCEPT = (1 << FD_ACCEPT_BIT);
static const int FD_CONNECT_BIT = 4;
static const int FD_CONNECT = (1 << FD_CONNECT_BIT);
static const int FD_CLOSE_BIT = 5;
static const int FD_CLOSE = (1 << FD_CLOSE_BIT);
static const int FD_QOS_BIT = 6;
static const int FD_QOS = (1 << FD_QOS_BIT);
static const int FD_GROUP_QOS_BIT = 7;
static const int FD_GROUP_QOS = (1 << FD_GROUP_QOS_BIT);
static const int FD_ROUTING_INTERFACE_CHANGE_BIT = 8;
static const int FD_ROUTING_INTERFACE_CHANGE = (1 << FD_ROUTING_INTERFACE_CHANGE_BIT);
static const int FD_ADDRESS_LIST_CHANGE_BIT = 9;
static const int FD_ADDRESS_LIST_CHANGE = (1 << FD_ADDRESS_LIST_CHANGE_BIT);
static const int FD_MAX_EVENTS = 10;
static const int FD_ALL_EVENTS = ((1 << FD_MAX_EVENTS) - 1);
static const int h_errno = WSAGetLastError();
static const int HOST_NOT_FOUND = WSAHOST_NOT_FOUND;
static const int TRY_AGAIN = WSATRY_AGAIN;
static const int NO_RECOVERY = WSANO_RECOVERY;
static const int NO_DATA = WSANO_DATA;
static const int WSANO_ADDRESS = WSANO_DATA;
static const int NO_ADDRESS = WSANO_ADDRESS;
static const int WSAAPI = FAR ;
static const int WSAEVENT = HANDLE;
static const int LPWSAEVENT = LPHANDLE;
static const int WSAOVERLAPPED = OVERLAPPED;
typedef struct _OVERLAPPED * LPWSAOVERLAPPED;
static const int WSA_IO_PENDING = (ERROR_IO_PENDING);
static const int WSA_IO_INCOMPLETE = (ERROR_IO_INCOMPLETE);
static const int WSA_INVALID_HANDLE = (ERROR_INVALID_HANDLE);
static const int WSA_INVALID_PARAMETER = (ERROR_INVALID_PARAMETER);
static const int WSA_NOT_ENOUGH_MEMORY = (ERROR_NOT_ENOUGH_MEMORY);
static const int WSA_OPERATION_ABORTED = (ERROR_OPERATION_ABORTED);
static const int WSA_INVALID_EVENT = ((WSAEVENT)NULL);
static const int WSA_MAXIMUM_WAIT_EVENTS = (MAXIMUM_WAIT_OBJECTS);
static const int WSA_WAIT_FAILED = (WAIT_FAILED);
static const int WSA_WAIT_EVENT_0 = (WAIT_OBJECT_0);
static const int WSA_WAIT_IO_COMPLETION = (WAIT_IO_COMPLETION);
static const int WSA_WAIT_TIMEOUT = (WAIT_TIMEOUT);
static const int WSA_INFINITE = (INFINITE);
typedef ULONG SERVICETYPE;
static const int SERVICETYPE_NOTRAFFIC = 0x00000000;
static const int SERVICETYPE_BESTEFFORT = 0x00000001;
static const int SERVICETYPE_CONTROLLEDLOAD = 0x00000002;
static const int SERVICETYPE_GUARANTEED = 0x00000003;
static const int SERVICETYPE_NETWORK_UNAVAILABLE = 0x00000004;
static const int SERVICETYPE_GENERAL_INFORMATION = 0x00000005;
static const int SERVICETYPE_NOCHANGE = 0x00000006;
static const int SERVICETYPE_NONCONFORMING = 0x00000009;
static const int SERVICETYPE_NETWORK_CONTROL = 0x0000000A;
static const int SERVICETYPE_QUALITATIVE = 0x0000000D;
static const int SERVICE_BESTEFFORT = 0x80010000;
static const int SERVICE_CONTROLLEDLOAD = 0x80020000;
static const int SERVICE_GUARANTEED = 0x80040000;
static const int SERVICE_QUALITATIVE = 0x80200000;
static const int SERVICE_NO_TRAFFIC_CONTROL = 0x81000000;
static const int SERVICE_NO_QOS_SIGNALING = 0x40000000;
typedef struct _flowspec
{
    ULONG TokenRate; /* In Bytes/sec */
    ULONG TokenBucketSize; /* In Bytes */
    ULONG PeakBandwidth; /* In Bytes/sec */
    ULONG Latency; /* In microseconds */
    ULONG DelayVariation; /* In microseconds */
    SERVICETYPE ServiceType;
    ULONG MaxSduSize; /* In Bytes */
    ULONG MinimumPolicedSize; /* In Bytes */
} FLOWSPEC, *PFLOWSPEC, * LPFLOWSPEC;
static const int QOS_NOT_SPECIFIED = 0xFFFFFFFF;
static const int POSITIVE_INFINITY_RATE = 0xFFFFFFFE;
typedef struct {
    ULONG ObjectType;
    ULONG ObjectLength; /* the length of object buffer INCLUDING 
                            * this header */
} QOS_OBJECT_HDR, *LPQOS_OBJECT_HDR;
static const int QOS_GENERAL_ID_BASE = 2000;
static const int QOS_OBJECT_END_OF_LIST = (0x00000001 + QOS_GENERAL_ID_BASE);
static const int QOS_OBJECT_SD_MODE = (0x00000002 + QOS_GENERAL_ID_BASE);
static const int QOS_OBJECT_SHAPING_RATE = (0x00000003 + QOS_GENERAL_ID_BASE);
static const int QOS_OBJECT_DESTADDR = (0x00000004 + QOS_GENERAL_ID_BASE);
typedef struct _QOS_SD_MODE {
    QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapeDiscardMode;
} QOS_SD_MODE, *LPQOS_SD_MODE;
static const int TC_NONCONF_BORROW = 0;
static const int TC_NONCONF_SHAPE = 1;
static const int TC_NONCONF_DISCARD = 2;
static const int TC_NONCONF_BORROW_PLUS = 3;
typedef struct _QOS_SHAPING_RATE {
    QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapingRate;
} QOS_SHAPING_RATE, *LPQOS_SHAPING_RATE;
typedef struct _QualityOfService
{
    FLOWSPEC SendingFlowspec; /* the flow spec for data sending */
    FLOWSPEC ReceivingFlowspec; /* the flow spec for data receiving */
    WSABUF ProviderSpecific; /* additional provider specific stuff */
} QOS, * LPQOS;
static const int CF_ACCEPT = 0x0000;
static const int CF_REJECT = 0x0001;
static const int CF_DEFER = 0x0002;
static const int SD_RECEIVE = 0x00;
static const int SD_SEND = 0x01;
static const int SD_BOTH = 0x02;
typedef unsigned int GROUP;
static const int SG_UNCONSTRAINED_GROUP = 0x01;
static const int SG_CONSTRAINED_GROUP = 0x02;
typedef struct _WSANETWORKEVENTS {
       long lNetworkEvents;
       int iErrorCode[10];
} WSANETWORKEVENTS, * LPWSANETWORKEVENTS;
static const int MAX_PROTOCOL_CHAIN = 7;
static const int BASE_PROTOCOL = 1;
static const int LAYERED_PROTOCOL = 0;
typedef struct _WSAPROTOCOLCHAIN {
    int ChainLen; /* the length of the chain,     */
    DWORD ChainEntries[7]; /* a list of dwCatalogEntryIds */
} WSAPROTOCOLCHAIN, * LPWSAPROTOCOLCHAIN;
static const int WSAPROTOCOL_LEN = 255;
typedef struct _WSAPROTOCOL_INFOA {
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    CHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOA, * LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW {
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    WCHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOW, * LPWSAPROTOCOL_INFOW;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
static const int PFL_MULTIPLE_PROTO_ENTRIES = 0x00000001;
static const int PFL_RECOMMENDED_PROTO_ENTRY = 0x00000002;
static const int PFL_HIDDEN = 0x00000004;
static const int PFL_MATCHES_PROTOCOL_ZERO = 0x00000008;
static const int PFL_NETWORKDIRECT_PROVIDER = 0x00000010;
static const int XP1_CONNECTIONLESS = 0x00000001;
static const int XP1_GUARANTEED_DELIVERY = 0x00000002;
static const int XP1_GUARANTEED_ORDER = 0x00000004;
static const int XP1_MESSAGE_ORIENTED = 0x00000008;
static const int XP1_PSEUDO_STREAM = 0x00000010;
static const int XP1_GRACEFUL_CLOSE = 0x00000020;
static const int XP1_EXPEDITED_DATA = 0x00000040;
static const int XP1_CONNECT_DATA = 0x00000080;
static const int XP1_DISCONNECT_DATA = 0x00000100;
static const int XP1_SUPPORT_BROADCAST = 0x00000200;
static const int XP1_SUPPORT_MULTIPOINT = 0x00000400;
static const int XP1_MULTIPOINT_CONTROL_PLANE = 0x00000800;
static const int XP1_MULTIPOINT_DATA_PLANE = 0x00001000;
static const int XP1_QOS_SUPPORTED = 0x00002000;
static const int XP1_INTERRUPT = 0x00004000;
static const int XP1_UNI_SEND = 0x00008000;
static const int XP1_UNI_RECV = 0x00010000;
static const int XP1_IFS_HANDLES = 0x00020000;
static const int XP1_PARTIAL_MESSAGE = 0x00040000;
static const int XP1_SAN_SUPPORT_SDP = 0x00080000;
static const int BIGENDIAN = 0x0000;
static const int LITTLEENDIAN = 0x0001;
static const int SECURITY_PROTOCOL_NONE = 0x0000;
static const int JL_SENDER_ONLY = 0x01;
static const int JL_RECEIVER_ONLY = 0x02;
static const int JL_BOTH = 0x04;
static const int WSA_FLAG_OVERLAPPED = 0x01;
static const int WSA_FLAG_MULTIPOINT_C_ROOT = 0x02;
static const int WSA_FLAG_MULTIPOINT_C_LEAF = 0x04;
static const int WSA_FLAG_MULTIPOINT_D_ROOT = 0x08;
static const int WSA_FLAG_MULTIPOINT_D_LEAF = 0x10;
static const int WSA_FLAG_ACCESS_SYSTEM_SECURITY = 0x40;
typedef
int
( * LPCONDITIONPROC)(
    LPWSABUF lpCallerId,
    LPWSABUF lpCallerData,
    LPQOS lpSQOS,
    LPQOS lpGQOS,
    LPWSABUF lpCalleeId,
    LPWSABUF lpCalleeData,
    GROUP * g,
    DWORD_PTR dwCallbackData
    );
typedef
void
( * LPWSAOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwError,
    DWORD cbTransferred,
    LPWSAOVERLAPPED lpOverlapped,
    DWORD dwFlags
    );
static const int SIO_NSP_NOTIFY_CHANGE = _WSAIOW(IOC_WS2,25);
typedef enum _WSACOMPLETIONTYPE {
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND,
    NSP_NOTIFY_EVENT,
    NSP_NOTIFY_PORT,
    NSP_NOTIFY_APC,
} WSACOMPLETIONTYPE, *PWSACOMPLETIONTYPE, * LPWSACOMPLETIONTYPE;
typedef struct _WSACOMPLETION {
    WSACOMPLETIONTYPE Type;
    union {
        struct {
            HWND hWnd;
            UINT uMsg;
            WPARAM context;
        } WindowMessage;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
        } Event;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
        } Apc;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            HANDLE hPort;
            ULONG_PTR Key;
        } Port;
    } Parameters;
} WSACOMPLETION, *PWSACOMPLETION, *LPWSACOMPLETION;
static const int TH_NETDEV = 0x00000001;
static const int TH_TAPI = 0x00000002;
typedef struct _BLOB {
    ULONG cbSize ;
    BYTE *pBlobData ;
} BLOB, *LPBLOB ;
static const int SERVICE_MULTIPLE = (0x00000001);
static const int NS_ALL = (0);
static const int NS_SAP = (1);
static const int NS_NDS = (2);
static const int NS_PEER_BROWSE = (3);
static const int NS_SLP = (5);
static const int NS_DHCP = (6);
static const int NS_TCPIP_LOCAL = (10);
static const int NS_TCPIP_HOSTS = (11);
static const int NS_DNS = (12);
static const int NS_NETBT = (13);
static const int NS_WINS = (14);
static const int NS_NLA = (15);
static const int NS_BTH = (16);
static const int NS_NBP = (20);
static const int NS_MS = (30);
static const int NS_STDA = (31);
static const int NS_NTDS = (32);
static const int NS_EMAIL = (37);
static const int NS_PNRPNAME = (38);
static const int NS_PNRPCLOUD = (39);
static const int NS_X500 = (40);
static const int NS_NIS = (41);
static const int NS_NISPLUS = (42);
static const int NS_WRQ = (50);
static const int NS_NETDES = (60);
static const int NS_ALL = (0);
static const int NS_SAP = (1);
static const int NS_NDS = (2);
static const int NS_PEER_BROWSE = (3);
static const int NS_SLP = (5);
static const int NS_DHCP = (6);
static const int NS_TCPIP_LOCAL = (10);
static const int NS_TCPIP_HOSTS = (11);
static const int NS_DNS = (12);
static const int NS_NETBT = (13);
static const int NS_WINS = (14);
static const int NS_NLA = (15);
static const int NS_BTH = (16);
static const int NS_LOCALNAME = (19);
static const int NS_NBP = (20);
static const int NS_MS = (30);
static const int NS_STDA = (31);
static const int NS_NTDS = (32);
static const int NS_EMAIL = (37);
static const int NS_PNRPNAME = (38);
static const int NS_PNRPCLOUD = (39);
static const int NS_X500 = (40);
static const int NS_NIS = (41);
static const int NS_NISPLUS = (42);
static const int NS_WRQ = (50);
static const int NS_NETDES = (60);
static const int RES_UNUSED_1 = (0x00000001);
static const int RES_FLUSH_CACHE = (0x00000002);
static const int RES_SERVICE = (0x00000004);
static const char SERVICE_TYPE_VALUE_IPXPORTA = "IpxSocket";
static const char SERVICE_TYPE_VALUE_IPXPORTW = L"IpxSocket";
static const char SERVICE_TYPE_VALUE_SAPIDA = "SapId";
static const char SERVICE_TYPE_VALUE_SAPIDW = L"SapId";
static const char SERVICE_TYPE_VALUE_TCPPORTA = "TcpPort";
static const char SERVICE_TYPE_VALUE_TCPPORTW = L"TcpPort";
static const char SERVICE_TYPE_VALUE_UDPPORTA = "UdpPort";
static const char SERVICE_TYPE_VALUE_UDPPORTW = L"UdpPort";
static const char SERVICE_TYPE_VALUE_OBJECTIDA = "ObjectId";
static const char SERVICE_TYPE_VALUE_OBJECTIDW = L"ObjectId";
static const int SERVICE_TYPE_VALUE_SAPID = SERVICE_TYPE_VALUE_SAPIDA;
static const int SERVICE_TYPE_VALUE_TCPPORT = SERVICE_TYPE_VALUE_TCPPORTA;
static const int SERVICE_TYPE_VALUE_UDPPORT = SERVICE_TYPE_VALUE_UDPPORTA;
static const int SERVICE_TYPE_VALUE_OBJECTID = SERVICE_TYPE_VALUE_OBJECTIDA;
typedef struct _AFPROTOCOLS {
    INT iAddressFamily;
    INT iProtocol;
} AFPROTOCOLS, *PAFPROTOCOLS, *LPAFPROTOCOLS;
typedef enum _WSAEcomparator
{
    COMP_EQUAL = 0,
    COMP_NOTLESS
} WSAECOMPARATOR, *PWSAECOMPARATOR, *LPWSAECOMPARATOR;
typedef struct _WSAVersion
{
    DWORD dwVersion;
    WSAECOMPARATOR ecHow;
}WSAVERSION, *PWSAVERSION, *LPWSAVERSION;
typedef struct _WSAQuerySetA
{
    DWORD dwSize;
    LPSTR lpszServiceInstanceName;
    LPGUID lpServiceClassId;
    LPWSAVERSION lpVersion;
    LPSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSETA, *PWSAQUERYSETA, *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW
{
    DWORD dwSize;
    LPWSTR lpszServiceInstanceName;
    LPGUID lpServiceClassId;
    LPWSAVERSION lpVersion;
    LPWSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPWSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPWSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;
typedef struct _WSAQuerySet2A
{
    DWORD dwSize;
    LPSTR lpszServiceInstanceName;
    LPWSAVERSION lpVersion;
    LPSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSET2A, *PWSAQUERYSET2A, *LPWSAQUERYSET2A;
typedef struct _WSAQuerySet2W
{
    DWORD dwSize;
    LPWSTR lpszServiceInstanceName;
    LPWSAVERSION lpVersion;
    LPWSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPWSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPWSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSET2W, *PWSAQUERYSET2W, *LPWSAQUERYSET2W;
typedef WSAQUERYSETA WSAQUERYSET;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef WSAQUERYSET2A WSAQUERYSET2;
typedef PWSAQUERYSET2A PWSAQUERYSET2;
typedef LPWSAQUERYSET2A LPWSAQUERYSET2;
static const int LUP_DEEP = 0x0001;
static const int LUP_CONTAINERS = 0x0002;
static const int LUP_NOCONTAINERS = 0x0004;
static const int LUP_NEAREST = 0x0008;
static const int LUP_RETURN_NAME = 0x0010;
static const int LUP_RETURN_TYPE = 0x0020;
static const int LUP_RETURN_VERSION = 0x0040;
static const int LUP_RETURN_COMMENT = 0x0080;
static const int LUP_RETURN_ADDR = 0x0100;
static const int LUP_RETURN_BLOB = 0x0200;
static const int LUP_RETURN_ALIASES = 0x0400;
static const int LUP_RETURN_QUERY_STRING = 0x0800;
static const int LUP_RETURN_ALL = 0x0FF0;
static const int LUP_RES_SERVICE = 0x8000;
static const int LUP_FLUSHCACHE = 0x1000;
static const int LUP_FLUSHPREVIOUS = 0x2000;
static const int LUP_NON_AUTHORITATIVE = 0x4000;
static const int LUP_SECURE = 0x8000;
static const int LUP_RETURN_PREFERRED_NAMES = 0x10000;
static const int LUP_ADDRCONFIG = 0x00100000;
static const int LUP_DUAL_ADDR = 0x00200000;
static const int LUP_FILESERVER = 0x00400000;
static const int RESULT_IS_ALIAS = 0x0001;
static const int RESULT_IS_ADDED = 0x0010;
static const int RESULT_IS_CHANGED = 0x0020;
static const int RESULT_IS_DELETED = 0x0040;
typedef enum _WSAESETSERVICEOP
{
    RNRSERVICE_REGISTER=0,
    RNRSERVICE_DEREGISTER,
    RNRSERVICE_DELETE
} WSAESETSERVICEOP, *PWSAESETSERVICEOP, *LPWSAESETSERVICEOP;
typedef struct _WSANSClassInfoA
{
    LPSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
}WSANSCLASSINFOA, *PWSANSCLASSINFOA, *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW
{
    LPWSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
}WSANSCLASSINFOW, *PWSANSCLASSINFOW, *LPWSANSCLASSINFOW;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
typedef struct _WSAServiceClassInfoA
{
    LPGUID lpServiceClassId;
    LPSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOA lpClassInfos;
}WSASERVICECLASSINFOA, *PWSASERVICECLASSINFOA, *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW
{
    LPGUID lpServiceClassId;
    LPWSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOW lpClassInfos;
}WSASERVICECLASSINFOW, *PWSASERVICECLASSINFOW, *LPWSASERVICECLASSINFOW;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef struct _WSANAMESPACE_INFOA {
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPSTR lpszIdentifier;
} WSANAMESPACE_INFOA, *PWSANAMESPACE_INFOA, *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW {
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPWSTR lpszIdentifier;
} WSANAMESPACE_INFOW, *PWSANAMESPACE_INFOW, *LPWSANAMESPACE_INFOW;
typedef struct _WSANAMESPACE_INFOEXA {
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPSTR lpszIdentifier;
    BLOB ProviderSpecific;
} WSANAMESPACE_INFOEXA, *PWSANAMESPACE_INFOEXA, *LPWSANAMESPACE_INFOEXA;
typedef struct _WSANAMESPACE_INFOEXW {
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPWSTR lpszIdentifier;
    BLOB ProviderSpecific;
} WSANAMESPACE_INFOEXW, *PWSANAMESPACE_INFOEXW, *LPWSANAMESPACE_INFOEXW;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef WSANAMESPACE_INFOEXA WSANAMESPACE_INFOEX;
typedef PWSANAMESPACE_INFOEXA PWSANAMESPACE_INFOEX;
typedef LPWSANAMESPACE_INFOEXA LPWSANAMESPACE_INFOEX;
static const int POLLRDNORM = 0x0100;
static const int POLLRDBAND = 0x0200;
static const int POLLIN = (POLLRDNORM | POLLRDBAND);
static const int POLLPRI = 0x0400;
static const int POLLWRNORM = 0x0010;
static const int POLLOUT = (POLLWRNORM);
static const int POLLWRBAND = 0x0020;
static const int POLLERR = 0x0001;
static const int POLLHUP = 0x0002;
static const int POLLNVAL = 0x0004;
typedef struct pollfd {
    SOCKET fd;
    SHORT events;
    SHORT revents;
} WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;
SOCKET
accept(
    SOCKET s,
    struct sockaddr * addr,
    int * addrlen
    );
int
bind(
    SOCKET s,
    const struct sockaddr * name,
    int namelen
    );
int
closesocket(
    SOCKET s
    );
int
connect(
    SOCKET s,
    const struct sockaddr * name,
    int namelen
    );
int
ioctlsocket(
    SOCKET s,
    long cmd,
    u_long * argp
    );
int
getpeername(
    SOCKET s,
    struct sockaddr * name,
    int * namelen
    );
int
getsockname(
    SOCKET s,
    struct sockaddr * name,
    int * namelen
    );
int
getsockopt(
    SOCKET s,
    int level,
    int optname,
    char * optval,
    int * optlen
    );
u_long
htonl(
    u_long hostlong
    );
u_short
htons(
    u_short hostshort
    );
unsigned long
inet_addr(
    const char * cp
    );
char *
inet_ntoa(
    struct in_addr in
    );
int
listen(
    SOCKET s,
    int backlog
    );
u_long
ntohl(
    u_long netlong
    );
u_short
ntohs(
    u_short netshort
    );
int
recv(
    SOCKET s,
    char * buf,
    int len,
    int flags
    );
int
recvfrom(
    SOCKET s,
    char * buf,
    int len,
    int flags,
    struct sockaddr * from,
    int * fromlen
    );
int
select(
    int nfds,
    fd_set * readfds,
    fd_set * writefds,
    fd_set * exceptfds,
    const struct timeval * timeout
    );
int
send(
    SOCKET s,
    const char * buf,
    int len,
    int flags
    );
int
sendto(
    SOCKET s,
    const char * buf,
    int len,
    int flags,
    const struct sockaddr * to,
    int tolen
    );
int
setsockopt(
    SOCKET s,
    int level,
    int optname,
    const char * optval,
    int optlen
    );
int
shutdown(
    SOCKET s,
    int how
    );
SOCKET
socket(
    int af,
    int type,
    int protocol
    );
struct hostent *
gethostbyaddr(
    const char * addr,
    int len,
    int type
    );
struct hostent *
gethostbyname(
    const char * name
    );
int
gethostname(
    char * name,
    int namelen
    );
struct servent *
getservbyport(
    int port,
    const char * proto
    );
struct servent *
getservbyname(
    const char * name,
    const char * proto
    );
struct protoent *
getprotobynumber(
    int number
    );
struct protoent *
getprotobyname(
    const char * name
    );
int
WSAStartup(
    WORD wVersionRequested,
    LPWSADATA lpWSAData
    );
int
WSACleanup(
    void
    );
void
WSASetLastError(
    int iError
    );
int
WSAGetLastError(
    void
    );
BOOL
WSAIsBlocking(
    void
    );
int
WSAUnhookBlockingHook(
    void
    );
WSASetBlockingHook(
    lpBlockFunc
    );
int
WSACancelBlockingCall(
    void
    );
HANDLE
WSAAsyncGetServByName(
    HWND hWnd,
    u_int wMsg,
    const char * name,
    const char * proto,
    char * buf,
    int buflen
    );
HANDLE
WSAAsyncGetServByPort(
    HWND hWnd,
    u_int wMsg,
    int port,
    const char * proto,
    char * buf,
    int buflen
    );
HANDLE
WSAAsyncGetProtoByName(
    HWND hWnd,
    u_int wMsg,
    const char * name,
    char * buf,
    int buflen
    );
HANDLE
WSAAsyncGetProtoByNumber(
    HWND hWnd,
    u_int wMsg,
    int number,
    char * buf,
    int buflen
    );
HANDLE
WSAAsyncGetHostByName(
    HWND hWnd,
    u_int wMsg,
    const char * name,
    char * buf,
    int buflen
    );
HANDLE
WSAAsyncGetHostByAddr(
    HWND hWnd,
    u_int wMsg,
    const char * addr,
    int len,
    int type,
    char * buf,
    int buflen
    );
int
WSACancelAsyncRequest(
    HANDLE hAsyncTaskHandle
    );
int
WSAAsyncSelect(
    SOCKET s,
    HWND hWnd,
    u_int wMsg,
    long lEvent
    );
SOCKET
WSAAccept(
    SOCKET s,
    struct sockaddr * addr,
    LPINT addrlen,
    LPCONDITIONPROC lpfnCondition,
    DWORD_PTR dwCallbackData
    );
BOOL
WSACloseEvent(
    HANDLE hEvent
    );
int
WSAConnect(
    SOCKET s,
    const struct sockaddr * name,
    int namelen,
    LPWSABUF lpCallerData,
    LPWSABUF lpCalleeData,
    LPQOS lpSQOS,
    LPQOS lpGQOS
    );
static const int WSAConnectByName = WSAConnectByNameA;
BOOL
WSAConnectByNameW(
    SOCKET s,
    LPWSTR nodename,
    LPWSTR servicename,
    LPDWORD LocalAddressLength,
    LPSOCKADDR LocalAddress,
    LPDWORD RemoteAddressLength,
    LPSOCKADDR RemoteAddress,
    const struct timeval * timeout,
    LPWSAOVERLAPPED Reserved);
BOOL
WSAConnectByNameA(
    SOCKET s,
    LPCSTR nodename,
    LPCSTR servicename,
    LPDWORD LocalAddressLength,
    LPSOCKADDR LocalAddress,
    LPDWORD RemoteAddressLength,
    LPSOCKADDR RemoteAddress,
    const struct timeval * timeout,
    LPWSAOVERLAPPED Reserved);
BOOL
WSAConnectByList(
    SOCKET s,
    PSOCKET_ADDRESS_LIST SocketAddress,
    LPDWORD LocalAddressLength,
    LPSOCKADDR LocalAddress,
    LPDWORD RemoteAddressLength,
    LPSOCKADDR RemoteAddress,
    const struct timeval * timeout,
    LPWSAOVERLAPPED Reserved);
HANDLE
WSACreateEvent(
    void
    );
int
WSADuplicateSocketA(
    SOCKET s,
    DWORD dwProcessId,
    LPWSAPROTOCOL_INFOA lpProtocolInfo
    );
int
WSADuplicateSocketW(
    SOCKET s,
    DWORD dwProcessId,
    LPWSAPROTOCOL_INFOW lpProtocolInfo
    );
static const int WSADuplicateSocket = WSADuplicateSocketA;
int
WSAEnumNetworkEvents(
    SOCKET s,
    HANDLE hEventObject,
    LPWSANETWORKEVENTS lpNetworkEvents
    );
int
WSAEnumProtocolsA(
    LPINT lpiProtocols,
    LPWSAPROTOCOL_INFOA lpProtocolBuffer,
    LPDWORD lpdwBufferLength
    );
int
WSAEnumProtocolsW(
    LPINT lpiProtocols,
    LPWSAPROTOCOL_INFOW lpProtocolBuffer,
    LPDWORD lpdwBufferLength
    );
static const int WSAEnumProtocols = WSAEnumProtocolsA;
int
WSAEventSelect(
    SOCKET s,
    HANDLE hEventObject,
    long lNetworkEvents
    );
BOOL
WSAGetOverlappedResult(
    SOCKET s,
    LPWSAOVERLAPPED lpOverlapped,
    LPDWORD lpcbTransfer,
    BOOL fWait,
    LPDWORD lpdwFlags
    );
BOOL
WSAGetQOSByName(
    SOCKET s,
    LPWSABUF lpQOSName,
    LPQOS lpQOS
    );
int
WSAHtonl(
    SOCKET s,
    u_long hostlong,
    u_long * lpnetlong
    );
int
WSAHtons(
    SOCKET s,
    u_short hostshort,
    u_short * lpnetshort
    );
int
WSAIoctl(
    SOCKET s,
    DWORD dwIoControlCode,
    LPVOID lpvInBuffer,
    DWORD cbInBuffer,
    LPVOID lpvOutBuffer,
    DWORD cbOutBuffer,
    LPDWORD lpcbBytesReturned,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
SOCKET
WSAJoinLeaf(
    SOCKET s,
    const struct sockaddr * name,
    int namelen,
    LPWSABUF lpCallerData,
    LPWSABUF lpCalleeData,
    LPQOS lpSQOS,
    LPQOS lpGQOS,
    DWORD dwFlags
    );
int
WSANtohl(
    SOCKET s,
    u_long netlong,
    u_long * lphostlong
    );
int
WSANtohs(
    SOCKET s,
    u_short netshort,
    u_short * lphostshort
    );
int
WSARecv(
    SOCKET s,
    LPWSABUF lpBuffers,
    DWORD dwBufferCount,
    LPDWORD lpNumberOfBytesRecvd,
    LPDWORD lpFlags,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
int
WSARecvDisconnect(
    SOCKET s,
    LPWSABUF lpInboundDisconnectData
    );
int
WSARecvFrom(
    SOCKET s,
    LPWSABUF lpBuffers,
    DWORD dwBufferCount,
    LPDWORD lpNumberOfBytesRecvd,
    LPDWORD lpFlags,
    struct sockaddr * lpFrom,
    LPINT lpFromlen,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
WSAResetEvent(
    HANDLE hEvent
    );
int
WSASend(
    SOCKET s,
    LPWSABUF lpBuffers,
    DWORD dwBufferCount,
    LPDWORD lpNumberOfBytesSent,
    DWORD dwFlags,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
int
WSASendMsg(
    SOCKET Handle,
    LPWSAMSG lpMsg,
    DWORD dwFlags,
    LPDWORD lpNumberOfBytesSent,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
int
WSASendDisconnect(
    SOCKET s,
    LPWSABUF lpOutboundDisconnectData
    );
int
WSASendTo(
    SOCKET s,
    LPWSABUF lpBuffers,
    DWORD dwBufferCount,
    LPDWORD lpNumberOfBytesSent,
    DWORD dwFlags,
    const struct sockaddr * lpTo,
    int iTolen,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
BOOL
WSASetEvent(
    HANDLE hEvent
    );
SOCKET
WSASocketA(
    int af,
    int type,
    int protocol,
    LPWSAPROTOCOL_INFOA lpProtocolInfo,
    GROUP g,
    DWORD dwFlags
    );
SOCKET
WSASocketW(
    int af,
    int type,
    int protocol,
    LPWSAPROTOCOL_INFOW lpProtocolInfo,
    GROUP g,
    DWORD dwFlags
    );
static const int WSASocket = WSASocketA;
DWORD
WSAWaitForMultipleEvents(
    DWORD cEvents,
    const HANDLE * lphEvents,
    BOOL fWaitAll,
    DWORD dwTimeout,
    BOOL fAlertable
    );
INT
WSAAddressToStringA(
    LPSOCKADDR lpsaAddress,
    DWORD dwAddressLength,
    LPWSAPROTOCOL_INFOA lpProtocolInfo,
    LPSTR lpszAddressString,
    LPDWORD lpdwAddressStringLength
    );
INT
WSAAddressToStringW(
    LPSOCKADDR lpsaAddress,
    DWORD dwAddressLength,
    LPWSAPROTOCOL_INFOW lpProtocolInfo,
    LPWSTR lpszAddressString,
    LPDWORD lpdwAddressStringLength
    );
static const int WSAAddressToString = WSAAddressToStringA;
INT
WSAStringToAddressA(
    LPSTR AddressString,
    INT AddressFamily,
    LPWSAPROTOCOL_INFOA lpProtocolInfo,
    LPSOCKADDR lpAddress,
    LPINT lpAddressLength
    );
INT
WSAStringToAddressW(
    LPWSTR AddressString,
    INT AddressFamily,
    LPWSAPROTOCOL_INFOW lpProtocolInfo,
    LPSOCKADDR lpAddress,
    LPINT lpAddressLength
    );
static const int WSAStringToAddress = WSAStringToAddressA;
INT
WSALookupServiceBeginA(
    LPWSAQUERYSETA lpqsRestrictions,
    DWORD dwControlFlags,
    LPHANDLE lphLookup
    );
INT
WSALookupServiceBeginW(
    LPWSAQUERYSETW lpqsRestrictions,
    DWORD dwControlFlags,
    LPHANDLE lphLookup
    );
static const int WSALookupServiceBegin = WSALookupServiceBeginA;
INT
WSALookupServiceNextA(
    HANDLE hLookup,
    DWORD dwControlFlags,
    LPDWORD lpdwBufferLength,
    LPWSAQUERYSETA lpqsResults
    );
INT
WSALookupServiceNextW(
    HANDLE hLookup,
    DWORD dwControlFlags,
    LPDWORD lpdwBufferLength,
    LPWSAQUERYSETW lpqsResults
    );
static const int WSALookupServiceNext = WSALookupServiceNextA;
INT
WSANSPIoctl(
    HANDLE hLookup,
    DWORD dwControlCode,
    LPVOID lpvInBuffer,
    DWORD cbInBuffer,
    LPVOID lpvOutBuffer,
    DWORD cbOutBuffer,
    LPDWORD lpcbBytesReturned,
    LPWSACOMPLETION lpCompletion
    );
INT
WSALookupServiceEnd(
    HANDLE hLookup
    );
INT
WSAInstallServiceClassA(
    LPWSASERVICECLASSINFOA lpServiceClassInfo
    );
INT
WSAInstallServiceClassW(
    LPWSASERVICECLASSINFOW lpServiceClassInfo
    );
static const int WSAInstallServiceClass = WSAInstallServiceClassA;
INT
WSARemoveServiceClass(
    LPGUID lpServiceClassId
    );
INT
WSAGetServiceClassInfoA(
    LPGUID lpProviderId,
    LPGUID lpServiceClassId,
    LPDWORD lpdwBufSize,
    LPWSASERVICECLASSINFOA lpServiceClassInfo
    );
INT
WSAGetServiceClassInfoW(
    LPGUID lpProviderId,
    LPGUID lpServiceClassId,
    LPDWORD lpdwBufSize,
    LPWSASERVICECLASSINFOW lpServiceClassInfo
    );
static const int WSAGetServiceClassInfo = WSAGetServiceClassInfoA;
INT
WSAEnumNameSpaceProvidersA(
    LPDWORD lpdwBufferLength,
    LPWSANAMESPACE_INFOA lpnspBuffer
    );
INT
WSAEnumNameSpaceProvidersW(
    LPDWORD lpdwBufferLength,
    LPWSANAMESPACE_INFOW lpnspBuffer
    );
static const int WSAEnumNameSpaceProviders = WSAEnumNameSpaceProvidersA;
INT
WSAEnumNameSpaceProvidersExA(
    LPDWORD lpdwBufferLength,
    LPWSANAMESPACE_INFOEXA lpnspBuffer
    );
INT
WSAEnumNameSpaceProvidersExW(
    LPDWORD lpdwBufferLength,
    LPWSANAMESPACE_INFOEXW lpnspBuffer
    );
static const int WSAEnumNameSpaceProvidersEx = WSAEnumNameSpaceProvidersExA;
 INT
WSAGetServiceClassNameByClassIdA(
    LPGUID lpServiceClassId,
    LPSTR lpszServiceClassName,
    LPDWORD lpdwBufferLength
    );
 INT
WSAGetServiceClassNameByClassIdW(
    LPGUID lpServiceClassId,
    LPWSTR lpszServiceClassName,
    LPDWORD lpdwBufferLength
    );
static const int WSAGetServiceClassNameByClassId = WSAGetServiceClassNameByClassIdA;
INT
WSASetServiceA(
    LPWSAQUERYSETA lpqsRegInfo,
    WSAESETSERVICEOP essoperation,
    DWORD dwControlFlags
    );
INT
WSASetServiceW(
    LPWSAQUERYSETW lpqsRegInfo,
    WSAESETSERVICEOP essoperation,
    DWORD dwControlFlags
    );
static const int WSASetService = WSASetServiceA;
INT
WSAProviderConfigChange(
    LPHANDLE lpNotificationHandle,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
int
WSAPoll(
    LPWSAPOLLFD fdArray,
    ULONG fds,
    INT timeout
    );
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;
typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;
typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;
typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;
typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;
typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
static const int WSAMAKEASYNCREPLY(buflen,error) = MAKELONG(buflen,error);
static const int WSAMAKESELECTREPLY(event,error) = MAKELONG(event,error);
static const int WSAGETASYNCBUFLEN(lParam) = LOWORD(lParam);
static const int WSAGETASYNCERROR(lParam) = HIWORD(lParam);
static const int WSAGETSELECTEVENT(lParam) = LOWORD(lParam);
static const int WSAGETSELECTERROR(lParam) = HIWORD(lParam);
static const int WS2IPDEF_ASSERT(exp) = ((VOID) 0);
static const int WS2TCPIP_INLINE = inline;
typedef struct in6_addr {
    union {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
} IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;
static const int in_addr6 = in6_addr;
static const int _S6_un = u;
static const int _S6_u8 = Byte;
static const int s6_addr = _S6_un._S6_u8;
static const int s6_bytes = u.Byte;
static const int s6_words = u.Word;
struct sockaddr_in6_old {
    SHORT sin6_family; // AF_INET6.
    USHORT sin6_port; // Transport level port number.
    ULONG sin6_flowinfo; // IPv6 flow information.
    IN6_ADDR sin6_addr; // IPv6 address.
};
typedef union sockaddr_gen {
    struct sockaddr Address;
    struct sockaddr_in AddressIn;
    struct sockaddr_in6_old AddressIn6;
} sockaddr_gen;
typedef struct _INTERFACE_INFO {
    ULONG iiFlags; // Interface flags.
    sockaddr_gen iiAddress; // Interface address.
    sockaddr_gen iiBroadcastAddress; // Broadcast address.
    sockaddr_gen iiNetmask; // Network mask.
} INTERFACE_INFO, *LPINTERFACE_INFO;
typedef struct _INTERFACE_INFO_EX {
    ULONG iiFlags; // Interface flags.
    SOCKET_ADDRESS iiAddress; // Interface address.
    SOCKET_ADDRESS iiBroadcastAddress; // Broadcast address.
    SOCKET_ADDRESS iiNetmask; // Network mask.
} INTERFACE_INFO_EX, *LPINTERFACE_INFO_EX;
static const int IFF_UP = 0x00000001;
static const int IFF_BROADCAST = 0x00000002;
static const int IFF_LOOPBACK = 0x00000004;
static const int IFF_POINTTOPOINT = 0x00000008;
static const int IFF_MULTICAST = 0x00000010;
static const int IP_OPTIONS = 1;
static const int IP_HDRINCL = 2;
static const int IP_TOS = 3;
static const int IP_TTL = 4;
static const int IP_MULTICAST_IF = 9;
static const int IP_MULTICAST_TTL = 10;
static const int IP_MULTICAST_LOOP = 11;
static const int IP_ADD_MEMBERSHIP = 12;
static const int IP_DROP_MEMBERSHIP = 13;
static const int IP_DONTFRAGMENT = 14;
static const int IP_ADD_SOURCE_MEMBERSHIP = 15;
static const int IP_DROP_SOURCE_MEMBERSHIP = 16;
static const int IP_BLOCK_SOURCE = 17;
static const int IP_UNBLOCK_SOURCE = 18;
static const int IP_PKTINFO = 19;
static const int IP_HOPLIMIT = 21;
static const int IP_RECEIVE_BROADCAST = 22;
static const int IP_RECVIF = 24;
static const int IP_RECVDSTADDR = 25;
static const int IP_IFLIST = 28;
static const int IP_ADD_IFLIST = 29;
static const int IP_DEL_IFLIST = 30;
static const int IP_UNICAST_IF = 31;
static const int IP_RTHDR = 32;
static const int IP_RECVRTHDR = 38;
static const int IP_TCLASS = 39;
static const int IP_RECVTCLASS = 40;
static const int IP_ORIGINAL_ARRIVAL_IF = 47;
static const int IP_UNSPECIFIED_TYPE_OF_SERVICE = -1;
static const int IPV6_ADDRESS_BITS = RTL_BITS_OF(IN6_ADDR);
typedef struct sockaddr_in6 {
    ADDRESS_FAMILY sin6_family; // AF_INET6.
    USHORT sin6_port; // Transport level port number.
    ULONG sin6_flowinfo; // IPv6 flow information.
    IN6_ADDR sin6_addr; // IPv6 address.
    union {
        ULONG sin6_scope_id; // Set of interfaces for a scope.
        SCOPE_ID sin6_scope_struct;
    };
} SOCKADDR_IN6_LH, *PSOCKADDR_IN6_LH, *LPSOCKADDR_IN6_LH;
typedef struct sockaddr_in6_w2ksp1 {
    short sin6_family; /* AF_INET6 */
    USHORT sin6_port; /* Transport level port number */
    ULONG sin6_flowinfo; /* IPv6 flow information */
    struct in6_addr sin6_addr; /* IPv6 address */
    ULONG sin6_scope_id; /* set of interfaces for a scope */
} SOCKADDR_IN6_W2KSP1, *PSOCKADDR_IN6_W2KSP1, *LPSOCKADDR_IN6_W2KSP1;
typedef SOCKADDR_IN6_LH SOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *LPSOCKADDR_IN6;
typedef union _SOCKADDR_INET {
    SOCKADDR_IN Ipv4;
    SOCKADDR_IN6 Ipv6;
    ADDRESS_FAMILY si_family;
} SOCKADDR_INET, *PSOCKADDR_INET;
typedef struct _sockaddr_in6_pair
{
    PSOCKADDR_IN6 SourceAddress;
    PSOCKADDR_IN6 DestinationAddress;
} SOCKADDR_IN6_PAIR, *PSOCKADDR_IN6_PAIR;
static const int SS_PORT(ssp) = (((PSOCKADDR_IN)(ssp))->sin_port);
static const int IN6ADDR_ANY_INIT = { 0 };
static const int IN6ADDR_LOOPBACK_INIT = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
static const int IN6ADDR_ALLNODESONNODE_INIT = { 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
static const int IN6ADDR_ALLNODESONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
static const int IN6ADDR_ALLROUTERSONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 };
static const int IN6ADDR_ALLMLDV2ROUTERSONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 };
static const int IN6ADDR_TEREDOINITIALLINKLOCALADDRESS_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe };
static const int IN6ADDR_TEREDOOLDLINKLOCALADDRESSXP_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'T', 'E', 'R', 'E', 'D', 'O' };
static const int IN6ADDR_TEREDOOLDLINKLOCALADDRESSVISTA_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
static const int IN6ADDR_LINKLOCALPREFIX_INIT = { 0xfe, 0x80, };
static const int IN6ADDR_MULTICASTPREFIX_INIT = { 0xff, 0x00, };
static const int IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, };
static const int IN6ADDR_V4MAPPEDPREFIX_INIT = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, };
static const int IN6ADDR_6TO4PREFIX_INIT = { 0x20, 0x02, };
static const int IN6ADDR_TEREDOPREFIX_INIT = { 0x20, 0x01, 0x00, 0x00, };
static const int IN6ADDR_TEREDOPREFIX_INIT_OLD = { 0x3f, 0xfe, 0x83, 0x1f, };
static const int IN6ADDR_LINKLOCALPREFIX_LENGTH = 64;
static const int IN6ADDR_MULTICASTPREFIX_LENGTH = 8;
static const int IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104;
static const int IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96;
static const int IN6ADDR_6TO4PREFIX_LENGTH = 16;
static const int IN6ADDR_TEREDOPREFIX_LENGTH = 32;
const SCOPE_ID scopeid_unspecified;
const IN_ADDR in4addr_any;
const IN_ADDR in4addr_loopback;
const IN_ADDR in4addr_broadcast;
const IN_ADDR in4addr_allnodesonlink;
const IN_ADDR in4addr_allroutersonlink;
const IN_ADDR in4addr_alligmpv3routersonlink;
const IN_ADDR in4addr_allteredohostsonlink;
const IN_ADDR in4addr_linklocalprefix;
const IN_ADDR in4addr_multicastprefix;
const IN6_ADDR in6addr_any;
const IN6_ADDR in6addr_loopback;
const IN6_ADDR in6addr_allnodesonnode;
const IN6_ADDR in6addr_allnodesonlink;
const IN6_ADDR in6addr_allroutersonlink;
const IN6_ADDR in6addr_allmldv2routersonlink;
const IN6_ADDR in6addr_teredoinitiallinklocaladdress;
const IN6_ADDR in6addr_linklocalprefix;
const IN6_ADDR in6addr_multicastprefix;
const IN6_ADDR in6addr_solicitednodemulticastprefix;
const IN6_ADDR in6addr_v4mappedprefix;
const IN6_ADDR in6addr_6to4prefix;
const IN6_ADDR in6addr_teredoprefix;
const IN6_ADDR in6addr_teredoprefix_old;
inline
BOOLEAN
IN6_ADDR_EQUAL(const IN6_ADDR *x, const IN6_ADDR *y)
{
    __int64 *a;
    __int64 *b;
    a = (__int64 *)x;
    b = (__int64 *)y;
    return (BOOLEAN)((a[1] == b[1]) && (a[0] == b[0]));
}
static const int IN6_ARE_ADDR_EQUAL = IN6_ADDR_EQUAL;
inline
BOOLEAN
IN6_IS_ADDR_UNSPECIFIED(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_LOOPBACK(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0x0100));
}
inline
BOOLEAN
IN6_IS_ADDR_MULTICAST(const IN6_ADDR *a)
{
    return (BOOLEAN)(a->u.Byte[0] == 0xff);
}
inline
BOOLEAN
IN6_IS_ADDR_EUI64(const IN6_ADDR *a)
{
    return (BOOLEAN)(((a->u.Byte[0] & 0xe0) != 0) &&
                     !IN6_IS_ADDR_MULTICAST(a));
}
inline
BOOLEAN
IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->u.Word[4] == 0xfffd) &&
                     (a->u.Word[5] == 0xffff) &&
                     (a->u.Word[6] == 0xffff) &&
                     ((a->u.Word[7] & 0x80ff) == 0x80ff));
}
inline
BOOLEAN
IN6_IS_ADDR_ANYCAST(const IN6_ADDR *a)
{
    return (IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(a) ||
            IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(a));
}
inline
BOOLEAN
IN6_IS_ADDR_LINKLOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Byte[0] == 0xfe) &&
                     ((a->u.Byte[1] & 0xc0) == 0x80));
}
inline
BOOLEAN
IN6_IS_ADDR_SITELOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Byte[0] == 0xfe) &&
                     ((a->u.Byte[1] & 0xc0) == 0xc0));
}
inline
BOOLEAN
IN6_IS_ADDR_GLOBAL(const IN6_ADDR *a)
{
    ULONG High = (a->u.Byte[0] & 0xf0);
    return (BOOLEAN)((High != 0) && (High != 0xf0));
}
inline
BOOLEAN
IN6_IS_ADDR_V4MAPPED(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0xffff));
}
inline
BOOLEAN
IN6_IS_ADDR_V4COMPAT(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     !((a->u.Word[6] == 0) &&
                       (a->u.Byte[14] == 0) &&
                       ((a->u.Byte[15] == 0) || (a->u.Byte[15] == 1))));
}
inline
BOOLEAN
IN6_IS_ADDR_V4TRANSLATED(const IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0xffff) &&
                     (a->u.Word[5] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_NODELOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 1));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_LINKLOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 2));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_SITELOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 5));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_ORGLOCAL(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 8));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_GLOBAL(const IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 0xe));
}
inline
void
IN6_SET_ADDR_UNSPECIFIED(PIN6_ADDR a)
{
    memset(a->u.Byte, 0, sizeof(IN6_ADDR));
}
inline
void
IN6_SET_ADDR_LOOPBACK(PIN6_ADDR a)
{
    memset(a->u.Byte, 0, sizeof(IN6_ADDR));
    a->u.Byte[15] = 1;
}
inline
void
IN6ADDR_SETANY(PSOCKADDR_IN6 a)
{
    a->sin6_family = 23;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_UNSPECIFIED(&a->sin6_addr);
    a->sin6_scope_id = 0;
}
inline
void
IN6ADDR_SETLOOPBACK(PSOCKADDR_IN6 a)
{
    a->sin6_family = 23;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_LOOPBACK(&a->sin6_addr);
    a->sin6_scope_id = 0;
}
inline
BOOLEAN
IN6ADDR_ISANY(const SOCKADDR_IN6 *a)
{
    ((void) 0);
    return IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr);
}
inline
BOOLEAN
IN6ADDR_ISLOOPBACK(const SOCKADDR_IN6 *a)
{
    ((void) 0);
    return IN6_IS_ADDR_LOOPBACK(&a->sin6_addr);
}
inline
BOOLEAN
IN6ADDR_ISEQUAL(const SOCKADDR_IN6 *a, const SOCKADDR_IN6 *b)
{
    ((void) 0);
    return (BOOLEAN)(a->sin6_scope_id == b->sin6_scope_id &&
                     IN6_ADDR_EQUAL(&a->sin6_addr, &b->sin6_addr));
}
inline
BOOLEAN
IN6ADDR_ISUNSPECIFIED(const SOCKADDR_IN6 *a)
{
    ((void) 0);
    return (BOOLEAN)(a->sin6_scope_id == 0 &&
                     IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr));
}
static const int SIO_GET_INTERFACE_LIST = _IOR('t', 127, ULONG);
static const int SIO_GET_INTERFACE_LIST_EX = _IOR('t', 126, ULONG);
static const int SIO_SET_MULTICAST_FILTER = _IOW('t', 125, ULONG);
static const int SIO_GET_MULTICAST_FILTER = _IOW('t', 124 | IOC_IN, ULONG);
static const int SIOCSIPMSFILTER = SIO_SET_MULTICAST_FILTER;
static const int SIOCGIPMSFILTER = SIO_GET_MULTICAST_FILTER;
static const int SIOCSMSFILTER = _IOW('t', 126, ULONG);
static const int SIOCGMSFILTER = _IOW('t', 127 | IOC_IN, ULONG);
static const int SIO_IDEAL_SEND_BACKLOG_QUERY = _IOR('t', 123, ULONG);
static const int SIO_IDEAL_SEND_BACKLOG_CHANGE = _IO('t', 122);
static const int MCAST_JOIN_GROUP = 41;
static const int MCAST_LEAVE_GROUP = 42;
static const int MCAST_BLOCK_SOURCE = 43;
static const int MCAST_UNBLOCK_SOURCE = 44;
static const int MCAST_JOIN_SOURCE_GROUP = 45;
static const int MCAST_LEAVE_SOURCE_GROUP = 46;
typedef enum {
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE
} MULTICAST_MODE_TYPE;
typedef struct ip_mreq {
    IN_ADDR imr_multiaddr; // IP multicast address of group.
    IN_ADDR imr_interface; // Local IP address of interface.
} IP_MREQ, *PIP_MREQ;
typedef struct ip_mreq_source {
    IN_ADDR imr_multiaddr; // IP multicast address of group.
    IN_ADDR imr_sourceaddr; // IP address of source.
    IN_ADDR imr_interface; // Local IP address of interface.
} IP_MREQ_SOURCE, *PIP_MREQ_SOURCE;
typedef struct ip_msfilter {
    IN_ADDR imsf_multiaddr; // IP multicast address of group.
    IN_ADDR imsf_interface; // Local IP address of interface.
    MULTICAST_MODE_TYPE imsf_fmode; // Filter mode.
    ULONG imsf_numsrc; // Number of sources in src_list.
    IN_ADDR imsf_slist[1]; // Start of source list.
} IP_MSFILTER, *PIP_MSFILTER;
static const int IP_MSFILTER_SIZE(NumSources) = (sizeof(IP_MSFILTER) - sizeof(IN_ADDR) + (NumSources) * sizeof(IN_ADDR));
static const int IPV6_HOPOPTS = 1;
static const int IPV6_HDRINCL = 2;
static const int IPV6_UNICAST_HOPS = 4;
static const int IPV6_MULTICAST_IF = 9;
static const int IPV6_MULTICAST_HOPS = 10;
static const int IPV6_MULTICAST_LOOP = 11;
static const int IPV6_ADD_MEMBERSHIP = 12;
static const int IPV6_JOIN_GROUP = IPV6_ADD_MEMBERSHIP;
static const int IPV6_DROP_MEMBERSHIP = 13;
static const int IPV6_LEAVE_GROUP = IPV6_DROP_MEMBERSHIP;
static const int IPV6_DONTFRAG = 14;
static const int IPV6_PKTINFO = 19;
static const int IPV6_HOPLIMIT = 21;
static const int IPV6_PROTECTION_LEVEL = 23;
static const int IPV6_RECVIF = 24;
static const int IPV6_RECVDSTADDR = 25;
static const int IPV6_CHECKSUM = 26;
static const int IPV6_V6ONLY = 27;
static const int IPV6_IFLIST = 28;
static const int IPV6_ADD_IFLIST = 29;
static const int IPV6_DEL_IFLIST = 30;
static const int IPV6_UNICAST_IF = 31;
static const int IPV6_RTHDR = 32;
static const int IPV6_RECVRTHDR = 38;
static const int IPV6_TCLASS = 39;
static const int IPV6_RECVTCLASS = 40;
static const int IP_UNSPECIFIED_HOP_LIMIT = -1;
static const int IP_PROTECTION_LEVEL = IPV6_PROTECTION_LEVEL;
static const int PROTECTION_LEVEL_UNRESTRICTED = 10;
static const int PROTECTION_LEVEL_EDGERESTRICTED = 20;
static const int PROTECTION_LEVEL_RESTRICTED = 30;
static const int PROTECTION_LEVEL_DEFAULT = ((UINT)-1);
typedef struct ipv6_mreq {
    IN6_ADDR ipv6mr_multiaddr; // IPv6 multicast address.
    ULONG ipv6mr_interface; // Interface index.
} IPV6_MREQ, *PIPV6_MREQ;
typedef struct group_req {
    ULONG gr_interface; // Interface index.
    SOCKADDR_STORAGE gr_group; // Multicast address.
} GROUP_REQ, *PGROUP_REQ;
typedef struct group_source_req {
    ULONG gsr_interface; // Interface index.
    SOCKADDR_STORAGE gsr_group; // Group address.
    SOCKADDR_STORAGE gsr_source; // Source address.
} GROUP_SOURCE_REQ, *PGROUP_SOURCE_REQ;
typedef struct group_filter {
    ULONG gf_interface; // Interface index.
    SOCKADDR_STORAGE gf_group; // Multicast address.
    MULTICAST_MODE_TYPE gf_fmode; // Filter mode.
    ULONG gf_numsrc; // Number of sources.
    SOCKADDR_STORAGE gf_slist[1]; // Source address.
} GROUP_FILTER, *PGROUP_FILTER;
static const int GROUP_FILTER_SIZE(numsrc) = (sizeof(GROUP_FILTER) - sizeof(SOCKADDR_STORAGE) + (numsrc) * sizeof(SOCKADDR_STORAGE));
typedef struct in_pktinfo {
    IN_ADDR ipi_addr; // Source/destination IPv4 address.
    ULONG ipi_ifindex; // Send/receive interface index.
} IN_PKTINFO, *PIN_PKTINFO;
typedef char __C_ASSERT__[(sizeof(IN_PKTINFO) == 8)?1:-1];
typedef struct in6_pktinfo {
    IN6_ADDR ipi6_addr; // Source/destination IPv6 address.
    ULONG ipi6_ifindex; // Send/receive interface index.
} IN6_PKTINFO, *PIN6_PKTINFO;
typedef char __C_ASSERT__[(sizeof(IN6_PKTINFO) == 20)?1:-1];
static const int INET_ADDRSTRLEN = 22;
static const int INET6_ADDRSTRLEN = 65;
static const int TCP_OFFLOAD_NO_PREFERENCE = 0;
static const int TCP_OFFLOAD_NOT_PREFERRED = 1;
static const int TCP_OFFLOAD_PREFERRED = 2;
static const int TCP_EXPEDITED_1122 = 0x0002;
static const int TCP_KEEPALIVE = 3;
static const int TCP_MAXSEG = 4;
static const int TCP_MAXRT = 5;
static const int TCP_STDURG = 6;
static const int TCP_NOURG = 7;
static const int TCP_ATMARK = 8;
static const int TCP_NOSYNRETRIES = 9;
static const int TCP_TIMESTAMPS = 10;
static const int TCP_OFFLOAD_PREFERENCE = 11;
static const int TCP_CONGESTION_ALGORITHM = 12;
static const int TCP_DELAY_FIN_ACK = 13;
static const int CHAR_BIT = 8;
static const int SCHAR_MIN = (-128);
static const int SCHAR_MAX = 127;
static const int UCHAR_MAX = 0xff;
static const int CHAR_MIN = SCHAR_MIN;
static const int CHAR_MAX = SCHAR_MAX;
static const int MB_LEN_MAX = 5;
static const int SHRT_MIN = (-32768);
static const int SHRT_MAX = 32767;
static const int USHRT_MAX = 0xffff;
static const int INT_MIN = (-2147483647 - 1);
static const int INT_MAX = 2147483647;
static const int UINT_MAX = 0xffffffff;
static const int LONG_MIN = (-2147483647L - 1);
static const long LONG_MAX = 2147483647L;
static const int ULONG_MAX = 0xffffffffUL;
static const int LLONG_MAX = 9223372036854775807i64;
static const int LLONG_MIN = (-9223372036854775807i64 - 1);
static const int ULLONG_MAX = 0xffffffffffffffffui64;
static const int _I8_MIN = (-127i8 - 1);
static const int _I8_MAX = 127i8;
static const int _UI8_MAX = 0xffui8;
static const int _I16_MIN = (-32767i16 - 1);
static const int _I16_MAX = 32767i16;
static const int _UI16_MAX = 0xffffui16;
static const int _I32_MIN = (-2147483647i32 - 1);
static const int _I32_MAX = 2147483647i32;
static const int _UI32_MAX = 0xffffffffui32;
static const int _I64_MIN = (-9223372036854775807i64 - 1);
static const int _I64_MAX = 9223372036854775807i64;
static const int _UI64_MAX = 0xffffffffffffffffui64;
static const int SIZE_MAX = _UI64_MAX;
static const int RSIZE_MAX = SIZE_MAX;
static const int UDP_NOCHECKSUM = 1;
static const int UDP_CHECKSUM_COVERAGE = 20;
static const int WS2TCPIP_INLINE = inline;
static const int EAI_AGAIN = WSATRY_AGAIN;
static const int EAI_BADFLAGS = WSAEINVAL;
static const int EAI_FAIL = WSANO_RECOVERY;
static const int EAI_FAMILY = WSAEAFNOSUPPORT;
static const int EAI_MEMORY = WSA_NOT_ENOUGH_MEMORY;
static const int EAI_NOSECURENAME = WSA_SECURE_HOST_NOT_FOUND;
static const int EAI_NONAME = WSAHOST_NOT_FOUND;
static const int EAI_SERVICE = WSATYPE_NOT_FOUND;
static const int EAI_SOCKTYPE = WSAESOCKTNOSUPPORT;
static const int EAI_IPSECPOLICY = WSA_IPSEC_NAME_POLICY_ERROR;
static const int EAI_NODATA = EAI_NONAME;
typedef ADDRINFOA ADDRINFOT, *PADDRINFOT;
typedef ADDRINFOA ADDRINFO, * LPADDRINFO;
typedef ADDRINFOEXA ADDRINFOEX, *PADDRINFOEX;
INT
getaddrinfo(
    PCSTR pNodeName,
    PCSTR pServiceName,
    const ADDRINFOA * pHints,
    PADDRINFOA * ppResult
    );
INT
GetAddrInfoW(
    PCWSTR pNodeName,
    PCWSTR pServiceName,
    const ADDRINFOW * pHints,
    PADDRINFOW * ppResult
    );
static const int GetAddrInfoA = getaddrinfo;
static const int GetAddrInfo = GetAddrInfoA;
typedef
void
( * LPLOOKUPSERVICE_COMPLETION_ROUTINE)(
    DWORD dwError,
    DWORD dwBytes,
    LPWSAOVERLAPPED lpOverlapped
    );
INT
GetAddrInfoExA(
    PCSTR pName,
    PCSTR pServiceName,
    DWORD dwNameSpace,
    LPGUID lpNspId,
    const ADDRINFOEXA *hints,
    PADDRINFOEXA * ppResult,
    struct timeval *timeout,
    LPOVERLAPPED lpOverlapped,
    LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,
    LPHANDLE lpNameHandle
    );
INT
GetAddrInfoExW(
    PCWSTR pName,
    PCWSTR pServiceName,
    DWORD dwNameSpace,
    LPGUID lpNspId,
    const ADDRINFOEXW *hints,
    PADDRINFOEXW * ppResult,
    struct timeval *timeout,
    LPOVERLAPPED lpOverlapped,
    LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,
    LPHANDLE lpHandle
    );
static const int GetAddrInfoEx = GetAddrInfoExA;
INT
SetAddrInfoExA(
    PCSTR pName,
    PCSTR pServiceName,
    SOCKET_ADDRESS *pAddresses,
    DWORD dwAddressCount,
    LPBLOB lpBlob,
    DWORD dwFlags,
    DWORD dwNameSpace,
    LPGUID lpNspId,
    struct timeval *timeout,
    LPOVERLAPPED lpOverlapped,
    LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,
    LPHANDLE lpNameHandle
    );
INT
SetAddrInfoExW(
    PCWSTR pName,
    PCWSTR pServiceName,
    SOCKET_ADDRESS *pAddresses,
    DWORD dwAddressCount,
    LPBLOB lpBlob,
    DWORD dwFlags,
    DWORD dwNameSpace,
    LPGUID lpNspId,
    struct timeval *timeout,
    LPOVERLAPPED lpOverlapped,
    LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,
    LPHANDLE lpNameHandle
    );
static const int SetAddrInfoEx = SetAddrInfoExA;
void
freeaddrinfo(
    PADDRINFOA pAddrInfo
    );
void
FreeAddrInfoW(
    PADDRINFOW pAddrInfo
    );
static const int FreeAddrInfoA = freeaddrinfo;
static const int FreeAddrInfo = FreeAddrInfoA;
void
FreeAddrInfoEx(
    PADDRINFOEXA pAddrInfoEx
    );
void
FreeAddrInfoExW(
    PADDRINFOEXW pAddrInfoEx
    );
static const int FreeAddrInfoExA = FreeAddrInfoEx;
typedef
void
( *LPFN_FREEADDRINFOEXA)(
    PADDRINFOEXA pAddrInfoEx
    );
typedef
void
( *LPFN_FREEADDRINFOEXW)(
    PADDRINFOEXW pAddrInfoEx
    );
static const int LPFN_FREEADDRINFOEX = LPFN_FREEADDRINFOEXA;
typedef int socklen_t;
INT
getnameinfo(
    const SOCKADDR * pSockaddr,
    socklen_t SockaddrLength,
    PCHAR pNodeBuffer,
    DWORD NodeBufferSize,
    PCHAR pServiceBuffer,
    DWORD ServiceBufferSize,
    INT Flags
    );
INT
GetNameInfoW(
    const SOCKADDR * pSockaddr,
    socklen_t SockaddrLength,
    PWCHAR pNodeBuffer,
    DWORD NodeBufferSize,
    PWCHAR pServiceBuffer,
    DWORD ServiceBufferSize,
    INT Flags
    );
static const int GetNameInfoA = getnameinfo;
static const int GetNameInfo = GetNameInfoA;
INT
inet_pton(
    INT Family,
    PCSTR pszAddrString,
    PVOID pAddrBuf
    );
INT
InetPtonW(
    INT Family,
    PCWSTR pszAddrString,
    PVOID pAddrBuf
    );
PCSTR
inet_ntop(
    INT Family,
    PVOID pAddr,
    PSTR pStringBuf,
    size_t StringBufSize
    );
PCWSTR
InetNtopW(
    INT Family,
    PVOID pAddr,
    PWSTR pStringBuf,
    size_t StringBufSize
    );
static const int InetPtonA = inet_pton;
static const int InetNtopA = inet_ntop;
static const int InetPton = InetPtonA;
static const int InetNtop = InetNtopA;
static const int gai_strerror = gai_strerrorA;
static const int GAI_STRERROR_BUFFER_SIZE = 1024;
inline
char *
gai_strerrorA(
    int ecode)
{
    DWORD dwMsgLen;
    static char buff[1024 + 1];
    dwMsgLen = FormatMessageA(0x00001000
                             |0x00000200
                             |0x000000FF,
                              ((void *)0),
                              ecode,
                              ((((WORD )(0x01)) << 10) | (WORD )(0x00)),
                              (LPSTR)buff,
                              1024,
                              ((void *)0));
    return buff;
}
inline
WCHAR *
gai_strerrorW(
    int ecode
    )
{
    DWORD dwMsgLen;
    static WCHAR buff[1024 + 1];
    dwMsgLen = FormatMessageW(0x00001000
                             |0x00000200
                             |0x000000FF,
                              ((void *)0),
                              ecode,
                              ((((WORD )(0x01)) << 10) | (WORD )(0x00)),
                              (LPWSTR)buff,
                              1024,
                              ((void *)0));
    return buff;
}
inline
int
setipv4sourcefilter(
    SOCKET Socket,
    IN_ADDR Interface,
    IN_ADDR Group,
    MULTICAST_MODE_TYPE FilterMode,
    ULONG SourceCount,
    const IN_ADDR *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PIP_MSFILTER Filter;
    if (SourceCount >
        (((ULONG) (0xffffffffUL - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(10055L);
        return (-1);
    }
    Size = (sizeof(IP_MSFILTER) - sizeof(IN_ADDR) + (SourceCount) * sizeof(IN_ADDR));
    Filter = (PIP_MSFILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == ((void *)0)) {
        WSASetLastError(10055L);
        return (-1);
    }
    Filter->imsf_multiaddr = Group;
    Filter->imsf_interface = Interface;
    Filter->imsf_fmode = FilterMode;
    Filter->imsf_numsrc = SourceCount;
    if (SourceCount > 0) {
        memcpy((Filter->imsf_slist),(SourceList),(SourceCount * sizeof(*SourceList)));
    }
    Error = WSAIoctl(Socket, (0x80000000|(((long)sizeof(ULONG)&0x7f)<<16)|(('t')<<8)|(125)), Filter, Size, ((void *)0), 0,
                     &Returned, ((void *)0), ((void *)0));
    HeapFree(GetProcessHeap(), 0, Filter);
    return Error;
}
inline
int
getipv4sourcefilter(
    SOCKET Socket,
    IN_ADDR Interface,
    IN_ADDR Group,
    MULTICAST_MODE_TYPE *FilterMode,
    ULONG *SourceCount,
    IN_ADDR *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PIP_MSFILTER Filter;
    if (*SourceCount >
        (((ULONG) (0xffffffffUL - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(10055L);
        return (-1);
    }
    Size = (sizeof(IP_MSFILTER) - sizeof(IN_ADDR) + (*SourceCount) * sizeof(IN_ADDR));
    Filter = (PIP_MSFILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == ((void *)0)) {
        WSASetLastError(10055L);
        return (-1);
    }
    Filter->imsf_multiaddr = Group;
    Filter->imsf_interface = Interface;
    Filter->imsf_numsrc = *SourceCount;
    Error = WSAIoctl(Socket, (0x80000000|(((long)sizeof(ULONG)&0x7f)<<16)|(('t')<<8)|(124 | 0x80000000)), Filter, Size, Filter, Size,
                     &Returned, ((void *)0), ((void *)0));
    if (Error == 0) {
        if (*SourceCount > 0) {
            memcpy((SourceList),(Filter->imsf_slist),(*SourceCount * sizeof(*SourceList)));
            *SourceCount = Filter->imsf_numsrc;
        }
        *FilterMode = Filter->imsf_fmode;
    }
    HeapFree(GetProcessHeap(), 0, Filter);
    return Error;
}
inline
int
setsourcefilter(
    SOCKET Socket,
    ULONG Interface,
    const SOCKADDR *Group,
    int GroupLength,
    MULTICAST_MODE_TYPE FilterMode,
    ULONG SourceCount,
    const SOCKADDR_STORAGE *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PGROUP_FILTER Filter;
    if (SourceCount >=
        (((ULONG) (0xffffffffUL - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(10055L);
        return (-1);
    }
    Size = (sizeof(GROUP_FILTER) - sizeof(SOCKADDR_STORAGE) + (SourceCount) * sizeof(SOCKADDR_STORAGE));
    Filter = (PGROUP_FILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == ((void *)0)) {
        WSASetLastError(10055L);
        return (-1);
    }
    Filter->gf_interface = Interface;
    memset((&Filter->gf_group),0,(sizeof(Filter->gf_group)));
    memcpy((&Filter->gf_group),(Group),(GroupLength));
    Filter->gf_fmode = FilterMode;
    Filter->gf_numsrc = SourceCount;
    if (SourceCount > 0) {
        memcpy((Filter->gf_slist),(SourceList),(SourceCount * sizeof(*SourceList)));
    }
    Error = WSAIoctl(Socket, (0x80000000|(((long)sizeof(ULONG)&0x7f)<<16)|(('t')<<8)|(126)), Filter, Size, ((void *)0), 0,
                     &Returned, ((void *)0), ((void *)0));
    HeapFree(GetProcessHeap(), 0, Filter);
    return Error;
}
inline
int
getsourcefilter(
    SOCKET Socket,
    ULONG Interface,
    const SOCKADDR *Group,
    int GroupLength,
    MULTICAST_MODE_TYPE *FilterMode,
    ULONG *SourceCount,
    SOCKADDR_STORAGE *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PGROUP_FILTER Filter;
    if (*SourceCount >
        (((ULONG) (0xffffffffUL - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(10055L);
        return (-1);
    }
    Size = (sizeof(GROUP_FILTER) - sizeof(SOCKADDR_STORAGE) + (*SourceCount) * sizeof(SOCKADDR_STORAGE));
    Filter = (PGROUP_FILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == ((void *)0)) {
        WSASetLastError(10055L);
        return (-1);
    }
    Filter->gf_interface = Interface;
    memset((&Filter->gf_group),0,(sizeof(Filter->gf_group)));
    memcpy((&Filter->gf_group),(Group),(GroupLength));
    Filter->gf_numsrc = *SourceCount;
    Error = WSAIoctl(Socket, (0x80000000|(((long)sizeof(ULONG)&0x7f)<<16)|(('t')<<8)|(127 | 0x80000000)), Filter, Size, Filter, Size,
                     &Returned, ((void *)0), ((void *)0));
    if (Error == 0) {
        if (*SourceCount > 0) {
            memcpy((SourceList),(Filter->gf_slist),(*SourceCount * sizeof(*SourceList)));
            *SourceCount = Filter->gf_numsrc;
        }
        *FilterMode = Filter->gf_fmode;
    }
    HeapFree(GetProcessHeap(), 0, Filter);
    return Error;
}
inline
int
idealsendbacklogquery(
    SOCKET s,
    ULONG *pISB
    )
{
    DWORD bytes;
    return WSAIoctl(s, (0x40000000|(((long)sizeof(ULONG)&0x7f)<<16)|(('t')<<8)|(123)),
                    ((void *)0), 0, pISB, sizeof(*pISB), &bytes, ((void *)0), ((void *)0));
}
inline
int
idealsendbacklognotify(
    SOCKET s,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    )
{
    DWORD bytes;
    return WSAIoctl(s, (0x20000000|(('t')<<8)|(122)),
                    ((void *)0), 0, ((void *)0), 0, &bytes,
                    lpOverlapped, lpCompletionRoutine);
}
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int WS2DEF_INLINE = inline;
typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;
static const int s_addr = S_un.S_addr;
static const int s_host = S_un.S_un_b.s_b2;
static const int s_net = S_un.S_un_b.s_b1;
static const int s_imp = S_un.S_un_w.s_w2;
static const int s_impno = S_un.S_un_b.s_b4;
static const int s_lh = S_un.S_un_b.s_b3;
} IN_ADDR, *PIN_ADDR, FAR *LPIN_ADDR;
typedef USHORT ADDRESS_FAMILY;
static const int AF_UNSPEC = 0;
static const int AF_UNIX = 1;
static const int AF_INET = 2;
static const int AF_IMPLINK = 3;
static const int AF_PUP = 4;
static const int AF_CHAOS = 5;
static const int AF_NS = 6;
static const int AF_IPX = AF_NS;
static const int AF_ISO = 7;
static const int AF_OSI = AF_ISO;
static const int AF_ECMA = 8;
static const int AF_DATAKIT = 9;
static const int AF_CCITT = 10;
static const int AF_SNA = 11;
static const int AF_DECnet = 12;
static const int AF_DLI = 13;
static const int AF_LAT = 14;
static const int AF_HYLINK = 15;
static const int AF_APPLETALK = 16;
static const int AF_NETBIOS = 17;
static const int AF_VOICEVIEW = 18;
static const int AF_FIREFOX = 19;
static const int AF_UNKNOWN1 = 20;
static const int AF_BAN = 21;
static const int AF_ATM = 22;
static const int AF_INET6 = 23;
static const int AF_CLUSTER = 24;
static const int AF_12844 = 25;
static const int AF_IRDA = 26;
static const int AF_NETDES = 28;
static const int AF_TCNPROCESS = 29;
static const int AF_TCNMESSAGE = 30;
static const int AF_ICLFXBM = 31;
static const int AF_BTH = 32;
static const int AF_LINK = 33;
static const int AF_MAX = 34;
static const int SOCK_STREAM = 1;
static const int SOCK_DGRAM = 2;
static const int SOCK_RAW = 3;
static const int SOCK_RDM = 4;
static const int SOCK_SEQPACKET = 5;
static const int SOL_SOCKET = 0xffff;
static const int SO_DEBUG = 0x0001;
static const int SO_ACCEPTCONN = 0x0002;
static const int SO_REUSEADDR = 0x0004;
static const int SO_KEEPALIVE = 0x0008;
static const int SO_DONTROUTE = 0x0010;
static const int SO_BROADCAST = 0x0020;
static const int SO_USELOOPBACK = 0x0040;
static const int SO_LINGER = 0x0080;
static const int SO_OOBINLINE = 0x0100;
static const int SO_DONTLINGER = (int)(~SO_LINGER);
static const int SO_EXCLUSIVEADDRUSE = ((int)(~SO_REUSEADDR));
static const int SO_SNDBUF = 0x1001;
static const int SO_RCVBUF = 0x1002;
static const int SO_SNDLOWAT = 0x1003;
static const int SO_RCVLOWAT = 0x1004;
static const int SO_SNDTIMEO = 0x1005;
static const int SO_RCVTIMEO = 0x1006;
static const int SO_ERROR = 0x1007;
static const int SO_TYPE = 0x1008;
static const int SO_BSP_STATE = 0x1009;
static const int SO_GROUP_ID = 0x2001;
static const int SO_GROUP_PRIORITY = 0x2002;
static const int SO_MAX_MSG_SIZE = 0x2003;
static const int SO_CONDITIONAL_ACCEPT = 0x3002;
static const int SO_PAUSE_ACCEPT = 0x3003;
static const int SO_COMPARTMENT_ID = 0x3004;
static const int SO_RANDOMIZE_PORT = 0x3005;
static const int SO_PORT_SCALABILITY = 0x3006;
static const int WSK_SO_BASE = 0x4000;
static const int TCP_NODELAY = 0x0001;
typedef struct sockaddr {
    ADDRESS_FAMILY sa_family; // Address family.
    CHAR sa_data[14]; // Up to 14 bytes of direct address.
} SOCKADDR, *PSOCKADDR, FAR *LPSOCKADDR;
typedef struct _SOCKET_ADDRESS {
    LPSOCKADDR lpSockaddr;
    INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;
typedef struct _SOCKET_ADDRESS_LIST {
    INT iAddressCount;
    SOCKET_ADDRESS Address[1];
} SOCKET_ADDRESS_LIST, *PSOCKET_ADDRESS_LIST, FAR *LPSOCKET_ADDRESS_LIST;
static const int SIZEOF_SOCKET_ADDRESS_LIST(AddressCount) = (FIELD_OFFSET(SOCKET_ADDRESS_LIST, Address) + AddressCount * sizeof(SOCKET_ADDRESS));
typedef struct _CSADDR_INFO {
    SOCKET_ADDRESS LocalAddr ;
    SOCKET_ADDRESS RemoteAddr ;
    INT iSocketType ;
    INT iProtocol ;
} CSADDR_INFO, *PCSADDR_INFO, FAR * LPCSADDR_INFO ;
static const int _SS_MAXSIZE = 128;
static const int _SS_ALIGNSIZE = (sizeof(__int64));
static const int _SS_PAD1SIZE = (_SS_ALIGNSIZE - sizeof(USHORT));
static const int _SS_PAD2SIZE = (_SS_MAXSIZE - (sizeof(USHORT) + _SS_PAD1SIZE + _SS_ALIGNSIZE));
typedef struct sockaddr_storage {
    ADDRESS_FAMILY ss_family; // address family
    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))]; // 6 byte pad, this is to make
    __int64 __ss_align; // Field to force desired structure
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))]; // 112 byte pad to achieve desired size;
} SOCKADDR_STORAGE_LH, *PSOCKADDR_STORAGE_LH, FAR *LPSOCKADDR_STORAGE_LH;
typedef struct sockaddr_storage_xp {
    short ss_family; // Address family.
    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))]; // 6 byte pad, this is to make
    __int64 __ss_align; // Field to force desired structure
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))]; // 112 byte pad to achieve desired size;
} SOCKADDR_STORAGE_XP, *PSOCKADDR_STORAGE_XP, FAR *LPSOCKADDR_STORAGE_XP;
typedef SOCKADDR_STORAGE_LH SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE, FAR *LPSOCKADDR_STORAGE;
static const int IOC_UNIX = 0x00000000;
static const int IOC_WS2 = 0x08000000;
static const int IOC_PROTOCOL = 0x10000000;
static const int IOC_VENDOR = 0x18000000;
static const int IOC_WSK = (IOC_WS2|0x07000000);
static const int _WSAIO(x,y) = (IOC_VOID|(x)|(y));
static const int _WSAIOR(x,y) = (IOC_OUT|(x)|(y));
static const int _WSAIOW(x,y) = (IOC_IN|(x)|(y));
static const int _WSAIORW(x,y) = (IOC_INOUT|(x)|(y));
static const int SIO_ASSOCIATE_HANDLE = _WSAIOW(IOC_WS2,1);
static const int SIO_ENABLE_CIRCULAR_QUEUEING = _WSAIO(IOC_WS2,2);
static const int SIO_FIND_ROUTE = _WSAIOR(IOC_WS2,3);
static const int SIO_FLUSH = _WSAIO(IOC_WS2,4);
static const int SIO_GET_BROADCAST_ADDRESS = _WSAIOR(IOC_WS2,5);
static const int SIO_GET_EXTENSION_FUNCTION_POINTER = _WSAIORW(IOC_WS2,6);
static const int SIO_GET_QOS = _WSAIORW(IOC_WS2,7);
static const int SIO_GET_GROUP_QOS = _WSAIORW(IOC_WS2,8);
static const int SIO_MULTIPOINT_LOOPBACK = _WSAIOW(IOC_WS2,9);
static const int SIO_MULTICAST_SCOPE = _WSAIOW(IOC_WS2,10);
static const int SIO_SET_QOS = _WSAIOW(IOC_WS2,11);
static const int SIO_SET_GROUP_QOS = _WSAIOW(IOC_WS2,12);
static const int SIO_TRANSLATE_HANDLE = _WSAIORW(IOC_WS2,13);
static const int SIO_ROUTING_INTERFACE_QUERY = _WSAIORW(IOC_WS2,20);
static const int SIO_ROUTING_INTERFACE_CHANGE = _WSAIOW(IOC_WS2,21);
static const int SIO_ADDRESS_LIST_QUERY = _WSAIOR(IOC_WS2,22);
static const int SIO_ADDRESS_LIST_CHANGE = _WSAIO(IOC_WS2,23);
static const int SIO_QUERY_TARGET_PNP_HANDLE = _WSAIOR(IOC_WS2,24);
static const int SIO_ADDRESS_LIST_SORT = _WSAIORW(IOC_WS2,25);
static const int SIO_RESERVED_1 = _WSAIOW(IOC_WS2,26);
static const int SIO_RESERVED_2 = _WSAIOW(IOC_WS2,33);
static const int IPPROTO_IP = 0;
typedef enum {
    IPPROTO_HOPOPTS = 0, // IPv6 Hop-by-Hop options
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_GGP = 3,
    IPPROTO_IPV4 = 4,
    IPPROTO_ST = 5,
    IPPROTO_TCP = 6,
    IPPROTO_CBT = 7,
    IPPROTO_EGP = 8,
    IPPROTO_IGP = 9,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_RDP = 27,
    IPPROTO_IPV6 = 41, // IPv6 header
    IPPROTO_ROUTING = 43, // IPv6 Routing header
    IPPROTO_FRAGMENT = 44, // IPv6 fragmentation header
    IPPROTO_ESP = 50, // encapsulating security payload
    IPPROTO_AH = 51, // authentication header
    IPPROTO_ICMPV6 = 58, // ICMPv6
    IPPROTO_NONE = 59, // IPv6 no next header
    IPPROTO_DSTOPTS = 60, // IPv6 Destination options
    IPPROTO_ND = 77,
    IPPROTO_ICLFXBM = 78,
    IPPROTO_PIM = 103,
    IPPROTO_PGM = 113,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
    IPPROTO_RESERVED_RAW = 257,
    IPPROTO_RESERVED_IPSEC = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD = 259,
    IPPROTO_RESERVED_MAX = 260
} IPPROTO, *PIPROTO;
static const int IPPORT_TCPMUX = 1;
static const int IPPORT_ECHO = 7;
static const int IPPORT_DISCARD = 9;
static const int IPPORT_SYSTAT = 11;
static const int IPPORT_DAYTIME = 13;
static const int IPPORT_NETSTAT = 15;
static const int IPPORT_QOTD = 17;
static const int IPPORT_MSP = 18;
static const int IPPORT_CHARGEN = 19;
static const int IPPORT_FTP_DATA = 20;
static const int IPPORT_FTP = 21;
static const int IPPORT_TELNET = 23;
static const int IPPORT_SMTP = 25;
static const int IPPORT_TIMESERVER = 37;
static const int IPPORT_NAMESERVER = 42;
static const int IPPORT_WHOIS = 43;
static const int IPPORT_MTP = 57;
static const int IPPORT_TFTP = 69;
static const int IPPORT_RJE = 77;
static const int IPPORT_FINGER = 79;
static const int IPPORT_TTYLINK = 87;
static const int IPPORT_SUPDUP = 95;
static const int IPPORT_POP3 = 110;
static const int IPPORT_NTP = 123;
static const int IPPORT_EPMAP = 135;
static const int IPPORT_NETBIOS_NS = 137;
static const int IPPORT_NETBIOS_DGM = 138;
static const int IPPORT_NETBIOS_SSN = 139;
static const int IPPORT_IMAP = 143;
static const int IPPORT_SNMP = 161;
static const int IPPORT_SNMP_TRAP = 162;
static const int IPPORT_IMAP3 = 220;
static const int IPPORT_LDAP = 389;
static const int IPPORT_HTTPS = 443;
static const int IPPORT_MICROSOFT_DS = 445;
static const int IPPORT_EXECSERVER = 512;
static const int IPPORT_LOGINSERVER = 513;
static const int IPPORT_CMDSERVER = 514;
static const int IPPORT_EFSSERVER = 520;
static const int IPPORT_BIFFUDP = 512;
static const int IPPORT_WHOSERVER = 513;
static const int IPPORT_ROUTESERVER = 520;
static const int IPPORT_RESERVED = 1024;
static const int IPPORT_REGISTERED_MIN = IPPORT_RESERVED;
static const int IPPORT_REGISTERED_MAX = 0xbfff;
static const int IPPORT_DYNAMIC_MIN = 0xc000;
static const int IPPORT_DYNAMIC_MAX = 0xffff;
static const int IN_CLASSA(i) = (((LONG)(i) & 0x80000000) == 0);
static const int IN_CLASSA_NET = 0xff000000;
static const int IN_CLASSA_NSHIFT = 24;
static const int IN_CLASSA_HOST = 0x00ffffff;
static const int IN_CLASSA_MAX = 128;
static const int IN_CLASSB(i) = (((LONG)(i) & 0xc0000000) == 0x80000000);
static const int IN_CLASSB_NET = 0xffff0000;
static const int IN_CLASSB_NSHIFT = 16;
static const int IN_CLASSB_HOST = 0x0000ffff;
static const int IN_CLASSB_MAX = 65536;
static const int IN_CLASSC(i) = (((LONG)(i) & 0xe0000000) == 0xc0000000);
static const int IN_CLASSC_NET = 0xffffff00;
static const int IN_CLASSC_NSHIFT = 8;
static const int IN_CLASSC_HOST = 0x000000ff;
static const int IN_CLASSD(i) = (((long)(i) & 0xf0000000) == 0xe0000000);
static const int IN_CLASSD_NET = 0xf0000000;
static const int IN_CLASSD_NSHIFT = 28;
static const int IN_CLASSD_HOST = 0x0fffffff;
static const int IN_MULTICAST(i) = IN_CLASSD(i);
static const int INADDR_ANY = (ULONG)0x00000000;
static const int INADDR_LOOPBACK = 0x7f000001;
static const int INADDR_BROADCAST = (ULONG)0xffffffff;
static const int INADDR_NONE = 0xffffffff;
typedef enum {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
} SCOPE_LEVEL;
typedef struct {
    union {
        struct {
            ULONG Zone : 28;
            ULONG Level : 4;
        };
        ULONG Value;
    };
} SCOPE_ID, *PSCOPE_ID;
static const int SCOPEID_UNSPECIFIED_INIT = { 0 };
typedef struct sockaddr_in {
    ADDRESS_FAMILY sin_family;
    USHORT sin_port;
    IN_ADDR sin_addr;
    CHAR sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN;
typedef struct sockaddr_dl {
    ADDRESS_FAMILY sdl_family;
    UCHAR sdl_data[8];
    UCHAR sdl_zero[4];
} SOCKADDR_DL, *PSOCKADDR_DL;
static const int IOCPARM_MASK = 0x7f;
static const int IOC_VOID = 0x20000000;
static const int IOC_OUT = 0x40000000;
static const int IOC_IN = 0x80000000;
static const int IOC_INOUT = (IOC_IN|IOC_OUT);
static const int _IO(x,y) = (IOC_VOID|((x)<<8)|(y));
static const int _IOR(x,y,t) = (IOC_OUT|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
static const int _IOW(x,y,t) = (IOC_IN|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y));
typedef struct _WSABUF {
    ULONG len; /* the length of the buffer */
    CHAR FAR *buf; /* the pointer to the buffer */
} WSABUF, FAR * LPWSABUF;
typedef struct _WSAMSG {
    LPSOCKADDR name; /* Remote address */
    INT namelen; /* Remote address length */
    LPWSABUF lpBuffers; /* Data buffer array */
    ULONG dwBufferCount; /* Number of elements in the array */
    WSABUF Control; /* Control buffer */
    ULONG dwFlags; /* Flags */
} WSAMSG, *PWSAMSG, * FAR LPWSAMSG;
static const int _WSACMSGHDR = cmsghdr;
typedef struct cmsghdr {
    SIZE_T cmsg_len;
    INT cmsg_level;
    INT cmsg_type;
} WSACMSGHDR, *PWSACMSGHDR, FAR *LPWSACMSGHDR;
typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
static const int WSA_CMSGHDR_ALIGN(length) = ( ((length) + TYPE_ALIGNMENT(WSACMSGHDR)-1) & (~(TYPE_ALIGNMENT(WSACMSGHDR)-1)) );
static const int WSA_CMSGDATA_ALIGN(length) = ( ((length) + MAX_NATURAL_ALIGNMENT-1) & (~(MAX_NATURAL_ALIGNMENT-1)) );
static const int CMSGHDR_ALIGN = WSA_CMSGHDR_ALIGN;
static const int CMSGDATA_ALIGN = WSA_CMSGDATA_ALIGN;
static const int WSA_CMSG_FIRSTHDR(msg) = ( ((msg)->Control.len >= sizeof(WSACMSGHDR)) ? (LPWSACMSGHDR)(msg)->Control.buf : (LPWSACMSGHDR)NULL );
static const int CMSG_FIRSTHDR = WSA_CMSG_FIRSTHDR;
static const int WSA_CMSG_NXTHDR(msg,cmsg) = ( ((cmsg) == NULL) ? WSA_CMSG_FIRSTHDR(msg) : ( ( ((PUCHAR)(cmsg) + WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len) + sizeof(WSACMSGHDR) ) > (PUCHAR)((msg)->Control.buf) + (msg)->Control.len ) ? (LPWSACMSGHDR)NULL : (LPWSACMSGHDR)((PUCHAR)(cmsg) + WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len)) ) );
static const int CMSG_NXTHDR = WSA_CMSG_NXTHDR;
static const int WSA_CMSG_DATA(cmsg) = ( (PUCHAR)(cmsg) + WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) );
static const int WSA_CMSG_SPACE(length) = (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR) + WSA_CMSGHDR_ALIGN(length)));
static const int CMSG_SPACE = WSA_CMSG_SPACE;
static const int WSA_CMSG_LEN(length) = (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) + length);
static const int CMSG_LEN = WSA_CMSG_LEN;
static const int MSG_TRUNC = 0x0100;
static const int MSG_CTRUNC = 0x0200;
static const int MSG_BCAST = 0x0400;
static const int MSG_MCAST = 0x0800;
static const int AI_PASSIVE = 0x00000001;
static const int AI_CANONNAME = 0x00000002;
static const int AI_NUMERICHOST = 0x00000004;
static const int AI_NUMERICSERV = 0x00000008;
static const int AI_ALL = 0x00000100;
static const int AI_ADDRCONFIG = 0x00000400;
static const int AI_V4MAPPED = 0x00000800;
static const int AI_NON_AUTHORITATIVE = 0x00004000;
static const int AI_SECURE = 0x00008000;
static const int AI_RETURN_PREFERRED_NAMES = 0x00010000;
static const int AI_FQDN = 0x00020000;
static const int AI_FILESERVER = 0x00040000;
typedef struct addrinfo
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    char * ai_canonname; // Canonical name for nodename
    struct sockaddr * ai_addr; // Binary address
    struct addrinfo * ai_next; // Next structure in linked list
}
ADDRINFOA, *PADDRINFOA;
typedef struct addrinfoW
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    PWSTR ai_canonname; // Canonical name for nodename
    struct sockaddr * ai_addr; // Binary address
    struct addrinfoW * ai_next; // Next structure in linked list
}
ADDRINFOW, *PADDRINFOW;
typedef struct addrinfoexA
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    char *ai_canonname; // Canonical name for nodename
    struct sockaddr *ai_addr; // Binary address
    void *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexA *ai_next; // Next structure in linked list
} ADDRINFOEXA, *PADDRINFOEXA, *LPADDRINFOEXA;
typedef struct addrinfoexW
{
    int ai_flags; // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int ai_family; // PF_xxx
    int ai_socktype; // SOCK_xxx
    int ai_protocol; // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t ai_addrlen; // Length of ai_addr
    PWSTR ai_canonname; // Canonical name for nodename
    struct sockaddr *ai_addr; // Binary address
    __fieldvoid *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexW *ai_next; // Next structure in linked list
} ADDRINFOEXW, *PADDRINFOEXW, *LPADDRINFOEXW;
static const int NS_ALL = (0);
static const int NS_SAP = (1);
static const int NS_NDS = (2);
static const int NS_PEER_BROWSE = (3);
static const int NS_SLP = (5);
static const int NS_DHCP = (6);
static const int NS_TCPIP_LOCAL = (10);
static const int NS_TCPIP_HOSTS = (11);
static const int NS_DNS = (12);
static const int NS_NETBT = (13);
static const int NS_WINS = (14);
static const int NS_NLA = (15);
static const int NS_BTH = (16);
static const int NS_NBP = (20);
static const int NS_MS = (30);
static const int NS_STDA = (31);
static const int NS_NTDS = (32);
static const int NS_EMAIL = (37);
static const int NS_PNRPNAME = (38);
static const int NS_PNRPCLOUD = (39);
static const int NS_X500 = (40);
static const int NS_NIS = (41);
static const int NS_NISPLUS = (42);
static const int NS_WRQ = (50);
static const int NS_NETDES = (60);
static const int NI_NOFQDN = 0x01;
static const int NI_NUMERICHOST = 0x02;
static const int NI_NAMEREQD = 0x04;
static const int NI_NUMERICSERV = 0x08;
static const int NI_DGRAM = 0x10;
static const int NI_MAXHOST = 1025;
static const int NI_MAXSERV = 32;
static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 8;
static const int __GNUC_PATCHLEVEL__ = 1;
static const char __VERSION__ = "4.8.1 20130328 (prerelease)";
static const int __ATOMIC_RELAXED = 0;
static const int __ATOMIC_SEQ_CST = 5;
static const int __ATOMIC_ACQUIRE = 2;
static const int __ATOMIC_RELEASE = 3;
static const int __ATOMIC_ACQ_REL = 4;
static const int __ATOMIC_CONSUME = 1;
static const int __pic__ = 1;
static const int __PIC__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __SIZEOF_INT__ = 4;
static const int __SIZEOF_LONG__ = 4;
static const int __SIZEOF_LONG_LONG__ = 8;
static const int __SIZEOF_SHORT__ = 2;
static const int __SIZEOF_FLOAT__ = 4;
static const int __SIZEOF_DOUBLE__ = 8;
static const int __SIZEOF_LONG_DOUBLE__ = 16;
static const int __SIZEOF_SIZE_T__ = 8;
static const int __CHAR_BIT__ = 8;
static const int __BIGGEST_ALIGNMENT__ = 16;
static const int __ORDER_LITTLE_ENDIAN__ = 1234;
static const int __ORDER_BIG_ENDIAN__ = 4321;
static const int __ORDER_PDP_ENDIAN__ = 3412;
static const int __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __FLOAT_WORD_ORDER__ = __ORDER_LITTLE_ENDIAN__;
static const int __SIZEOF_POINTER__ = 8;
static const int __SIZE_TYPE__ = long long unsigned int;
static const int __PTRDIFF_TYPE__ = long long int;
static const int __WCHAR_TYPE__ = short unsigned int;
static const int __WINT_TYPE__ = short unsigned int;
static const int __INTMAX_TYPE__ = long long int;
static const int __UINTMAX_TYPE__ = long long unsigned int;
static const int __CHAR16_TYPE__ = short unsigned int;
static const int __CHAR32_TYPE__ = unsigned int;
static const int __SIG_ATOMIC_TYPE__ = int;
static const int __INT8_TYPE__ = signed char;
static const int __INT16_TYPE__ = short int;
static const int __INT32_TYPE__ = int;
static const int __INT64_TYPE__ = long long int;
static const int __UINT8_TYPE__ = unsigned char;
static const int __UINT16_TYPE__ = short unsigned int;
static const int __UINT32_TYPE__ = unsigned int;
static const int __UINT64_TYPE__ = long long unsigned int;
static const int __INT_LEAST8_TYPE__ = signed char;
static const int __INT_LEAST16_TYPE__ = short int;
static const int __INT_LEAST32_TYPE__ = int;
static const int __INT_LEAST64_TYPE__ = long long int;
static const int __UINT_LEAST8_TYPE__ = unsigned char;
static const int __UINT_LEAST16_TYPE__ = short unsigned int;
static const int __UINT_LEAST32_TYPE__ = unsigned int;
static const int __UINT_LEAST64_TYPE__ = long long unsigned int;
static const int __INT_FAST8_TYPE__ = signed char;
static const int __INT_FAST16_TYPE__ = short int;
static const int __INT_FAST32_TYPE__ = int;
static const int __INT_FAST64_TYPE__ = long long int;
static const int __UINT_FAST8_TYPE__ = unsigned char;
static const int __UINT_FAST16_TYPE__ = short unsigned int;
static const int __UINT_FAST32_TYPE__ = unsigned int;
static const int __UINT_FAST64_TYPE__ = long long unsigned int;
static const int __INTPTR_TYPE__ = long long int;
static const int __UINTPTR_TYPE__ = long long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 2147483647L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 65535;
static const int __WCHAR_MIN__ = 0;
static const int __WINT_MAX__ = 65535;
static const int __WINT_MIN__ = 0;
static const long long __PTRDIFF_MAX__ = 9223372036854775807LL;
static const int __SIZE_MAX__ = 18446744073709551615ULL;
static const long long __INTMAX_MAX__ = 9223372036854775807LL;
static const int __INTMAX_C(c) = c ## LL;
static const int __UINTMAX_MAX__ = 18446744073709551615ULL;
static const int __UINTMAX_C(c) = c ## ULL;
static const int __SIG_ATOMIC_MAX__ = 2147483647;
static const int __SIG_ATOMIC_MIN__ = (-__SIG_ATOMIC_MAX__ - 1);
static const int __INT8_MAX__ = 127;
static const int __INT16_MAX__ = 32767;
static const int __INT32_MAX__ = 2147483647;
static const long long __INT64_MAX__ = 9223372036854775807LL;
static const int __UINT8_MAX__ = 255;
static const int __UINT16_MAX__ = 65535;
static const int __UINT32_MAX__ = 4294967295U;
static const int __UINT64_MAX__ = 18446744073709551615ULL;
static const int __INT_LEAST8_MAX__ = 127;
static const int __INT8_C(c) = c;
static const int __INT_LEAST16_MAX__ = 32767;
static const int __INT16_C(c) = c;
static const int __INT_LEAST32_MAX__ = 2147483647;
static const int __INT32_C(c) = c;
static const long long __INT_LEAST64_MAX__ = 9223372036854775807LL;
static const int __INT64_C(c) = c ## LL;
static const int __UINT_LEAST8_MAX__ = 255;
static const int __UINT8_C(c) = c;
static const int __UINT_LEAST16_MAX__ = 65535;
static const int __UINT16_C(c) = c;
static const int __UINT_LEAST32_MAX__ = 4294967295U;
static const int __UINT32_C(c) = c ## U;
static const int __UINT_LEAST64_MAX__ = 18446744073709551615ULL;
static const int __UINT64_C(c) = c ## ULL;
static const int __INT_FAST8_MAX__ = 127;
static const int __INT_FAST16_MAX__ = 32767;
static const int __INT_FAST32_MAX__ = 2147483647;
static const long long __INT_FAST64_MAX__ = 9223372036854775807LL;
static const int __UINT_FAST8_MAX__ = 255;
static const int __UINT_FAST16_MAX__ = 65535;
static const int __UINT_FAST32_MAX__ = 4294967295U;
static const int __UINT_FAST64_MAX__ = 18446744073709551615ULL;
static const long long __INTPTR_MAX__ = 9223372036854775807LL;
static const int __UINTPTR_MAX__ = 18446744073709551615ULL;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const int __FLT_DECIMAL_DIG__ = 9;
static const double __FLT_MAX__ = 3.40282346638528859812e+38F;
static const double __FLT_MIN__ = 1.17549435082228750797e-38F;
static const double __FLT_EPSILON__ = 1.19209289550781250000e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846432481707092e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const int __DBL_DECIMAL_DIG__ = 17;
static const double __DBL_MAX__ = ((double)1.79769313486231570815e+308L);
static const double __DBL_MIN__ = ((double)2.22507385850720138309e-308L);
static const double __DBL_EPSILON__ = ((double)2.22044604925031308085e-16L);
static const double __DBL_DENORM_MIN__ = ((double)4.94065645841246544177e-324L);
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-94);
static const int __DEC32_MAX_EXP__ = 97;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_SUBNORMAL_MIN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-382);
static const int __DEC64_MAX_EXP__ = 385;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_SUBNORMAL_MIN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6142);
static const int __DEC128_MAX_EXP__ = 6145;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_SUBNORMAL_MIN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __GNUC_GNU_INLINE__ = 1;
static const int __NO_INLINE__ = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
static const int __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
static const int __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
static const int __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_INT_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
static const int __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
static const int __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
static const int __PRAGMA_REDEFINE_EXTNAME = 1;
static const int __SIZEOF_INT128__ = 16;
static const int __SIZEOF_WCHAR_T__ = 2;
static const int __SIZEOF_WINT_T__ = 2;
static const int __SIZEOF_PTRDIFF_T__ = 8;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __ATOMIC_HLE_ACQUIRE = 65536;
static const int __ATOMIC_HLE_RELEASE = 131072;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __code_model_small__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __SEH__ = 1;
static const int = ;
static const int __fastcall = ;
static const int __thiscall = ;
static const int = ;
static const int _stdcall = ;
static const int _fastcall = ;
static const int _thiscall = ;
static const int _cdecl = ;
static const int __GXX_MERGED_TYPEINFO_NAMES = 0;
static const int __GXX_TYPEINFO_EQUALITY_INLINE = 0;
static const int __MSVCRT__ = 1;
static const int __MINGW32__ = 1;
static const int _WIN32 = 1;
static const int __WIN32 = 1;
static const int __WIN32__ = 1;
static const int WIN32 = 1;
static const int __WINNT = 1;
static const int __WINNT__ = 1;
static const int WINNT = 1;
static const int _INTEGRAL_MAX_BITS = 64;
static const int __MINGW64__ = 1;
static const int __WIN64 = 1;
static const int __WIN64__ = 1;
static const int WIN64 = 1;
static const int _WIN64 = 1;
static const int = ;
static const int __DECIMAL_BID_FORMAT__ = 1;
static const int _WIN32_WINNT = 0x0602;
static const int WINVER = _WIN32_WINNT;
static const int WS2IPDEF_ASSERT(exp) = ((VOID) 0);
static const int WS2TCPIP_INLINE = inline;
typedef struct in6_addr {
    union {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
} IN6_ADDR, *PIN6_ADDR, FAR *LPIN6_ADDR;
static const int in_addr6 = in6_addr;
static const int _S6_un = u;
static const int _S6_u8 = Byte;
static const int s6_addr = _S6_un._S6_u8;
static const int s6_bytes = u.Byte;
static const int s6_words = u.Word;
struct sockaddr_in6_old {
    SHORT sin6_family; // AF_INET6.
    USHORT sin6_port; // Transport level port number.
    ULONG sin6_flowinfo; // IPv6 flow information.
    IN6_ADDR sin6_addr; // IPv6 address.
};
typedef union sockaddr_gen {
    struct sockaddr Address;
    struct sockaddr_in AddressIn;
    struct sockaddr_in6_old AddressIn6;
} sockaddr_gen;
typedef struct _INTERFACE_INFO {
    ULONG iiFlags; // Interface flags.
    sockaddr_gen iiAddress; // Interface address.
    sockaddr_gen iiBroadcastAddress; // Broadcast address.
    sockaddr_gen iiNetmask; // Network mask.
} INTERFACE_INFO, FAR *LPINTERFACE_INFO;
typedef struct _INTERFACE_INFO_EX {
    ULONG iiFlags; // Interface flags.
    SOCKET_ADDRESS iiAddress; // Interface address.
    SOCKET_ADDRESS iiBroadcastAddress; // Broadcast address.
    SOCKET_ADDRESS iiNetmask; // Network mask.
} INTERFACE_INFO_EX, FAR *LPINTERFACE_INFO_EX;
static const int IFF_UP = 0x00000001;
static const int IFF_BROADCAST = 0x00000002;
static const int IFF_LOOPBACK = 0x00000004;
static const int IFF_POINTTOPOINT = 0x00000008;
static const int IFF_MULTICAST = 0x00000010;
static const int IP_OPTIONS = 1;
static const int IP_HDRINCL = 2;
static const int IP_TOS = 3;
static const int IP_TTL = 4;
static const int IP_MULTICAST_IF = 9;
static const int IP_MULTICAST_TTL = 10;
static const int IP_MULTICAST_LOOP = 11;
static const int IP_ADD_MEMBERSHIP = 12;
static const int IP_DROP_MEMBERSHIP = 13;
static const int IP_DONTFRAGMENT = 14;
static const int IP_ADD_SOURCE_MEMBERSHIP = 15;
static const int IP_DROP_SOURCE_MEMBERSHIP = 16;
static const int IP_BLOCK_SOURCE = 17;
static const int IP_UNBLOCK_SOURCE = 18;
static const int IP_PKTINFO = 19;
static const int IP_HOPLIMIT = 21;
static const int IP_RECEIVE_BROADCAST = 22;
static const int IP_RECVIF = 24;
static const int IP_RECVDSTADDR = 25;
static const int IP_IFLIST = 28;
static const int IP_ADD_IFLIST = 29;
static const int IP_DEL_IFLIST = 30;
static const int IP_UNICAST_IF = 31;
static const int IP_RTHDR = 32;
static const int IP_RECVRTHDR = 38;
static const int IP_TCLASS = 39;
static const int IP_RECVTCLASS = 40;
static const int IP_ORIGINAL_ARRIVAL_IF = 47;
static const int IP_UNSPECIFIED_TYPE_OF_SERVICE = -1;
static const int IPV6_ADDRESS_BITS = RTL_BITS_OF(IN6_ADDR);
typedef struct sockaddr_in6 {
    ADDRESS_FAMILY sin6_family; // AF_INET6.
    USHORT sin6_port; // Transport level port number.
    ULONG sin6_flowinfo; // IPv6 flow information.
    IN6_ADDR sin6_addr; // IPv6 address.
    union {
        ULONG sin6_scope_id; // Set of interfaces for a scope.
        SCOPE_ID sin6_scope_struct;
    };
} SOCKADDR_IN6_LH, *PSOCKADDR_IN6_LH, FAR *LPSOCKADDR_IN6_LH;
typedef struct sockaddr_in6_w2ksp1 {
    short sin6_family; /* AF_INET6 */
    USHORT sin6_port; /* Transport level port number */
    ULONG sin6_flowinfo; /* IPv6 flow information */
    struct in6_addr sin6_addr; /* IPv6 address */
    ULONG sin6_scope_id; /* set of interfaces for a scope */
} SOCKADDR_IN6_W2KSP1, *PSOCKADDR_IN6_W2KSP1, FAR *LPSOCKADDR_IN6_W2KSP1;
typedef SOCKADDR_IN6_LH SOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_LH FAR *LPSOCKADDR_IN6;
typedef union _SOCKADDR_INET {
    SOCKADDR_IN Ipv4;
    SOCKADDR_IN6 Ipv6;
    ADDRESS_FAMILY si_family;
} SOCKADDR_INET, *PSOCKADDR_INET;
typedef struct _sockaddr_in6_pair
{
    PSOCKADDR_IN6 SourceAddress;
    PSOCKADDR_IN6 DestinationAddress;
} SOCKADDR_IN6_PAIR, *PSOCKADDR_IN6_PAIR;
static const int SS_PORT(ssp) = (((PSOCKADDR_IN)(ssp))->sin_port);
static const int IN6ADDR_ANY_INIT = { 0 };
static const int IN6ADDR_LOOPBACK_INIT = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
static const int IN6ADDR_ALLNODESONNODE_INIT = { 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
static const int IN6ADDR_ALLNODESONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
static const int IN6ADDR_ALLROUTERSONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 };
static const int IN6ADDR_ALLMLDV2ROUTERSONLINK_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 };
static const int IN6ADDR_TEREDOINITIALLINKLOCALADDRESS_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe };
static const int IN6ADDR_TEREDOOLDLINKLOCALADDRESSXP_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'T', 'E', 'R', 'E', 'D', 'O' };
static const int IN6ADDR_TEREDOOLDLINKLOCALADDRESSVISTA_INIT = { 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
static const int IN6ADDR_LINKLOCALPREFIX_INIT = { 0xfe, 0x80, };
static const int IN6ADDR_MULTICASTPREFIX_INIT = { 0xff, 0x00, };
static const int IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_INIT = { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, };
static const int IN6ADDR_V4MAPPEDPREFIX_INIT = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, };
static const int IN6ADDR_6TO4PREFIX_INIT = { 0x20, 0x02, };
static const int IN6ADDR_TEREDOPREFIX_INIT = { 0x20, 0x01, 0x00, 0x00, };
static const int IN6ADDR_TEREDOPREFIX_INIT_OLD = { 0x3f, 0xfe, 0x83, 0x1f, };
static const int IN6ADDR_LINKLOCALPREFIX_LENGTH = 64;
static const int IN6ADDR_MULTICASTPREFIX_LENGTH = 8;
static const int IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104;
static const int IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96;
static const int IN6ADDR_6TO4PREFIX_LENGTH = 16;
static const int IN6ADDR_TEREDOPREFIX_LENGTH = 32;
SCOPE_ID scopeid_unspecified;
IN_ADDR in4addr_any;
IN_ADDR in4addr_loopback;
IN_ADDR in4addr_broadcast;
IN_ADDR in4addr_allnodesonlink;
IN_ADDR in4addr_allroutersonlink;
IN_ADDR in4addr_alligmpv3routersonlink;
IN_ADDR in4addr_allteredohostsonlink;
IN_ADDR in4addr_linklocalprefix;
IN_ADDR in4addr_multicastprefix;
IN6_ADDR in6addr_any;
IN6_ADDR in6addr_loopback;
IN6_ADDR in6addr_allnodesonnode;
IN6_ADDR in6addr_allnodesonlink;
IN6_ADDR in6addr_allroutersonlink;
IN6_ADDR in6addr_allmldv2routersonlink;
IN6_ADDR in6addr_teredoinitiallinklocaladdress;
IN6_ADDR in6addr_linklocalprefix;
IN6_ADDR in6addr_multicastprefix;
IN6_ADDR in6addr_solicitednodemulticastprefix;
IN6_ADDR in6addr_v4mappedprefix;
IN6_ADDR in6addr_6to4prefix;
IN6_ADDR in6addr_teredoprefix;
IN6_ADDR in6addr_teredoprefix_old;
inline
BOOLEAN
IN6_ADDR_EQUAL(IN6_ADDR *x, IN6_ADDR *y)
{
    __int64 UNALIGNED *a;
    __int64 UNALIGNED *b;
    a = (__int64 UNALIGNED *)x;
    b = (__int64 UNALIGNED *)y;
    return (BOOLEAN)((a[1] == b[1]) && (a[0] == b[0]));
}
static const int IN6_ARE_ADDR_EQUAL = IN6_ADDR_EQUAL;
inline
BOOLEAN
IN6_IS_ADDR_UNSPECIFIED(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_LOOPBACK(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0x0100));
}
inline
BOOLEAN
IN6_IS_ADDR_MULTICAST(IN6_ADDR *a)
{
    return (BOOLEAN)(a->u.Byte[0] == 0xff);
}
inline
BOOLEAN
IN6_IS_ADDR_EUI64(IN6_ADDR *a)
{
    return (BOOLEAN)(((a->u.Byte[0] & 0xe0) != 0) &&
                     !IN6_IS_ADDR_MULTICAST(a));
}
inline
BOOLEAN
IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     (a->u.Word[6] == 0) &&
                     (a->u.Word[7] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->u.Word[4] == 0xfffd) &&
                     (a->u.Word[5] == 0xffff) &&
                     (a->u.Word[6] == 0xffff) &&
                     ((a->u.Word[7] & 0x80ff) == 0x80ff));
}
inline
BOOLEAN
IN6_IS_ADDR_ANYCAST(IN6_ADDR *a)
{
    return (IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(a) ||
            IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(a));
}
inline
BOOLEAN
IN6_IS_ADDR_LINKLOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Byte[0] == 0xfe) &&
                     ((a->u.Byte[1] & 0xc0) == 0x80));
}
inline
BOOLEAN
IN6_IS_ADDR_SITELOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Byte[0] == 0xfe) &&
                     ((a->u.Byte[1] & 0xc0) == 0xc0));
}
inline
BOOLEAN
IN6_IS_ADDR_GLOBAL(IN6_ADDR *a)
{
    ULONG High = (a->u.Byte[0] & 0xf0);
    return (BOOLEAN)((High != 0) && (High != 0xf0));
}
inline
BOOLEAN
IN6_IS_ADDR_V4MAPPED(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0xffff));
}
inline
BOOLEAN
IN6_IS_ADDR_V4COMPAT(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0) &&
                     (a->u.Word[5] == 0) &&
                     !((a->u.Word[6] == 0) &&
                       (a->u.Byte[14] == 0) &&
                       ((a->u.Byte[15] == 0) || (a->u.Byte[15] == 1))));
}
inline
BOOLEAN
IN6_IS_ADDR_V4TRANSLATED(IN6_ADDR *a)
{
    return (BOOLEAN)((a->u.Word[0] == 0) &&
                     (a->u.Word[1] == 0) &&
                     (a->u.Word[2] == 0) &&
                     (a->u.Word[3] == 0) &&
                     (a->u.Word[4] == 0xffff) &&
                     (a->u.Word[5] == 0));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_NODELOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 1));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_LINKLOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 2));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_SITELOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 5));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_ORGLOCAL(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 8));
}
inline
BOOLEAN
IN6_IS_ADDR_MC_GLOBAL(IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->u.Byte[1] & 0xf) == 0xe));
}
inline
VOID
IN6_SET_ADDR_UNSPECIFIED(PIN6_ADDR a)
{
    memset(a->u.Byte, 0, sizeof(IN6_ADDR));
}
inline
VOID
IN6_SET_ADDR_LOOPBACK(PIN6_ADDR a)
{
    memset(a->u.Byte, 0, sizeof(IN6_ADDR));
    a->u.Byte[15] = 1;
}
inline
VOID
IN6ADDR_SETANY(PSOCKADDR_IN6 a)
{
    a->sin6_family = AF_INET6;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_UNSPECIFIED(&a->sin6_addr);
    a->sin6_scope_id = 0;
}
inline
VOID
IN6ADDR_SETLOOPBACK(PSOCKADDR_IN6 a)
{
    a->sin6_family = AF_INET6;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_LOOPBACK(&a->sin6_addr);
    a->sin6_scope_id = 0;
}
inline
BOOLEAN
IN6ADDR_ISANY(SOCKADDR_IN6 *a)
{
    ((VOID) 0);
    return IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr);
}
inline
BOOLEAN
IN6ADDR_ISLOOPBACK(SOCKADDR_IN6 *a)
{
    ((VOID) 0);
    return IN6_IS_ADDR_LOOPBACK(&a->sin6_addr);
}
inline
BOOLEAN
IN6ADDR_ISEQUAL(SOCKADDR_IN6 *a, SOCKADDR_IN6 *b)
{
    ((VOID) 0);
    return (BOOLEAN)(a->sin6_scope_id == b->sin6_scope_id &&
                     IN6_ADDR_EQUAL(&a->sin6_addr, &b->sin6_addr));
}
inline
BOOLEAN
IN6ADDR_ISUNSPECIFIED(SOCKADDR_IN6 *a)
{
    ((VOID) 0);
    return (BOOLEAN)(a->sin6_scope_id == 0 &&
                     IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr));
}
static const int SIO_GET_INTERFACE_LIST = _IOR('t', 127, ULONG);
static const int SIO_GET_INTERFACE_LIST_EX = _IOR('t', 126, ULONG);
static const int SIO_SET_MULTICAST_FILTER = _IOW('t', 125, ULONG);
static const int SIO_GET_MULTICAST_FILTER = _IOW('t', 124 | IOC_IN, ULONG);
static const int SIOCSIPMSFILTER = SIO_SET_MULTICAST_FILTER;
static const int SIOCGIPMSFILTER = SIO_GET_MULTICAST_FILTER;
static const int SIOCSMSFILTER = _IOW('t', 126, ULONG);
static const int SIOCGMSFILTER = _IOW('t', 127 | IOC_IN, ULONG);
static const int SIO_IDEAL_SEND_BACKLOG_QUERY = _IOR('t', 123, ULONG);
static const int SIO_IDEAL_SEND_BACKLOG_CHANGE = _IO('t', 122);
static const int MCAST_JOIN_GROUP = 41;
static const int MCAST_LEAVE_GROUP = 42;
static const int MCAST_BLOCK_SOURCE = 43;
static const int MCAST_UNBLOCK_SOURCE = 44;
static const int MCAST_JOIN_SOURCE_GROUP = 45;
static const int MCAST_LEAVE_SOURCE_GROUP = 46;
typedef enum {
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE
} MULTICAST_MODE_TYPE;
typedef struct ip_mreq {
    IN_ADDR imr_multiaddr; // IP multicast address of group.
    IN_ADDR imr_interface; // Local IP address of interface.
} IP_MREQ, *PIP_MREQ;
typedef struct ip_mreq_source {
    IN_ADDR imr_multiaddr; // IP multicast address of group.
    IN_ADDR imr_sourceaddr; // IP address of source.
    IN_ADDR imr_interface; // Local IP address of interface.
} IP_MREQ_SOURCE, *PIP_MREQ_SOURCE;
typedef struct ip_msfilter {
    IN_ADDR imsf_multiaddr; // IP multicast address of group.
    IN_ADDR imsf_interface; // Local IP address of interface.
    MULTICAST_MODE_TYPE imsf_fmode; // Filter mode.
    ULONG imsf_numsrc; // Number of sources in src_list.
    IN_ADDR imsf_slist[1]; // Start of source list.
} IP_MSFILTER, *PIP_MSFILTER;
static const int IP_MSFILTER_SIZE(NumSources) = (sizeof(IP_MSFILTER) - sizeof(IN_ADDR) + (NumSources) * sizeof(IN_ADDR));
static const int IPV6_HOPOPTS = 1;
static const int IPV6_HDRINCL = 2;
static const int IPV6_UNICAST_HOPS = 4;
static const int IPV6_MULTICAST_IF = 9;
static const int IPV6_MULTICAST_HOPS = 10;
static const int IPV6_MULTICAST_LOOP = 11;
static const int IPV6_ADD_MEMBERSHIP = 12;
static const int IPV6_JOIN_GROUP = IPV6_ADD_MEMBERSHIP;
static const int IPV6_DROP_MEMBERSHIP = 13;
static const int IPV6_LEAVE_GROUP = IPV6_DROP_MEMBERSHIP;
static const int IPV6_DONTFRAG = 14;
static const int IPV6_PKTINFO = 19;
static const int IPV6_HOPLIMIT = 21;
static const int IPV6_PROTECTION_LEVEL = 23;
static const int IPV6_RECVIF = 24;
static const int IPV6_RECVDSTADDR = 25;
static const int IPV6_CHECKSUM = 26;
static const int IPV6_V6ONLY = 27;
static const int IPV6_IFLIST = 28;
static const int IPV6_ADD_IFLIST = 29;
static const int IPV6_DEL_IFLIST = 30;
static const int IPV6_UNICAST_IF = 31;
static const int IPV6_RTHDR = 32;
static const int IPV6_RECVRTHDR = 38;
static const int IPV6_TCLASS = 39;
static const int IPV6_RECVTCLASS = 40;
static const int IP_UNSPECIFIED_HOP_LIMIT = -1;
static const int IP_PROTECTION_LEVEL = IPV6_PROTECTION_LEVEL;
static const int PROTECTION_LEVEL_UNRESTRICTED = 10;
static const int PROTECTION_LEVEL_EDGERESTRICTED = 20;
static const int PROTECTION_LEVEL_RESTRICTED = 30;
static const int PROTECTION_LEVEL_DEFAULT = ((UINT)-1);
typedef struct ipv6_mreq {
    IN6_ADDR ipv6mr_multiaddr; // IPv6 multicast address.
    ULONG ipv6mr_interface; // Interface index.
} IPV6_MREQ, *PIPV6_MREQ;
typedef struct group_req {
    ULONG gr_interface; // Interface index.
    SOCKADDR_STORAGE gr_group; // Multicast address.
} GROUP_REQ, *PGROUP_REQ;
typedef struct group_source_req {
    ULONG gsr_interface; // Interface index.
    SOCKADDR_STORAGE gsr_group; // Group address.
    SOCKADDR_STORAGE gsr_source; // Source address.
} GROUP_SOURCE_REQ, *PGROUP_SOURCE_REQ;
typedef struct group_filter {
    ULONG gf_interface; // Interface index.
    SOCKADDR_STORAGE gf_group; // Multicast address.
    MULTICAST_MODE_TYPE gf_fmode; // Filter mode.
    ULONG gf_numsrc; // Number of sources.
    SOCKADDR_STORAGE gf_slist[1]; // Source address.
} GROUP_FILTER, *PGROUP_FILTER;
static const int GROUP_FILTER_SIZE(numsrc) = (sizeof(GROUP_FILTER) - sizeof(SOCKADDR_STORAGE) + (numsrc) * sizeof(SOCKADDR_STORAGE));
typedef struct in_pktinfo {
    IN_ADDR ipi_addr; // Source/destination IPv4 address.
    ULONG ipi_ifindex; // Send/receive interface index.
} IN_PKTINFO, *PIN_PKTINFO;
C_ASSERT(sizeof(IN_PKTINFO) == 8);
typedef struct in6_pktinfo {
    IN6_ADDR ipi6_addr; // Source/destination IPv6 address.
    ULONG ipi6_ifindex; // Send/receive interface index.
} IN6_PKTINFO, *PIN6_PKTINFO;
C_ASSERT(sizeof(IN6_PKTINFO) == 20);
static const int INET_ADDRSTRLEN = 22;
static const int INET6_ADDRSTRLEN = 65;
static const int TCP_OFFLOAD_NO_PREFERENCE = 0;
static const int TCP_OFFLOAD_NOT_PREFERRED = 1;
static const int TCP_OFFLOAD_PREFERRED = 2;
static const int TCP_EXPEDITED_1122 = 0x0002;
static const int TCP_KEEPALIVE = 3;
static const int TCP_MAXSEG = 4;
static const int TCP_MAXRT = 5;
static const int TCP_STDURG = 6;
static const int TCP_NOURG = 7;
static const int TCP_ATMARK = 8;
static const int TCP_NOSYNRETRIES = 9;
static const int TCP_TIMESTAMPS = 10;
static const int TCP_OFFLOAD_PREFERENCE = 11;
static const int TCP_CONGESTION_ALGORITHM = 12;
static const int TCP_DELAY_FIN_ACK = 13;
