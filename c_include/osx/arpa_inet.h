static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 2;
static const int __GNUC_PATCHLEVEL__ = 1;
static const int __APPLE_CC__ = 5658;
static const int __llvm__ = 1;
static const int __SIZE_TYPE__ = long unsigned int;
static const int __PTRDIFF_TYPE__ = long int;
static const int __WCHAR_TYPE__ = int;
static const int __WINT_TYPE__ = int;
static const int __INTMAX_TYPE__ = long int;
static const int __UINTMAX_TYPE__ = long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 9223372036854775807L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 2147483647;
static const int __CHAR_BIT__ = 8;
static const long __INTMAX_MAX__ = 9223372036854775807L;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const double __FLT_MAX__ = 3.40282347e+38F;
static const double __FLT_MIN__ = 1.17549435e-38F;
static const double __FLT_EPSILON__ = 1.19209290e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const double __DBL_MAX__ = 1.7976931348623157e+308;
static const double __DBL_MIN__ = 2.2250738585072014e-308;
static const double __DBL_EPSILON__ = 2.2204460492503131e-16;
static const double __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-95);
static const int __DEC32_MAX_EXP__ = 96;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_DEN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-383);
static const int __DEC64_MAX_EXP__ = 384;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_DEN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6143);
static const int __DEC128_MAX_EXP__ = 6144;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_DEN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __USER_LABEL_PREFIX__ = _;
static const char __VERSION__ = "4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)";
static const int __GNUC_GNU_INLINE__ = 1;
static const int _LP64 = 1;
static const int __LP64__ = 1;
static const int __BLOCKS__ = 1;
static const int __NO_INLINE__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __pic__ = 2;
static const int __PIC__ = 2;
static const int __SSP__ = 1;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __tune_core2__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE3__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __NO_MATH_INLINES = 1;
static const int __LITTLE_ENDIAN__ = 1;
static const int __MACH__ = 1;
static const int __APPLE__ = 1;
static const int __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 1083;
static const int __CONSTANT_CFSTRINGS__ = 1;
static const int __weak = __attribute__((objc_gc(weak)));
static const int __block = __attribute__((__blocks__(byref)));
static const int OBJC_NEW_PROPERTIES = 1;
static const int __DYNAMIC__ = 1;
static const int __P(protos) = protos;
static const int __CONCAT(x,y) = x ## y;
static const int __STRING(x) = #x;
static const int __const = const;
static const int __signed = signed;
static const int __volatile = volatile;
static const int __dead2 = __attribute__((noreturn));
static const int __pure2 = __attribute__((const));
static const int __unused = __attribute__((unused));
static const int __used = __attribute__((used));
static const int __deprecated = __attribute__((deprecated));
static const int __unavailable = __attribute__((unavailable));
static const int __printflike(fmtarg,firstvararg) = __attribute__((__format__ (__printf__, fmtarg, firstvararg)));
static const int __scanflike(fmtarg,firstvararg) = __attribute__((__format__ (__scanf__, fmtarg, firstvararg)));
static const int __IDSTRING(name,string) = static const char name[] __used = string;
static const int __COPYRIGHT(s) = __IDSTRING(copyright,s);
static const int __RCSID(s) = __IDSTRING(rcsid,s);
static const int __SCCSID(s) = __IDSTRING(sccsid,s);
static const int __PROJECT_VERSION(s) = __IDSTRING(project_version,s);
static const int __DARWIN_ONLY_64_BIT_INO_T = 0;
static const int __DARWIN_ONLY_VERS_1050 = 0;
static const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
static const int __DARWIN_UNIX03 = 1;
static const int __DARWIN_64_BIT_INO_T = 1;
static const int __DARWIN_VERS_1050 = 1;
static const int __DARWIN_NON_CANCELABLE = 0;
static const char __DARWIN_SUF_64_BIT_INO_T = "$INODE64";
static const char __DARWIN_SUF_1050 = "$1050";
static const char __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
static const int __DARWIN_ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_1050(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050);
static const int __DARWIN_1050ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_EXTSN(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN);
static const int __DARWIN_EXTSN_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE);
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x) = x;
static const int __DARWIN_ALIAS_STARTING(_mac,_iphone,x) = __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x);
static const int __POSIX_C_DEPRECATED(ver) = ___POSIX_C_DEPRECATED_STARTING_ ##ver;
static const long __DARWIN_C_ANSI = 010000L;
static const long __DARWIN_C_FULL = 900000L;
static const int __DARWIN_C_LEVEL = __DARWIN_C_FULL;
static const int __DARWIN_NO_LONG_LONG = (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__));
static const int _DARWIN_FEATURE_64_BIT_INODE = 1;
static const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
static const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
static const int __CAST_AWAY_QUALIFIER(variable,qualifier,type) = (type) (long)(variable);
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;
typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;
typedef __mbstate_t __darwin_mbstate_t;
typedef long int __darwin_ptrdiff_t;
typedef long unsigned int __darwin_size_t;
typedef __builtin_va_list __darwin_va_list;
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t __darwin_rune_t;
typedef int __darwin_wint_t;
typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
static const int __PTHREAD_SIZE__ = 1168;
static const int __PTHREAD_ATTR_SIZE__ = 56;
static const int __PTHREAD_MUTEXATTR_SIZE__ = 8;
static const int __PTHREAD_MUTEX_SIZE__ = 56;
static const int __PTHREAD_CONDATTR_SIZE__ = 8;
static const int __PTHREAD_COND_SIZE__ = 40;
static const int __PTHREAD_ONCE_SIZE__ = 8;
static const int __PTHREAD_RWLOCK_SIZE__ = 192;
static const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;
struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[192]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[16]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[1168]; };
static const int __DARWIN_NULL = ((void *)0);
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;
typedef __darwin_ino64_t __darwin_ino_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];
static const int __strfmonlike(fmtarg,firstvararg) = __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)));
static const int __strftimelike(fmtarg) = __attribute__((__format__ (__strftime__, fmtarg, 0)));
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;
typedef __uint32_t __darwin_wctype_t;
static const int __DARWIN_WCHAR_MAX = __WCHAR_MAX__;
static const int __DARWIN_WCHAR_MIN = (-0x7fffffff - 1);
static const int __DARWIN_WEOF = ((__darwin_wint_t)-1);
static const int _FORTIFY_SOURCE = 2;
static const int __WORDSIZE = 64;
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef long intptr_t;
typedef unsigned long uintptr_t;
typedef long int intmax_t;
typedef long unsigned int uintmax_t;
static const int INT8_MAX = 127;
static const int INT16_MAX = 32767;
static const int INT32_MAX = 2147483647;
static const long long INT64_MAX = 9223372036854775807LL;
static const int INT8_MIN = -128;
static const int INT16_MIN = -32768;
static const int INT32_MIN = (-INT32_MAX-1);
static const int INT64_MIN = (-INT64_MAX-1);
static const int UINT8_MAX = 255;
static const int UINT16_MAX = 65535;
static const int UINT32_MAX = 4294967295U;
static const int UINT64_MAX = 18446744073709551615ULL;
static const int INT_LEAST8_MIN = INT8_MIN;
static const int INT_LEAST16_MIN = INT16_MIN;
static const int INT_LEAST32_MIN = INT32_MIN;
static const int INT_LEAST64_MIN = INT64_MIN;
static const int INT_LEAST8_MAX = INT8_MAX;
static const int INT_LEAST16_MAX = INT16_MAX;
static const int INT_LEAST32_MAX = INT32_MAX;
static const int INT_LEAST64_MAX = INT64_MAX;
static const int UINT_LEAST8_MAX = UINT8_MAX;
static const int UINT_LEAST16_MAX = UINT16_MAX;
static const int UINT_LEAST32_MAX = UINT32_MAX;
static const int UINT_LEAST64_MAX = UINT64_MAX;
static const int INT_FAST8_MIN = INT8_MIN;
static const int INT_FAST16_MIN = INT16_MIN;
static const int INT_FAST32_MIN = INT32_MIN;
static const int INT_FAST64_MIN = INT64_MIN;
static const int INT_FAST8_MAX = INT8_MAX;
static const int INT_FAST16_MAX = INT16_MAX;
static const int INT_FAST32_MAX = INT32_MAX;
static const int INT_FAST64_MAX = INT64_MAX;
static const int UINT_FAST8_MAX = UINT8_MAX;
static const int UINT_FAST16_MAX = UINT16_MAX;
static const int UINT_FAST32_MAX = UINT32_MAX;
static const int UINT_FAST64_MAX = UINT64_MAX;
static const int INTPTR_MIN = INT64_MIN;
static const int INTPTR_MAX = INT64_MAX;
static const int UINTPTR_MAX = UINT64_MAX;
static const int INTMAX_MIN = INT64_MIN;
static const int INTMAX_MAX = INT64_MAX;
static const int UINTMAX_MAX = UINT64_MAX;
static const int PTRDIFF_MIN = INT64_MIN;
static const int PTRDIFF_MAX = INT64_MAX;
static const int SIZE_MAX = UINT64_MAX;
static const int WCHAR_MAX = __WCHAR_MAX__;
static const int WCHAR_MIN = (-WCHAR_MAX-1);
static const int WINT_MIN = INT32_MIN;
static const int WINT_MAX = INT32_MAX;
static const int SIG_ATOMIC_MIN = INT32_MIN;
static const int SIG_ATOMIC_MAX = INT32_MAX;
static const int INT8_C(v) = (v);
static const int INT16_C(v) = (v);
static const int INT32_C(v) = (v);
static const int INT64_C(v) = (v ## LL);
static const int UINT8_C(v) = (v ## U);
static const int UINT16_C(v) = (v ## U);
static const int UINT32_C(v) = (v ## U);
static const int UINT64_C(v) = (v ## ULL);
static const int INTMAX_C(v) = (v ## LL);
static const int UINTMAX_C(v) = (v ## ULL);
static const int _QUAD_HIGHWORD = 1;
static const int _QUAD_LOWWORD = 0;
static const int __DARWIN_LITTLE_ENDIAN = 1234;
static const int __DARWIN_BIG_ENDIAN = 4321;
static const int __DARWIN_PDP_ENDIAN = 3412;
static const int __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
static const int LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
static const int BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
static const int PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
static const int BYTE_ORDER = __DARWIN_BYTE_ORDER;
static const int __DARWIN_OSSwapConstInt16(x) = ((__uint16_t)((((__uint16_t)(x) & 0xff00) >> 8) | (((__uint16_t)(x) & 0x00ff) << 8)));
static const int __DARWIN_OSSwapConstInt32(x) = ((__uint32_t)((((__uint32_t)(x) & 0xff000000) >> 24) | (((__uint32_t)(x) & 0x00ff0000) >> 8) | (((__uint32_t)(x) & 0x0000ff00) << 8) | (((__uint32_t)(x) & 0x000000ff) << 24)));
static const int __DARWIN_OSSwapConstInt64(x) = ((__uint64_t)((((__uint64_t)(x) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(x) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(x) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(x) & 0x00000000000000ffULL) << 56)));
static const int __DARWIN_OS_INLINE = static __inline__;
static __inline__
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((_data << 8) | (_data >> 8));
}
static __inline__
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{
    return __builtin_bswap32(_data);
}
static __inline__
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    return __builtin_bswap64(_data);
}
static const int __DARWIN_OSSwapInt16(x) = ((__uint16_t)(__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt16(x) : _OSSwapInt16(x)));
static const int __DARWIN_OSSwapInt32(x) = (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt32(x) : _OSSwapInt32(x));
static const int __DARWIN_OSSwapInt64(x) = (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt64(x) : _OSSwapInt64(x));
static const int ntohs(x) = __DARWIN_OSSwapInt16(x);
static const int htons(x) = __DARWIN_OSSwapInt16(x);
static const int ntohl(x) = __DARWIN_OSSwapInt32(x);
static const int htonl(x) = __DARWIN_OSSwapInt32(x);
static const int NTOHL(x) = (x) = ntohl((__uint32_t)x);
static const int NTOHS(x) = (x) = ntohs((__uint16_t)x);
static const int HTONL(x) = (x) = htonl((__uint32_t)x);
static const int HTONS(x) = (x) = htons((__uint16_t)x);
static const int __MAC_10_0 = 1000;
static const int __MAC_10_1 = 1010;
static const int __MAC_10_2 = 1020;
static const int __MAC_10_3 = 1030;
static const int __MAC_10_4 = 1040;
static const int __MAC_10_5 = 1050;
static const int __MAC_10_6 = 1060;
static const int __MAC_10_7 = 1070;
static const int __MAC_10_8 = 1080;
static const int __MAC_NA = 9999;
static const int __IPHONE_2_0 = 20000;
static const int __IPHONE_2_1 = 20100;
static const int __IPHONE_2_2 = 20200;
static const int __IPHONE_3_0 = 30000;
static const int __IPHONE_3_1 = 30100;
static const int __IPHONE_3_2 = 30200;
static const int __IPHONE_4_0 = 40000;
static const int __IPHONE_4_1 = 40100;
static const int __IPHONE_4_2 = 40200;
static const int __IPHONE_4_3 = 40300;
static const int __IPHONE_5_0 = 50000;
static const int __IPHONE_5_1 = 50100;
static const int __IPHONE_NA = 99999;
static const int __AVAILABILITY_INTERNAL_DEPRECATED = __attribute__((deprecated,visibility("default")));
static const int __AVAILABILITY_INTERNAL_UNAVAILABLE = __attribute__((unavailable,visibility("default")));
static const int __AVAILABILITY_INTERNAL_WEAK_IMPORT = __attribute__((weak_import,visibility("default")));
static const int __AVAILABILITY_INTERNAL_REGULAR = __attribute__((visibility("default")));
static const int __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
static const int __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_10_8;
static const int __AVAILABILITY_INTERNAL__MAC_10_8 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_7 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_6 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_5 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_4 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_3 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_2 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_1 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_0 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_NA = __AVAILABILITY_INTERNAL_UNAVAILABLE;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_0;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_1;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_2;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_3;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_4;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_5;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_6;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_7;
static const int __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_8;
static const int __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = __AVAILABILITY_INTERNAL_UNAVAILABLE;
static const int __OSX_AVAILABLE_STARTING(_osx,_ios) = __AVAILABILITY_INTERNAL ##_osx;
static const int __OSX_AVAILABLE_BUT_DEPRECATED(_osxIntro,_osxDep,_iosIntro,_iosDep) = __AVAILABILITY_INTERNAL ##_osxIntro ##_DEP ##_osxDep;
typedef __uint32_t in_addr_t;
typedef __uint16_t in_port_t;
typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;
typedef int64_t register_t;
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
static const int USER_ADDR_NULL = ((user_addr_t) 0);
static const int CAST_USER_ADDR_T(a_ptr) = ((user_addr_t)((uintptr_t)(a_ptr)));
typedef u_int64_t syscall_arg_t;
static const int __offsetof(type,field) = ((size_t)(&((type *)0)->field));
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;
typedef char * caddr_t;
typedef int32_t daddr_t;
typedef __darwin_dev_t dev_t;
typedef u_int32_t fixpt_t;
typedef __darwin_blkcnt_t blkcnt_t;
typedef __darwin_blksize_t blksize_t;
typedef __darwin_gid_t gid_t;
typedef __darwin_ino_t ino_t;
typedef __darwin_ino64_t ino64_t;
typedef __int32_t key_t;
typedef __darwin_mode_t mode_t;
typedef __uint16_t nlink_t;
typedef __darwin_id_t id_t;
typedef __darwin_pid_t pid_t;
typedef __darwin_off_t off_t;
typedef int32_t segsz_t;
typedef int32_t swblk_t;
typedef __darwin_uid_t uid_t;
static const int major(x) = ((int32_t)(((u_int32_t)(x) >> 24) & 0xff));
static const int minor(x) = ((int32_t)((x) & 0xffffff));
static const int makedev(x,y) = ((dev_t)(((x) << 24) | (y)));
typedef __darwin_clock_t clock_t;
typedef __darwin_size_t size_t;
typedef __darwin_ssize_t ssize_t;
typedef __darwin_time_t time_t;
typedef __darwin_useconds_t useconds_t;
typedef __darwin_suseconds_t suseconds_t;
static const int __DARWIN_FD_SETSIZE = 1024;
static const int __DARWIN_NBBY = 8;
static const int __DARWIN_NFDBITS = (sizeof(__int32_t) * __DARWIN_NBBY);
static const int __DARWIN_howmany(x,y) = ((((x) % (y)) == 0) ? ((x) / (y)) : (((x) / (y)) + 1));
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;
static __inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[_n/(sizeof(__int32_t) * 8)] & (1<<(_n % (sizeof(__int32_t) * 8))));
}
static const int __DARWIN_FD_SET(n,p) = do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] |= (1<<(__fd % __DARWIN_NFDBITS))); } while(0);
static const int __DARWIN_FD_CLR(n,p) = do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] &= ~(1<<(__fd % __DARWIN_NFDBITS))); } while(0);
static const int __DARWIN_FD_ISSET(n,p) = __darwin_fd_isset((n), (p));
static const int __DARWIN_FD_ZERO(p) = __builtin_bzero(p, sizeof(*(p)));
static const int __DARWIN_FD_COPY(f,t) = bcopy(f, t, sizeof(*(f)));
static const int NBBY = __DARWIN_NBBY;
static const int NFDBITS = __DARWIN_NFDBITS;
static const int howmany(x,y) = __DARWIN_howmany(x, y);
typedef __int32_t fd_mask;
static const int FD_SETSIZE = __DARWIN_FD_SETSIZE;
static const int FD_SET(n,p) = __DARWIN_FD_SET(n, p);
static const int FD_CLR(n,p) = __DARWIN_FD_CLR(n, p);
static const int FD_ISSET(n,p) = __DARWIN_FD_ISSET(n, p);
static const int FD_ZERO(p) = __DARWIN_FD_ZERO(p);
static const int FD_COPY(f,t) = __DARWIN_FD_COPY(f, t);
typedef __darwin_pthread_attr_t pthread_attr_t;
typedef __darwin_pthread_cond_t pthread_cond_t;
typedef __darwin_pthread_condattr_t pthread_condattr_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
typedef __darwin_pthread_once_t pthread_once_t;
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
typedef __darwin_pthread_t pthread_t;
typedef __darwin_pthread_key_t pthread_key_t;
typedef __darwin_fsblkcnt_t fsblkcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;
static const int __DARWIN_ALIGNBYTES = (sizeof(__darwin_size_t) - 1);
static const int __DARWIN_ALIGN(p) = ((__darwin_size_t)((char *)(__darwin_size_t)(p) + __DARWIN_ALIGNBYTES) &~ __DARWIN_ALIGNBYTES);
static const int __DARWIN_ALIGNBYTES32 = (sizeof(__uint32_t) - 1);
static const int __DARWIN_ALIGN32(p) = ((__darwin_size_t)((char *)(__darwin_size_t)(p) + __DARWIN_ALIGNBYTES32) &~ __DARWIN_ALIGNBYTES32);
typedef __uint8_t sa_family_t;
typedef __darwin_socklen_t socklen_t;
struct iovec {
 void * iov_base;
 size_t iov_len;
};
static const int SOCK_STREAM = 1;
static const int SOCK_DGRAM = 2;
static const int SOCK_RAW = 3;
static const int SOCK_RDM = 4;
static const int SOCK_SEQPACKET = 5;
static const int SO_DEBUG = 0x0001;
static const int SO_ACCEPTCONN = 0x0002;
static const int SO_REUSEADDR = 0x0004;
static const int SO_KEEPALIVE = 0x0008;
static const int SO_DONTROUTE = 0x0010;
static const int SO_BROADCAST = 0x0020;
static const int SO_USELOOPBACK = 0x0040;
static const int SO_LINGER = 0x0080;
static const int SO_OOBINLINE = 0x0100;
static const int SO_REUSEPORT = 0x0200;
static const int SO_TIMESTAMP = 0x0400;
static const int SO_TIMESTAMP_MONOTONIC = 0x0800;
static const int SO_DONTTRUNC = 0x2000;
static const int SO_WANTMORE = 0x4000;
static const int SO_WANTOOBFLAG = 0x8000;
static const int SO_SNDBUF = 0x1001;
static const int SO_RCVBUF = 0x1002;
static const int SO_SNDLOWAT = 0x1003;
static const int SO_RCVLOWAT = 0x1004;
static const int SO_SNDTIMEO = 0x1005;
static const int SO_RCVTIMEO = 0x1006;
static const int SO_ERROR = 0x1007;
static const int SO_TYPE = 0x1008;
static const int SO_LABEL = 0x1010;
static const int SO_PEERLABEL = 0x1011;
static const int SO_NREAD = 0x1020;
static const int SO_NKE = 0x1021;
static const int SO_NOSIGPIPE = 0x1022;
static const int SO_NOADDRERR = 0x1023;
static const int SO_NWRITE = 0x1024;
static const int SO_REUSESHAREUID = 0x1025;
static const int SO_NOTIFYCONFLICT = 0x1026;
static const int SO_UPCALLCLOSEWAIT = 0x1027;
static const int SO_LINGER_SEC = 0x1080;
static const int SO_RESTRICTIONS = 0x1081;
static const int SO_RESTRICT_DENYIN = 0x00000001;
static const int SO_RESTRICT_DENYOUT = 0x00000002;
static const int SO_RESTRICT_DENYSET = 0x80000000;
static const int SO_RANDOMPORT = 0x1082;
static const int SO_NP_EXTENSIONS = 0x1083;
struct linger {
 int l_onoff;
 int l_linger;
};
struct so_np_extensions {
 u_int32_t npx_flags;
 u_int32_t npx_mask;
};
static const int SONPX_SETOPTSHUT = 0x000000001;
static const int SOL_SOCKET = 0xffff;
static const int AF_UNSPEC = 0;
static const int AF_UNIX = 1;
static const int AF_LOCAL = AF_UNIX;
static const int AF_INET = 2;
static const int AF_IMPLINK = 3;
static const int AF_PUP = 4;
static const int AF_CHAOS = 5;
static const int AF_NS = 6;
static const int AF_ISO = 7;
static const int AF_OSI = AF_ISO;
static const int AF_ECMA = 8;
static const int AF_DATAKIT = 9;
static const int AF_CCITT = 10;
static const int AF_SNA = 11;
static const int AF_DECnet = 12;
static const int AF_DLI = 13;
static const int AF_LAT = 14;
static const int AF_HYLINK = 15;
static const int AF_APPLETALK = 16;
static const int AF_ROUTE = 17;
static const int AF_LINK = 18;
static const int pseudo_AF_XTP = 19;
static const int AF_COIP = 20;
static const int AF_CNT = 21;
static const int pseudo_AF_RTIP = 22;
static const int AF_IPX = 23;
static const int AF_SIP = 24;
static const int pseudo_AF_PIP = 25;
static const int AF_NDRV = 27;
static const int AF_ISDN = 28;
static const int AF_E164 = AF_ISDN;
static const int pseudo_AF_KEY = 29;
static const int AF_INET6 = 30;
static const int AF_NATM = 31;
static const int AF_SYSTEM = 32;
static const int AF_NETBIOS = 33;
static const int AF_PPP = 34;
static const int pseudo_AF_HDRCMPLT = 35;
static const int AF_RESERVED_36 = 36;
static const int AF_IEEE80211 = 37;
static const int AF_UTUN = 38;
static const int AF_MAX = 39;
struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};
static const int SOCK_MAXADDRLEN = 255;
struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};
static const int _SS_MAXSIZE = 128;
static const int _SS_ALIGNSIZE = (sizeof(__int64_t));
static const int _SS_PAD1SIZE = (_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t));
static const int _SS_PAD2SIZE = (_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - _SS_PAD1SIZE - _SS_ALIGNSIZE);
struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};
static const int PF_UNSPEC = AF_UNSPEC;
static const int PF_LOCAL = AF_LOCAL;
static const int PF_UNIX = PF_LOCAL;
static const int PF_INET = AF_INET;
static const int PF_IMPLINK = AF_IMPLINK;
static const int PF_PUP = AF_PUP;
static const int PF_CHAOS = AF_CHAOS;
static const int PF_NS = AF_NS;
static const int PF_ISO = AF_ISO;
static const int PF_OSI = AF_ISO;
static const int PF_ECMA = AF_ECMA;
static const int PF_DATAKIT = AF_DATAKIT;
static const int PF_CCITT = AF_CCITT;
static const int PF_SNA = AF_SNA;
static const int PF_DECnet = AF_DECnet;
static const int PF_DLI = AF_DLI;
static const int PF_LAT = AF_LAT;
static const int PF_HYLINK = AF_HYLINK;
static const int PF_APPLETALK = AF_APPLETALK;
static const int PF_ROUTE = AF_ROUTE;
static const int PF_LINK = AF_LINK;
static const int PF_XTP = pseudo_AF_XTP;
static const int PF_COIP = AF_COIP;
static const int PF_CNT = AF_CNT;
static const int PF_SIP = AF_SIP;
static const int PF_IPX = AF_IPX;
static const int PF_RTIP = pseudo_AF_RTIP;
static const int PF_PIP = pseudo_AF_PIP;
static const int PF_NDRV = AF_NDRV;
static const int PF_ISDN = AF_ISDN;
static const int PF_KEY = pseudo_AF_KEY;
static const int PF_INET6 = AF_INET6;
static const int PF_NATM = AF_NATM;
static const int PF_SYSTEM = AF_SYSTEM;
static const int PF_NETBIOS = AF_NETBIOS;
static const int PF_PPP = AF_PPP;
static const int PF_RESERVED_36 = AF_RESERVED_36;
static const int PF_UTUN = AF_UTUN;
static const int PF_MAX = AF_MAX;
static const int PF_VLAN = ((uint32_t)0x766c616e);
static const int PF_BOND = ((uint32_t)0x626f6e64);
static const int NET_MAXID = AF_MAX;
static const int NET_RT_DUMP = 1;
static const int NET_RT_FLAGS = 2;
static const int NET_RT_IFLIST = 3;
static const int NET_RT_STAT = 4;
static const int NET_RT_TRASH = 5;
static const int NET_RT_IFLIST2 = 6;
static const int NET_RT_DUMP2 = 7;
static const int NET_RT_MAXID = 10;
static const int SOMAXCONN = 128;
struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};
static const int MSG_OOB = 0x1;
static const int MSG_PEEK = 0x2;
static const int MSG_DONTROUTE = 0x4;
static const int MSG_EOR = 0x8;
static const int MSG_TRUNC = 0x10;
static const int MSG_CTRUNC = 0x20;
static const int MSG_WAITALL = 0x40;
static const int MSG_DONTWAIT = 0x80;
static const int MSG_EOF = 0x100;
static const int MSG_WAITSTREAM = 0x200;
static const int MSG_FLUSH = 0x400;
static const int MSG_HOLD = 0x800;
static const int MSG_SEND = 0x1000;
static const int MSG_HAVEMORE = 0x2000;
static const int MSG_RCVMORE = 0x4000;
static const int MSG_NEEDSA = 0x10000;
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;
};
static const int CMSG_DATA(cmsg) = ((unsigned char *)(cmsg) + __DARWIN_ALIGN32(sizeof(struct cmsghdr)));
static const int CMSG_FIRSTHDR(mhdr) = ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? (struct cmsghdr *)(mhdr)->msg_control : (struct cmsghdr *)0L);
static const int CMSG_NXTHDR(mhdr,cmsg) = ((char *)(cmsg) == (char *)0L ? CMSG_FIRSTHDR(mhdr) : ((((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len) + __DARWIN_ALIGN32(sizeof(struct cmsghdr))) > ((unsigned char *)(mhdr)->msg_control + (mhdr)->msg_controllen)) ? (struct cmsghdr *)0L : (struct cmsghdr *)(void *)((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len))));
static const int CMSG_SPACE(l) = (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + __DARWIN_ALIGN32(l));
static const int CMSG_LEN(l) = (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + (l));
static const int SCM_RIGHTS = 0x01;
static const int SCM_TIMESTAMP = 0x02;
static const int SCM_CREDS = 0x03;
static const int SCM_TIMESTAMP_MONOTONIC = 0x04;
static const int SHUT_RD = 0;
static const int SHUT_WR = 1;
static const int SHUT_RDWR = 2;
struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};
int accept(int, struct sockaddr * , socklen_t * )
  __asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * , socklen_t * )
  __asm("_" "getpeername" );
int getsockname(int, struct sockaddr * , socklen_t * )
  __asm("_" "getsockname" );
int getsockopt(int, int, int, void * , socklen_t * );
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * ,
  socklen_t * ) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int) __attribute__((visibility("default")));
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );
int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);
void pfctlinput(int, struct sockaddr *);
static const int IPPROTO_IP = 0;
static const int IPPROTO_HOPOPTS = 0;
static const int IPPROTO_ICMP = 1;
static const int IPPROTO_IGMP = 2;
static const int IPPROTO_GGP = 3;
static const int IPPROTO_IPV4 = 4;
static const int IPPROTO_IPIP = IPPROTO_IPV4;
static const int IPPROTO_TCP = 6;
static const int IPPROTO_ST = 7;
static const int IPPROTO_EGP = 8;
static const int IPPROTO_PIGP = 9;
static const int IPPROTO_RCCMON = 10;
static const int IPPROTO_NVPII = 11;
static const int IPPROTO_PUP = 12;
static const int IPPROTO_ARGUS = 13;
static const int IPPROTO_EMCON = 14;
static const int IPPROTO_XNET = 15;
static const int IPPROTO_CHAOS = 16;
static const int IPPROTO_UDP = 17;
static const int IPPROTO_MUX = 18;
static const int IPPROTO_MEAS = 19;
static const int IPPROTO_HMP = 20;
static const int IPPROTO_PRM = 21;
static const int IPPROTO_IDP = 22;
static const int IPPROTO_TRUNK1 = 23;
static const int IPPROTO_TRUNK2 = 24;
static const int IPPROTO_LEAF1 = 25;
static const int IPPROTO_LEAF2 = 26;
static const int IPPROTO_RDP = 27;
static const int IPPROTO_IRTP = 28;
static const int IPPROTO_TP = 29;
static const int IPPROTO_BLT = 30;
static const int IPPROTO_NSP = 31;
static const int IPPROTO_INP = 32;
static const int IPPROTO_SEP = 33;
static const int IPPROTO_3PC = 34;
static const int IPPROTO_IDPR = 35;
static const int IPPROTO_XTP = 36;
static const int IPPROTO_DDP = 37;
static const int IPPROTO_CMTP = 38;
static const int IPPROTO_TPXX = 39;
static const int IPPROTO_IL = 40;
static const int IPPROTO_IPV6 = 41;
static const int IPPROTO_SDRP = 42;
static const int IPPROTO_ROUTING = 43;
static const int IPPROTO_FRAGMENT = 44;
static const int IPPROTO_IDRP = 45;
static const int IPPROTO_RSVP = 46;
static const int IPPROTO_GRE = 47;
static const int IPPROTO_MHRP = 48;
static const int IPPROTO_BHA = 49;
static const int IPPROTO_ESP = 50;
static const int IPPROTO_AH = 51;
static const int IPPROTO_INLSP = 52;
static const int IPPROTO_SWIPE = 53;
static const int IPPROTO_NHRP = 54;
static const int IPPROTO_ICMPV6 = 58;
static const int IPPROTO_NONE = 59;
static const int IPPROTO_DSTOPTS = 60;
static const int IPPROTO_AHIP = 61;
static const int IPPROTO_CFTP = 62;
static const int IPPROTO_HELLO = 63;
static const int IPPROTO_SATEXPAK = 64;
static const int IPPROTO_KRYPTOLAN = 65;
static const int IPPROTO_RVD = 66;
static const int IPPROTO_IPPC = 67;
static const int IPPROTO_ADFS = 68;
static const int IPPROTO_SATMON = 69;
static const int IPPROTO_VISA = 70;
static const int IPPROTO_IPCV = 71;
static const int IPPROTO_CPNX = 72;
static const int IPPROTO_CPHB = 73;
static const int IPPROTO_WSN = 74;
static const int IPPROTO_PVP = 75;
static const int IPPROTO_BRSATMON = 76;
static const int IPPROTO_ND = 77;
static const int IPPROTO_WBMON = 78;
static const int IPPROTO_WBEXPAK = 79;
static const int IPPROTO_EON = 80;
static const int IPPROTO_VMTP = 81;
static const int IPPROTO_SVMTP = 82;
static const int IPPROTO_VINES = 83;
static const int IPPROTO_TTP = 84;
static const int IPPROTO_IGP = 85;
static const int IPPROTO_DGP = 86;
static const int IPPROTO_TCF = 87;
static const int IPPROTO_IGRP = 88;
static const int IPPROTO_OSPFIGP = 89;
static const int IPPROTO_SRPC = 90;
static const int IPPROTO_LARP = 91;
static const int IPPROTO_MTP = 92;
static const int IPPROTO_AX25 = 93;
static const int IPPROTO_IPEIP = 94;
static const int IPPROTO_MICP = 95;
static const int IPPROTO_SCCSP = 96;
static const int IPPROTO_ETHERIP = 97;
static const int IPPROTO_ENCAP = 98;
static const int IPPROTO_APES = 99;
static const int IPPROTO_GMTP = 100;
static const int IPPROTO_PIM = 103;
static const int IPPROTO_IPCOMP = 108;
static const int IPPROTO_PGM = 113;
static const int IPPROTO_SCTP = 132;
static const int IPPROTO_DIVERT = 254;
static const int IPPROTO_RAW = 255;
static const int IPPROTO_MAX = 256;
static const int IPPROTO_DONE = 257;
static const int __DARWIN_IPPORT_RESERVED = 1024;
static const int IPPORT_RESERVED = __DARWIN_IPPORT_RESERVED;
static const int IPPORT_USERRESERVED = 5000;
static const int IPPORT_HIFIRSTAUTO = 49152;
static const int IPPORT_HILASTAUTO = 65535;
static const int IPPORT_RESERVEDSTART = 600;
struct in_addr {
 in_addr_t s_addr;
};
static const int INADDR_ANY = (u_int32_t)0x00000000;
static const int INADDR_BROADCAST = (u_int32_t)0xffffffff;
static const int IN_CLASSA(i) = (((u_int32_t)(i) & 0x80000000) == 0);
static const int IN_CLASSA_NET = 0xff000000;
static const int IN_CLASSA_NSHIFT = 24;
static const int IN_CLASSA_HOST = 0x00ffffff;
static const int IN_CLASSA_MAX = 128;
static const int IN_CLASSB(i) = (((u_int32_t)(i) & 0xc0000000) == 0x80000000);
static const int IN_CLASSB_NET = 0xffff0000;
static const int IN_CLASSB_NSHIFT = 16;
static const int IN_CLASSB_HOST = 0x0000ffff;
static const int IN_CLASSB_MAX = 65536;
static const int IN_CLASSC(i) = (((u_int32_t)(i) & 0xe0000000) == 0xc0000000);
static const int IN_CLASSC_NET = 0xffffff00;
static const int IN_CLASSC_NSHIFT = 8;
static const int IN_CLASSC_HOST = 0x000000ff;
static const int IN_CLASSD(i) = (((u_int32_t)(i) & 0xf0000000) == 0xe0000000);
static const int IN_CLASSD_NET = 0xf0000000;
static const int IN_CLASSD_NSHIFT = 28;
static const int IN_CLASSD_HOST = 0x0fffffff;
static const int IN_MULTICAST(i) = IN_CLASSD(i);
static const int IN_EXPERIMENTAL(i) = (((u_int32_t)(i) & 0xf0000000) == 0xf0000000);
static const int IN_BADCLASS(i) = (((u_int32_t)(i) & 0xf0000000) == 0xf0000000);
static const int INADDR_LOOPBACK = (u_int32_t)0x7f000001;
static const int INADDR_NONE = 0xffffffff;
static const int INADDR_UNSPEC_GROUP = (u_int32_t)0xe0000000;
static const int INADDR_ALLHOSTS_GROUP = (u_int32_t)0xe0000001;
static const int INADDR_ALLRTRS_GROUP = (u_int32_t)0xe0000002;
static const int INADDR_ALLRPTS_GROUP = (u_int32_t)0xe0000016;
static const int INADDR_CARP_GROUP = (u_int32_t)0xe0000012;
static const int INADDR_PFSYNC_GROUP = (u_int32_t)0xe00000f0;
static const int INADDR_ALLMDNS_GROUP = (u_int32_t)0xe00000fb;
static const int INADDR_MAX_LOCAL_GROUP = (u_int32_t)0xe00000ff;
static const int IN_LINKLOCALNETNUM = (u_int32_t)0xA9FE0000;
static const int IN_LINKLOCAL(i) = (((u_int32_t)(i) & IN_CLASSB_NET) == IN_LINKLOCALNETNUM);
static const int IN_LOOPBACK(i) = (((u_int32_t)(i) & 0xff000000) == 0x7f000000);
static const int IN_ZERONET(i) = (((u_int32_t)(i) & 0xff000000) == 0);
static const int IN_PRIVATE(i) = ((((u_int32_t)(i) & 0xff000000) == 0x0a000000) || (((u_int32_t)(i) & 0xfff00000) == 0xac100000) || (((u_int32_t)(i) & 0xffff0000) == 0xc0a80000));
static const int IN_LOCAL_GROUP(i) = (((u_int32_t)(i) & 0xffffff00) == 0xe0000000);
static const int IN_ANY_LOCAL(i) = (IN_LINKLOCAL(i) || IN_LOCAL_GROUP(i));
static const int IN_LOOPBACKNET = 127;
struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};
static const int INET_ADDRSTRLEN = 16;
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};
static const int IP_OPTIONS = 1;
static const int IP_HDRINCL = 2;
static const int IP_TOS = 3;
static const int IP_TTL = 4;
static const int IP_RECVOPTS = 5;
static const int IP_RECVRETOPTS = 6;
static const int IP_RECVDSTADDR = 7;
static const int IP_RETOPTS = 8;
static const int IP_MULTICAST_IF = 9;
static const int IP_MULTICAST_TTL = 10;
static const int IP_MULTICAST_LOOP = 11;
static const int IP_ADD_MEMBERSHIP = 12;
static const int IP_DROP_MEMBERSHIP = 13;
static const int IP_MULTICAST_VIF = 14;
static const int IP_RSVP_ON = 15;
static const int IP_RSVP_OFF = 16;
static const int IP_RSVP_VIF_ON = 17;
static const int IP_RSVP_VIF_OFF = 18;
static const int IP_PORTRANGE = 19;
static const int IP_RECVIF = 20;
static const int IP_IPSEC_POLICY = 21;
static const int IP_FAITH = 22;
static const int IP_STRIPHDR = 23;
static const int IP_RECVTTL = 24;
static const int IP_BOUND_IF = 25;
static const int IP_PKTINFO = 26;
static const int IP_RECVPKTINFO = IP_PKTINFO;
static const int IP_FW_ADD = 40;
static const int IP_FW_DEL = 41;
static const int IP_FW_FLUSH = 42;
static const int IP_FW_ZERO = 43;
static const int IP_FW_GET = 44;
static const int IP_FW_RESETLOG = 45;
static const int IP_OLD_FW_ADD = 50;
static const int IP_OLD_FW_DEL = 51;
static const int IP_OLD_FW_FLUSH = 52;
static const int IP_OLD_FW_ZERO = 53;
static const int IP_OLD_FW_GET = 54;
static const int IP_NAT__XXX = 55;
static const int IP_OLD_FW_RESETLOG = 56;
static const int IP_DUMMYNET_CONFIGURE = 60;
static const int IP_DUMMYNET_DEL = 61;
static const int IP_DUMMYNET_FLUSH = 62;
static const int IP_DUMMYNET_GET = 64;
static const int IP_TRAFFIC_MGT_BACKGROUND = 65;
static const int IP_MULTICAST_IFINDEX = 66;
static const int IP_ADD_SOURCE_MEMBERSHIP = 70;
static const int IP_DROP_SOURCE_MEMBERSHIP = 71;
static const int IP_BLOCK_SOURCE = 72;
static const int IP_UNBLOCK_SOURCE = 73;
static const int IP_MSFILTER = 74;
static const int MCAST_JOIN_GROUP = 80;
static const int MCAST_LEAVE_GROUP = 81;
static const int MCAST_JOIN_SOURCE_GROUP = 82;
static const int MCAST_LEAVE_SOURCE_GROUP = 83;
static const int MCAST_BLOCK_SOURCE = 84;
static const int MCAST_UNBLOCK_SOURCE = 85;
static const int IP_DEFAULT_MULTICAST_TTL = 1;
static const int IP_DEFAULT_MULTICAST_LOOP = 1;
static const int IP_MIN_MEMBERSHIPS = 31;
static const int IP_MAX_MEMBERSHIPS = 4095;
static const int IP_MAX_GROUP_SRC_FILTER = 512;
static const int IP_MAX_SOCK_SRC_FILTER = 128;
static const int IP_MAX_SOCK_MUTE_FILTER = 128;
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};
struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};
#pragma pack(4)
struct ip_mreq_source {
 struct in_addr imr_multiaddr;
 struct in_addr imr_sourceaddr;
 struct in_addr imr_interface;
};
struct group_req {
 uint32_t gr_interface;
 struct sockaddr_storage gr_group;
};
struct group_source_req {
 uint32_t gsr_interface;
 struct sockaddr_storage gsr_group;
 struct sockaddr_storage gsr_source;
};
struct __msfilterreq {
 uint32_t msfr_ifindex;
 uint32_t msfr_fmode;
 uint32_t msfr_nsrcs;
 uint32_t __msfr_align;
 struct sockaddr_storage msfr_group;
 struct sockaddr_storage *msfr_srcs;
};
#pragma pack()
struct sockaddr;
int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t,
     uint32_t, struct in_addr *) __attribute__((visibility("default")));
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *,
     uint32_t *, struct in_addr *) __attribute__((visibility("default")));
int setsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t, uint32_t, struct sockaddr_storage *) __attribute__((visibility("default")));
int getsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t *, uint32_t *, struct sockaddr_storage *) __attribute__((visibility("default")));
static const int MCAST_UNDEFINED = 0;
static const int MCAST_INCLUDE = 1;
static const int MCAST_EXCLUDE = 2;
static const int IP_PORTRANGE_DEFAULT = 0;
static const int IP_PORTRANGE_HIGH = 1;
static const int IP_PORTRANGE_LOW = 2;
struct in_pktinfo {
 unsigned int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};
static const int IPPROTO_MAXID = (IPPROTO_AH + 1);
static const int IPCTL_FORWARDING = 1;
static const int IPCTL_SENDREDIRECTS = 2;
static const int IPCTL_DEFTTL = 3;
static const int IPCTL_RTEXPIRE = 5;
static const int IPCTL_RTMINEXPIRE = 6;
static const int IPCTL_RTMAXCACHE = 7;
static const int IPCTL_SOURCEROUTE = 8;
static const int IPCTL_DIRECTEDBROADCAST = 9;
static const int IPCTL_INTRQMAXLEN = 10;
static const int IPCTL_INTRQDROPS = 11;
static const int IPCTL_STATS = 12;
static const int IPCTL_ACCEPTSOURCEROUTE = 13;
static const int IPCTL_FASTFORWARDING = 14;
static const int IPCTL_KEEPFAITH = 15;
static const int IPCTL_GIF_TTL = 16;
static const int IPCTL_MAXID = 17;
static const char __KAME_VERSION = "2009/apple-darwin";
static const int IPV6PORT_RESERVED = 1024;
static const int IPV6PORT_ANONMIN = 49152;
static const int IPV6PORT_ANONMAX = 65535;
static const int IPV6PORT_RESERVEDMIN = 600;
static const int IPV6PORT_RESERVEDMAX = (IPV6PORT_RESERVED-1);
struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
};
static const int s6_addr = __u6_addr.__u6_addr8;
static const int INET6_ADDRSTRLEN = 46;
struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
static const int IN6ADDR_ANY_INIT = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}};
static const int IN6ADDR_LOOPBACK_INIT = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}};
static const int IN6ADDR_NODELOCAL_ALLNODES_INIT = {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}};
static const int IN6ADDR_INTFACELOCAL_ALLNODES_INIT = {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}};
static const int IN6ADDR_LINKLOCAL_ALLNODES_INIT = {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}};
static const int IN6ADDR_LINKLOCAL_ALLROUTERS_INIT = {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}};
static const int IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT = {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}};
static const int IN6ADDR_V4MAPPED_INIT = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}};
extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
extern const struct in6_addr in6addr_linklocal_allv2routers;
static const int IN6_ARE_ADDR_EQUAL(a,b) = (memcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0);
static const int IN6_IS_ADDR_UNSPECIFIED(a) = ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == 0));
static const int IN6_IS_ADDR_LOOPBACK(a) = ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == ntohl(1)));
static const int IN6_IS_ADDR_V4COMPAT(a) = ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != ntohl(1)));
static const int IN6_IS_ADDR_V4MAPPED(a) = ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == ntohl(0x0000ffff)));
static const int IN6_IS_ADDR_6TO4(x) = (ntohs((x)->s6_addr16[0]) == 0x2002);
static const int __IPV6_ADDR_SCOPE_NODELOCAL = 0x01;
static const int __IPV6_ADDR_SCOPE_INTFACELOCAL = 0x01;
static const int __IPV6_ADDR_SCOPE_LINKLOCAL = 0x02;
static const int __IPV6_ADDR_SCOPE_SITELOCAL = 0x05;
static const int __IPV6_ADDR_SCOPE_ORGLOCAL = 0x08;
static const int __IPV6_ADDR_SCOPE_GLOBAL = 0x0e;
static const int IN6_IS_ADDR_LINKLOCAL(a) = (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0x80));
static const int IN6_IS_ADDR_SITELOCAL(a) = (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0xc0));
static const int IN6_IS_ADDR_MULTICAST(a) = ((a)->s6_addr[0] == 0xff);
static const int IN6_IS_ADDR_UNIQUE_LOCAL(a) = (((a)->s6_addr[0] == 0xfc) || ((a)->s6_addr[0] == 0xfd));
static const int __IPV6_ADDR_MC_SCOPE(a) = ((a)->s6_addr[1] & 0x0f);
static const int IN6_IS_ADDR_MC_NODELOCAL(a) = (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL));
static const int IN6_IS_ADDR_MC_LINKLOCAL(a) = (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL));
static const int IN6_IS_ADDR_MC_SITELOCAL(a) = (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL));
static const int IN6_IS_ADDR_MC_ORGLOCAL(a) = (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL));
static const int IN6_IS_ADDR_MC_GLOBAL(a) = (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL));
static const int IPV6_SOCKOPT_RESERVED1 = 3;
static const int IPV6_UNICAST_HOPS = 4;
static const int IPV6_MULTICAST_IF = 9;
static const int IPV6_MULTICAST_HOPS = 10;
static const int IPV6_MULTICAST_LOOP = 11;
static const int IPV6_JOIN_GROUP = 12;
static const int IPV6_LEAVE_GROUP = 13;
static const int IPV6_PORTRANGE = 14;
static const int ICMP6_FILTER = 18;
static const int IPV6_2292PKTINFO = 19;
static const int IPV6_2292HOPLIMIT = 20;
static const int IPV6_2292NEXTHOP = 21;
static const int IPV6_2292HOPOPTS = 22;
static const int IPV6_2292DSTOPTS = 23;
static const int IPV6_2292RTHDR = 24;
static const int IPV6_2292PKTOPTIONS = 25;
static const int IPV6_CHECKSUM = 26;
static const int IPV6_V6ONLY = 27;
static const int IPV6_BINDV6ONLY = IPV6_V6ONLY;
static const int IPV6_IPSEC_POLICY = 28;
static const int IPV6_FAITH = 29;
static const int IPV6_FW_ADD = 30;
static const int IPV6_FW_DEL = 31;
static const int IPV6_FW_FLUSH = 32;
static const int IPV6_FW_ZERO = 33;
static const int IPV6_FW_GET = 34;
static const int IPV6_RECVTCLASS = 35;
static const int IPV6_TCLASS = 36;
static const int IPV6_BOUND_IF = 125;
static const int IPV6_RTHDR_LOOSE = 0;
static const int IPV6_RTHDR_STRICT = 1;
static const int IPV6_RTHDR_TYPE_0 = 0;
static const int IPV6_DEFAULT_MULTICAST_HOPS = 1;
static const int IPV6_DEFAULT_MULTICAST_LOOP = 1;
static const int IPV6_MIN_MEMBERSHIPS = 31;
static const int IPV6_MAX_MEMBERSHIPS = 4095;
static const int IPV6_MAX_GROUP_SRC_FILTER = 512;
static const int IPV6_MAX_SOCK_SRC_FILTER = 128;
struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};
struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};
struct ip6_mtuinfo {
 struct sockaddr_in6 ip6m_addr;
 uint32_t ip6m_mtu;
};
static const int IPV6_PORTRANGE_DEFAULT = 0;
static const int IPV6_PORTRANGE_HIGH = 1;
static const int IPV6_PORTRANGE_LOW = 2;
static const int IPV6PROTO_MAXID = (IPPROTO_PIM + 1);
static const int IPV6CTL_FORWARDING = 1;
static const int IPV6CTL_SENDREDIRECTS = 2;
static const int IPV6CTL_DEFHLIM = 3;
static const int IPV6CTL_FORWSRCRT = 5;
static const int IPV6CTL_STATS = 6;
static const int IPV6CTL_MRTSTATS = 7;
static const int IPV6CTL_MRTPROTO = 8;
static const int IPV6CTL_MAXFRAGPACKETS = 9;
static const int IPV6CTL_SOURCECHECK = 10;
static const int IPV6CTL_SOURCECHECK_LOGINT = 11;
static const int IPV6CTL_ACCEPT_RTADV = 12;
static const int IPV6CTL_KEEPFAITH = 13;
static const int IPV6CTL_LOG_INTERVAL = 14;
static const int IPV6CTL_HDRNESTLIMIT = 15;
static const int IPV6CTL_DAD_COUNT = 16;
static const int IPV6CTL_AUTO_FLOWLABEL = 17;
static const int IPV6CTL_DEFMCASTHLIM = 18;
static const int IPV6CTL_GIF_HLIM = 19;
static const int IPV6CTL_KAME_VERSION = 20;
static const int IPV6CTL_USE_DEPRECATED = 21;
static const int IPV6CTL_RR_PRUNE = 22;
static const int IPV6CTL_V6ONLY = 24;
static const int IPV6CTL_RTEXPIRE = 25;
static const int IPV6CTL_RTMINEXPIRE = 26;
static const int IPV6CTL_RTMAXCACHE = 27;
static const int IPV6CTL_USETEMPADDR = 32;
static const int IPV6CTL_TEMPPLTIME = 33;
static const int IPV6CTL_TEMPVLTIME = 34;
static const int IPV6CTL_AUTO_LINKLOCAL = 35;
static const int IPV6CTL_RIP6STATS = 36;
static const int IPV6CTL_PREFER_TEMPADDR = 37;
static const int IPV6CTL_ADDRCTLPOLICY = 38;
static const int IPV6CTL_USE_DEFAULTZONE = 39;
static const int IPV6CTL_MAXFRAGS = 41;
static const int IPV6CTL_MCAST_PMTU = 44;
static const int IPV6CTL_NEIGHBORGCTHRESH = 46;
static const int IPV6CTL_MAXIFPREFIXES = 47;
static const int IPV6CTL_MAXIFDEFROUTERS = 48;
static const int IPV6CTL_MAXDYNROUTES = 49;
static const int ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50;
static const int IPV6CTL_MAXID = 51;
struct cmsghdr;
extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *,
 int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);
extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
  unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);
extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);
extern int inet6_opt_init(void *, socklen_t);
extern int inet6_opt_append(void *, socklen_t, int, __uint8_t,
     socklen_t, __uint8_t, void **);
extern int inet6_opt_finish(void *, socklen_t, int);
extern int inet6_opt_set_val(void *, int, void *, socklen_t);
extern int inet6_opt_next(void *, socklen_t, int, __uint8_t *,
          socklen_t *, void **);
extern int inet6_opt_find(void *, socklen_t, int, __uint8_t,
     socklen_t *, void **);
extern int inet6_opt_get_val(void *, int, void *, socklen_t);
extern socklen_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, socklen_t, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);
extern void addrsel_policy_init(void);
int bindresvport(int, struct sockaddr_in *);
struct sockaddr;
int bindresvport_sa(int, struct sockaddr *);
in_addr_t inet_addr(const char *);
char *inet_ntoa(struct in_addr);
const char *inet_ntop(int, const void *, char *, socklen_t);
int inet_pton(int, const char *, void *);
int ascii2addr(int, const char *, void *);
char *addr2ascii(int, const void *, int, char *);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr);
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);
in_addr_t inet_netof(struct in_addr);
in_addr_t inet_network(const char *);
char *inet_net_ntop(int, const void *, int, char *, __darwin_size_t);
int inet_net_pton(int, const char *, void *, __darwin_size_t);
char *inet_neta(in_addr_t, char *, __darwin_size_t);
unsigned int inet_nsap_addr(const char *, unsigned char *, int maxlen);
char *inet_nsap_ntoa(int, const unsigned char *, char *ascii);
