static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 2;
static const int __GNUC_PATCHLEVEL__ = 1;
static const int __APPLE_CC__ = 5658;
static const int __llvm__ = 1;
static const int __SIZE_TYPE__ = long unsigned int;
static const int __PTRDIFF_TYPE__ = long int;
static const int __WCHAR_TYPE__ = int;
static const int __WINT_TYPE__ = int;
static const int __INTMAX_TYPE__ = long int;
static const int __UINTMAX_TYPE__ = long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 9223372036854775807L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 2147483647;
static const int __CHAR_BIT__ = 8;
static const long __INTMAX_MAX__ = 9223372036854775807L;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const double __FLT_MAX__ = 3.40282347e+38F;
static const double __FLT_MIN__ = 1.17549435e-38F;
static const double __FLT_EPSILON__ = 1.19209290e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const double __DBL_MAX__ = 1.7976931348623157e+308;
static const double __DBL_MIN__ = 2.2250738585072014e-308;
static const double __DBL_EPSILON__ = 2.2204460492503131e-16;
static const double __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-95);
static const int __DEC32_MAX_EXP__ = 96;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_DEN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-383);
static const int __DEC64_MAX_EXP__ = 384;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_DEN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6143);
static const int __DEC128_MAX_EXP__ = 6144;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_DEN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __USER_LABEL_PREFIX__ = _;
static const char __VERSION__ = "4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)";
static const int __GNUC_GNU_INLINE__ = 1;
static const int _LP64 = 1;
static const int __LP64__ = 1;
static const int __BLOCKS__ = 1;
static const int __NO_INLINE__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __pic__ = 2;
static const int __PIC__ = 2;
static const int __SSP__ = 1;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __tune_core2__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE3__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __NO_MATH_INLINES = 1;
static const int __LITTLE_ENDIAN__ = 1;
static const int __MACH__ = 1;
static const int __APPLE__ = 1;
static const int __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 1083;
static const int __CONSTANT_CFSTRINGS__ = 1;
static const int __weak = __attribute__((objc_gc(weak)));
static const int __block = __attribute__((__blocks__(byref)));
static const int OBJC_NEW_PROPERTIES = 1;
static const int __DYNAMIC__ = 1;
#undef __need___va_list
typedef __builtin_va_list __gnuc_va_list;
static const int va_start(v,l) = __builtin_va_start(v,l);
static const int va_end(v) = __builtin_va_end(v);
static const int va_arg(v,l) = __builtin_va_arg(v,l);
static const int va_copy(d,s) = __builtin_va_copy(d,s);
static const int __va_copy(d,s) = __builtin_va_copy(d,s);
typedef __gnuc_va_list va_list;
typedef long int ptrdiff_t;
#undef __need_ptrdiff_t
typedef long unsigned int size_t;
#undef __need_size_t
#undef _BSD_WCHAR_T_
typedef int wchar_t;
#undef __need_wchar_t
#undef NULL
static const int NULL = ((void *)0);
#undef __need_NULL
static const int offsetof(TYPE,MEMBER) = __builtin_offsetof (TYPE, MEMBER);
static const int __P(protos) = protos;
static const int __CONCAT(x,y) = x ## y;
static const int __STRING(x) = #x;
static const int __const = const;
static const int __signed = signed;
static const int __volatile = volatile;
static const int __dead2 = __attribute__((noreturn));
static const int __pure2 = __attribute__((const));
static const int __unused = __attribute__((unused));
static const int __used = __attribute__((used));
static const int __deprecated = __attribute__((deprecated));
static const int __unavailable = __attribute__((unavailable));
static const int __printflike(fmtarg,firstvararg) = __attribute__((__format__ (__printf__, fmtarg, firstvararg)));
static const int __scanflike(fmtarg,firstvararg) = __attribute__((__format__ (__scanf__, fmtarg, firstvararg)));
static const int __IDSTRING(name,string) = static const char name[] __used = string;
static const int __COPYRIGHT(s) = __IDSTRING(copyright,s);
static const int __RCSID(s) = __IDSTRING(rcsid,s);
static const int __SCCSID(s) = __IDSTRING(sccsid,s);
static const int __PROJECT_VERSION(s) = __IDSTRING(project_version,s);
static const int __DARWIN_ONLY_64_BIT_INO_T = 0;
static const int __DARWIN_ONLY_VERS_1050 = 0;
static const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
static const int __DARWIN_UNIX03 = 1;
static const int __DARWIN_64_BIT_INO_T = 1;
static const int __DARWIN_VERS_1050 = 1;
static const int __DARWIN_NON_CANCELABLE = 0;
static const char __DARWIN_SUF_64_BIT_INO_T = "$INODE64";
static const char __DARWIN_SUF_1050 = "$1050";
static const char __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
static const int __DARWIN_ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_1050(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050);
static const int __DARWIN_1050ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_EXTSN(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN);
static const int __DARWIN_EXTSN_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE);
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x) = x;
static const int __DARWIN_ALIAS_STARTING(_mac,_iphone,x) = __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x);
static const int __POSIX_C_DEPRECATED(ver) = ___POSIX_C_DEPRECATED_STARTING_ ##ver;
static const long __DARWIN_C_ANSI = 010000L;
static const long __DARWIN_C_FULL = 900000L;
static const int __DARWIN_C_LEVEL = __DARWIN_C_FULL;
static const int __DARWIN_NO_LONG_LONG = (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__));
static const int _DARWIN_FEATURE_64_BIT_INODE = 1;
static const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
static const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
static const int __CAST_AWAY_QUALIFIER(variable,qualifier,type) = (type) (long)(variable);
static const int __DARWIN_CLK_TCK = 100;
static const int CHAR_BIT = 8;
static const int MB_LEN_MAX = 6;
static const int CLK_TCK = __DARWIN_CLK_TCK;
static const int SCHAR_MAX = 127;
static const int SCHAR_MIN = (-128);
static const int UCHAR_MAX = 255;
static const int CHAR_MAX = 127;
static const int CHAR_MIN = (-128);
static const int USHRT_MAX = 65535;
static const int SHRT_MAX = 32767;
static const int SHRT_MIN = (-32768);
static const int UINT_MAX = 0xffffffff;
static const int INT_MAX = 2147483647;
static const int INT_MIN = (-2147483647-1);
static const int ULONG_MAX = 0xffffffffffffffffUL;
static const int LONG_MAX = 0x7fffffffffffffffL;
static const int LONG_MIN = (-0x7fffffffffffffffL-1);
static const int ULLONG_MAX = 0xffffffffffffffffULL;
static const int LLONG_MAX = 0x7fffffffffffffffLL;
static const int LLONG_MIN = (-0x7fffffffffffffffLL-1);
static const int LONG_BIT = 64;
static const int SSIZE_MAX = LONG_MAX;
static const int WORD_BIT = 32;
static const int SIZE_T_MAX = ULONG_MAX;
static const int UQUAD_MAX = ULLONG_MAX;
static const int QUAD_MAX = LLONG_MAX;
static const int QUAD_MIN = LLONG_MIN;
static const int ARG_MAX = (256 * 1024);
static const int CHILD_MAX = 266;
static const int GID_MAX = 2147483647U;
static const int LINK_MAX = 32767;
static const int MAX_CANON = 1024;
static const int MAX_INPUT = 1024;
static const int NAME_MAX = 255;
static const int NGROUPS_MAX = 16;
static const int UID_MAX = 2147483647U;
static const int OPEN_MAX = 10240;
static const int PATH_MAX = 1024;
static const int PIPE_BUF = 512;
static const int BC_BASE_MAX = 99;
static const int BC_DIM_MAX = 2048;
static const int BC_SCALE_MAX = 99;
static const int BC_STRING_MAX = 1000;
static const int CHARCLASS_NAME_MAX = 14;
static const int COLL_WEIGHTS_MAX = 2;
static const int EQUIV_CLASS_MAX = 2;
static const int EXPR_NEST_MAX = 32;
static const int LINE_MAX = 2048;
static const int RE_DUP_MAX = 255;
static const int NZERO = 20;
static const int _POSIX_ARG_MAX = 4096;
static const int _POSIX_CHILD_MAX = 25;
static const int _POSIX_LINK_MAX = 8;
static const int _POSIX_MAX_CANON = 255;
static const int _POSIX_MAX_INPUT = 255;
static const int _POSIX_NAME_MAX = 14;
static const int _POSIX_NGROUPS_MAX = 8;
static const int _POSIX_OPEN_MAX = 20;
static const int _POSIX_PATH_MAX = 256;
static const int _POSIX_PIPE_BUF = 512;
static const int _POSIX_SSIZE_MAX = 32767;
static const int _POSIX_STREAM_MAX = 8;
static const int _POSIX_TZNAME_MAX = 6;
static const int _POSIX2_BC_BASE_MAX = 99;
static const int _POSIX2_BC_DIM_MAX = 2048;
static const int _POSIX2_BC_SCALE_MAX = 99;
static const int _POSIX2_BC_STRING_MAX = 1000;
static const int _POSIX2_EQUIV_CLASS_MAX = 2;
static const int _POSIX2_EXPR_NEST_MAX = 32;
static const int _POSIX2_LINE_MAX = 2048;
static const int _POSIX2_RE_DUP_MAX = 255;
static const int _POSIX_AIO_LISTIO_MAX = 2;
static const int _POSIX_AIO_MAX = 1;
static const int _POSIX_DELAYTIMER_MAX = 32;
static const int _POSIX_MQ_OPEN_MAX = 8;
static const int _POSIX_MQ_PRIO_MAX = 32;
static const int _POSIX_RTSIG_MAX = 8;
static const int _POSIX_SEM_NSEMS_MAX = 256;
static const int _POSIX_SEM_VALUE_MAX = 32767;
static const int _POSIX_SIGQUEUE_MAX = 32;
static const int _POSIX_TIMER_MAX = 32;
static const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;
static const int _POSIX_THREAD_KEYS_MAX = 128;
static const int _POSIX_THREAD_THREADS_MAX = 64;
static const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;
static const int PTHREAD_KEYS_MAX = 512;
static const int PTHREAD_STACK_MIN = 8192;
static const int _POSIX_HOST_NAME_MAX = 255;
static const int _POSIX_LOGIN_NAME_MAX = 9;
static const int _POSIX_SS_REPL_MAX = 4;
static const int _POSIX_SYMLINK_MAX = 255;
static const int _POSIX_SYMLOOP_MAX = 8;
static const int _POSIX_TRACE_EVENT_NAME_MAX = 30;
static const int _POSIX_TRACE_NAME_MAX = 8;
static const int _POSIX_TRACE_SYS_MAX = 8;
static const int _POSIX_TRACE_USER_EVENT_MAX = 32;
static const int _POSIX_TTY_NAME_MAX = 9;
static const int _POSIX2_CHARCLASS_NAME_MAX = 14;
static const int _POSIX2_COLL_WEIGHTS_MAX = 2;
static const int _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;
static const int OFF_MIN = LLONG_MIN;
static const int OFF_MAX = LLONG_MAX;
static const int PASS_MAX = 128;
static const int NL_ARGMAX = 9;
static const int NL_LANGMAX = 14;
static const int NL_MSGMAX = 32767;
static const int NL_NMAX = 1;
static const int NL_SETMAX = 255;
static const int NL_TEXTMAX = 2048;
static const int _XOPEN_IOV_MAX = 16;
static const int IOV_MAX = 1024;
static const int _XOPEN_NAME_MAX = 255;
static const int _XOPEN_PATH_MAX = 1024;
#undef _GCC_NEXT_LIMITS_H
#undef CHAR_BIT
static const int CHAR_BIT = __CHAR_BIT__;
#undef SCHAR_MIN
static const int SCHAR_MIN = (-SCHAR_MAX - 1);
#undef SCHAR_MAX
static const int SCHAR_MAX = __SCHAR_MAX__;
#undef UCHAR_MAX
static const int UCHAR_MAX = (SCHAR_MAX * 2 + 1);
#undef CHAR_MIN
static const int CHAR_MIN = SCHAR_MIN;
#undef CHAR_MAX
static const int CHAR_MAX = SCHAR_MAX;
#undef SHRT_MIN
static const int SHRT_MIN = (-SHRT_MAX - 1);
#undef SHRT_MAX
static const int SHRT_MAX = __SHRT_MAX__;
#undef USHRT_MAX
static const int USHRT_MAX = (SHRT_MAX * 2 + 1);
#undef INT_MIN
static const int INT_MIN = (-INT_MAX - 1);
#undef INT_MAX
static const int INT_MAX = __INT_MAX__;
#undef UINT_MAX
static const int UINT_MAX = (INT_MAX * 2U + 1U);
#undef LONG_MIN
static const int LONG_MIN = (-LONG_MAX - 1L);
#undef LONG_MAX
static const int LONG_MAX = __LONG_MAX__;
#undef ULONG_MAX
static const int ULONG_MAX = (LONG_MAX * 2UL + 1UL);
#undef LONG_LONG_MIN
static const int LONG_LONG_MIN = (-LONG_LONG_MAX - 1LL);
#undef LONG_LONG_MAX
static const int LONG_LONG_MAX = __LONG_LONG_MAX__;
#undef ULONG_LONG_MAX
static const int ULONG_LONG_MAX = (LONG_LONG_MAX * 2ULL + 1ULL);
#undef _GCC_NEXT_LIMITS_H
static const char LUA_PATH = "LUA_PATH";
static const char LUA_CPATH = "LUA_CPATH";
static const char LUA_INIT = "LUA_INIT";
static const char LUA_ROOT = "/usr/local/";
static const char LUA_LDIR = LUA_ROOT "share/lua/5.1/";
static const char LUA_CDIR = LUA_ROOT "lib/lua/5.1/";
static const char LUA_PATH_DEFAULT = "./?.lua;" LUA_LDIR"?.lua;" LUA_LDIR"?/init.lua;" LUA_CDIR"?.lua;" LUA_CDIR"?/init.lua";
static const char LUA_CPATH_DEFAULT = "./?.so;" LUA_CDIR"?.so;" LUA_CDIR"loadall.so";
static const char LUA_DIRSEP = "/";
static const char LUA_PATHSEP = ";";
static const char LUA_PATH_MARK = "?";
static const char LUA_EXECDIR = "!";
static const char LUA_IGMARK = "-";
static const int LUA_INTEGER = ptrdiff_t;
static const int LUA_API = extern;
static const int LUALIB_API = LUA_API;
static const int LUAI_FUNC = extern;
static const int LUAI_DATA = extern;
static const char LUA_QL(x) = "'" x "'";
static const int LUA_QS = LUA_QL("%s");
static const int LUA_IDSIZE = 60;
static const int LUAI_GCPAUSE = 200;
static const int LUAI_GCMUL = 200;
#undef LUA_COMPAT_GETN
#undef LUA_COMPAT_LOADLIB
static const int LUA_COMPAT_LSTR = 1;
static const int luai_apicheck(L,o) = { (void)L; };
static const int LUAI_BITSINT = 32;
static const int LUAI_UINT32 = unsigned int;
static const int LUAI_INT32 = int;
static const int LUAI_MAXINT32 = INT_MAX;
static const int LUAI_UMEM = size_t;
static const int LUAI_MEM = ptrdiff_t;
static const int LUAI_MAXCALLS = 20000;
static const int LUAI_MAXCSTACK = 8000;
static const int LUAI_MAXCCALLS = 200;
static const int LUAI_MAXVARS = 200;
static const int LUAI_MAXUPVALUES = 60;
static const int LUAL_BUFFERSIZE = BUFSIZ;
static const int LUA_NUMBER = double;
static const int LUAI_UACNUMBER = double;
static const char LUA_NUMBER_SCAN = "%lf";
static const char LUA_NUMBER_FMT = "%.14g";
static const int lua_number2str(s,n) = sprintf((s), LUA_NUMBER_FMT, (n));
static const int LUAI_MAXNUMBER2STR = 32;
static const int lua_str2number(s,p) = strtod((s), (p));
static const int lua_number2int(i,d) = ((i)=(int)(d));
static const int lua_number2integer(i,d) = ((i)=(lua_Integer)(d));
static const int LUAI_USER_ALIGNMENT_T = union { double u; void *s; long l; };
static const int LUAI_THROW(L,c) = longjmp((c)->b, 1);
static const int LUAI_TRY(L,c,a) = if (setjmp((c)->b) == 0) { a };
static const int luai_jmpbuf = jmp_buf;
static const int LUA_MAXCAPTURES = 32;
static const int lua_popen(L,c,m) = ((void)((void)c, m), luaL_error(L, LUA_QL("popen") " not supported"), (FILE*)0);
static const int lua_pclose(L,file) = ((void)((void)L, file), 0);
static const int LUAI_EXTRASPACE = 0;
static const int luai_userstateopen(L) = ((void)L);
static const int luai_userstateclose(L) = ((void)L);
static const int luai_userstatethread(L,L1) = ((void)L);
static const int luai_userstatefree(L) = ((void)L);
static const int luai_userstateresume(L,n) = ((void)L);
static const int luai_userstateyield(L,n) = ((void)L);
static const char LUA_INTFRMLEN = "l";
static const int LUA_INTFRM_T = long;
static const char LUA_VERSION = "Lua 5.1";
static const char LUA_RELEASE = "Lua 5.1.5";
static const int LUA_VERSION_NUM = 501;
static const char LUA_COPYRIGHT = "Copyright (C) 1994-2012 Lua.org, PUC-Rio";
static const char LUA_AUTHORS = "R. Ierusalimschy, L. H. de Figueiredo & W. Celes";
static const char LUA_SIGNATURE = "\033Lua";
static const int LUA_MULTRET = (-1);
static const int LUA_REGISTRYINDEX = (-10000);
static const int LUA_ENVIRONINDEX = (-10001);
static const int LUA_GLOBALSINDEX = (-10002);
static const int lua_upvalueindex(i) = (LUA_GLOBALSINDEX-(i));
static const int LUA_YIELD = 1;
static const int LUA_ERRRUN = 2;
static const int LUA_ERRSYNTAX = 3;
static const int LUA_ERRMEM = 4;
static const int LUA_ERRERR = 5;
typedef struct lua_State lua_State;
typedef int (*lua_CFunction) (lua_State *L);
typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);
typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
static const int LUA_TNONE = (-1);
static const int LUA_TNIL = 0;
static const int LUA_TBOOLEAN = 1;
static const int LUA_TLIGHTUSERDATA = 2;
static const int LUA_TNUMBER = 3;
static const int LUA_TSTRING = 4;
static const int LUA_TTABLE = 5;
static const int LUA_TFUNCTION = 6;
static const int LUA_TUSERDATA = 7;
static const int LUA_TTHREAD = 8;
static const int LUA_MINSTACK = 20;
typedef double lua_Number;
typedef ptrdiff_t lua_Integer;
extern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
extern void (lua_close) (lua_State *L);
extern lua_State *(lua_newthread) (lua_State *L);
extern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
extern int (lua_gettop) (lua_State *L);
extern void (lua_settop) (lua_State *L, int idx);
extern void (lua_pushvalue) (lua_State *L, int idx);
extern void (lua_remove) (lua_State *L, int idx);
extern void (lua_insert) (lua_State *L, int idx);
extern void (lua_replace) (lua_State *L, int idx);
extern int (lua_checkstack) (lua_State *L, int sz);
extern void (lua_xmove) (lua_State *from, lua_State *to, int n);
extern int (lua_isnumber) (lua_State *L, int idx);
extern int (lua_isstring) (lua_State *L, int idx);
extern int (lua_iscfunction) (lua_State *L, int idx);
extern int (lua_isuserdata) (lua_State *L, int idx);
extern int (lua_type) (lua_State *L, int idx);
extern const char *(lua_typename) (lua_State *L, int tp);
extern int (lua_equal) (lua_State *L, int idx1, int idx2);
extern int (lua_rawequal) (lua_State *L, int idx1, int idx2);
extern int (lua_lessthan) (lua_State *L, int idx1, int idx2);
extern lua_Number (lua_tonumber) (lua_State *L, int idx);
extern lua_Integer (lua_tointeger) (lua_State *L, int idx);
extern int (lua_toboolean) (lua_State *L, int idx);
extern const char *(lua_tolstring) (lua_State *L, int idx, size_t *len);
extern size_t (lua_objlen) (lua_State *L, int idx);
extern lua_CFunction (lua_tocfunction) (lua_State *L, int idx);
extern void *(lua_touserdata) (lua_State *L, int idx);
extern lua_State *(lua_tothread) (lua_State *L, int idx);
extern const void *(lua_topointer) (lua_State *L, int idx);
extern void (lua_pushnil) (lua_State *L);
extern void (lua_pushnumber) (lua_State *L, lua_Number n);
extern void (lua_pushinteger) (lua_State *L, lua_Integer n);
extern void (lua_pushlstring) (lua_State *L, const char *s, size_t l);
extern void (lua_pushstring) (lua_State *L, const char *s);
extern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
                                                      va_list argp);
extern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
extern void (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
extern void (lua_pushboolean) (lua_State *L, int b);
extern void (lua_pushlightuserdata) (lua_State *L, void *p);
extern int (lua_pushthread) (lua_State *L);
extern void (lua_gettable) (lua_State *L, int idx);
extern void (lua_getfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawget) (lua_State *L, int idx);
extern void (lua_rawgeti) (lua_State *L, int idx, int n);
extern void (lua_createtable) (lua_State *L, int narr, int nrec);
extern void *(lua_newuserdata) (lua_State *L, size_t sz);
extern int (lua_getmetatable) (lua_State *L, int objindex);
extern void (lua_getfenv) (lua_State *L, int idx);
extern void (lua_settable) (lua_State *L, int idx);
extern void (lua_setfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawset) (lua_State *L, int idx);
extern void (lua_rawseti) (lua_State *L, int idx, int n);
extern int (lua_setmetatable) (lua_State *L, int objindex);
extern int (lua_setfenv) (lua_State *L, int idx);
extern void (lua_call) (lua_State *L, int nargs, int nresults);
extern int (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);
extern int (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);
extern int (lua_load) (lua_State *L, lua_Reader reader, void *dt,
                                        const char *chunkname);
extern int (lua_dump) (lua_State *L, lua_Writer writer, void *data);
extern int (lua_yield) (lua_State *L, int nresults);
extern int (lua_resume) (lua_State *L, int narg);
extern int (lua_status) (lua_State *L);
static const int LUA_GCSTOP = 0;
static const int LUA_GCRESTART = 1;
static const int LUA_GCCOLLECT = 2;
static const int LUA_GCCOUNT = 3;
static const int LUA_GCCOUNTB = 4;
static const int LUA_GCSTEP = 5;
static const int LUA_GCSETPAUSE = 6;
static const int LUA_GCSETSTEPMUL = 7;
extern int (lua_gc) (lua_State *L, int what, int data);
extern int (lua_error) (lua_State *L);
extern int (lua_next) (lua_State *L, int idx);
extern void (lua_concat) (lua_State *L, int n);
extern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
extern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);
static const int lua_pop(L,n) = lua_settop(L, -(n)-1);
static const int lua_newtable(L) = lua_createtable(L, 0, 0);
static const int lua_register(L,n,f) = (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)));
static const int lua_pushcfunction(L,f) = lua_pushcclosure(L, (f), 0);
static const int lua_strlen(L,i) = lua_objlen(L, (i));
static const int lua_isfunction(L,n) = (lua_type(L, (n)) == LUA_TFUNCTION);
static const int lua_istable(L,n) = (lua_type(L, (n)) == LUA_TTABLE);
static const int lua_islightuserdata(L,n) = (lua_type(L, (n)) == LUA_TLIGHTUSERDATA);
static const int lua_isnil(L,n) = (lua_type(L, (n)) == LUA_TNIL);
static const int lua_isboolean(L,n) = (lua_type(L, (n)) == LUA_TBOOLEAN);
static const int lua_isthread(L,n) = (lua_type(L, (n)) == LUA_TTHREAD);
static const int lua_isnone(L,n) = (lua_type(L, (n)) == LUA_TNONE);
static const int lua_isnoneornil(L,n) = (lua_type(L, (n)) <= 0);
static const int lua_pushliteral(L,s) = lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1);
static const int lua_setglobal(L,s) = lua_setfield(L, LUA_GLOBALSINDEX, (s));
static const int lua_getglobal(L,s) = lua_getfield(L, LUA_GLOBALSINDEX, (s));
static const int lua_tostring(L,i) = lua_tolstring(L, (i), NULL);
static const int lua_open() = luaL_newstate();
static const int lua_getregistry(L) = lua_pushvalue(L, LUA_REGISTRYINDEX);
static const int lua_getgccount(L) = lua_gc(L, LUA_GCCOUNT, 0);
static const int lua_Chunkreader = lua_Reader;
static const int lua_Chunkwriter = lua_Writer;
extern void lua_setlevel (lua_State *from, lua_State *to);
static const int LUA_HOOKCALL = 0;
static const int LUA_HOOKRET = 1;
static const int LUA_HOOKLINE = 2;
static const int LUA_HOOKCOUNT = 3;
static const int LUA_HOOKTAILRET = 4;
static const int LUA_MASKCALL = (1 << LUA_HOOKCALL);
static const int LUA_MASKRET = (1 << LUA_HOOKRET);
static const int LUA_MASKLINE = (1 << LUA_HOOKLINE);
static const int LUA_MASKCOUNT = (1 << LUA_HOOKCOUNT);
typedef struct lua_Debug lua_Debug;
typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
extern int lua_getstack (lua_State *L, int level, lua_Debug *ar);
extern int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);
extern const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_getupvalue (lua_State *L, int funcindex, int n);
extern const char *lua_setupvalue (lua_State *L, int funcindex, int n);
extern int lua_sethook (lua_State *L, lua_Hook func, int mask, int count);
extern lua_Hook lua_gethook (lua_State *L);
extern int lua_gethookmask (lua_State *L);
extern int lua_gethookcount (lua_State *L);
struct lua_Debug {
  int event;
  const char *name;
  const char *namewhat;
  const char *what;
  const char *source;
  int currentline;
  int nups;
  int linedefined;
  int lastlinedefined;
  char short_src[60];
  int i_ci;
};
