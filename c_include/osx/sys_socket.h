static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 2;
static const int __GNUC_PATCHLEVEL__ = 1;
static const int __APPLE_CC__ = 5658;
static const int __llvm__ = 1;
static const int __SIZE_TYPE__ = long unsigned int;
static const int __PTRDIFF_TYPE__ = long int;
static const int __WCHAR_TYPE__ = int;
static const int __WINT_TYPE__ = int;
static const int __INTMAX_TYPE__ = long int;
static const int __UINTMAX_TYPE__ = long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 9223372036854775807L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 2147483647;
static const int __CHAR_BIT__ = 8;
static const long __INTMAX_MAX__ = 9223372036854775807L;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const double __FLT_MAX__ = 3.40282347e+38F;
static const double __FLT_MIN__ = 1.17549435e-38F;
static const double __FLT_EPSILON__ = 1.19209290e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const double __DBL_MAX__ = 1.7976931348623157e+308;
static const double __DBL_MIN__ = 2.2250738585072014e-308;
static const double __DBL_EPSILON__ = 2.2204460492503131e-16;
static const double __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-95);
static const int __DEC32_MAX_EXP__ = 96;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_DEN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-383);
static const int __DEC64_MAX_EXP__ = 384;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_DEN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6143);
static const int __DEC128_MAX_EXP__ = 6144;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_DEN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __USER_LABEL_PREFIX__ = _;
static const char __VERSION__ = "4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)";
static const int __GNUC_GNU_INLINE__ = 1;
static const int _LP64 = 1;
static const int __LP64__ = 1;
static const int __BLOCKS__ = 1;
static const int __NO_INLINE__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __pic__ = 2;
static const int __PIC__ = 2;
static const int __SSP__ = 1;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __tune_core2__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE3__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __NO_MATH_INLINES = 1;
static const int __LITTLE_ENDIAN__ = 1;
static const int __MACH__ = 1;
static const int __APPLE__ = 1;
static const int __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 1083;
static const int __CONSTANT_CFSTRINGS__ = 1;
static const int __weak = __attribute__((objc_gc(weak)));
static const int __block = __attribute__((__blocks__(byref)));
static const int OBJC_NEW_PROPERTIES = 1;
static const int __DYNAMIC__ = 1;
static const int __P(protos) = protos;
static const int __CONCAT(x,y) = x ## y;
static const int __STRING(x) = #x;
static const int __const = const;
static const int __signed = signed;
static const int __volatile = volatile;
static const int __dead2 = __attribute__((noreturn));
static const int __pure2 = __attribute__((const));
static const int __unused = __attribute__((unused));
static const int __used = __attribute__((used));
static const int __deprecated = __attribute__((deprecated));
static const int __unavailable = __attribute__((unavailable));
static const int __printflike(fmtarg,firstvararg) = __attribute__((__format__ (__printf__, fmtarg, firstvararg)));
static const int __scanflike(fmtarg,firstvararg) = __attribute__((__format__ (__scanf__, fmtarg, firstvararg)));
static const int __IDSTRING(name,string) = static const char name[] __used = string;
static const int __COPYRIGHT(s) = __IDSTRING(copyright,s);
static const int __RCSID(s) = __IDSTRING(rcsid,s);
static const int __SCCSID(s) = __IDSTRING(sccsid,s);
static const int __PROJECT_VERSION(s) = __IDSTRING(project_version,s);
static const int __DARWIN_ONLY_64_BIT_INO_T = 0;
static const int __DARWIN_ONLY_VERS_1050 = 0;
static const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
static const int __DARWIN_UNIX03 = 1;
static const int __DARWIN_64_BIT_INO_T = 1;
static const int __DARWIN_VERS_1050 = 1;
static const int __DARWIN_NON_CANCELABLE = 0;
static const char __DARWIN_SUF_64_BIT_INO_T = "$INODE64";
static const char __DARWIN_SUF_1050 = "$1050";
static const char __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
static const int __DARWIN_ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_1050(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050);
static const int __DARWIN_1050ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_EXTSN(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN);
static const int __DARWIN_EXTSN_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE);
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x) = x;
static const int __DARWIN_ALIAS_STARTING(_mac,_iphone,x) = __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x);
static const int __POSIX_C_DEPRECATED(ver) = ___POSIX_C_DEPRECATED_STARTING_ ##ver;
static const long __DARWIN_C_ANSI = 010000L;
static const long __DARWIN_C_FULL = 900000L;
static const int __DARWIN_C_LEVEL = __DARWIN_C_FULL;
static const int __DARWIN_NO_LONG_LONG = (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__));
static const int _DARWIN_FEATURE_64_BIT_INODE = 1;
static const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
static const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
static const int __CAST_AWAY_QUALIFIER(variable,qualifier,type) = (type) (long)(variable);
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;
typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;
typedef __mbstate_t __darwin_mbstate_t;
typedef long int __darwin_ptrdiff_t;
typedef long unsigned int __darwin_size_t;
typedef __builtin_va_list __darwin_va_list;
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t __darwin_rune_t;
typedef int __darwin_wint_t;
typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
typedef signed char int8_t;
typedef unsigned char u_int8_t;
typedef short int16_t;
typedef unsigned short u_int16_t;
typedef int int32_t;
typedef unsigned int u_int32_t;
typedef long long int64_t;
typedef unsigned long long u_int64_t;
typedef int64_t register_t;
typedef __darwin_intptr_t intptr_t;
typedef unsigned long uintptr_t;
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
static const int USER_ADDR_NULL = ((user_addr_t) 0);
static const int CAST_USER_ADDR_T(a_ptr) = ((user_addr_t)((uintptr_t)(a_ptr)));
typedef u_int64_t syscall_arg_t;
static const int __offsetof(type,field) = ((size_t)(&((type *)0)->field));
static const int __PTHREAD_SIZE__ = 1168;
static const int __PTHREAD_ATTR_SIZE__ = 56;
static const int __PTHREAD_MUTEXATTR_SIZE__ = 8;
static const int __PTHREAD_MUTEX_SIZE__ = 56;
static const int __PTHREAD_CONDATTR_SIZE__ = 8;
static const int __PTHREAD_COND_SIZE__ = 40;
static const int __PTHREAD_ONCE_SIZE__ = 8;
static const int __PTHREAD_RWLOCK_SIZE__ = 192;
static const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;
struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[192]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[16]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[1168]; };
static const int __DARWIN_NULL = ((void *)0);
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;
typedef __darwin_ino64_t __darwin_ino_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];
static const int _QUAD_HIGHWORD = 1;
static const int _QUAD_LOWWORD = 0;
static const int __DARWIN_LITTLE_ENDIAN = 1234;
static const int __DARWIN_BIG_ENDIAN = 4321;
static const int __DARWIN_PDP_ENDIAN = 3412;
static const int __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
static const int LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
static const int BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
static const int PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
static const int BYTE_ORDER = __DARWIN_BYTE_ORDER;
static const int __DARWIN_OSSwapConstInt16(x) = ((__uint16_t)((((__uint16_t)(x) & 0xff00) >> 8) | (((__uint16_t)(x) & 0x00ff) << 8)));
static const int __DARWIN_OSSwapConstInt32(x) = ((__uint32_t)((((__uint32_t)(x) & 0xff000000) >> 24) | (((__uint32_t)(x) & 0x00ff0000) >> 8) | (((__uint32_t)(x) & 0x0000ff00) << 8) | (((__uint32_t)(x) & 0x000000ff) << 24)));
static const int __DARWIN_OSSwapConstInt64(x) = ((__uint64_t)((((__uint64_t)(x) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(x) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(x) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(x) & 0x00000000000000ffULL) << 56)));
static const int __DARWIN_OS_INLINE = static __inline__;
static __inline__
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((_data << 8) | (_data >> 8));
}
static __inline__
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{
    return __builtin_bswap32(_data);
}
static __inline__
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    return __builtin_bswap64(_data);
}
static const int __DARWIN_OSSwapInt16(x) = ((__uint16_t)(__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt16(x) : _OSSwapInt16(x)));
static const int __DARWIN_OSSwapInt32(x) = (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt32(x) : _OSSwapInt32(x));
static const int __DARWIN_OSSwapInt64(x) = (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt64(x) : _OSSwapInt64(x));
static const int ntohs(x) = __DARWIN_OSSwapInt16(x);
static const int htons(x) = __DARWIN_OSSwapInt16(x);
static const int ntohl(x) = __DARWIN_OSSwapInt32(x);
static const int htonl(x) = __DARWIN_OSSwapInt32(x);
static const int NTOHL(x) = (x) = ntohl((__uint32_t)x);
static const int NTOHS(x) = (x) = ntohs((__uint16_t)x);
static const int HTONL(x) = (x) = htonl((__uint32_t)x);
static const int HTONS(x) = (x) = htons((__uint16_t)x);
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;
typedef char * caddr_t;
typedef int32_t daddr_t;
typedef __darwin_dev_t dev_t;
typedef u_int32_t fixpt_t;
typedef __darwin_blkcnt_t blkcnt_t;
typedef __darwin_blksize_t blksize_t;
typedef __darwin_gid_t gid_t;
typedef __uint32_t in_addr_t;
typedef __uint16_t in_port_t;
typedef __darwin_ino_t ino_t;
typedef __darwin_ino64_t ino64_t;
typedef __int32_t key_t;
typedef __darwin_mode_t mode_t;
typedef __uint16_t nlink_t;
typedef __darwin_id_t id_t;
typedef __darwin_pid_t pid_t;
typedef __darwin_off_t off_t;
typedef int32_t segsz_t;
typedef int32_t swblk_t;
typedef __darwin_uid_t uid_t;
static const int major(x) = ((int32_t)(((u_int32_t)(x) >> 24) & 0xff));
static const int minor(x) = ((int32_t)((x) & 0xffffff));
static const int makedev(x,y) = ((dev_t)(((x) << 24) | (y)));
typedef __darwin_clock_t clock_t;
typedef __darwin_size_t size_t;
typedef __darwin_ssize_t ssize_t;
typedef __darwin_time_t time_t;
typedef __darwin_useconds_t useconds_t;
typedef __darwin_suseconds_t suseconds_t;
static const int __DARWIN_FD_SETSIZE = 1024;
static const int __DARWIN_NBBY = 8;
static const int __DARWIN_NFDBITS = (sizeof(__int32_t) * __DARWIN_NBBY);
static const int __DARWIN_howmany(x,y) = ((((x) % (y)) == 0) ? ((x) / (y)) : (((x) / (y)) + 1));
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;
static __inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[_n/(sizeof(__int32_t) * 8)] & (1<<(_n % (sizeof(__int32_t) * 8))));
}
static const int __DARWIN_FD_SET(n,p) = do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] |= (1<<(__fd % __DARWIN_NFDBITS))); } while(0);
static const int __DARWIN_FD_CLR(n,p) = do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] &= ~(1<<(__fd % __DARWIN_NFDBITS))); } while(0);
static const int __DARWIN_FD_ISSET(n,p) = __darwin_fd_isset((n), (p));
static const int __DARWIN_FD_ZERO(p) = __builtin_bzero(p, sizeof(*(p)));
static const int __DARWIN_FD_COPY(f,t) = bcopy(f, t, sizeof(*(f)));
static const int NBBY = __DARWIN_NBBY;
static const int NFDBITS = __DARWIN_NFDBITS;
static const int howmany(x,y) = __DARWIN_howmany(x, y);
typedef __int32_t fd_mask;
static const int FD_SETSIZE = __DARWIN_FD_SETSIZE;
static const int FD_SET(n,p) = __DARWIN_FD_SET(n, p);
static const int FD_CLR(n,p) = __DARWIN_FD_CLR(n, p);
static const int FD_ISSET(n,p) = __DARWIN_FD_ISSET(n, p);
static const int FD_ZERO(p) = __DARWIN_FD_ZERO(p);
static const int FD_COPY(f,t) = __DARWIN_FD_COPY(f, t);
typedef __darwin_pthread_attr_t pthread_attr_t;
typedef __darwin_pthread_cond_t pthread_cond_t;
typedef __darwin_pthread_condattr_t pthread_condattr_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
typedef __darwin_pthread_once_t pthread_once_t;
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
typedef __darwin_pthread_t pthread_t;
typedef __darwin_pthread_key_t pthread_key_t;
typedef __darwin_fsblkcnt_t fsblkcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;
static const int __DARWIN_ALIGNBYTES = (sizeof(__darwin_size_t) - 1);
static const int __DARWIN_ALIGN(p) = ((__darwin_size_t)((char *)(__darwin_size_t)(p) + __DARWIN_ALIGNBYTES) &~ __DARWIN_ALIGNBYTES);
static const int __DARWIN_ALIGNBYTES32 = (sizeof(__uint32_t) - 1);
static const int __DARWIN_ALIGN32(p) = ((__darwin_size_t)((char *)(__darwin_size_t)(p) + __DARWIN_ALIGNBYTES32) &~ __DARWIN_ALIGNBYTES32);
static const int __MAC_10_0 = 1000;
static const int __MAC_10_1 = 1010;
static const int __MAC_10_2 = 1020;
static const int __MAC_10_3 = 1030;
static const int __MAC_10_4 = 1040;
static const int __MAC_10_5 = 1050;
static const int __MAC_10_6 = 1060;
static const int __MAC_10_7 = 1070;
static const int __MAC_10_8 = 1080;
static const int __MAC_NA = 9999;
static const int __IPHONE_2_0 = 20000;
static const int __IPHONE_2_1 = 20100;
static const int __IPHONE_2_2 = 20200;
static const int __IPHONE_3_0 = 30000;
static const int __IPHONE_3_1 = 30100;
static const int __IPHONE_3_2 = 30200;
static const int __IPHONE_4_0 = 40000;
static const int __IPHONE_4_1 = 40100;
static const int __IPHONE_4_2 = 40200;
static const int __IPHONE_4_3 = 40300;
static const int __IPHONE_5_0 = 50000;
static const int __IPHONE_5_1 = 50100;
static const int __IPHONE_NA = 99999;
static const int __AVAILABILITY_INTERNAL_DEPRECATED = __attribute__((deprecated,visibility("default")));
static const int __AVAILABILITY_INTERNAL_UNAVAILABLE = __attribute__((unavailable,visibility("default")));
static const int __AVAILABILITY_INTERNAL_WEAK_IMPORT = __attribute__((weak_import,visibility("default")));
static const int __AVAILABILITY_INTERNAL_REGULAR = __attribute__((visibility("default")));
static const int __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
static const int __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_10_8;
static const int __AVAILABILITY_INTERNAL__MAC_10_8 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_7 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_6 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_5 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_4 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_3 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_2 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_1 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_10_0 = __AVAILABILITY_INTERNAL_REGULAR;
static const int __AVAILABILITY_INTERNAL__MAC_NA = __AVAILABILITY_INTERNAL_UNAVAILABLE;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = __AVAILABILITY_INTERNAL_DEPRECATED;
static const int __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_0;
static const int __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_1;
static const int __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_2;
static const int __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_3;
static const int __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_4;
static const int __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_5;
static const int __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_6;
static const int __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_7;
static const int __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = __AVAILABILITY_INTERNAL__MAC_10_8;
static const int __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = __AVAILABILITY_INTERNAL_UNAVAILABLE;
static const int __OSX_AVAILABLE_STARTING(_osx,_ios) = __AVAILABILITY_INTERNAL ##_osx;
static const int __OSX_AVAILABLE_BUT_DEPRECATED(_osxIntro,_osxDep,_iosIntro,_iosDep) = __AVAILABILITY_INTERNAL ##_osxIntro ##_DEP ##_osxDep;
typedef __uint8_t sa_family_t;
typedef __darwin_socklen_t socklen_t;
struct iovec {
 void * iov_base;
 size_t iov_len;
};
static const int SOCK_STREAM = 1;
static const int SOCK_DGRAM = 2;
static const int SOCK_RAW = 3;
static const int SOCK_RDM = 4;
static const int SOCK_SEQPACKET = 5;
static const int SO_DEBUG = 0x0001;
static const int SO_ACCEPTCONN = 0x0002;
static const int SO_REUSEADDR = 0x0004;
static const int SO_KEEPALIVE = 0x0008;
static const int SO_DONTROUTE = 0x0010;
static const int SO_BROADCAST = 0x0020;
static const int SO_USELOOPBACK = 0x0040;
static const int SO_LINGER = 0x0080;
static const int SO_OOBINLINE = 0x0100;
static const int SO_REUSEPORT = 0x0200;
static const int SO_TIMESTAMP = 0x0400;
static const int SO_TIMESTAMP_MONOTONIC = 0x0800;
static const int SO_DONTTRUNC = 0x2000;
static const int SO_WANTMORE = 0x4000;
static const int SO_WANTOOBFLAG = 0x8000;
static const int SO_SNDBUF = 0x1001;
static const int SO_RCVBUF = 0x1002;
static const int SO_SNDLOWAT = 0x1003;
static const int SO_RCVLOWAT = 0x1004;
static const int SO_SNDTIMEO = 0x1005;
static const int SO_RCVTIMEO = 0x1006;
static const int SO_ERROR = 0x1007;
static const int SO_TYPE = 0x1008;
static const int SO_LABEL = 0x1010;
static const int SO_PEERLABEL = 0x1011;
static const int SO_NREAD = 0x1020;
static const int SO_NKE = 0x1021;
static const int SO_NOSIGPIPE = 0x1022;
static const int SO_NOADDRERR = 0x1023;
static const int SO_NWRITE = 0x1024;
static const int SO_REUSESHAREUID = 0x1025;
static const int SO_NOTIFYCONFLICT = 0x1026;
static const int SO_UPCALLCLOSEWAIT = 0x1027;
static const int SO_LINGER_SEC = 0x1080;
static const int SO_RESTRICTIONS = 0x1081;
static const int SO_RESTRICT_DENYIN = 0x00000001;
static const int SO_RESTRICT_DENYOUT = 0x00000002;
static const int SO_RESTRICT_DENYSET = 0x80000000;
static const int SO_RANDOMPORT = 0x1082;
static const int SO_NP_EXTENSIONS = 0x1083;
struct linger {
 int l_onoff;
 int l_linger;
};
struct so_np_extensions {
 u_int32_t npx_flags;
 u_int32_t npx_mask;
};
static const int SONPX_SETOPTSHUT = 0x000000001;
static const int SOL_SOCKET = 0xffff;
static const int AF_UNSPEC = 0;
static const int AF_UNIX = 1;
static const int AF_LOCAL = AF_UNIX;
static const int AF_INET = 2;
static const int AF_IMPLINK = 3;
static const int AF_PUP = 4;
static const int AF_CHAOS = 5;
static const int AF_NS = 6;
static const int AF_ISO = 7;
static const int AF_OSI = AF_ISO;
static const int AF_ECMA = 8;
static const int AF_DATAKIT = 9;
static const int AF_CCITT = 10;
static const int AF_SNA = 11;
static const int AF_DECnet = 12;
static const int AF_DLI = 13;
static const int AF_LAT = 14;
static const int AF_HYLINK = 15;
static const int AF_APPLETALK = 16;
static const int AF_ROUTE = 17;
static const int AF_LINK = 18;
static const int pseudo_AF_XTP = 19;
static const int AF_COIP = 20;
static const int AF_CNT = 21;
static const int pseudo_AF_RTIP = 22;
static const int AF_IPX = 23;
static const int AF_SIP = 24;
static const int pseudo_AF_PIP = 25;
static const int AF_NDRV = 27;
static const int AF_ISDN = 28;
static const int AF_E164 = AF_ISDN;
static const int pseudo_AF_KEY = 29;
static const int AF_INET6 = 30;
static const int AF_NATM = 31;
static const int AF_SYSTEM = 32;
static const int AF_NETBIOS = 33;
static const int AF_PPP = 34;
static const int pseudo_AF_HDRCMPLT = 35;
static const int AF_RESERVED_36 = 36;
static const int AF_IEEE80211 = 37;
static const int AF_UTUN = 38;
static const int AF_MAX = 39;
struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};
static const int SOCK_MAXADDRLEN = 255;
struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};
static const int _SS_MAXSIZE = 128;
static const int _SS_ALIGNSIZE = (sizeof(__int64_t));
static const int _SS_PAD1SIZE = (_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t));
static const int _SS_PAD2SIZE = (_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - _SS_PAD1SIZE - _SS_ALIGNSIZE);
struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};
static const int PF_UNSPEC = AF_UNSPEC;
static const int PF_LOCAL = AF_LOCAL;
static const int PF_UNIX = PF_LOCAL;
static const int PF_INET = AF_INET;
static const int PF_IMPLINK = AF_IMPLINK;
static const int PF_PUP = AF_PUP;
static const int PF_CHAOS = AF_CHAOS;
static const int PF_NS = AF_NS;
static const int PF_ISO = AF_ISO;
static const int PF_OSI = AF_ISO;
static const int PF_ECMA = AF_ECMA;
static const int PF_DATAKIT = AF_DATAKIT;
static const int PF_CCITT = AF_CCITT;
static const int PF_SNA = AF_SNA;
static const int PF_DECnet = AF_DECnet;
static const int PF_DLI = AF_DLI;
static const int PF_LAT = AF_LAT;
static const int PF_HYLINK = AF_HYLINK;
static const int PF_APPLETALK = AF_APPLETALK;
static const int PF_ROUTE = AF_ROUTE;
static const int PF_LINK = AF_LINK;
static const int PF_XTP = pseudo_AF_XTP;
static const int PF_COIP = AF_COIP;
static const int PF_CNT = AF_CNT;
static const int PF_SIP = AF_SIP;
static const int PF_IPX = AF_IPX;
static const int PF_RTIP = pseudo_AF_RTIP;
static const int PF_PIP = pseudo_AF_PIP;
static const int PF_NDRV = AF_NDRV;
static const int PF_ISDN = AF_ISDN;
static const int PF_KEY = pseudo_AF_KEY;
static const int PF_INET6 = AF_INET6;
static const int PF_NATM = AF_NATM;
static const int PF_SYSTEM = AF_SYSTEM;
static const int PF_NETBIOS = AF_NETBIOS;
static const int PF_PPP = AF_PPP;
static const int PF_RESERVED_36 = AF_RESERVED_36;
static const int PF_UTUN = AF_UTUN;
static const int PF_MAX = AF_MAX;
static const int PF_VLAN = ((uint32_t)0x766c616e);
static const int PF_BOND = ((uint32_t)0x626f6e64);
static const int NET_MAXID = AF_MAX;
static const int NET_RT_DUMP = 1;
static const int NET_RT_FLAGS = 2;
static const int NET_RT_IFLIST = 3;
static const int NET_RT_STAT = 4;
static const int NET_RT_TRASH = 5;
static const int NET_RT_IFLIST2 = 6;
static const int NET_RT_DUMP2 = 7;
static const int NET_RT_MAXID = 10;
static const int SOMAXCONN = 128;
struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};
static const int MSG_OOB = 0x1;
static const int MSG_PEEK = 0x2;
static const int MSG_DONTROUTE = 0x4;
static const int MSG_EOR = 0x8;
static const int MSG_TRUNC = 0x10;
static const int MSG_CTRUNC = 0x20;
static const int MSG_WAITALL = 0x40;
static const int MSG_DONTWAIT = 0x80;
static const int MSG_EOF = 0x100;
static const int MSG_WAITSTREAM = 0x200;
static const int MSG_FLUSH = 0x400;
static const int MSG_HOLD = 0x800;
static const int MSG_SEND = 0x1000;
static const int MSG_HAVEMORE = 0x2000;
static const int MSG_RCVMORE = 0x4000;
static const int MSG_NEEDSA = 0x10000;
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;
};
static const int CMSG_DATA(cmsg) = ((unsigned char *)(cmsg) + __DARWIN_ALIGN32(sizeof(struct cmsghdr)));
static const int CMSG_FIRSTHDR(mhdr) = ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? (struct cmsghdr *)(mhdr)->msg_control : (struct cmsghdr *)0L);
static const int CMSG_NXTHDR(mhdr,cmsg) = ((char *)(cmsg) == (char *)0L ? CMSG_FIRSTHDR(mhdr) : ((((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len) + __DARWIN_ALIGN32(sizeof(struct cmsghdr))) > ((unsigned char *)(mhdr)->msg_control + (mhdr)->msg_controllen)) ? (struct cmsghdr *)0L : (struct cmsghdr *)(void *)((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len))));
static const int CMSG_SPACE(l) = (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + __DARWIN_ALIGN32(l));
static const int CMSG_LEN(l) = (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + (l));
static const int SCM_RIGHTS = 0x01;
static const int SCM_TIMESTAMP = 0x02;
static const int SCM_CREDS = 0x03;
static const int SCM_TIMESTAMP_MONOTONIC = 0x04;
static const int SHUT_RD = 0;
static const int SHUT_WR = 1;
static const int SHUT_RDWR = 2;
struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};
int accept(int, struct sockaddr * , socklen_t * )
  __asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * , socklen_t * )
  __asm("_" "getpeername" );
int getsockname(int, struct sockaddr * , socklen_t * )
  __asm("_" "getsockname" );
int getsockopt(int, int, int, void * , socklen_t * );
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * ,
  socklen_t * ) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int) __attribute__((visibility("default")));
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );
int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);
void pfctlinput(int, struct sockaddr *);
