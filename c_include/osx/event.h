static const int __STDC__ = 1;
static const int __STDC_HOSTED__ = 1;
static const int __GNUC__ = 4;
static const int __GNUC_MINOR__ = 2;
static const int __GNUC_PATCHLEVEL__ = 1;
static const int __APPLE_CC__ = 5658;
static const int __llvm__ = 1;
static const int __SIZE_TYPE__ = long unsigned int;
static const int __PTRDIFF_TYPE__ = long int;
static const int __WCHAR_TYPE__ = int;
static const int __WINT_TYPE__ = int;
static const int __INTMAX_TYPE__ = long int;
static const int __UINTMAX_TYPE__ = long unsigned int;
static const int __GXX_ABI_VERSION = 1002;
static const int __SCHAR_MAX__ = 127;
static const int __SHRT_MAX__ = 32767;
static const int __INT_MAX__ = 2147483647;
static const long __LONG_MAX__ = 9223372036854775807L;
static const long long __LONG_LONG_MAX__ = 9223372036854775807LL;
static const int __WCHAR_MAX__ = 2147483647;
static const int __CHAR_BIT__ = 8;
static const long __INTMAX_MAX__ = 9223372036854775807L;
static const int __FLT_EVAL_METHOD__ = 0;
static const int __DEC_EVAL_METHOD__ = 2;
static const int __FLT_RADIX__ = 2;
static const int __FLT_MANT_DIG__ = 24;
static const int __FLT_DIG__ = 6;
static const int __FLT_MIN_EXP__ = (-125);
static const int __FLT_MIN_10_EXP__ = (-37);
static const int __FLT_MAX_EXP__ = 128;
static const int __FLT_MAX_10_EXP__ = 38;
static const double __FLT_MAX__ = 3.40282347e+38F;
static const double __FLT_MIN__ = 1.17549435e-38F;
static const double __FLT_EPSILON__ = 1.19209290e-7F;
static const double __FLT_DENORM_MIN__ = 1.40129846e-45F;
static const int __FLT_HAS_DENORM__ = 1;
static const int __FLT_HAS_INFINITY__ = 1;
static const int __FLT_HAS_QUIET_NAN__ = 1;
static const int __DBL_MANT_DIG__ = 53;
static const int __DBL_DIG__ = 15;
static const int __DBL_MIN_EXP__ = (-1021);
static const int __DBL_MIN_10_EXP__ = (-307);
static const int __DBL_MAX_EXP__ = 1024;
static const int __DBL_MAX_10_EXP__ = 308;
static const double __DBL_MAX__ = 1.7976931348623157e+308;
static const double __DBL_MIN__ = 2.2250738585072014e-308;
static const double __DBL_EPSILON__ = 2.2204460492503131e-16;
static const double __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
static const int __DBL_HAS_DENORM__ = 1;
static const int __DBL_HAS_INFINITY__ = 1;
static const int __DBL_HAS_QUIET_NAN__ = 1;
static const int __LDBL_MANT_DIG__ = 64;
static const int __LDBL_DIG__ = 18;
static const int __LDBL_MIN_EXP__ = (-16381);
static const int __LDBL_MIN_10_EXP__ = (-4931);
static const int __LDBL_MAX_EXP__ = 16384;
static const int __LDBL_MAX_10_EXP__ = 4932;
static const int __DECIMAL_DIG__ = 21;
static const long __LDBL_MAX__ = 1.18973149535723176502e+4932L;
static const long __LDBL_MIN__ = 3.36210314311209350626e-4932L;
static const long __LDBL_EPSILON__ = 1.08420217248550443401e-19L;
static const long __LDBL_DENORM_MIN__ = 3.64519953188247460253e-4951L;
static const int __LDBL_HAS_DENORM__ = 1;
static const int __LDBL_HAS_INFINITY__ = 1;
static const int __LDBL_HAS_QUIET_NAN__ = 1;
static const int __DEC32_MANT_DIG__ = 7;
static const int __DEC32_MIN_EXP__ = (-95);
static const int __DEC32_MAX_EXP__ = 96;
static const double __DEC32_MIN__ = 1E-95DF;
static const double __DEC32_MAX__ = 9.999999E96DF;
static const double __DEC32_EPSILON__ = 1E-6DF;
static const double __DEC32_DEN__ = 0.000001E-95DF;
static const int __DEC64_MANT_DIG__ = 16;
static const int __DEC64_MIN_EXP__ = (-383);
static const int __DEC64_MAX_EXP__ = 384;
static const double __DEC64_MIN__ = 1E-383DD;
static const double __DEC64_MAX__ = 9.999999999999999E384DD;
static const double __DEC64_EPSILON__ = 1E-15DD;
static const double __DEC64_DEN__ = 0.000000000000001E-383DD;
static const int __DEC128_MANT_DIG__ = 34;
static const int __DEC128_MIN_EXP__ = (-6143);
static const int __DEC128_MAX_EXP__ = 6144;
static const long double __DEC128_MIN__ = 1E-6143DL;
static const long double __DEC128_MAX__ = 9.999999999999999999999999999999999E6144DL;
static const long double __DEC128_EPSILON__ = 1E-33DL;
static const long double __DEC128_DEN__ = 0.000000000000000000000000000000001E-6143DL;
static const int __USER_LABEL_PREFIX__ = _;
static const char __VERSION__ = "4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)";
static const int __GNUC_GNU_INLINE__ = 1;
static const int _LP64 = 1;
static const int __LP64__ = 1;
static const int __BLOCKS__ = 1;
static const int __NO_INLINE__ = 1;
static const int __FINITE_MATH_ONLY__ = 0;
static const int __pic__ = 2;
static const int __PIC__ = 2;
static const int __SSP__ = 1;
static const int __amd64 = 1;
static const int __amd64__ = 1;
static const int __x86_64 = 1;
static const int __x86_64__ = 1;
static const int __tune_core2__ = 1;
static const int __MMX__ = 1;
static const int __SSE__ = 1;
static const int __SSE2__ = 1;
static const int __SSE3__ = 1;
static const int __SSE_MATH__ = 1;
static const int __SSE2_MATH__ = 1;
static const int __k8 = 1;
static const int __k8__ = 1;
static const int __NO_MATH_INLINES = 1;
static const int __LITTLE_ENDIAN__ = 1;
static const int __MACH__ = 1;
static const int __APPLE__ = 1;
static const int __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 1083;
static const int __CONSTANT_CFSTRINGS__ = 1;
static const int __weak = __attribute__((objc_gc(weak)));
static const int __block = __attribute__((__blocks__(byref)));
static const int OBJC_NEW_PROPERTIES = 1;
static const int __DYNAMIC__ = 1;
typedef __signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;
typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;
typedef __mbstate_t __darwin_mbstate_t;
typedef long int __darwin_ptrdiff_t;
typedef long unsigned int __darwin_size_t;
typedef __builtin_va_list __darwin_va_list;
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t __darwin_rune_t;
typedef int __darwin_wint_t;
typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
static const int __P(protos) = protos;
static const int __CONCAT(x,y) = x ## y;
static const int __STRING(x) = #x;
static const int __const = const;
static const int __signed = signed;
static const int __volatile = volatile;
static const int __dead2 = __attribute__((noreturn));
static const int __pure2 = __attribute__((const));
static const int __unused = __attribute__((unused));
static const int __used = __attribute__((used));
static const int __deprecated = __attribute__((deprecated));
static const int __unavailable = __attribute__((unavailable));
static const int __printflike(fmtarg,firstvararg) = __attribute__((__format__ (__printf__, fmtarg, firstvararg)));
static const int __scanflike(fmtarg,firstvararg) = __attribute__((__format__ (__scanf__, fmtarg, firstvararg)));
static const int __IDSTRING(name,string) = static const char name[] __used = string;
static const int __COPYRIGHT(s) = __IDSTRING(copyright,s);
static const int __RCSID(s) = __IDSTRING(rcsid,s);
static const int __SCCSID(s) = __IDSTRING(sccsid,s);
static const int __PROJECT_VERSION(s) = __IDSTRING(project_version,s);
static const int __DARWIN_ONLY_64_BIT_INO_T = 0;
static const int __DARWIN_ONLY_VERS_1050 = 0;
static const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
static const int __DARWIN_UNIX03 = 1;
static const int __DARWIN_64_BIT_INO_T = 1;
static const int __DARWIN_VERS_1050 = 1;
static const int __DARWIN_NON_CANCELABLE = 0;
static const char __DARWIN_SUF_64_BIT_INO_T = "$INODE64";
static const char __DARWIN_SUF_1050 = "$1050";
static const char __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
static const int __DARWIN_ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_1050(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050);
static const int __DARWIN_1050ALIAS(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050ALIAS_I(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03);
static const int __DARWIN_1050INODE64(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T);
static const int __DARWIN_EXTSN(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN);
static const int __DARWIN_EXTSN_C(sym) = __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE);
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) = x;
static const int __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x) = x;
static const int __DARWIN_ALIAS_STARTING(_mac,_iphone,x) = __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x);
static const int __POSIX_C_DEPRECATED(ver) = ___POSIX_C_DEPRECATED_STARTING_ ##ver;
static const long __DARWIN_C_ANSI = 010000L;
static const long __DARWIN_C_FULL = 900000L;
static const int __DARWIN_C_LEVEL = __DARWIN_C_FULL;
static const int __DARWIN_NO_LONG_LONG = (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__));
static const int _DARWIN_FEATURE_64_BIT_INODE = 1;
static const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
static const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
static const int __CAST_AWAY_QUALIFIER(variable,qualifier,type) = (type) (long)(variable);
typedef signed char int8_t;
typedef unsigned char u_int8_t;
typedef short int16_t;
typedef unsigned short u_int16_t;
typedef int int32_t;
typedef unsigned int u_int32_t;
typedef long long int64_t;
typedef unsigned long long u_int64_t;
typedef int64_t register_t;
typedef __darwin_intptr_t intptr_t;
typedef unsigned long uintptr_t;
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
static const int USER_ADDR_NULL = ((user_addr_t) 0);
static const int CAST_USER_ADDR_T(a_ptr) = ((user_addr_t)((uintptr_t)(a_ptr)));
typedef u_int64_t syscall_arg_t;
static const int __offsetof(type,field) = ((size_t)(&((type *)0)->field));
static const int __WORDSIZE = 64;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef long int intmax_t;
typedef long unsigned int uintmax_t;
static const int INT8_MAX = 127;
static const int INT16_MAX = 32767;
static const int INT32_MAX = 2147483647;
static const long long INT64_MAX = 9223372036854775807LL;
static const int INT8_MIN = -128;
static const int INT16_MIN = -32768;
static const int INT32_MIN = (-INT32_MAX-1);
static const int INT64_MIN = (-INT64_MAX-1);
static const int UINT8_MAX = 255;
static const int UINT16_MAX = 65535;
static const int UINT32_MAX = 4294967295U;
static const int UINT64_MAX = 18446744073709551615ULL;
static const int INT_LEAST8_MIN = INT8_MIN;
static const int INT_LEAST16_MIN = INT16_MIN;
static const int INT_LEAST32_MIN = INT32_MIN;
static const int INT_LEAST64_MIN = INT64_MIN;
static const int INT_LEAST8_MAX = INT8_MAX;
static const int INT_LEAST16_MAX = INT16_MAX;
static const int INT_LEAST32_MAX = INT32_MAX;
static const int INT_LEAST64_MAX = INT64_MAX;
static const int UINT_LEAST8_MAX = UINT8_MAX;
static const int UINT_LEAST16_MAX = UINT16_MAX;
static const int UINT_LEAST32_MAX = UINT32_MAX;
static const int UINT_LEAST64_MAX = UINT64_MAX;
static const int INT_FAST8_MIN = INT8_MIN;
static const int INT_FAST16_MIN = INT16_MIN;
static const int INT_FAST32_MIN = INT32_MIN;
static const int INT_FAST64_MIN = INT64_MIN;
static const int INT_FAST8_MAX = INT8_MAX;
static const int INT_FAST16_MAX = INT16_MAX;
static const int INT_FAST32_MAX = INT32_MAX;
static const int INT_FAST64_MAX = INT64_MAX;
static const int UINT_FAST8_MAX = UINT8_MAX;
static const int UINT_FAST16_MAX = UINT16_MAX;
static const int UINT_FAST32_MAX = UINT32_MAX;
static const int UINT_FAST64_MAX = UINT64_MAX;
static const int INTPTR_MIN = INT64_MIN;
static const int INTPTR_MAX = INT64_MAX;
static const int UINTPTR_MAX = UINT64_MAX;
static const int INTMAX_MIN = INT64_MIN;
static const int INTMAX_MAX = INT64_MAX;
static const int UINTMAX_MAX = UINT64_MAX;
static const int PTRDIFF_MIN = INT64_MIN;
static const int PTRDIFF_MAX = INT64_MAX;
static const int SIZE_MAX = UINT64_MAX;
static const int WCHAR_MAX = __WCHAR_MAX__;
static const int WCHAR_MIN = (-WCHAR_MAX-1);
static const int WINT_MIN = INT32_MIN;
static const int WINT_MAX = INT32_MAX;
static const int SIG_ATOMIC_MIN = INT32_MIN;
static const int SIG_ATOMIC_MAX = INT32_MAX;
static const int INT8_C(v) = (v);
static const int INT16_C(v) = (v);
static const int INT32_C(v) = (v);
static const int INT64_C(v) = (v ## LL);
static const int UINT8_C(v) = (v ## U);
static const int UINT16_C(v) = (v ## U);
static const int UINT32_C(v) = (v ## U);
static const int UINT64_C(v) = (v ## ULL);
static const int INTMAX_C(v) = (v ## LL);
static const int UINTMAX_C(v) = (v ## ULL);
static const int EVFILT_READ = (-1);
static const int EVFILT_WRITE = (-2);
static const int EVFILT_AIO = (-3);
static const int EVFILT_VNODE = (-4);
static const int EVFILT_PROC = (-5);
static const int EVFILT_SIGNAL = (-6);
static const int EVFILT_TIMER = (-7);
static const int EVFILT_MACHPORT = (-8);
static const int EVFILT_FS = (-9);
static const int EVFILT_USER = (-10);
static const int EVFILT_VM = (-12);
static const int EVFILT_SYSCOUNT = 13;
static const int EVFILT_THREADMARKER = EVFILT_SYSCOUNT;
#pragma pack(4)
struct kevent {
 uintptr_t ident;
 int16_t filter;
 uint16_t flags;
 uint32_t fflags;
 intptr_t data;
 void *udata;
};
#pragma pack()
struct kevent64_s {
 uint64_t ident;
 int16_t filter;
 uint16_t flags;
 uint32_t fflags;
 int64_t data;
 uint64_t udata;
 uint64_t ext[2];
};
static const int EV_SET(kevp,a,b,c,d,e,f) = do { struct kevent *__kevp__ = (kevp); __kevp__->ident = (a); __kevp__->filter = (b); __kevp__->flags = (c); __kevp__->fflags = (d); __kevp__->data = (e); __kevp__->udata = (f); } while(0);
static const int EV_SET64(kevp,a,b,c,d,e,f,g,h) = do { struct kevent64_s *__kevp__ = (kevp); __kevp__->ident = (a); __kevp__->filter = (b); __kevp__->flags = (c); __kevp__->fflags = (d); __kevp__->data = (e); __kevp__->udata = (f); __kevp__->ext[0] = (g); __kevp__->ext[1] = (h); } while(0);
static const int EV_ADD = 0x0001;
static const int EV_DELETE = 0x0002;
static const int EV_ENABLE = 0x0004;
static const int EV_DISABLE = 0x0008;
static const int EV_RECEIPT = 0x0040;
static const int EV_ONESHOT = 0x0010;
static const int EV_CLEAR = 0x0020;
static const int EV_DISPATCH = 0x0080;
static const int EV_SYSFLAGS = 0xF000;
static const int EV_FLAG0 = 0x1000;
static const int EV_FLAG1 = 0x2000;
static const int EV_EOF = 0x8000;
static const int EV_ERROR = 0x4000;
static const int EV_POLL = EV_FLAG0;
static const int EV_OOBAND = EV_FLAG1;
static const int NOTE_TRIGGER = 0x01000000;
static const int NOTE_FFNOP = 0x00000000;
static const int NOTE_FFAND = 0x40000000;
static const int NOTE_FFOR = 0x80000000;
static const int NOTE_FFCOPY = 0xc0000000;
static const int NOTE_FFCTRLMASK = 0xc0000000;
static const int NOTE_FFLAGSMASK = 0x00ffffff;
static const int NOTE_LOWAT = 0x00000001;
static const int NOTE_DELETE = 0x00000001;
static const int NOTE_WRITE = 0x00000002;
static const int NOTE_EXTEND = 0x00000004;
static const int NOTE_ATTRIB = 0x00000008;
static const int NOTE_LINK = 0x00000010;
static const int NOTE_RENAME = 0x00000020;
static const int NOTE_REVOKE = 0x00000040;
static const int NOTE_NONE = 0x00000080;
static const int NOTE_EXIT = 0x80000000;
static const int NOTE_FORK = 0x40000000;
static const int NOTE_EXEC = 0x20000000;
static const int NOTE_REAP = 0x10000000;
static const int NOTE_SIGNAL = 0x08000000;
static const int NOTE_EXITSTATUS = 0x04000000;
static const int NOTE_RESOURCEEND = 0x02000000;
static const int NOTE_PDATAMASK = 0x000fffff;
static const int NOTE_PCTRLMASK = (~NOTE_PDATAMASK);
static const int NOTE_EXIT_REPARENTED = 0x00080000;
static const int NOTE_VM_PRESSURE = 0x80000000;
static const int NOTE_VM_PRESSURE_TERMINATE = 0x40000000;
static const int NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 0x20000000;
static const int NOTE_VM_ERROR = 0x10000000;
static const int NOTE_SECONDS = 0x00000001;
static const int NOTE_USECONDS = 0x00000002;
static const int NOTE_NSECONDS = 0x00000004;
static const int NOTE_ABSOLUTE = 0x00000008;
static const int NOTE_TRACK = 0x00000001;
static const int NOTE_TRACKERR = 0x00000002;
static const int NOTE_CHILD = 0x00000004;
static const int SLIST_HEAD(name,type) = struct name { struct type *slh_first; };
static const int SLIST_HEAD_INITIALIZER(head) = { NULL };
static const int SLIST_ENTRY(type) = struct { struct type *sle_next; };
static const int SLIST_EMPTY(head) = ((head)->slh_first == NULL);
static const int SLIST_FIRST(head) = ((head)->slh_first);
static const int SLIST_FOREACH(var,head,field) = for ((var) = SLIST_FIRST((head)); (var); (var) = SLIST_NEXT((var), field));
static const int SLIST_FOREACH_SAFE(var,head,field,tvar) = for ((var) = SLIST_FIRST((head)); (var) && ((tvar) = SLIST_NEXT((var), field), 1); (var) = (tvar));
static const int SLIST_FOREACH_PREVPTR(var,varp,head,field) = for ((varp) = &SLIST_FIRST((head)); ((var) = *(varp)) != NULL; (varp) = &SLIST_NEXT((var), field));
static const int SLIST_INIT(head) = do { SLIST_FIRST((head)) = NULL; } while (0);
static const int SLIST_INSERT_AFTER(slistelm,elm,field) = do { SLIST_NEXT((elm), field) = SLIST_NEXT((slistelm), field); SLIST_NEXT((slistelm), field) = (elm); } while (0);
static const int SLIST_INSERT_HEAD(head,elm,field) = do { SLIST_NEXT((elm), field) = SLIST_FIRST((head)); SLIST_FIRST((head)) = (elm); } while (0);
static const int SLIST_NEXT(elm,field) = ((elm)->field.sle_next);
static const int SLIST_REMOVE(head,elm,type,field) = do { if (SLIST_FIRST((head)) == (elm)) { SLIST_REMOVE_HEAD((head), field); } else { struct type *curelm = SLIST_FIRST((head)); while (SLIST_NEXT(curelm, field) != (elm)) curelm = SLIST_NEXT(curelm, field); SLIST_REMOVE_AFTER(curelm, field); } TRASHIT((elm)->field.sle_next); } while (0);
static const int SLIST_REMOVE_AFTER(elm,field) = do { SLIST_NEXT(elm, field) = SLIST_NEXT(SLIST_NEXT(elm, field), field); } while (0);
static const int SLIST_REMOVE_HEAD(head,field) = do { SLIST_FIRST((head)) = SLIST_NEXT(SLIST_FIRST((head)), field); } while (0);
static const int STAILQ_HEAD(name,type) = struct name { struct type *stqh_first; struct type **stqh_last; };
static const int STAILQ_HEAD_INITIALIZER(head) = { NULL, &(head).stqh_first };
static const int STAILQ_ENTRY(type) = struct { struct type *stqe_next; };
static const int STAILQ_CONCAT(head1,head2) = do { if (!STAILQ_EMPTY((head2))) { *(head1)->stqh_last = (head2)->stqh_first; (head1)->stqh_last = (head2)->stqh_last; STAILQ_INIT((head2)); } } while (0);
static const int STAILQ_EMPTY(head) = ((head)->stqh_first == NULL);
static const int STAILQ_FIRST(head) = ((head)->stqh_first);
static const int STAILQ_FOREACH(var,head,field) = for((var) = STAILQ_FIRST((head)); (var); (var) = STAILQ_NEXT((var), field));
static const int STAILQ_FOREACH_SAFE(var,head,field,tvar) = for ((var) = STAILQ_FIRST((head)); (var) && ((tvar) = STAILQ_NEXT((var), field), 1); (var) = (tvar));
static const int STAILQ_INIT(head) = do { STAILQ_FIRST((head)) = NULL; (head)->stqh_last = &STAILQ_FIRST((head)); } while (0);
static const int STAILQ_INSERT_AFTER(head,tqelm,elm,field) = do { if ((STAILQ_NEXT((elm), field) = STAILQ_NEXT((tqelm), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_NEXT((tqelm), field) = (elm); } while (0);
static const int STAILQ_INSERT_HEAD(head,elm,field) = do { if ((STAILQ_NEXT((elm), field) = STAILQ_FIRST((head))) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_FIRST((head)) = (elm); } while (0);
static const int STAILQ_INSERT_TAIL(head,elm,field) = do { STAILQ_NEXT((elm), field) = NULL; *(head)->stqh_last = (elm); (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0);
static const int STAILQ_LAST(head,type,field) = (STAILQ_EMPTY((head)) ? NULL : ((struct type *)(void *) ((char *)((head)->stqh_last) - __offsetof(struct type, field))));
static const int STAILQ_NEXT(elm,field) = ((elm)->field.stqe_next);
static const int STAILQ_REMOVE(head,elm,type,field) = do { if (STAILQ_FIRST((head)) == (elm)) { STAILQ_REMOVE_HEAD((head), field); } else { struct type *curelm = STAILQ_FIRST((head)); while (STAILQ_NEXT(curelm, field) != (elm)) curelm = STAILQ_NEXT(curelm, field); STAILQ_REMOVE_AFTER(head, curelm, field); } TRASHIT((elm)->field.stqe_next); } while (0);
static const int STAILQ_REMOVE_HEAD(head,field) = do { if ((STAILQ_FIRST((head)) = STAILQ_NEXT(STAILQ_FIRST((head)), field)) == NULL) (head)->stqh_last = &STAILQ_FIRST((head)); } while (0);
static const int STAILQ_REMOVE_HEAD_UNTIL(head,elm,field) = do { if ((STAILQ_FIRST((head)) = STAILQ_NEXT((elm), field)) == NULL) (head)->stqh_last = &STAILQ_FIRST((head)); } while (0);
static const int STAILQ_REMOVE_AFTER(head,elm,field) = do { if ((STAILQ_NEXT(elm, field) = STAILQ_NEXT(STAILQ_NEXT(elm, field), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0);
static const int STAILQ_SWAP(head1,head2,type) = do { struct type *swap_first = STAILQ_FIRST(head1); struct type **swap_last = (head1)->stqh_last; STAILQ_FIRST(head1) = STAILQ_FIRST(head2); (head1)->stqh_last = (head2)->stqh_last; STAILQ_FIRST(head2) = swap_first; (head2)->stqh_last = swap_last; if (STAILQ_EMPTY(head1)) (head1)->stqh_last = &STAILQ_FIRST(head1); if (STAILQ_EMPTY(head2)) (head2)->stqh_last = &STAILQ_FIRST(head2); } while (0);
static const int LIST_HEAD(name,type) = struct name { struct type *lh_first; };
static const int LIST_HEAD_INITIALIZER(head) = { NULL };
static const int LIST_ENTRY(type) = struct { struct type *le_next; struct type **le_prev; };
static const int LIST_EMPTY(head) = ((head)->lh_first == NULL);
static const int LIST_FIRST(head) = ((head)->lh_first);
static const int LIST_FOREACH(var,head,field) = for ((var) = LIST_FIRST((head)); (var); (var) = LIST_NEXT((var), field));
static const int LIST_FOREACH_SAFE(var,head,field,tvar) = for ((var) = LIST_FIRST((head)); (var) && ((tvar) = LIST_NEXT((var), field), 1); (var) = (tvar));
static const int LIST_INIT(head) = do { LIST_FIRST((head)) = NULL; } while (0);
static const int LIST_INSERT_AFTER(listelm,elm,field) = do { QMD_LIST_CHECK_NEXT(listelm, field); if ((LIST_NEXT((elm), field) = LIST_NEXT((listelm), field)) != NULL) LIST_NEXT((listelm), field)->field.le_prev = &LIST_NEXT((elm), field); LIST_NEXT((listelm), field) = (elm); (elm)->field.le_prev = &LIST_NEXT((listelm), field); } while (0);
static const int LIST_INSERT_BEFORE(listelm,elm,field) = do { QMD_LIST_CHECK_PREV(listelm, field); (elm)->field.le_prev = (listelm)->field.le_prev; LIST_NEXT((elm), field) = (listelm); *(listelm)->field.le_prev = (elm); (listelm)->field.le_prev = &LIST_NEXT((elm), field); } while (0);
static const int LIST_INSERT_HEAD(head,elm,field) = do { QMD_LIST_CHECK_HEAD((head), field); if ((LIST_NEXT((elm), field) = LIST_FIRST((head))) != NULL) LIST_FIRST((head))->field.le_prev = &LIST_NEXT((elm), field); LIST_FIRST((head)) = (elm); (elm)->field.le_prev = &LIST_FIRST((head)); } while (0);
static const int LIST_NEXT(elm,field) = ((elm)->field.le_next);
static const int LIST_REMOVE(elm,field) = do { QMD_LIST_CHECK_NEXT(elm, field); QMD_LIST_CHECK_PREV(elm, field); if (LIST_NEXT((elm), field) != NULL) LIST_NEXT((elm), field)->field.le_prev = (elm)->field.le_prev; *(elm)->field.le_prev = LIST_NEXT((elm), field); TRASHIT((elm)->field.le_next); TRASHIT((elm)->field.le_prev); } while (0);
static const int LIST_SWAP(head1,head2,type,field) = do { struct type *swap_tmp = LIST_FIRST((head1)); LIST_FIRST((head1)) = LIST_FIRST((head2)); LIST_FIRST((head2)) = swap_tmp; if ((swap_tmp = LIST_FIRST((head1))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head1)); if ((swap_tmp = LIST_FIRST((head2))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head2)); } while (0);
static const int TAILQ_HEAD(name,type) = struct name { struct type *tqh_first; struct type **tqh_last; TRACEBUF };
static const int TAILQ_HEAD_INITIALIZER(head) = { NULL, &(head).tqh_first };
static const int TAILQ_ENTRY(type) = struct { struct type *tqe_next; struct type **tqe_prev; TRACEBUF };
static const int TAILQ_CONCAT(head1,head2,field) = do { if (!TAILQ_EMPTY(head2)) { *(head1)->tqh_last = (head2)->tqh_first; (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last; (head1)->tqh_last = (head2)->tqh_last; TAILQ_INIT((head2)); QMD_TRACE_HEAD(head1); QMD_TRACE_HEAD(head2); } } while (0);
static const int TAILQ_EMPTY(head) = ((head)->tqh_first == NULL);
static const int TAILQ_FIRST(head) = ((head)->tqh_first);
static const int TAILQ_FOREACH(var,head,field) = for ((var) = TAILQ_FIRST((head)); (var); (var) = TAILQ_NEXT((var), field));
static const int TAILQ_FOREACH_SAFE(var,head,field,tvar) = for ((var) = TAILQ_FIRST((head)); (var) && ((tvar) = TAILQ_NEXT((var), field), 1); (var) = (tvar));
static const int TAILQ_FOREACH_REVERSE(var,head,headname,field) = for ((var) = TAILQ_LAST((head), headname); (var); (var) = TAILQ_PREV((var), headname, field));
static const int TAILQ_FOREACH_REVERSE_SAFE(var,head,headname,field,tvar) = for ((var) = TAILQ_LAST((head), headname); (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1); (var) = (tvar));
static const int TAILQ_INIT(head) = do { TAILQ_FIRST((head)) = NULL; (head)->tqh_last = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); } while (0);
static const int TAILQ_INSERT_AFTER(head,listelm,elm,field) = do { if ((TAILQ_NEXT((elm), field) = TAILQ_NEXT((listelm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = &TAILQ_NEXT((elm), field); else { (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); } TAILQ_NEXT((listelm), field) = (elm); (elm)->field.tqe_prev = &TAILQ_NEXT((listelm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0);
static const int TAILQ_INSERT_BEFORE(listelm,elm,field) = do { (elm)->field.tqe_prev = (listelm)->field.tqe_prev; TAILQ_NEXT((elm), field) = (listelm); *(listelm)->field.tqe_prev = (elm); (listelm)->field.tqe_prev = &TAILQ_NEXT((elm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0);
static const int TAILQ_INSERT_HEAD(head,elm,field) = do { if ((TAILQ_NEXT((elm), field) = TAILQ_FIRST((head))) != NULL) TAILQ_FIRST((head))->field.tqe_prev = &TAILQ_NEXT((elm), field); else (head)->tqh_last = &TAILQ_NEXT((elm), field); TAILQ_FIRST((head)) = (elm); (elm)->field.tqe_prev = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0);
static const int TAILQ_INSERT_TAIL(head,elm,field) = do { TAILQ_NEXT((elm), field) = NULL; (elm)->field.tqe_prev = (head)->tqh_last; *(head)->tqh_last = (elm); (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0);
static const int TAILQ_LAST(head,headname) = (*(((struct headname *)((head)->tqh_last))->tqh_last));
static const int TAILQ_NEXT(elm,field) = ((elm)->field.tqe_next);
static const int TAILQ_PREV(elm,headname,field) = (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last));
static const int TAILQ_REMOVE(head,elm,field) = do { if ((TAILQ_NEXT((elm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = (elm)->field.tqe_prev; else { (head)->tqh_last = (elm)->field.tqe_prev; QMD_TRACE_HEAD(head); } *(elm)->field.tqe_prev = TAILQ_NEXT((elm), field); TRASHIT((elm)->field.tqe_next); TRASHIT((elm)->field.tqe_prev); QMD_TRACE_ELEM(&(elm)->field); } while (0);
static const int TAILQ_SWAP(head1,head2,type,field) = do { struct type *swap_first = (head1)->tqh_first; struct type **swap_last = (head1)->tqh_last; (head1)->tqh_first = (head2)->tqh_first; (head1)->tqh_last = (head2)->tqh_last; (head2)->tqh_first = swap_first; (head2)->tqh_last = swap_last; if ((swap_first = (head1)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head1)->tqh_first; else (head1)->tqh_last = &(head1)->tqh_first; if ((swap_first = (head2)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head2)->tqh_first; else (head2)->tqh_last = &(head2)->tqh_first; } while (0);
static const int CIRCLEQ_HEAD(name,type) = struct name { struct type *cqh_first; struct type *cqh_last; };
static const int CIRCLEQ_ENTRY(type) = struct { struct type *cqe_next; struct type *cqe_prev; };
static const int CIRCLEQ_EMPTY(head) = ((head)->cqh_first == (void *)(head));
static const int CIRCLEQ_FIRST(head) = ((head)->cqh_first);
static const int CIRCLEQ_FOREACH(var,head,field) = for((var) = (head)->cqh_first; (var) != (void *)(head); (var) = (var)->field.cqe_next);
static const int CIRCLEQ_INIT(head) = do { (head)->cqh_first = (void *)(head); (head)->cqh_last = (void *)(head); } while (0);
static const int CIRCLEQ_INSERT_AFTER(head,listelm,elm,field) = do { (elm)->field.cqe_next = (listelm)->field.cqe_next; (elm)->field.cqe_prev = (listelm); if ((listelm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm); else (listelm)->field.cqe_next->field.cqe_prev = (elm); (listelm)->field.cqe_next = (elm); } while (0);
static const int CIRCLEQ_INSERT_BEFORE(head,listelm,elm,field) = do { (elm)->field.cqe_next = (listelm); (elm)->field.cqe_prev = (listelm)->field.cqe_prev; if ((listelm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm); else (listelm)->field.cqe_prev->field.cqe_next = (elm); (listelm)->field.cqe_prev = (elm); } while (0);
static const int CIRCLEQ_INSERT_HEAD(head,elm,field) = do { (elm)->field.cqe_next = (head)->cqh_first; (elm)->field.cqe_prev = (void *)(head); if ((head)->cqh_last == (void *)(head)) (head)->cqh_last = (elm); else (head)->cqh_first->field.cqe_prev = (elm); (head)->cqh_first = (elm); } while (0);
static const int CIRCLEQ_INSERT_TAIL(head,elm,field) = do { (elm)->field.cqe_next = (void *)(head); (elm)->field.cqe_prev = (head)->cqh_last; if ((head)->cqh_first == (void *)(head)) (head)->cqh_first = (elm); else (head)->cqh_last->field.cqe_next = (elm); (head)->cqh_last = (elm); } while (0);
static const int CIRCLEQ_LAST(head) = ((head)->cqh_last);
static const int CIRCLEQ_NEXT(elm,field) = ((elm)->field.cqe_next);
static const int CIRCLEQ_PREV(elm,field) = ((elm)->field.cqe_prev);
static const int CIRCLEQ_REMOVE(head,elm,field) = do { if ((elm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm)->field.cqe_prev; else (elm)->field.cqe_next->field.cqe_prev = (elm)->field.cqe_prev; if ((elm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm)->field.cqe_next; else (elm)->field.cqe_prev->field.cqe_next = (elm)->field.cqe_next; } while (0);
struct knote;
struct klist { struct knote *slh_first; };
struct timespec;
int kqueue(void);
int kevent(int kq, const struct kevent *changelist, int nchanges,
      struct kevent *eventlist, int nevents,
      const struct timespec *timeout);
int kevent64(int kq, const struct kevent64_s *changelist,
      int nchanges, struct kevent64_s *eventlist,
      int nevents, unsigned int flags,
      const struct timespec *timeout);
